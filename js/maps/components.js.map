{"version":3,"sources":["ui-utils.js","angular.js","angular-animate.js","angular-material.js","angular-route.js","angular-aria.js","angular-translate.js","lodash.compat.js","tv4.js","angular-cookies.min.js","ng-tags-input.js"],"names":["uiUploader","$log","addFiles","files","i","length","self","push","getFiles","startUpload","options","activeUploads","concurrency","active","ajaxUpload","url","data","removeFile","file","splice","indexOf","removeAll","getHumanSize","bytes","sizes","Math","floor","log","pow","toFixed","isNaN","xhr","formData","prop","key","window","XMLHttpRequest","FormData","open","upload","onloadstart","onprogress","event","lengthComputable","loaded","humanSize","onProgress","onload","uploadedFiles","onCompleted","responseText","onCompletedAll","onerror","hasOwnProperty","append","name","send","this","info","document","undefined","minErr","module","ErrorConstructor","Error","message","code","arguments","prefix","template","templateArgs","replace","match","index","slice","toDebugString","encodeURIComponent","isArrayLike","obj","isWindow","Object","nodeType","NODE_TYPE_ELEMENT","isString","isArray","forEach","iterator","context","isFunction","call","isPrimitive","sortedKeys","keys","sort","forEachSorted","reverseParams","iteratorFn","value","nextUid","uid","setHashKey","h","$$hashKey","extend","dst","ii","j","jj","int","str","parseInt","inherit","parent","extra","create","noop","identity","$","valueFn","isUndefined","isDefined","isObject","isNumber","isDate","toString","isRegExp","isScope","$evalAsync","$watch","isFile","isFormData","isBlob","isBoolean","isPromiseLike","then","isElement","node","nodeName","attr","find","makeMap","items","split","nodeName_","element","lowercase","arrayRemove","array","copy","source","destination","stackSource","stackDest","ngMinErr","result","Date","getTime","RegExp","lastIndex","emptyObject","getPrototypeOf","shallowCopy","src","charAt","equals","o1","o2","keySet","t1","t2","concat","array1","array2","sliceArgs","args","startIndex","bind","fn","curryArgs","apply","toJsonReplacer","val","toJson","pretty","JSON","stringify","fromJson","json","parse","startingTag","jqLite","clone","empty","e","elemHtml","html","NODE_TYPE_TEXT","tryDecodeURIComponent","decodeURIComponent","parseKeyValue","keyValue","key_value","toKeyValue","parts","arrayValue","encodeUriQuery","join","encodeUriSegment","pctEncodeSpaces","getNgAttribute","ngAttr","ngAttrPrefixes","angularInit","bootstrap","appElement","config","hasAttribute","getAttribute","candidate","querySelector","strictDi","modules","defaultConfig","doBootstrap","injector","tag","unshift","$provide","debugInfoEnabled","$compileProvider","createInjector","invoke","scope","compile","$apply","NG_ENABLE_DEBUG_INFO","NG_DEFER_BOOTSTRAP","test","angular","resumeBootstrap","extraModules","resumeDeferredBootstrap","reloadWithDebugInfo","location","reload","getTestability","rootElement","get","snake_case","separator","SNAKE_CASE_REGEXP","letter","pos","toLowerCase","bindJQuery","originalCleanData","bindJQueryFired","jQuery","on","JQLitePrototype","isolateScope","controller","inheritedData","cleanData","elems","events","skipDestroyOnNextJQueryCleanData","elem","_data","$destroy","triggerHandler","JQLite","assertArg","arg","reason","assertArgFn","acceptArrayAnnotation","constructor","assertNotHasOwnProperty","getter","path","bindFnToScope","lastInstance","len","getBlockNodes","nodes","endNode","blockNodes","nextSibling","createMap","setupModuleLoader","ensure","factory","$injectorMinErr","$$minErr","requires","configFn","invokeLater","provider","method","insertMethod","queue","invokeQueue","moduleInstance","configBlocks","runBlocks","_invokeQueue","_configBlocks","_runBlocks","service","constant","animation","filter","directive","run","block","serializeObject","seen","publishExternalAPI","version","uppercase","callbacks","counter","$$csp","csp","angularModule","$LocaleProvider","$$sanitizeUri","$$SanitizeUriProvider","$CompileProvider","a","htmlAnchorDirective","input","inputDirective","textarea","form","formDirective","script","scriptDirective","select","selectDirective","style","styleDirective","option","optionDirective","ngBind","ngBindDirective","ngBindHtml","ngBindHtmlDirective","ngBindTemplate","ngBindTemplateDirective","ngClass","ngClassDirective","ngClassEven","ngClassEvenDirective","ngClassOdd","ngClassOddDirective","ngCloak","ngCloakDirective","ngController","ngControllerDirective","ngForm","ngFormDirective","ngHide","ngHideDirective","ngIf","ngIfDirective","ngInclude","ngIncludeDirective","ngInit","ngInitDirective","ngNonBindable","ngNonBindableDirective","ngPluralize","ngPluralizeDirective","ngRepeat","ngRepeatDirective","ngShow","ngShowDirective","ngStyle","ngStyleDirective","ngSwitch","ngSwitchDirective","ngSwitchWhen","ngSwitchWhenDirective","ngSwitchDefault","ngSwitchDefaultDirective","ngOptions","ngOptionsDirective","ngTransclude","ngTranscludeDirective","ngModel","ngModelDirective","ngList","ngListDirective","ngChange","ngChangeDirective","pattern","patternDirective","ngPattern","required","requiredDirective","ngRequired","minlength","minlengthDirective","ngMinlength","maxlength","maxlengthDirective","ngMaxlength","ngValue","ngValueDirective","ngModelOptions","ngModelOptionsDirective","ngIncludeFillContentDirective","ngAttributeAliasDirectives","ngEventDirectives","$anchorScroll","$AnchorScrollProvider","$animate","$AnimateProvider","$browser","$BrowserProvider","$cacheFactory","$CacheFactoryProvider","$controller","$ControllerProvider","$document","$DocumentProvider","$exceptionHandler","$ExceptionHandlerProvider","$filter","$FilterProvider","$interpolate","$InterpolateProvider","$interval","$IntervalProvider","$http","$HttpProvider","$httpBackend","$HttpBackendProvider","$location","$LocationProvider","$LogProvider","$parse","$ParseProvider","$rootScope","$RootScopeProvider","$q","$QProvider","$$q","$$QProvider","$sce","$SceProvider","$sceDelegate","$SceDelegateProvider","$sniffer","$SnifferProvider","$templateCache","$TemplateCacheProvider","$templateRequest","$TemplateRequestProvider","$$testability","$$TestabilityProvider","$timeout","$TimeoutProvider","$window","$WindowProvider","$$rAF","$$RAFProvider","$$asyncCallback","$$AsyncCallbackProvider","$$jqLite","$$jqLiteProvider","jqNextId","jqId","camelCase","SPECIAL_CHARS_REGEXP","_","offset","toUpperCase","MOZ_HACK_REGEXP","jqLiteIsTextNode","HTML_REGEXP","jqLiteAcceptsData","NODE_TYPE_DOCUMENT","jqLiteBuildFragment","tmp","wrap","fragment","createDocumentFragment","createTextNode","appendChild","createElement","TAG_NAME_REGEXP","exec","wrapMap","_default","innerHTML","XHTML_TAG_REGEXP","lastChild","childNodes","firstChild","textContent","jqLiteParseHTML","parsed","SINGLE_TAG_REGEXP","argIsString","trim","jqLiteMinErr","jqLiteAddNodes","jqLiteClone","cloneNode","jqLiteDealoc","onlyDescendants","jqLiteRemoveData","querySelectorAll","descendants","l","jqLiteOff","type","unsupported","expandoStore","jqLiteExpandoStore","handle","listenerFns","removeEventListenerFn","expandoId","ng339","jqCache","createIfNecessary","jqLiteData","isSimpleSetter","isSimpleGetter","massGetter","jqLiteHasClass","selector","jqLiteRemoveClass","cssClasses","setAttribute","cssClass","jqLiteAddClass","existingClasses","root","elements","jqLiteController","jqLiteInheritedData","documentElement","names","parentNode","NODE_TYPE_DOCUMENT_FRAGMENT","host","jqLiteEmpty","removeChild","jqLiteRemove","keepData","jqLiteDocumentLoaded","action","win","readyState","setTimeout","getBooleanAttrName","booleanAttr","BOOLEAN_ATTR","BOOLEAN_ELEMENTS","getAliasedAttrName","ALIASED_ATTR","createEventHandler","eventHandler","isDefaultPrevented","defaultPrevented","eventFns","eventFnsLength","immediatePropagationStopped","originalStopImmediatePropagation","stopImmediatePropagation","stopPropagation","isImmediatePropagationStopped","$get","hasClass","classes","addClass","removeClass","hashKey","nextUidFn","objType","HashMap","isolatedUid","put","anonFn","fnText","STRIP_COMMENTS","FN_ARGS","annotate","$inject","argDecl","last","FN_ARG_SPLIT","FN_ARG","all","underscore","modulesToLoad","supportObject","delegate","provider_","providerInjector","instantiate","providerCache","providerSuffix","enforceReturnValue","instanceInjector","factoryFn","enforce","$injector","instanceCache","decorator","serviceName","decorFn","origProvider","orig$get","origInstance","$delegate","loadModules","moduleFn","runInvokeQueue","invokeArgs","loadedModules","stack","createInternalInjector","cache","getService","caller","INSTANTIATING","err","shift","locals","$$annotate","Type","instance","prototype","returnedValue","has","autoScrollingEnabled","disableAutoScrolling","getFirstAnchor","list","Array","some","getYOffset","scroll","yOffset","getComputedStyle","position","getBoundingClientRect","bottom","scrollTo","scrollIntoView","elemTop","top","scrollBy","elm","hash","getElementById","getElementsByName","newVal","oldVal","supported","Browser","completeOutstandingRequest","outstandingRequestCount","outstandingRequestCallbacks","pop","error","getHash","substr","startPoller","interval","check","pollFns","pollFn","pollTimeout","cacheStateAndFireUrlChange","cacheState","fireUrlChange","getCurrentState","history","state","cachedState","lastCachedState","lastBrowserUrl","lastHistoryState","urlChangeListeners","listener","safeDecodeURIComponent","rawDocument","clearTimeout","pendingDeferIds","isMock","$$completeOutstandingRequest","$$incOutstandingRequestCount","notifyWhenNoOutstandingRequests","callback","addPollFn","href","baseElement","reloadLocation","sameState","sameBase","stripHash","urlChangeInit","onUrlChange","$$checkUrlChange","baseHref","lastCookies","lastCookieString","cookiePath","cookies","cookieLength","cookieArray","cookie","substring","warn","defer","delay","timeoutId","cancel","deferId","cacheFactory","cacheId","refresh","entry","freshEnd","staleEnd","n","link","p","nextEntry","prevEntry","caches","size","stats","id","capacity","Number","MAX_VALUE","lruHash","lruEntry","remove","destroy","$$sanitizeUriProvider","parseIsolateBindings","directiveName","LOCAL_REGEXP","bindings","definition","scopeName","$compileMinErr","mode","collection","optional","attrName","assertValidDirectiveName","hasDirectives","Suffix","COMMENT_DIRECTIVE_REGEXP","CLASS_DIRECTIVE_REGEXP","ALL_OR_NOTHING_ATTRS","REQUIRE_PREFIX_REGEXP","EVENT_HANDLER_ATTR_REGEXP","registerDirective","directiveFactory","directives","priority","require","restrict","$$isolateBindings","aHrefSanitizationWhitelist","regexp","imgSrcSanitizationWhitelist","enabled","safeAddClass","$element","className","$compileNodes","transcludeFn","maxPriority","ignoreDirective","previousCompileContext","nodeValue","compositeLinkFn","compileNodes","$$addScopeClass","namespace","cloneConnectFn","parentBoundTranscludeFn","transcludeControllers","futureParentElement","$$boundTransclude","detectNamespaceForChildElements","$linkNode","wrapTemplate","controllerName","$$addScopeInfo","parentElement","nodeList","$rootElement","nodeLinkFn","childLinkFn","childScope","idx","childBoundTranscludeFn","stableNodeList","nodeLinkFnFound","nodeListLength","linkFns","$new","transcludeOnThisElement","createBoundTranscludeFn","transclude","elementTranscludeOnThisElement","templateOnThisElement","attrs","linkFnFound","Attributes","collectDirectives","applyDirectivesToNode","$$element","terminal","previousBoundTranscludeFn","elementTransclusion","boundTranscludeFn","transcludedScope","cloneFn","controllers","containingScope","$$transcluded","attrsMap","$attr","addDirective","directiveNormalize","nName","ngAttrName","isNgAttr","nAttrs","attributes","attrStartName","attrEndName","NG_ATTR_BINDING","PREFIX_REGEXP","directiveNName","directiveIsMultiElement","addAttrInterpolateDirective","animVal","addTextInterpolateDirective","NODE_TYPE_COMMENT","byPriority","groupScan","attrStart","attrEnd","depth","groupElementsLinkFnWrapper","linkFn","compileNode","templateAttrs","jqCollection","originalReplaceDirective","preLinkFns","postLinkFns","addLinkFns","pre","post","newIsolateScopeDirective","$$isolateScope","cloneAndAnnotateFn","getControllers","elementControllers","retrievalMethod","$searchElement","linkNode","controllersBoundTransclude","cloneAttachFn","hasElementTranscludeDirective","scopeToChild","controllerDirectives","controllerInstance","$scope","$attrs","$transclude","controllerAs","templateDirective","$$originalDirective","isolateScopeController","isolateBindingContext","identifier","bindToController","lastValue","parentGet","parentSet","compare","$observe","$$observers","$$scope","literal","b","assign","parentValueWatch","parentValue","$stateful","unwatch","$watchCollection","$on","invokeLinkFn","templateUrl","newScopeDirective","$template","directiveValue","terminalPriority","nonTlbTranscludeDirective","hasTranscludeDirective","hasTemplate","$compileNode","replaceDirective","childTranscludeFn","$$start","$$end","assertNoDuplicate","$$tlb","createComment","replaceWith","contents","denormalizeTemplate","removeComments","templateNamespace","newTemplateAttrs","templateDirectives","unprocessedDirectives","markDirectivesAsIsolate","mergeTemplateAttributes","compileTemplateUrl","max","tDirectives","startAttrName","endAttrName","multiElement","srcAttr","dstAttr","$set","tAttrs","afterTemplateNodeLinkFn","afterTemplateChildLinkFn","linkQueue","beforeTemplateCompileNode","origAsyncDirective","derivedSyncDirective","content","tempTemplateAttrs","beforeTemplateLinkNode","linkRootElement","$$destroyed","oldClasses","ignoreChildLinkFn","diff","what","previousDirective","text","interpolateFn","templateNode","templateNodeParent","hasCompileParent","$$addBindingClass","$$addBindingInfo","expressions","wrapper","getTrustedContext","attrNormalizedName","HTML","RESOURCE_URL","allOrNothing","trustedContext","newValue","$$inter","oldValue","$updateClass","elementsToRemove","newNode","firstElementToRemove","removeCount","j2","replaceChild","expando","k","kk","annotation","attributesToCopy","$normalize","$addClass","classVal","$removeClass","newClasses","toAdd","tokenDifference","toRemove","writeAttr","booleanKey","aliasedKey","observer","trimmedSrcset","srcPattern","rawUris","nbrUrisWith2parts","innerIdx","lastTuple","removeAttr","listeners","startSymbol","endSymbol","binding","isolated","noTemplate","dataName","str1","str2","values","tokens1","tokens2","outer","token","jqNodes","globals","CNTRL_REG","register","allowGlobals","addIdentifier","expression","later","ident","$controllerMinErr","controllerPrototype","exception","cause","defaultHttpResponseTransform","headers","tempData","JSON_PROTECTION_PREFIX","contentType","APPLICATION_JSON","isJsonLike","jsonStart","JSON_START","JSON_ENDS","parseHeaders","line","headersGetter","headersObj","transformData","status","fns","isSuccess","defaults","transformResponse","transformRequest","d","common","Accept","CONTENT_TYPE_APPLICATION_JSON","patch","xsrfCookieName","xsrfHeaderName","useApplyAsync","interceptorFactories","interceptors","requestConfig","response","resp","reject","executeHeaderFns","headerContent","processedHeaders","headerFn","header","mergeHeaders","defHeaderName","lowercaseDefHeaderName","reqHeaderName","defHeaders","reqHeaders","defaultHeadersIteration","serverRequest","reqData","withCredentials","sendReq","chain","promise","when","reversedInterceptors","interceptor","request","requestError","responseError","thenFn","rejectFn","success","createShortMethods","createShortMethodsWithData","done","headersString","statusText","resolveHttpPromise","resolvePromise","$applyAsync","$$phase","deferred","resolve","resolvePromiseWithResult","removePendingReq","pendingRequests","cachedResp","buildUrl","params","defaultCache","xsrfValue","urlIsSameOrigin","timeout","responseType","v","toISOString","interceptorFactory","createXhr","createHttpBackend","$browserDefer","jsonpReq","callbackId","async","body","called","addEventListenerFn","timeoutRequest","jsonpDone","abort","completeRequest","setRequestHeader","urlResolve","protocol","getAllResponseHeaders","onabort","escape","ch","mustHaveExpression","unescapeText","escapedStartRegexp","escapedEndRegexp","parseStringifyInterceptor","getValue","newErr","$interpolateMinErr","endIndex","exp","parseFns","textLength","expressionPositions","startSymbolLength","endSymbolLength","compute","getTrusted","valueOf","$$watchDelegate","objectEquality","$watchGroup","oldValues","currValue","count","invokeApply","setInterval","clearInterval","iteration","skipApply","$$intervalId","notify","intervals","NUMBER_FORMATS","DECIMAL_SEP","GROUP_SEP","PATTERNS","minInt","minFrac","maxFrac","posPre","posSuf","negPre","negSuf","gSize","lgSize","CURRENCY_SYM","DATETIME_FORMATS","MONTH","SHORTMONTH","DAY","SHORTDAY","AMPMS","medium","short","fullDate","longDate","mediumDate","shortDate","mediumTime","shortTime","ERANAMES","ERAS","pluralCat","num","encodePath","segments","parseAbsoluteUrl","absoluteUrl","locationObj","parsedUrl","$$protocol","$$host","hostname","$$port","port","DEFAULT_PORTS","parseAppUrl","relativeUrl","prefixed","$$path","pathname","$$search","search","$$hash","beginsWith","begin","whole","trimEmptyHash","stripFile","lastIndexOf","serverBase","LocationHtml5Url","appBase","basePrefix","$$html5","appBaseNoFile","$$parse","pathUrl","$locationMinErr","$$compose","$$url","$$absUrl","$$parseLinkUrl","relHref","appUrl","prevAppUrl","rewrittenUrl","LocationHashbangUrl","hashPrefix","removeWindowsDriveName","base","firstPathSegmentMatch","windowsFilePathExp","withoutHashUrl","withoutBaseUrl","LocationHashbangInHtml5Url","locationGetter","property","locationGetterSetter","preprocess","html5Mode","requireBase","rewriteLinks","setBrowserUrlWithFallback","oldUrl","oldState","$$state","afterLocationChange","$broadcast","absUrl","LocationMode","initialUrl","IGNORE_URI_REGEXP","ctrlKey","metaKey","shiftKey","which","button","target","absHref","preventDefault","initializing","newUrl","newState","$digest","currentReplace","$$replace","urlOrStateChanged","debug","debugEnabled","flag","formatError","sourceURL","consoleLog","console","logFn","hasApply","arg1","arg2","ensureSafeMemberName","fullExpression","$parseMinErr","ensureSafeObject","children","ensureSafeFunction","CALL","APPLY","BIND","isConstant","setter","setValue","fullExp","propertyObj","isPossiblyDangerousMemberName","cspSafeGetterFn","key0","key1","key2","key3","key4","expensiveChecks","eso","o","eso0","eso1","eso2","eso3","eso4","pathVal","getterFnWithEnsureSafeObject","s","getterFn","getterFnCache","getterFnCacheExpensive","getterFnCacheDefault","pathKeys","pathKeysLength","needsEnsureSafeObject","lookupJs","evaledFnGetter","Function","sharedGetter","getValueOf","objectValueOf","cacheDefault","cacheExpensive","wrapSharedExpression","wrapped","collectExpressionInputs","inputs","expressionInputDirtyCheck","oldValueOfValue","inputsWatchDelegate","parsedExpression","lastResult","inputExpressions","$$inputs","oldInputValue","newInputValue","oldInputValueOfValues","changed","oneTimeWatchDelegate","old","$$postDigest","oneTimeLiteralWatchDelegate","isAllDefined","allDefined","constantWatchDelegate","addInterceptor","interceptorFn","watchDelegate","regularWatch","$parseOptions","$parseOptionsExpensive","oneTime","cacheKey","parseOptions","lexer","Lexer","parser","Parser","qFactory","nextTick","exceptionHandler","callOnce","resolveFn","Promise","simpleBind","processQueue","pending","processScheduled","scheduleProcessQueue","Deferred","promises","results","$qMinErr","TypeError","onFulfilled","onRejected","progressBack","catch","finally","handleCallback","$$reject","$$resolve","progress","makePromise","resolved","isResolved","callbackOutput","errback","$Q","Q","resolver","flush","taskQueue","task","taskCount","queueFn","asyncFn","cancelLastRAF","rafFn","requestAnimationFrame","webkitRequestAnimationFrame","cancelAnimationFrame","webkitCancelAnimationFrame","webkitCancelRequestAnimationFrame","rafSupported","timer","createChildScopeClass","ChildScope","$$watchers","$$nextSibling","$$childHead","$$childTail","$$listeners","$$listenerCount","$id","$$ChildScope","TTL","$rootScopeMinErr","lastDirtyWatch","applyAsyncId","digestTtl","destroyChildScope","$event","currentScope","Scope","$parent","$$prevSibling","$root","beginPhase","phase","clearPhase","decrementListenerCount","current","initWatchVal","flushApplyAsync","applyAsyncQueue","scheduleApplyAsync","isolate","child","watchExp","watcher","eq","watchExpressions","watchGroupAction","changeReactionScheduled","firstRun","newValues","deregisterFns","shouldCall","expr","unwatchFn","$watchCollectionInterceptor","_value","newLength","bothNaN","newItem","oldItem","internalArray","oldLength","changeDetected","internalObject","$watchCollectionAction","initRun","veryOldValue","trackVeryOldValue","changeDetector","watch","watchers","dirty","next","logIdx","asyncTask","ttl","watchLog","asyncQueue","$eval","traverseScopesLoop","msg","postDigestQueue","eventName","$applyAsyncExpression","namedListeners","indexOfListener","$emit","targetScope","listenerArgs","$$asyncQueue","$$postDigestQueue","$$applyAsyncQueue","uri","isImage","normalizedVal","regex","adjustMatcher","matcher","$sceMinErr","escapeForRegexp","adjustMatchers","matchers","adjustedMatchers","SCE_CONTEXTS","resourceUrlWhitelist","resourceUrlBlacklist","matchUrl","isResourceUrlAllowedByPolicy","allowed","generateHolderType","Base","holderType","trustedValue","$$unwrapTrustedValue","trustAs","Constructor","byType","maybeTrusted","trustedValueHolderBase","htmlSanitizer","CSS","URL","JS","msie","sce","isEnabled","parseAs","enumValue","lName","vendorPrefix","eventSupport","android","navigator","userAgent","boxee","vendorRegex","bodyStyle","transitions","animations","webkitTransition","webkitAnimation","pushState","hasEvent","divElm","handleRequestFn","tpl","ignoreRequestError","handleError","totalPendingRequests","getTrustedResourceUrl","transformer","httpOptions","testability","findBindings","opt_exactMatch","getElementsByClassName","matches","dataBinding","bindingName","findModels","prefixes","attributeEquals","getLocation","setLocation","whenStable","deferreds","$$timeoutId","urlParsingNode","requestUrl","originUrl","filters","suffix","currencyFilter","dateFilter","filterFilter","jsonFilter","limitToFilter","lowercaseFilter","numberFilter","orderByFilter","uppercaseFilter","comparator","predicateFn","matchAgainstAnyProp","expressionType","createPredicateFn","shouldMatchPrimitives","actual","expected","item","deepCompare","dontMatchWholeObject","actualType","expectedType","expectedVal","matchAnyProperty","actualVal","$locale","formats","amount","currencySymbol","fractionSize","formatNumber","number","groupSep","decimalSep","isFinite","isNegative","abs","numStr","formatedText","hasExponent","parseFloat","fractionLen","min","round","fraction","lgroup","group","padNumber","digits","neg","dateGetter","date","dateStrGetter","shortForm","timeZoneGetter","zone","getTimezoneOffset","paddedZone","getFirstThursdayOfYear","year","dayOfWeekOnFirst","getDay","getThursdayThisWeek","datetime","getFullYear","getMonth","getDate","weekGetter","firstThurs","thisThurs","ampmGetter","getHours","eraGetter","longEraGetter","jsonStringToDate","string","R_ISO8601_STR","tzHour","tzMin","dateSetter","setUTCFullYear","setFullYear","timeSetter","setUTCHours","setHours","m","ms","format","timezone","NUMBER_STRING","DATE_FORMATS_SPLIT","setMinutes","getMinutes","DATE_FORMATS","object","spacing","limit","Infinity","sortPredicate","reverseOrder","comp","reverseComparator","descending","objectToString","v1","v2","map","predicate","ngDirective","nullFormRenameControl","control","$name","FormController","controls","parentForm","$$parentForm","nullFormCtrl","$error","$$success","$pending","$dirty","$pristine","$valid","$invalid","$submitted","$addControl","$rollbackViewValue","$commitViewValue","$$renameControl","newName","oldName","$removeControl","$setValidity","addSetValidityMethod","ctrl","set","unset","$setDirty","PRISTINE_CLASS","DIRTY_CLASS","$setPristine","setClass","SUBMITTED_CLASS","$setUntouched","$setSubmitted","stringBasedInputType","$formatters","$isEmpty","textInputType","baseInputType","composing","ev","ngTrim","$viewValue","$$hasNativeValidators","$setViewValue","deferListener","origValue","keyCode","$render","weekParser","isoWeek","existingDate","WEEK_REGEXP","week","hours","minutes","seconds","milliseconds","addDays","getSeconds","getMilliseconds","NaN","createDateParser","mapping","iso","ISO_DATE_REGEXP","yyyy","MM","dd","HH","mm","ss","sss","part","createDateInputType","parseDate","isValidDate","parseObservedDateValue","badInputChecker","previousDate","$options","$$parserName","$parsers","parsedDate","ngModelMinErr","timezoneOffset","ngMin","minVal","$validators","$validate","ngMax","maxVal","nativeValidation","validity","VALIDITY_STATE_PROPERTY","badInput","typeMismatch","numberInputType","NUMBER_REGEXP","urlInputType","modelValue","viewValue","URL_REGEXP","emailInputType","email","EMAIL_REGEXP","radioInputType","checked","parseConstantExpr","fallback","parseFn","checkboxInputType","trueValue","ngTrueValue","falseValue","ngFalseValue","classDirective","arrayDifference","arrayClasses","addClasses","digestClassCounts","removeClasses","classCounts","classesToUpdate","updateClasses","ngClassWatchAction","$index","old$index","mod","setValidity","validationErrorKey","createAndSet","unsetAndCleanup","cachedToggleClass","PENDING_CLASS","toggleValidationCss","isObjectEmpty","combinedState","switchValue","classCache","isValid","VALID_CLASS","INVALID_CLASS","REGEX_STRING_REGEXP","manualLowercase","String","fromCharCode","charCodeAt","manualUppercase","documentMode","isActive_","NODE_TYPE_ATTRIBUTE","full","major","minor","dot","codeName","addEventListener","removeEventListener","MOUSE_EVENT_MAP","mouseleave","mouseenter","thead","col","tr","td","optgroup","tbody","tfoot","colgroup","caption","th","ready","trigger","fired","removeData","removeAttribute","css","lowercasedName","getNamedItem","specified","ret","getText","$dv","multiple","selected","nodeCount","jqLiteOn","types","related","relatedTarget","contains","off","one","onFn","replaceNode","insertBefore","contentDocument","prepend","wrapNode","detach","after","newElement","toggleClass","condition","classCondition","nextElementSibling","getElementsByTagName","extraParameters","dummyEvent","eventFnsCopy","handlerArgs","arg3","unbind","$animateMinErr","$$selectors","classNameFilter","$$classNameFilter","runAnimationPostDigest","cancelFn","$$cancelFn","resolveElementClasses","hasClasses","cachedClassManipulation","op","asyncPromise","currentDefer","applyStyles","styles","from","to","animate","enter","leave","move","$$addClassImmediately","$$removeClassImmediately","add","STORAGE_KEY","createdCache","$$setClassImmediately","Content-Type","[","{","PATH_MATCH","http","https","ftp","locationPrototype","paramValue","Location","CONSTANTS","null","true","false","constantGetter","OPERATORS","+","-","*","/","%","===","!==","==","!=","<",">","<=",">=","&&","||","!","=","|","ESCAPE","f","r","t","'","\"","lex","tokens","readString","peek","readNumber","isIdent","readIdent","is","isWhitespace","ch2","ch3","op1","op2","op3","operator","throwError","chars","isExpOperator","start","end","colStr","peekCh","quote","rawString","hex","rep","ZERO","statements","primary","expect","filterChain","consume","arrayDeclaration","functionCall","objectIndex","fieldAccess","peekToken","e1","e2","e3","e4","peekAhead","unaryFn","right","binaryFn","left","isBranching","inputFn","argsFn","every","assignment","ternary","middle","logicalOR","logicalAND","equality","relational","additive","multiplicative","unary","indexFn","fnGetter","contextGetter","expressionText","elementFns","valueFns","yy","y","MMMM","MMM","M","H","hh","EEEE","EEE","Z","ww","w","G","GG","GGG","GGGG","xlinkHref","propName","normalized","htmlAttr","formDirectiveFactory","isNgForm","formElement","nameAttr","handleFormSubmission","parentFormCtrl","DATE_REGEXP","DATETIMELOCAL_REGEXP","MONTH_REGEXP","TIME_REGEXP","inputType","datetime-local","time","month","radio","checkbox","hidden","submit","reset","ctrls","CONSTANT_VALUE_REGEXP","tplAttr","$compile","templateElement","tElement","ngBindHtmlGetter","ngBindHtmlWatch","getTrustedHtml","$viewChangeListeners","forceAsyncEvents","blur","focus","previousElements","newScope","srcExp","onloadExp","autoScrollExp","autoscroll","previousElement","currentElement","changeCounter","cleanupLastIncludeContent","afterAnimation","thisChangeId","trimValues","UNTOUCHED_CLASS","TOUCHED_CLASS","NgModelController","$modelValue","$$rawModelValue","$asyncValidators","$untouched","$touched","parserValid","parsedNgModel","parsedNgModelAssign","ngModelGet","ngModelSet","pendingDebounce","$$setOptions","getterSetter","invokeModelGetter","invokeModelSetter","$$$p","currentValidationRunId","$setTouched","$$lastCommittedViewValue","prevValid","prevModelValue","allowInvalid","$$runValidators","allValid","$$writeModelToScope","doneCallback","processParseErrors","errorKey","processSyncValidators","syncValidatorsValid","validator","processAsyncValidators","validatorPromises","validationDone","localValidationRunId","$$parseAndValidate","writeToModelIfNeeded","updateOnDefault","$$debounceViewValueCommit","debounce","debounceDelay","formatters","modelCtrl","formCtrl","updateOn","DEFAULT_REGEXP","that","BRACE","IS_WHEN","updateElementText","newText","lastCount","numberExp","whenExp","whens","whensExpFns","braceReplacement","watchRemover","attributeName","tmpMatch","whenKey","countIsNaN","NG_REMOVED","ngRepeatMinErr","updateScope","valueIdentifier","keyIdentifier","arrayLength","$first","$last","$middle","$odd","$even","getBlockStart","getBlockEnd","ngRepeatEndComment","lhs","rhs","aliasAs","trackByExp","trackByExpGetter","trackByIdExpFn","trackByIdArrayFn","trackByIdObjFn","hashFnLocals","lastBlockMap","nextNode","collectionLength","trackById","trackByIdFn","collectionKeys","nextBlockOrder","previousNode","nextBlockMap","itemKey","blockKey","NG_HIDE_CLASS","NG_HIDE_IN_PROGRESS_CLASS","tempClasses","newStyles","oldStyles","cases","ngSwitchController","watchExpr","selectedTranscludes","selectedElements","previousLeaveAnimations","selectedScopes","spliceFactory","selectedTransclude","caseElement","selectedScope","anchor","ngOptionsMinErr","NG_OPTIONS_REGEXP","nullModelCtrl","nullOption","unknownOption","optionsMap","ngModelCtrl","databound","init","ngModelCtrl_","nullOption_","unknownOption_","addOption","removeOption","hasOption","renderUnknownOption","unknownVal","setupAsSingle","selectElement","selectCtrl","emptyOption","setupAsMultiple","lastView","setupAsOptions","callExpression","exprFn","valueName","keyName","selectionChanged","valuesFn","selectedKey","trackFn","trackKeysCache","getViewValue","render","viewValueFn","selectAsFn","getLabels","toDisplay","displayFn","createIsSelectedFn","selectedSet","trackIndex","compareValueFn","scheduleRendering","renderScheduled","updateLabelMap","labelMap","label","added","optionGroupName","optionGroup","existingParent","existingOptions","existingOption","groupLength","groupIndex","lastElement","optionId","optionGroups","optionGroupNames","isSelected","anySelected","groupByFn","optionGroupsCache","optGroupTemplate","optionTemplate","optionsExp","selectAs","track","nullSelectCtrl","selectCtrlName","patternExp","intVal","head","NG_ANIMATE_CHILDREN","ngAnimateChildren","bod","offsetWidth","$animateProvider","extractElementNode","ELEMENT_NODE","prepareElement","stripCommentsFromElement","isMatchingElement","elm1","elm2","selectors","NG_ANIMATE_STATE","NG_ANIMATE_CLASS_NAME","rootAnimateState","running","$$$jqLite","classBasedAnimationsBlocked","structural","disabled","parseAnimateOptions","runningAnimations","lookup","matchingAnimation","flagMap","klass","selectorFactoryName","animationRunner","animationEvent","registerAnimation","animationFactory","afterFn","beforeFn","before","cancellations","allCompleteFn","afterAnimationComplete","classNameAdd","classNameRemove","isSetClassOperation","isClassBased","currentClassName","isAnimatableClassName","beforeComplete","beforeCancel","afterComplete","afterCancel","animationLookup","created","performAnimation","afterElement","domOperation","fireDOMCallback","animationPhase","elementEvents","fireBeforeCallbackAsync","fireAfterCallbackAsync","fireDoneCallbackAsync","fireDOMOperation","hasBeenRun","closeAnimation","runner","cleanup","localAnimationCount","noopCancel","animationsDisabled","ngAnimateState","totalActiveAnimations","totalActive","lastAnimation","skipAnimation","animationsToCancel","operation","activeLeaveAnimation","globalAnimationCounter","cancelled","cancelChildAnimations","removeAnimations","allowChildAnimations","parentRunningAnimation","hasParent","isRoot","animateChildrenFlag","deregisterWatch","hasCache","c","elementNode","$$animateReflow","clearCacheAfterReflow","cancelAnimationReflow","animationReflowQueue","lookupCache","afterReflow","animationCloseHandler","totalTime","animationElementQueue","futureTimestamp","now","closingTimestamp","closingTimer","closeAllAnimations","elementData","NG_ANIMATE_CSS_DATA_KEY","closeAnimationFns","getElementAnimationDetails","transitionDuration","transitionDelay","animationDuration","animationDelay","elementStyles","transitionDurationStyle","TRANSITION_PROP","DURATION_KEY","parseMaxTime","transitionDelayStyle","DELAY_KEY","ANIMATION_PROP","aDuration","ANIMATION_ITERATION_COUNT_KEY","total","maxValue","getCacheKey","parentID","NG_ANIMATE_PARENT_KEY","parentCounter","animateSetup","eventCacheKey","itemIndex","stagger","staggerClassName","staggerCacheKey","applyClasses","formerData","timings","blockTransition","blockAnimation","blockTransitions","blockAnimations","animateRun","activeAnimationComplete","onEnd","css3AnimationEvents","onAnimationProgress","activeClassName","pendingClassName","staggerTimeout","animateClose","appliedStyles","removeProperty","originalEvent","timeStamp","$manualTimeStamp","elapsedTime","ELAPSED_TIME_MAX_DECIMAL_PLACES","startTime","maxDelayTime","maxDuration","staggerTime","transitionStaggerDelay","animationStaggerDelay","CSS_PREFIX","maxDelay","ONE_SECOND","oldStyle","ANIMATIONEND_EVENT","TRANSITIONEND_EVENT","animationTime","CLOSING_TIME_BUFFER","bool","PROPERTY_KEY","ANIMATION_PLAYSTATE_KEY","animateBefore","animateAfter","animationComplete","preReflowCancellation","suffixClasses","ontransitionend","onwebkittransitionend","onanimationend","onwebkitanimationend","animationCompleted","beforeSetClass","cancellationMethod","beforeAddClass","beforeRemoveClass","MdCoreConfigure","$mdThemingProvider","rAFDecorator","theme","primaryPalette","accentPalette","warnPalette","backgroundPalette","throttle","cb","queueArgs","alreadyQueued","queueCb","MdConstantFactory","vendorProperty","webkit","KEY_CODE","ENTER","SPACE","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","TAB","TRANSITIONEND","ANIMATIONEND","TRANSFORM","TRANSFORM_ORIGIN","TRANSITION","TRANSITION_DURATION","ANIMATION_PLAY_STATE","ANIMATION_DURATION","ANIMATION_NAME","ANIMATION_TIMING","ANIMATION_DIRECTION","MEDIA","sm","gt-sm","md","gt-md","lg","gt-lg","MEDIA_PRIORITY","Iterator","reloop","getItems","_items","inRange","hasNext","hasPrevious","itemAt","findBy","first","findSubsequentItem","backwards","validate","trueFn","curIndex","nextIndex","foundItem","previous","mdMediaFactory","$mdConstant","$mdMedia","query","validated","queries","mqls","matchMedia","addListener","onQueryChange","media","getQuery","getResponsiveAttribute","mediaName","normalizedName","getNormalizedName","watchResponsiveAttributes","attrNames","watchFn","unwatchFns","normalizeCache","nextUniqueId","getNode","el","Util","performance","clientRect","offsetParent","isOffsetRect","nodeRect","offsetRect","width","height","scrollLeft","scrollTop","floatingScrollbars","cached","tempNode","forceFocus","focusOnClick","$focus","newEvent","createEvent","initMouseEvent","$material","dispatchEvent","transitionEndPromise","opts","finished","fakeNgModel","$fake","func","wait","recent","digit","disconnectScope","$$disconnected","reconnectScope","getClosest","tagName","AriaService","defaultValue","childHasAttribute","expectAsync","defaultValueGetter","expectWithText","isHidden","currentStyle","display","hasChildren","hasChildNodes","hasAttr","mdCompilerService","transformTemplate","runHandlers","handlerEvent","handler","handlerName","HANDLERS","pointer","gestureStart","lastPointer","typesMatch","endTime","makeStartPointer","gestureMove","updatePointerState","gestureEnd","getEventPoint","touches","changedTouches","point","x","pageX","pageY","distanceX","startX","distanceY","startY","distance","sqrt","directionX","directionY","duration","velocityX","velocityY","startPointer","START_EVENTS","MOVE_EVENTS","END_EVENTS","vendor","opera","isIos","isAndroid","shouldHijackClicks","isKeyClick","clientX","clientY","$mdGesture","$$MdGestureHandler","addHandler","registerElement","maxDistance","onStart","onCancel","registeredParent","onMove","dx","dy","minDistance","horizontal","shouldStartDrag","shouldCancel","dragPointer","dispatchDragMove","isRunning","minVelocity","eventType","GestureHandler","jQueryDispatchEvent","srcEvent","eventPointer","eventObj","Event","screenX","screenY","altKey","nativeDispatchEvent","detail","initCustomEvent","parentTarget","getNearestParent","parentTargetOptions","onDestroy","InterimElementProvider","createInterimElementProvider","interimFactoryName","setDefaults","providerConfig","optionsFactory","methods","EXPOSED_METHODS","addMethod","customMethods","addPreset","presets","argOption","$$interimElement","showInterimElement","_options","interimElementService","show","defaultOptions","invokeFactory","defaultVal","publicService","defaultMethods","hide","Preset","presetDefaults","presetMethods","$type","methodName","InterimElementFactory","$mdCompiler","$mdTheming","replaceInterpolationSymbols","usesStandardSymbols","processTemplate","interimElement","InterimElement","hideTimeout","showDone","removeDone","preserveScope","onShow","onRemove","compilePromise","skipCompile","compileData","startHideTimeout","hideDelay","themable","onComplete","cancelTimeout","ComponentRegistry","isValidID","instances","pendings","notFoundError","getInstances","$$mdHandle","deregister","resolveWhen","dfd","InkRippleDirective","$mdInkRipple","attachCheckboxBehavior","attachButtonBehavior","InkRippleService","attach","fullRipple","isMenuItem","center","dimBackground","fitRipple","attachTabBehavior","outline","rippleSize","getRippleContainer","container","parseColor","color","hexToRGBA","dig","red","grn","blu","rgbToRGBA","removeElement","ripples","backgroundColor","updateElement","states","elemIsActive","isActive","elemIsHeld","isHeld","animating","marginLeft","marginTop","createRipple","getRippleElement","getRippleSize","multiplier","rect","getRippleCss","rgbaToRGB","borderColor","colorElement","borderWidth","onPressDown","isRippleAllowed","onPressUp","ripple","isDisabled","grandparent","ancestor","mousedown","hover","mousedownPauseTime","isActiveExpr","rippleSizeSetting","attrNoDirective","50","100","200","300","400","500","600","700","800","900","A100","A200","A400","A700","contrastDefaultColor","contrastDarkColors","contrastStrongLightColors","pink","purple","deep-purple","indigo","blue","light-blue","contrastLightColors","cyan","teal","green","light-green","lime","yellow","amber","orange","deep-orange","brown","grey","0","1000","blue-grey","ThemingProvider","$mdColorPalette","definePalette","PALETTES","checkPaletteValid","themingProvider","extendPalette","missingColors","VALID_HUE_VALUES","field","registerTheme","inheritFrom","THEMES","parentTheme","Theme","colors","colorType","hues","setDark","isDark","foregroundPalette","LIGHT_FOREGROUND","DARK_FOREGROUND","foregroundShadow","DARK_SHADOW","LIGHT_SHADOW","newDefaultHues","DARK_DEFAULT_HUES","LIGHT_DEFAULT_HUES","oldDefaultHues","newDefaults","oldDefaults","hueName","dark","THEME_COLOR_TYPES","defaultHues","paletteName","hueValue","ThemingService","registered","applyTheme","changeTheme","oldTheme","attrThemeValue","alwaysWatchTheme","$mdTheme","defaultTheme","setDefaultTheme","alwaysWatch","_LIGHT_DEFAULT_HUES","_DARK_DEFAULT_HUES","_PALETTES","_THEMES","_parseRules","parseRules","_rgba","rgba","ThemingDirective","$setTheme","mdTheme","ThemableDirective","rules","checkValidPalette","generatedRules","themeNameRegex","hueRegex","simpleVariableRegex","palette","hue","opacity","newRule","hueType","generateThemes","sanitizePalette","defaultContrast","lightColors","strongLightColors","darkColors","getContrastColor","DARK_CONTRAST_COLOR","STRONG_LIGHT_CONTRAST_COLOR","LIGHT_CONTRAST_COLOR","rgbValue","colorToRgbaArray","contrast","themeCss","rule","rulesByType","ruleMatchRegex","DEFAULT_COLOR_TYPE","styleString","accent","generationIsDone","firstElementChild","clr","rgbArray","1","2","3","4","default","hue-1","hue-2","hue-3","background","defaultDefaultHues","BackdropDirective","MdBottomSheetDirective","MdBottomSheetProvider","$$interimElementProvider","bottomSheetDefaults","$mdBottomSheet","backdrop","bottomSheet","BottomSheet","targetEvent","disableParentScroll","lastOverflow","focusable","escapeToClose","rootElementKeyupCallback","onDragStart","onDrag","transform","PADDING","onDragEnd","CLOSING_VELOCITY","distanceRemaining","MdButtonDirective","$mdAria","isAnchor","ngHref","getTemplate","postLink","elementHasText","ngDisabled","mdCardDirective","MdCheckboxDirective","$mdUtil","tabIndex","keypressHandler","CHECKED_CSS","ngChecked","mdContentDirective","ContentController","iosScrollFix","$materialScrollFixed","scrollHeight","offsetHeight","MdDialogDirective","clientHeight","MdDialogProvider","advancedDialogOptions","$mdDialog","dialogDefaultOptions","findCloseButton","closeButton","actionButtons","popInTarget","configureAria","hasBackdrop","computeFrom","parentOffset","dialogPopIn","clickOutsideToClose","dialogClickOutsideCallback","dialogPopOut","role","dialogContent","words","clickElement","dialogEl","transformToClickElement","clickRect","dialogRect","scaleX","scaleY","MdDividerController","MdDividerDirective","GridListDirective","$mdGridLayout","watchMedia","invalidateLayout","layoutIfMediaMatch","unwatchMedia","unwatchAttrs","removeListener","layoutDelegate","tiles","getTileElements","colCount","getColumnCount","rowMode","getRowMode","rowHeight","getRowHeight","gutter","getGutter","getTileSpans","tilePositions","rowCount","grid","getGridStyle","ps","getTileStyle","spans","reflow","mdOnLayout","hShare","hGutterShare","hUnit","UNIT","share","gutterShare","POSITION","unit","DIMENSION","span","paddingTop","row","vShare","vUnit","vGutterShare","paddingBottom","tile","applyDefaultUnit","whRatio","GridListController","invalidated","$timeout_","GridLayoutFactory","GridLayout","tileSpans","layoutInfo","gridStyles","layoutTime","mapTime","reflowTime","calculateGridFor","updateFn","positioning","animatorFn","animator","defaultAnimator","tileCount","GridTileAnimator","reserveSpace","curCol","nextRow","spaceTracker","findEnd","adjustRow","curRow","cols","by","newSpaceTracker","tracker","animateWith","customAnimator","GridTileDirective","gridCtrl","addTile","removeTile","GridTileCaptionDirective","tileElement","tileAttrs","_findTileIndex","layout","mdIconDirective","$mdIcon","mdFontIcon","parentsHaveText","ariaLabel","alt","fontIcon","svgIcon","mdSvgIcon","mdSvgSrc","attrVal","svg","svgSrc","MdIconProvider","ConfigurationItem","iconSize","defaultIconSize","MdIconService","cacheIcon","icon","iconCache","isIcon","Icon","loadByID","iconConfig","loadByURL","loadFromIconSet","extractFromSet","iconName","iconSetConfig","setName","els","announceIdNotFound","announceNotFound","prepare","prepareAndStyle","fit","preserveAspectRatio","viewBox","pointer-events","cloneSVG","urlRegex","iconSet","defaultIconSet","preloadIcons","iconProvider","svgRegistry","asset","mdInputContainerDirective","ContainerCtrl","isErrorGetter","mdIsError","setFocused","isFocused","setHasValue","hasValue","setInvalid","isInvalid","hasLabelAndInput","labelDirective","containerCtrl","mdNoFloat","inputTextareaDirective","ngModelPipelineCheckValue","inputCheckValue","setupTextarea","pipelineListener","onChangeTextarea","growTextarea","getHeight","onScroll","isReadonly","readonly","touched","mdMaxlengthDirective","renderCharCount","charCountEl","mdMaxlength","lastElementChild","placeholderDirective","inputContainer","placeholderText","placeholder","mdListDirective","mdItemDirective","MdProgressCircularDirective","clamped","fillRotation","fixRotation","circle","fill","fix","diameter","mdDiameter","scale","clamp","fillRotations","fixRotations","ceil","percent","rotation","MdProgressLinearDirective","bar1Style","bar2Style","mdMode","transforms","makeTransform","translateX","mdRadioGroupDirective","linkRadioGroup","keydownListener","rgCtrl","selectPrevious","selectNext","RadioGroupController","_radioButtonRenderFns","createRadioGroupControllerProto","_ngModelCtrl","rbRender","setViewValue","changeSelectedButton","setActiveDescendant","radioId","increment","buttons","mdRadioButtonDirective","lastChecked","buildAriaID","ariaId","aria-checked","SelectDirective","$mdSelect","labelEl","mdOnOpen","selectTemplate","syncLabelText","selectContainer","selectMenuCtrl","mdSelectCtrl","setLabelText","selectedLabels","createSelect","selectEl","selectScope","openOnKeypress","allowedCodes","openSelect","isOpen","loadingAsync","selectedText","customLabel","originalRender","setIsPlaceholder","aria-haspopup","aria-expanded","aria-labelledby","SelectMenuDirective","preLink","aria-multiselectable","isMultiple","keyListener","clickListener","optionCtrl","optionHashKey","hashGetter","deselect","refreshViewValue","SelectMenuController","renderMultiple","newSelectedValues","oldSelected","newSelectedHashes","deselected","renderSingular","validateArray","trackBy","trackByLocals","trackByParsed","valueScope","$value","$$mdSelectId","selectNextId","selectedOptionEls","nodesToArray","hashedValue","setSelected","OptionDirective","tabindex","setOptionValue","oldHashKey","newHashKey","aria-selected","OptionController","OptgroupDirective","labelElement","SelectProvider","selectDefaultOptions","activateInteraction","focusOption","direction","optionsArray","optionNodes","focusedNode","newOption","focusNextOption","focusPrevOption","closeMenu","restoreFocus","isRemoved","contentEl","$$loadingAsyncDone","animateSelect","disableTarget","mdSelect","centeredNode","containerNode","targetNode","selectNode","contentNode","parentRect","targetRect","shouldOpenAroundTarget","bounds","SELECT_EDGE_MARGIN","spaceAvailable","maxWidth","isScrollable","selectedNode","optgroupNodes","classList","selectMenuRect","centeredRect","getOffsetRect","centeredStyle","paddingLeft","paddingRight","scrollBuffer","transformOrigin","minWidth","containerRect","offsetLeft","offsetTop","SidenavService","$mdComponentRegistry","errorMsg","isLockedOpen","toggle","close","SidenavDirective","sidenavCtrl","updateIsLocked","isLocked","updateIsOpen","onKeyDown","triggeringElement","activeElement","toggleOpen","isEscape","isLockedOpenParsed","mdIsLockedOpen","$media","$toggleOpen","SidenavController","mdComponentId","SliderDirective","updateAll","refreshSliderDimensions","ngModelRender","redrawTicks","updateMin","updateMax","updateStep","step","updateAriaDisabled","mdDiscrete","numSteps","tickCanvas","trackTicksStyle","tickContainer","tickCtx","getContext","fillStyle","dimensions","getSliderDimensions","fillRect","sliderDimensions","trackContainer","throttledRefreshDimensions","changeAmount","setModelValue","minMaxValidator","stepValidator","setSliderPercent","thumbText","activeTrack","thumbContainer","isDisabledGetter","exactVal","percentToValue","positionToPercent","closestVal","valueToPercent","isDragging","setSliderFromEvent","isDiscrete","adjustThumbPosition","doSlide","isDisabledParsed","thumb","stopDisabledWatch","debouncedUpdateAll","MdSticky","setupSticky","contentCtrl","stickyClone","stickyBaseoffset","debouncedRefreshElements","refreshElements","refreshPosition","currentScrollTop","setCurrentItem","isScrollingDown","prevScrollTop","translate","prev","setStickyState","translateY","setupAugmentedScrollEvents","checkStickySupport","$el","stickyProp","testEl","stickyProps","z-index","loopScrollEvent","lastScrollTime","SCROLL_END_DELAY","isScrolling","browserStickySupport","$$sticky","MdSubheaderDirective","$mdSticky","outerHTML","getContent","MdSwitch","mdCheckboxDirective","checkboxLink","checkboxDirective","disabledGetter","drag","isChanged","applyModelValue","switchContainer","mdTextFloatDirective","fid","mdFid","disabledParsed","mdInputGroupDirective","mdInputDirective","isNotEmpty","inputGroupCtrl","MdToastDirective","MdToastProvider","toastDefaultOptions","$mdToast","activeToastContent","toastOpenClass","onSwipe","gesture","newContent","mdToolbarDirective","setupScrollShrink","onMdContentLoad","newContentEl","contentElement","debouncedContentScroll","updateToolbarHeight","toolbarHeight","shrinkSpeedFactor","onContentScroll","debouncedUpdateHeight","mdShrinkSpeedFactor","mdScrollShrink","MdTooltipDirective","setVisible","queued","visible","showTooltip","tooltipParent","positionTooltip","hideTooltip","positionBackground","tipRect","fitInParent","newPosition","TOOLTIP_WINDOW_EDGE_SPACE","getPosition","dir","mdDirection","mdDelay","TOOLTIP_SHOW_DELAY","isVisible","debouncedOnResize","MdAutocompleteCtrl","configureWatchers","ul","getItemScope","itemName","handleSearchText","selectedItem","previousSelectedItem","itemChange","searchText","previousSearchText","minLength","loading","shouldHide","updateMessages","term","noCache","fetch","textChange","fetchResults","handleResults","itemExpr","messages","updateSelectionMessage","getCurrentDisplayValue","noBlur","keydown","updateScroll","clearValue","getDisplayValue","itemText","bot","hgt","itemParts","itemsExpr","main","clear","listEnter","listLeave","mouseUp","MdAutocomplete","MdHighlightCtrl","sanitize","MdHighlight","MdAutocompleteListItem","mdAutocompleteListItem","MdTabInkDirective","updateBar","tabsCtrl","getSelectedItem","hideInkBar","mdNoBar","pagination","tabData","getSelectedIndex","tabs","classNames","classIndex","debouncedUpdateBar","inkBarElement","TabPaginationDirective","onTabFocus","tab","oldTab","pageIndex","getPageForTab","page","setPage","locked","userChangePage","sizeData","newPage","pages","newTabIndex","newTab","updatePagination","enablePagination","tabsParent","filler","disablePagination","slideTabButtons","waitForVisible","debouncedUpdatePagination","calculateTabData","needPagination","onTabsParentTransitionEnd","pagingOffset","$$pagingOffset","shouldStretchTabs","stretchTabs","noAdjust","adjustForStretchedTabs","canvasWidth","clientWidth","tabsWidth","tabsPerPage","tabWidth","$tabs","currentPage","PAGINATORS_WIDTH","totalWidth","firstTabIndex","lastTabIndex","tabElements","lastPage","hasPrev","clickNext","clickPrevious","tabToFocus","TabItemController","onAdd","contentArea","shouldDisconnectScope","contentContainer","contentScope","toggleAnimationClass","rightToLeft","onSelect","onDeselect","MdTabDirective","tabLabel","tabContent","transcludeTabContent","tabItemCtrl","defaultClickListener","watchNgRepeatIndex","newIndex","watchActiveAttribute","activeWatchAction","mdActive","watchDisabled","disabledWatchAction","tabId","tabContentId","ngClick","MdTabsController","selectedIndex","tabsList","noReselect","isSelectedItem","toIndex","filterFn","isTabEnabled","TabsDirective","watchSelected","oldIndex","mdStretchTabs","$RouteProvider","pathRegExp","insensitive","caseInsensitiveMatch","originalPath","slash","star","routes","route","routeCopy","reloadOnSearch","redirectPath","redirectTo","otherwise","$routeParams","switchRouteMatcher","prepareRoute","$locationEvent","lastRoute","$route","preparedRoute","parseRoute","preparedRouteIsUpdateOnly","$$route","pathParams","forceReload","commitRoute","nextRoute","interpolate","loadedTemplateUrl","segment","segmentMatch","updateParams","newParams","$routeMinErr","$RouteParamsProvider","ngViewFactory","cleanupLastView","previousLeaveAnimation","update","ngViewFillContentFactory","ngRouteModule","$AriaProvider","ariaAttr","negate","ariaCamelName","boolVal","ariaHidden","ariaChecked","ariaDisabled","ariaRequired","ariaInvalid","ariaMultiline","ariaValue","bindKeypress","newConfig","$$watchExpr","ngAriaModule","$aria","shouldAttachAttr","normalizedAttr","shouldAttachRole","getShape","shape","ngAriaWatchModelValue","getRadioReaction","needsTabIndex","ngAriaCheckboxReaction","ngMessages","isNodeOneOf","nodeTypeArray","nodeBlackList","ngKeypress","$translate","storageKey","storage","use","preferredLanguage","$STORAGE_KEY","$preferredLanguage","$languageKeyAliases","$fallbackLanguage","$fallbackWasString","$uses","$nextLang","$storageFactory","$storagePrefix","$missingTranslationHandlerFactory","$interpolationFactory","$loaderFactory","$loaderOptions","$notFoundIndicatorLeft","$notFoundIndicatorRight","loaderCache","$translationTable","$availableLanguageKeys","$storageKey","$interpolatorFactories","$interpolationSanitizationStrategy","$cloakClassName","$postCompilingEnabled","NESTED_OBJECT_DELIMITER","getLocale","nav","languages","language","browserLanguage","systemLanguage","userLanguage","searchElement","negotiateLocale","preferred","avail","locale","alias","langKeyAlias","hasWildcardKey","hasExactKey","translations","langKey","translationTable","flatObject","cloakClassName","prevKey","keyWithPath","keyWithShortPath","addInterpolation","useMessageFormatInterpolation","useInterpolation","useSanitizeValueStrategy","setupPreferredLanguage","translationNotFoundIndicator","indicator","translationNotFoundIndicatorLeft","translationNotFoundIndicatorRight","fallbackLanguage","fallbackStack","useUrlLoader","useLoader","useStaticFilesLoader","loaderFactory","useLocalStorage","useStorage","useCookieStorage","storageFactory","storagePrefix","useMissingTranslationHandlerLog","useMissingTranslationHandler","usePostCompiling","determinePreferredLanguage","registerAvailableLanguageKeys","languageKeys","aliases","useLoaderCache","Storage","fallbackIndex","startFallbackIteration","defaultInterpolator","pendingLoader","interpolatorHashMap","langPromises","translationId","interpolateParams","interpolationId","translateAll","translationIds","regardless","promiseToWaitFor","determineTranslation","applyNotFoundIndicators","useLanguage","setLocale","interpolator","loadAsync","loaderOptions","table","interpolatorFactory","getInterpolationIdentifier","getTranslationTable","getFallbackTranslation","Interpolator","getFallbackTranslationInstant","translateByHandler","resultString","resolveForFallbackLanguage","fallbackLanguageIndex","resolveForFallbackLanguageInstant","fallbackTranslation","fallbackTranslationInstant","translation","missingTranslationHandlerTranslation","_translationId","determineTranslationInstant","useFallbackLanguage","langKeyPosition","proposedLanguage","isPostCompilingEnabled","tables","loadingKeys","tableData","instant","possibleLangKeys","possibleLangKey","versionInfo","processAsyncResult","$translateInterpolator","$identifier","$sanitizeValueStrategy","sanitizeValueStrategies","escaped","sanitizeParams","tAttr","translateValuesExist","translateValues","translateInterpolation","translateValueExist","interpolateRegExp","iElement","iAttr","preText","postText","interpolateMatches","defaultText","applyElementContent","successful","globallyEnabled","locallyDefined","translateCompile","locallyEnabled","updateTranslationFn","updateTranslations","applyCloak","removeCloak","translateCloak","translateFilter","interpolation","baseIndexOf","fromIndex","cacheIndexOf","keyPrefix","cachePush","typeCache","charAtCallback","compareAscending","ac","criteria","bc","other","createCache","mid","getObject","escapeStringChar","stringEscapes","getArray","arrayPool","objectPool","isNode","releaseArray","maxPoolSize","releaseObject","runInContext","lodash","lodashWrapper","chainAll","__chain__","__wrapped__","baseBind","bindData","bound","partialArgs","thisBinding","baseCreate","thisArg","setBindData","baseClone","isDeep","stackA","stackB","isObj","cloneableClasses","support","nodeClass","ctor","ctorByClass","boolClass","dateClass","numberClass","stringClass","regexpClass","reFlags","isArr","initedStack","baseEach","forOwn","objValue","properties","nativeCreate","baseCreateCallback","argCount","__bindData__","funcNames","funcDecomp","fnToString","reFuncName","reThis","accumulator","baseCreateWrapper","isBind","partialRightArgs","isCurry","arity","bitmask","isCurryBound","isBindKey","baseDifference","getIndexOf","isLarge","largeArraySize","baseFlatten","isShallow","isStrict","isArguments","valIndex","valLength","resIndex","baseIsEqual","isWhere","otherType","objectTypes","otherClass","argsClass","objectClass","arrayClass","aWrapped","bWrapped","ctorA","argsObject","ctorB","forIn","baseMerge","found","isPlainObject","stackLength","baseRandom","nativeRandom","baseUniq","isSorted","computed","createAggregator","createCallback","createWrapper","isPartial","isPartialRight","creater","createIterator","iteratorData","shadowedProps","loop","useHas","firstArg","iteratorTemplate","errorClass","errorProto","indicatorObject","objectProto","nonEnumProps","stringProto","escapeHtmlChar","htmlEscapes","isNative","reNative","shimIsPlainObject","ownLast","unescapeHtmlChar","htmlUnescapes","cloneDeep","findKey","findLastKey","forOwnRight","forInRight","pairs","props","functions","invert","isEmpty","isEqual","nativeIsFinite","nativeIsNaN","isNull","mapValues","merge","sources","omit","pick","proto","at","unindexedChars","nativeMax","findLast","forEachRight","iterable","isFunc","reduce","noaccum","reduceRight","sample","guard","shuffle","nativeMin","rand","sortBy","toArray","compact","difference","findIndex","findLastIndex","flatten","sortedIndex","initial","intersection","argsIndex","argsLength","trustIndexOf","pull","range","rest","low","high","union","uniq","without","xor","zip","pluck","zipObject","bindAll","funcs","bindKey","compose","curry","maxTimeoutId","stamp","trailingCall","lastCalled","maxWait","trailing","leading","delayed","remaining","isCalled","maxDelayed","leadingCall","memoize","memoized","once","ran","partial","partialRight","debounceOptions","reUnescapedHtml","mixin","methodNames","noConflict","oldDash","random","floating","noMin","noMax","settings","templateSettings","isEvaluating","imports","importsKeys","importsValues","reNoMatch","reDelimiters","reInterpolate","reEsTemplate","evaluate","escapeValue","interpolateValue","esTemplateValue","evaluateValue","reUnescapedString","variable","hasVariable","reEmptyStringLeading","reEmptyStringMiddle","reEmptyStringTrailing","templateCounter","times","unescape","reEscapedHtml","uniqueId","idCounter","tap","wrapperChain","wrapperToString","wrapperValueOf","contextProps","Boolean","arrayRef","propertyIsEnumerable","defineProperty","nativeIsArray","nativeKeys","nativeParseInt","funcClass","toLocaleString","enumErrorProps","enumPrototypes","WinRTError","nonEnumArgs","nonEnumShadows","spliceObjects","__p","conditions","descriptor","shimKeys","eachIteratorOptions","defaultsIteratorOptions","forOwnIteratorOptions","&","objProto","countBy","groupBy","indexBy","where","whitespace","radix","reLeadingSpacesAndZeros","collect","drop","each","eachRight","tail","unique","unzip","any","detect","findWhere","foldl","foldr","include","inject","take","callbackable","VERSION","isSplice","configurable","enumerable","writable","boolean","function","\\","\n","\r","\t"," "," ","freeExports","exports","freeModule","moduleExports","freeGlobal","global","define","amd","tv4","notReallyPercentEncode","encodeURI","doubleEncoded","uriTemplateSubstitution","spec","modifier","uriTemplateGlobalModifiers","shouldEscape","showVariables","trimEmptyString","varNames","varList","varSpecs","varSpecMap","varName","truncate","suffices","uriTemplateSuffices","varSpec","subFunction","valueFunction","substitution","UriTemplate","textParts","substitutions","remainder","recursiveCompare","A","B","parseURI","authority","resolveUrl","removeDotSegments","output","getDocumentUri","normSchema","schema","baseUri","ValidationError","dataPath","schemaPath","subErrors","stacktrace","isTrustedUrl","baseUrl","testUrl","createApi","globalContext","ValidatorContext","currentLanguage","api","addFormat","addLanguage","messageMap","ErrorCodes","rootCode","freshApi","checkRecursive","banUnknownProperties","$ref","addSchema","validateAll","missing","valid","validateResult","validateMultiple","errors","getSchema","getSchemaMap","getSchemaUris","getMissingUris","dropSchemas","defineKeyword","defineError","codeNumber","defaultMessage","ErrorCodeLookup","ErrorMessagesDefault","langCode","errorCodes","hasDontEnumBug","dontEnums","dontEnumsLength","F","vArg","isFrozen","#",".",";","?","fillFromObject","collectMultiple","errorMessages","trackUnknownProperties","missingMap","formatValidators","schemas","collectError","returnError","scanned","scannedFrozen","scannedFrozenSchemas","scannedFrozenValidationErrors","validatedSchemasKey","validationErrorsKey","knownPropertyPaths","unknownPropertyPaths","definedKeywords","keyword","keywordFunction","createError","messageParams","messageTemplate","subValue","prefixErrors","prefixWith","unknownPath","UNKNOWN_PROPERTY","resolveRefs","urlHistory","CIRCULAR_REFERENCE","urls","pointerPath","component","searchSchemas","filterRegExp","dataPathParts","schemaPathParts","dataPointerPath","topLevel","frozenIndex","startErrorCount","scannedFrozenSchemaIndex","scannedSchemasIndex","schemaIndex","frozenSchemaIndex","errorCount","validateBasic","validateNumeric","validateString","validateObject","validateCombinations","validateHypermedia","validateFormat","validateDefinedKeywords","dataPart","schemaPart","errorMessage","FORMAT_CUSTOM","validationFunctions","KEYWORD_CUSTOM","validateType","validateEnum","dataType","allowedTypes","INVALID_TYPE","enumVal","ENUM_MISMATCH","validateMultipleOf","validateMinMax","validateNaN","CLOSE_ENOUGH_LOW","CLOSE_ENOUGH_HIGH","multipleOf","divisibleBy","NUMBER_MULTIPLE_OF","minimum","NUMBER_MINIMUM","exclusiveMinimum","NUMBER_MINIMUM_EXCLUSIVE","maximum","NUMBER_MAXIMUM","exclusiveMaximum","NUMBER_MAXIMUM_EXCLUSIVE","NUMBER_NOT_A_NUMBER","validateStringLength","validateStringPattern","STRING_LENGTH_SHORT","maxLength","STRING_LENGTH_LONG","STRING_PATTERN","validateArrayLength","validateArrayUniqueItems","validateArrayItems","minItems","ARRAY_LENGTH_SHORT","maxItems","ARRAY_LENGTH_LONG","uniqueItems","ARRAY_UNIQUE","match1","match2","additionalItems","ARRAY_ADDITIONAL_ITEMS","validateObjectMinMaxProperties","validateObjectRequiredProperties","validateObjectProperties","validateObjectDependencies","minProperties","OBJECT_PROPERTIES_MINIMUM","propertyCount","maxProperties","OBJECT_PROPERTIES_MAXIMUM","OBJECT_REQUIRED","keyPointerPath","foundMatch","patternProperties","patternKey","additionalProperties","OBJECT_ADDITIONAL_PROPERTIES","dependencies","depKey","dep","OBJECT_DEPENDENCY_KEY","requiredKey","validateAllOf","validateAnyOf","validateOneOf","validateNot","allOf","subSchema","anyOf","oldUnknownPropertyPaths","oldKnownPropertyPaths","errorAtEnd","knownKey","unknownKey","ANY_OF_MISSING","oneOf","validIndex","ONE_OF_MULTIPLE","index1","index2","ONE_OF_MISSING","not","oldErrorCount","notErrors","NOT_PASSED","links","ldo","rel","allPresent","schemaUrl","dataPrefix","schemaPrefix","uiAliasConfig","uiEvent","evt","$params","rlen","rfx","caseSensitive","uiInclude","fragExp","ngIncludeWatchAction","clearContent","tElm","uiIndeterminate","indeterminate","tokenize","$1","capitalizeTokens","inflectors","humanize","inflector","uiJqConfig","uiJq","createLinkOptions","linkOptions","uiOptions","callPlugin","uiRefresh","keysByCode",8,9,13,27,32,33,34,35,36,37,38,39,40,45,46,"capitaliseFirstLetter","combinations","combination","variation","metaPressed","altPressed","ctrlPressed","shiftPressed","mainKeyPressed","metaRequired","meta","altRequired","ctrlRequired","shiftRequired","keypressHelper","maskDefinitions","clearOnBlur","maskConfig","iAttrs","initialize","maskAttr","processRawMask","maskProcessed","initializeElement","bindEventListeners","uninitialize","initPlaceholder","placeholderAttr","maskPlaceholder","formatter","fromModelValue","unmaskValue","validateValue","maskValue","fromViewValue","unbindEventListeners","originalPlaceholder","originalMaxlength","oldValueUnmasked","valueMasked","maskCaretMap","eventsBound","blurHandler","mouseDownUpHandler","minRequiredLength","valueUnmasked","maskPatternsCopy","maskPatterns","maskComponents","chr","unmaskedValue","maskCaretMapCopy","getPlaceholderChar","getMaskComponents","mask","characterCount","isOptional","numberOfOptionalCharacters","splitMask","oldCaretPosition","oldSelectionLength","mouseoutHandler","getSelectionLength","eventWhich","valMasked","valOld","valUnmasked","valUnmaskedOld","valAltered","caretPos","getCaretPosition","caretPosOld","caretPosDelta","caretPosMin","caretPosMax","selectionLenOld","wasSelected","isAddition","isDeletion","isSelection","isKeyLeftArrow","isKeyBackspace","isKeyDelete","caretBumpBack","isValidCaretPosition","charIndex","setCaretPosition","selectionStart","selection","createRange","moveStart","setSelectionRange","createTextRange","collapse","moveEnd","selectionEnd","original","modelViewValue","model","uiResetConfig","resetValue","aElement","uiReset","useProperty","uiRoute","staticWatcher","modelSetter","regexWatcher","routeModel","registerFor","convertToPx","getMeasurements","getStyle","getWidthHeight","alert","preserve","_ref","core_pnum","rnumnonpx","rs","rsLeft","runtimeStyle","pixelLeft","measure","borderA","borderB","computedMarginA","computedMarginB","computedStyle","dirA","dirB","marginA","marginB","paddingA","paddingB","padding","border","margin","measurements","outerfull","newElem","_i","outerHeight","box","doc","docElem","ownerDocument","defaultView","parentWindow","pageYOffset","clientTop","pageXOffset","clientLeft","jqLiteExtras","viewport","elementTemplate","linker","adapter","adapterOnScope","adjustBuffer","adjustRowHeight","applyUpdate","bof","bottomVisiblePos","buffer","bufferPadding","bufferSize","builder","clipBottom","clipTop","datasource","datasourceName","doAdjustment","doDelete","doInsert","doUpdate","enqueueFetch","eof","eventListener","finalize","getValueChain","hideElementBeforeAppend","insert","isDatasourceValid","removeFromBuffer","resizeAndScrollHandler","ridActual","setValueChain","shouldLoadBottom","shouldLoadTop","showElementAfterRender","topVisible","topVisiblePos","viewportScope","wheelHandler","uiScroll","doNotSet","ref","bottomPadding","createPadding","repeaterType","topPadding","localName","overflow-y","div","paddingHeight","bottomDataPos","topDataPos","topVisibleElement","topVisibleScope","isLoading","stop","ref1","bottomHeight","itemHeight","itemTop","newRow","overage","rowTop","topHeight","rid","displayTemp","itemScope","toBeAppended","appended","newHeight","newItems","elt","len1","rows","yMax","revision","inserted","len2","ndx","oldItemNdx","applyUpdates","locator","temp","getWindowScrollTop","iebody","compatMode","uiScrollfixTarget","absolute","uiScrollfix","$target","fixLimit","uiShow","uiHide","uiToggle","filterOn","extractValueToCompare","isDuplicate","apply_watch","validators","validatorFn","validatorKey","intExpression","validateFn","validateExpr","uiValidate","exprssn","valueToValidate","uiValidateWatch","g","KEYS","backspace","space","up","down","delete","comma","MAX_SAFE_INTEGER","SUPPORTED_INPUT_TYPES","tagsInput","tagsInputConfig","tiUtil","TagList","onTagAdding","onTagRemoving","getTagText","setTagText","tagIsValid","safeToString","displayProperty","tagText","allowedTagsPattern","findInObjectArray","keyProperty","$tag","addText","replaceSpacesWithDashes","clearSelection","selectPrior","removeSelected","tags","onTagAdded","onInvalidTag","onTagRemoved","simplePubSub","load","removeTagSymbol","addOnEnter","addOnSpace","addOnComma","addOnBlur","addOnPaste","pasteSplitPattern","enableEditingLastTag","minTags","maxTags","allowLeftoverText","addFromAutocompleteOnly","spellcheck","tagList","handleUndefinedResult","registerAutocomplete","addTag","focusInput","getTags","getCurrentTagText","newTag","getOptions","registerTagItem","removeTag","setElementValidity","hotkeys","validationOptions","hasFocus","invalid","setText","makeObjectArray","eventHandlers","change","lostFocusToBrowserWindow","lostFocusToChildElement","paste","getTextData","clipboardData","getData","click","shouldAdd","shouldRemove","shouldSelect","shouldEditLastTag","isModifier","addKeys","tagsInputCtrl","$$template","$$removeTagSymbol","$getDisplayText","$removeTag","SuggestionList","loadFn","getDifference","lastPromise","getTagId","defaultComparer","selectFirstMatch","$query","maxResultsToShow","scrollToElement","elementTop","elementHeight","parentHeight","parentScrollTop","highlightMatchedText","loadOnDownArrow","loadOnEmpty","loadOnFocus","suggestionList","registerAutocompleteMatch","shouldLoadSuggestions","addSuggestionByIndex","addSuggestion","handled","autoCompleteCtrl","autoComplete","$highlight","safeHighlight","trustAsHtml","resize","threshold","getTextAutosizeThreshold","originalValue","tiBindAttrs","globalDefaults","interpolationStatus","autosizeThreshold","setActiveInterpolation","setTextAutosizeThreshold","converters","defaultValidator","localDefault","converter","getDefault","updateValue","globalValue","comparer","escapeRegexChars","encodeHTML","valueIfUndefined","handlers"],"mappings":"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","file":"components.js","sourcesContent":["/**\n * angular-ui-utils - Swiss-Army-Knife of AngularJS tools (with no external dependencies!)\n * @version v0.2.3 - 2015-06-30\n * @link http://angular-ui.github.com\n * @license MIT License, http://www.opensource.org/licenses/MIT\n */\nangular.module('ui.alias', []).config(['$compileProvider', 'uiAliasConfig', function($compileProvider, uiAliasConfig){\n  'use strict';\n\n  uiAliasConfig = uiAliasConfig || {};\n  angular.forEach(uiAliasConfig, function(config, alias){\n    if (angular.isString(config)) {\n      config = {\n        replace: true,\n        template: config\n      };\n    }\n    $compileProvider.directive(alias, function(){\n      return config;\n    });\n  });\n}]);\n\n/**\n * General-purpose Event binding. Bind any event not natively supported by Angular\n * Pass an object with keynames for events to ui-event\n * Allows $event object and $params object to be passed\n *\n * @example <input ui-event=\"{ focus : 'counter++', blur : 'someCallback()' }\">\n * @example <input ui-event=\"{ myCustomEvent : 'myEventHandler($event, $params)'}\">\n *\n * @param ui-event {string|object literal} The event to bind to as a string or a hash of events with their callbacks\n */\nangular.module('ui.event',[]).directive('uiEvent', ['$parse',\n  function ($parse) {\n    'use strict';\n\n    return function ($scope, elm, attrs) {\n      var events = $scope.$eval(attrs.uiEvent);\n      angular.forEach(events, function (uiEvent, eventName) {\n        var fn = $parse(uiEvent);\n        elm.bind(eventName, function (evt) {\n          var params = Array.prototype.slice.call(arguments);\n          //Take out first paramater (event object);\n          params = params.splice(1);\n          fn($scope, {$event: evt, $params: params});\n          if (!$scope.$$phase) {\n            $scope.$apply();\n          }\n        });\n      });\n    };\n  }]);\n\n/**\n * A replacement utility for internationalization very similar to sprintf.\n *\n * @param replace {mixed} The tokens to replace depends on type\n *  string: all instances of $0 will be replaced\n *  array: each instance of $0, $1, $2 etc. will be placed with each array item in corresponding order\n *  object: all attributes will be iterated through, with :key being replaced with its corresponding value\n * @return string\n *\n * @example: 'Hello :name, how are you :day'.format({ name:'John', day:'Today' })\n * @example: 'Records $0 to $1 out of $2 total'.format(['10', '20', '3000'])\n * @example: '$0 agrees to all mentions $0 makes in the event that $0 hits a tree while $0 is driving drunk'.format('Bob')\n */\nangular.module('ui.format',[]).filter('format', function(){\n  'use strict';\n\n  return function(value, replace) {\n    var target = value;\n    if (angular.isString(target) && replace !== undefined) {\n      if (!angular.isArray(replace) && !angular.isObject(replace)) {\n        replace = [replace];\n      }\n      if (angular.isArray(replace)) {\n        var rlen = replace.length;\n        var rfx = function (str, i) {\n          i = parseInt(i, 10);\n          return (i >= 0 && i < rlen) ? replace[i] : str;\n        };\n        target = target.replace(/\\$([0-9]+)/g, rfx);\n      }\n      else {\n        angular.forEach(replace, function(value, key){\n          target = target.split(':' + key).join(value);\n        });\n      }\n    }\n    return target;\n  };\n});\n\n/**\n * Wraps the\n * @param text {string} haystack to search through\n * @param search {string} needle to search for\n * @param [caseSensitive] {boolean} optional boolean to use case-sensitive searching\n */\nangular.module('ui.highlight',[]).filter('highlight', function () {\n  'use strict';\n\n  return function (text, search, caseSensitive) {\n    if (text && (search || angular.isNumber(search))) {\n      text = text.toString();\n      search = search.toString();\n      if (caseSensitive) {\n        return text.split(search).join('<span class=\"ui-match\">' + search + '</span>');\n      } else {\n        return text.replace(new RegExp(search, 'gi'), '<span class=\"ui-match\">$&</span>');\n      }\n    } else {\n      return text;\n    }\n  };\n});\n\n// modeled after: angular-1.0.7/src/ng/directive/ngInclude.js\nangular.module('ui.include',[])\n.directive('uiInclude', ['$http', '$templateCache', '$anchorScroll', '$compile',\n                 function($http,   $templateCache,   $anchorScroll,   $compile) {\n  'use strict';\n\n  return {\n    restrict: 'ECA',\n    terminal: true,\n    compile: function(element, attr) {\n      var srcExp = attr.uiInclude || attr.src,\n          fragExp = attr.fragment || '',\n          onloadExp = attr.onload || '',\n          autoScrollExp = attr.autoscroll;\n\n      return function(scope, element) {\n        var changeCounter = 0,\n            childScope;\n\n        var clearContent = function() {\n          if (childScope) {\n            childScope.$destroy();\n            childScope = null;\n          }\n\n          element.html('');\n        };\n\n        function ngIncludeWatchAction() {\n          var thisChangeId = ++changeCounter;\n          var src = scope.$eval(srcExp);\n          var fragment = scope.$eval(fragExp);\n\n          if (src) {\n            $http.get(src, {cache: $templateCache}).success(function(response) {\n              if (thisChangeId !== changeCounter) { return; }\n\n              if (childScope) { childScope.$destroy(); }\n              childScope = scope.$new();\n\n              var contents;\n              if (fragment) {\n                contents = angular.element('<div/>').html(response).find(fragment);\n              }\n              else {\n                contents = angular.element('<div/>').html(response).contents();\n              }\n              element.html(contents);\n              $compile(contents)(childScope);\n\n              if (angular.isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {\n                $anchorScroll();\n              }\n\n              childScope.$emit('$includeContentLoaded');\n              scope.$eval(onloadExp);\n            }).error(function() {\n              if (thisChangeId === changeCounter) { clearContent(); }\n            });\n          } else { clearContent(); }\n        }\n\n        scope.$watch(fragExp, ngIncludeWatchAction);\n        scope.$watch(srcExp, ngIncludeWatchAction);\n      };\n    }\n  };\n}]);\n\n/**\n * Provides an easy way to toggle a checkboxes indeterminate property\n *\n * @example <input type=\"checkbox\" ui-indeterminate=\"isUnkown\">\n */\nangular.module('ui.indeterminate',[]).directive('uiIndeterminate', [\n  function () {\n    'use strict';\n\n    return {\n      compile: function(tElm, tAttrs) {\n        if (!tAttrs.type || tAttrs.type.toLowerCase() !== 'checkbox') {\n          return angular.noop;\n        }\n\n        return function ($scope, elm, attrs) {\n          $scope.$watch(attrs.uiIndeterminate, function(newVal) {\n            elm[0].indeterminate = !!newVal;\n          });\n        };\n      }\n    };\n  }]);\n\n/**\n * Converts variable-esque naming conventions to something presentational, capitalized words separated by space.\n * @param {String} value The value to be parsed and prettified.\n * @param {String} [inflector] The inflector to use. Default: humanize.\n * @return {String}\n * @example {{ 'Here Is my_phoneNumber' | inflector:'humanize' }} => Here Is My Phone Number\n *          {{ 'Here Is my_phoneNumber' | inflector:'underscore' }} => here_is_my_phone_number\n *          {{ 'Here Is my_phoneNumber' | inflector:'variable' }} => hereIsMyPhoneNumber\n */\nangular.module('ui.inflector',[]).filter('inflector', function () {\n  'use strict';\n\n  function tokenize(text) {\n    text = text.replace(/([A-Z])|([\\-|\\_])/g, function(_, $1) { return ' ' + ($1 || ''); });\n    return text.replace(/\\s\\s+/g, ' ').trim().toLowerCase().split(' ');\n  }\n\n  function capitalizeTokens(tokens) {\n    var result = [];\n    angular.forEach(tokens, function(token) {\n      result.push(token.charAt(0).toUpperCase() + token.substr(1));\n    });\n    return result;\n  }\n\n  var inflectors = {\n    humanize: function (value) {\n      return capitalizeTokens(tokenize(value)).join(' ');\n    },\n    underscore: function (value) {\n      return tokenize(value).join('_');\n    },\n    variable: function (value) {\n      value = tokenize(value);\n      value = value[0] + capitalizeTokens(value.slice(1)).join('');\n      return value;\n    }\n  };\n\n  return function (text, inflector) {\n    if (inflector !== false && angular.isString(text)) {\n      inflector = inflector || 'humanize';\n      return inflectors[inflector](text);\n    } else {\n      return text;\n    }\n  };\n});\n\n/**\n * General-purpose jQuery wrapper. Simply pass the plugin name as the expression.\n *\n * It is possible to specify a default set of parameters for each jQuery plugin.\n * Under the jq key, namespace each plugin by that which will be passed to ui-jq.\n * Unfortunately, at this time you can only pre-define the first parameter.\n * @example { jq : { datepicker : { showOn:'click' } } }\n *\n * @param ui-jq {string} The $elm.[pluginName]() to call.\n * @param [ui-options] {mixed} Expression to be evaluated and passed as options to the function\n *     Multiple parameters can be separated by commas\n * @param [ui-refresh] {expression} Watch expression and refire plugin on changes\n *\n * @example <input ui-jq=\"datepicker\" ui-options=\"{showOn:'click'},secondParameter,thirdParameter\" ui-refresh=\"iChange\">\n */\nangular.module('ui.jq',[]).\n  value('uiJqConfig',{}).\n  directive('uiJq', ['uiJqConfig', '$timeout', function uiJqInjectingFunction(uiJqConfig, $timeout) {\n  'use strict';\n\n\n  return {\n    restrict: 'A',\n    compile: function uiJqCompilingFunction(tElm, tAttrs) {\n\n      if (!angular.isFunction(tElm[tAttrs.uiJq])) {\n        throw new Error('ui-jq: The \"' + tAttrs.uiJq + '\" function does not exist');\n      }\n      var options = uiJqConfig && uiJqConfig[tAttrs.uiJq];\n\n      return function uiJqLinkingFunction(scope, elm, attrs) {\n\n        // If change compatibility is enabled, the form input's \"change\" event will trigger an \"input\" event\n        if (attrs.ngModel && elm.is('select,input,textarea')) {\n          elm.bind('change', function() {\n            elm.trigger('input');\n          });\n        }\n\n        function createLinkOptions(){\n          var linkOptions = [];\n\n          // If ui-options are passed, merge (or override) them onto global defaults and pass to the jQuery method\n          if (attrs.uiOptions) {\n            linkOptions = scope.$eval('[' + attrs.uiOptions + ']');\n            if (angular.isObject(options) && angular.isObject(linkOptions[0])) {\n              linkOptions[0] = angular.extend({}, options, linkOptions[0]);\n            }\n          } else if (options) {\n            linkOptions = [options];\n          }\n          return linkOptions;\n        }\n\n        // Call jQuery method and pass relevant options\n        function callPlugin() {\n          $timeout(function() {\n            elm[attrs.uiJq].apply(elm, createLinkOptions());\n          }, 0, false);\n        }\n\n        // If ui-refresh is used, re-fire the the method upon every change\n        if (attrs.uiRefresh) {\n          scope.$watch(attrs.uiRefresh, function() {\n            callPlugin();\n          });\n        }\n        callPlugin();\n      };\n    }\n  };\n}]);\n\nangular.module('ui.keypress',[]).\nfactory('keypressHelper', ['$parse', function keypress($parse){\n  'use strict';\n\n  var keysByCode = {\n    8: 'backspace',\n    9: 'tab',\n    13: 'enter',\n    27: 'esc',\n    32: 'space',\n    33: 'pageup',\n    34: 'pagedown',\n    35: 'end',\n    36: 'home',\n    37: 'left',\n    38: 'up',\n    39: 'right',\n    40: 'down',\n    45: 'insert',\n    46: 'delete'\n  };\n\n  var capitaliseFirstLetter = function (string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  };\n\n  return function(mode, scope, elm, attrs) {\n    var params, combinations = [];\n    params = scope.$eval(attrs['ui'+capitaliseFirstLetter(mode)]);\n\n    // Prepare combinations for simple checking\n    angular.forEach(params, function (v, k) {\n      var combination, expression;\n      expression = $parse(v);\n\n      angular.forEach(k.split(' '), function(variation) {\n        combination = {\n          expression: expression,\n          keys: {}\n        };\n        angular.forEach(variation.split('-'), function (value) {\n          combination.keys[value] = true;\n        });\n        combinations.push(combination);\n      });\n    });\n\n    // Check only matching of pressed keys one of the conditions\n    elm.bind(mode, function (event) {\n      // No need to do that inside the cycle\n      var metaPressed = !!(event.metaKey && !event.ctrlKey);\n      var altPressed = !!event.altKey;\n      var ctrlPressed = !!event.ctrlKey;\n      var shiftPressed = !!event.shiftKey;\n      var keyCode = event.keyCode;\n\n      // normalize keycodes\n      if (mode === 'keypress' && !shiftPressed && keyCode >= 97 && keyCode <= 122) {\n        keyCode = keyCode - 32;\n      }\n\n      // Iterate over prepared combinations\n      angular.forEach(combinations, function (combination) {\n\n        var mainKeyPressed = combination.keys[keysByCode[keyCode]] || combination.keys[keyCode.toString()];\n\n        var metaRequired = !!combination.keys.meta;\n        var altRequired = !!combination.keys.alt;\n        var ctrlRequired = !!combination.keys.ctrl;\n        var shiftRequired = !!combination.keys.shift;\n\n        if (\n          mainKeyPressed &&\n          ( metaRequired === metaPressed ) &&\n          ( altRequired === altPressed ) &&\n          ( ctrlRequired === ctrlPressed ) &&\n          ( shiftRequired === shiftPressed )\n        ) {\n          // Run the function\n          scope.$apply(function () {\n            combination.expression(scope, { '$event': event });\n          });\n        }\n      });\n    });\n  };\n}]);\n\n/**\n * Bind one or more handlers to particular keys or their combination\n * @param hash {mixed} keyBindings Can be an object or string where keybinding expression of keys or keys combinations and AngularJS Exspressions are set. Object syntax: \"{ keys1: expression1 [, keys2: expression2 [ , ... ]]}\". String syntax: \"\"expression1 on keys1 [ and expression2 on keys2 [ and ... ]]\"\". Expression is an AngularJS Expression, and key(s) are dash-separated combinations of keys and modifiers (one or many, if any. Order does not matter). Supported modifiers are 'ctrl', 'shift', 'alt' and key can be used either via its keyCode (13 for Return) or name. Named keys are 'backspace', 'tab', 'enter', 'esc', 'space', 'pageup', 'pagedown', 'end', 'home', 'left', 'up', 'right', 'down', 'insert', 'delete'.\n * @example <input ui-keypress=\"{enter:'x = 1', 'ctrl-shift-space':'foo()', 'shift-13':'bar()'}\" /> <input ui-keypress=\"foo = 2 on ctrl-13 and bar('hello') on shift-esc\" />\n **/\nangular.module('ui.keypress').directive('uiKeydown', ['keypressHelper', function(keypressHelper){\n  'use strict';\n\n  return {\n    link: function (scope, elm, attrs) {\n      keypressHelper('keydown', scope, elm, attrs);\n    }\n  };\n}]);\n\nangular.module('ui.keypress').directive('uiKeypress', ['keypressHelper', function(keypressHelper){\n  'use strict';\n\n  return {\n    link: function (scope, elm, attrs) {\n      keypressHelper('keypress', scope, elm, attrs);\n    }\n  };\n}]);\n\nangular.module('ui.keypress').directive('uiKeyup', ['keypressHelper', function(keypressHelper){\n  'use strict';\n\n  return {\n    link: function (scope, elm, attrs) {\n      keypressHelper('keyup', scope, elm, attrs);\n    }\n  };\n}]);\n\n/*\n Attaches input mask onto input element\n */\nangular.module('ui.mask', [])\n  .value('uiMaskConfig', {\n    'maskDefinitions': {\n      '9': /\\d/,\n      'A': /[a-zA-Z]/,\n      '*': /[a-zA-Z0-9]/\n    },\n    'clearOnBlur': true\n  })\n  .directive('uiMask', ['uiMaskConfig', '$parse', function (maskConfig, $parse) {\n    'use strict';\n\n    return {\n      priority: 100,\n      require: 'ngModel',\n      restrict: 'A',\n      compile: function uiMaskCompilingFunction(){\n        var options = maskConfig;\n\n        return function uiMaskLinkingFunction(scope, iElement, iAttrs, controller){\n          var maskProcessed = false, eventsBound = false,\n            maskCaretMap, maskPatterns, maskPlaceholder, maskComponents,\n          // Minimum required length of the value to be considered valid\n            minRequiredLength,\n            value, valueMasked, isValid,\n          // Vars for initializing/uninitializing\n            originalPlaceholder = iAttrs.placeholder,\n            originalMaxlength = iAttrs.maxlength,\n          // Vars used exclusively in eventHandler()\n            oldValue, oldValueUnmasked, oldCaretPosition, oldSelectionLength;\n\n          function initialize(maskAttr){\n            if (!angular.isDefined(maskAttr)) {\n              return uninitialize();\n            }\n            processRawMask(maskAttr);\n            if (!maskProcessed) {\n              return uninitialize();\n            }\n            initializeElement();\n            bindEventListeners();\n            return true;\n          }\n\n          function initPlaceholder(placeholderAttr) {\n            if(! angular.isDefined(placeholderAttr)) {\n              return;\n            }\n\n            maskPlaceholder = placeholderAttr;\n\n            // If the mask is processed, then we need to update the value\n            if (maskProcessed) {\n              eventHandler();\n            }\n          }\n\n          function formatter(fromModelValue){\n            if (!maskProcessed) {\n              return fromModelValue;\n            }\n            value = unmaskValue(fromModelValue || '');\n            isValid = validateValue(value);\n            controller.$setValidity('mask', isValid);\n            return isValid && value.length ? maskValue(value) : undefined;\n          }\n\n          function parser(fromViewValue){\n            if (!maskProcessed) {\n              return fromViewValue;\n            }\n            value = unmaskValue(fromViewValue || '');\n            isValid = validateValue(value);\n            // We have to set viewValue manually as the reformatting of the input\n            // value performed by eventHandler() doesn't happen until after\n            // this parser is called, which causes what the user sees in the input\n            // to be out-of-sync with what the controller's $viewValue is set to.\n            controller.$viewValue = value.length ? maskValue(value) : '';\n            controller.$setValidity('mask', isValid);\n            if (value === '' && iAttrs.required) {\n                controller.$setValidity('required', !controller.$error.required);\n            }\n            return isValid ? value : undefined;\n          }\n\n          var linkOptions = {};\n\n          if (iAttrs.uiOptions) {\n            linkOptions = scope.$eval('[' + iAttrs.uiOptions + ']');\n            if (angular.isObject(linkOptions[0])) {\n              // we can't use angular.copy nor angular.extend, they lack the power to do a deep merge\n              linkOptions = (function(original, current){\n                for(var i in original) {\n                  if (Object.prototype.hasOwnProperty.call(original, i)) {\n                    if (current[i] === undefined) {\n                      current[i] = angular.copy(original[i]);\n                    } else {\n                      angular.extend(current[i], original[i]);\n                    }\n                  }\n                }\n                return current;\n              })(options, linkOptions[0]);\n            }\n          } else {\n            linkOptions = options;\n          }\n\n          iAttrs.$observe('uiMask', initialize);\n          iAttrs.$observe('placeholder', initPlaceholder);\n          var modelViewValue = false;\n          iAttrs.$observe('modelViewValue', function(val) {\n            if(val === 'true') {\n              modelViewValue = true;\n            }\n          });\n          scope.$watch(iAttrs.ngModel, function(val) {\n            if(modelViewValue && val) {\n              var model = $parse(iAttrs.ngModel);\n              model.assign(scope, controller.$viewValue);\n            }\n          });\n          controller.$formatters.push(formatter);\n          controller.$parsers.push(parser);\n\n          function uninitialize(){\n            maskProcessed = false;\n            unbindEventListeners();\n\n            if (angular.isDefined(originalPlaceholder)) {\n              iElement.attr('placeholder', originalPlaceholder);\n            } else {\n              iElement.removeAttr('placeholder');\n            }\n\n            if (angular.isDefined(originalMaxlength)) {\n              iElement.attr('maxlength', originalMaxlength);\n            } else {\n              iElement.removeAttr('maxlength');\n            }\n\n            iElement.val(controller.$modelValue);\n            controller.$viewValue = controller.$modelValue;\n            return false;\n          }\n\n          function initializeElement(){\n            value = oldValueUnmasked = unmaskValue(controller.$viewValue || '');\n            valueMasked = oldValue = maskValue(value);\n            isValid = validateValue(value);\n            var viewValue = isValid && value.length ? valueMasked : '';\n            if (iAttrs.maxlength) { // Double maxlength to allow pasting new val at end of mask\n              iElement.attr('maxlength', maskCaretMap[maskCaretMap.length - 1] * 2);\n            }\n            iElement.attr('placeholder', maskPlaceholder);\n            iElement.val(viewValue);\n            controller.$viewValue = viewValue;\n            // Not using $setViewValue so we don't clobber the model value and dirty the form\n            // without any kind of user interaction.\n          }\n\n          function bindEventListeners(){\n            if (eventsBound) {\n              return;\n            }\n            iElement.bind('blur', blurHandler);\n            iElement.bind('mousedown mouseup', mouseDownUpHandler);\n            iElement.bind('input keyup click focus', eventHandler);\n            eventsBound = true;\n          }\n\n          function unbindEventListeners(){\n            if (!eventsBound) {\n              return;\n            }\n            iElement.unbind('blur', blurHandler);\n            iElement.unbind('mousedown', mouseDownUpHandler);\n            iElement.unbind('mouseup', mouseDownUpHandler);\n            iElement.unbind('input', eventHandler);\n            iElement.unbind('keyup', eventHandler);\n            iElement.unbind('click', eventHandler);\n            iElement.unbind('focus', eventHandler);\n            eventsBound = false;\n          }\n\n          function validateValue(value){\n            // Zero-length value validity is ngRequired's determination\n            return value.length ? value.length >= minRequiredLength : true;\n          }\n\n          function unmaskValue(value){\n            var valueUnmasked = '',\n              maskPatternsCopy = maskPatterns.slice();\n            // Preprocess by stripping mask components from value\n            value = value.toString();\n            angular.forEach(maskComponents, function (component){\n              value = value.replace(component, '');\n            });\n            angular.forEach(value.split(''), function (chr){\n              if (maskPatternsCopy.length && maskPatternsCopy[0].test(chr)) {\n                valueUnmasked += chr;\n                maskPatternsCopy.shift();\n              }\n            });\n            return valueUnmasked;\n          }\n\n          function maskValue(unmaskedValue){\n            var valueMasked = '',\n                maskCaretMapCopy = maskCaretMap.slice();\n\n            angular.forEach(maskPlaceholder.split(''), function (chr, i){\n              if (unmaskedValue.length && i === maskCaretMapCopy[0]) {\n                valueMasked  += unmaskedValue.charAt(0) || '_';\n                unmaskedValue = unmaskedValue.substr(1);\n                maskCaretMapCopy.shift();\n              }\n              else {\n                valueMasked += chr;\n              }\n            });\n            return valueMasked;\n          }\n\n          function getPlaceholderChar(i) {\n            var placeholder = iAttrs.placeholder;\n\n            if (typeof placeholder !== 'undefined' && placeholder[i]) {\n              return placeholder[i];\n            } else {\n              return '_';\n            }\n          }\n\n          // Generate array of mask components that will be stripped from a masked value\n          // before processing to prevent mask components from being added to the unmasked value.\n          // E.g., a mask pattern of '+7 9999' won't have the 7 bleed into the unmasked value.\n          // If a maskable char is followed by a mask char and has a mask\n          // char behind it, we'll split it into it's own component so if\n          // a user is aggressively deleting in the input and a char ahead\n          // of the maskable char gets deleted, we'll still be able to strip\n          // it in the unmaskValue() preprocessing.\n          function getMaskComponents() {\n            return maskPlaceholder.replace(/[_]+/g, '_').replace(/([^_]+)([a-zA-Z0-9])([^_])/g, '$1$2_$3').split('_');\n          }\n\n          function processRawMask(mask){\n            var characterCount = 0;\n\n            maskCaretMap    = [];\n            maskPatterns    = [];\n            maskPlaceholder = '';\n\n            if (typeof mask === 'string') {\n              minRequiredLength = 0;\n\n              var isOptional = false,\n                  numberOfOptionalCharacters = 0,\n                  splitMask  = mask.split('');\n\n              angular.forEach(splitMask, function (chr, i){\n                if (linkOptions.maskDefinitions[chr]) {\n\n                  maskCaretMap.push(characterCount);\n\n                  maskPlaceholder += getPlaceholderChar(i - numberOfOptionalCharacters);\n                  maskPatterns.push(linkOptions.maskDefinitions[chr]);\n\n                  characterCount++;\n                  if (!isOptional) {\n                    minRequiredLength++;\n                  }\n                }\n                else if (chr === '?') {\n                  isOptional = true;\n                  numberOfOptionalCharacters++;\n                }\n                else {\n                  maskPlaceholder += chr;\n                  characterCount++;\n                }\n              });\n            }\n            // Caret position immediately following last position is valid.\n            maskCaretMap.push(maskCaretMap.slice().pop() + 1);\n\n            maskComponents = getMaskComponents();\n            maskProcessed  = maskCaretMap.length > 1 ? true : false;\n          }\n\n          function blurHandler(){\n            if (linkOptions.clearOnBlur) {\n              oldCaretPosition = 0;\n              oldSelectionLength = 0;\n              if (!isValid || value.length === 0) {\n                valueMasked = '';\n                iElement.val('');\n                scope.$apply(function () {\n                  controller.$setViewValue('');\n                });\n              }\n            }\n          }\n\n          function mouseDownUpHandler(e){\n            if (e.type === 'mousedown') {\n              iElement.bind('mouseout', mouseoutHandler);\n            } else {\n              iElement.unbind('mouseout', mouseoutHandler);\n            }\n          }\n\n          iElement.bind('mousedown mouseup', mouseDownUpHandler);\n\n          function mouseoutHandler(){\n            /*jshint validthis: true */\n            oldSelectionLength = getSelectionLength(this);\n            iElement.unbind('mouseout', mouseoutHandler);\n          }\n\n          function eventHandler(e){\n            /*jshint validthis: true */\n            e = e || {};\n            // Allows more efficient minification\n            var eventWhich = e.which,\n              eventType = e.type;\n\n            // Prevent shift and ctrl from mucking with old values\n            if (eventWhich === 16 || eventWhich === 91) { return;}\n\n            var val = iElement.val(),\n              valOld = oldValue,\n              valMasked,\n              valUnmasked = unmaskValue(val),\n              valUnmaskedOld = oldValueUnmasked,\n              valAltered = false,\n\n              caretPos = getCaretPosition(this) || 0,\n              caretPosOld = oldCaretPosition || 0,\n              caretPosDelta = caretPos - caretPosOld,\n              caretPosMin = maskCaretMap[0],\n              caretPosMax = maskCaretMap[valUnmasked.length] || maskCaretMap.slice().shift(),\n\n              selectionLenOld = oldSelectionLength || 0,\n              isSelected = getSelectionLength(this) > 0,\n              wasSelected = selectionLenOld > 0,\n\n            // Case: Typing a character to overwrite a selection\n              isAddition = (val.length > valOld.length) || (selectionLenOld && val.length > valOld.length - selectionLenOld),\n            // Case: Delete and backspace behave identically on a selection\n              isDeletion = (val.length < valOld.length) || (selectionLenOld && val.length === valOld.length - selectionLenOld),\n              isSelection = (eventWhich >= 37 && eventWhich <= 40) && e.shiftKey, // Arrow key codes\n\n              isKeyLeftArrow = eventWhich === 37,\n            // Necessary due to \"input\" event not providing a key code\n              isKeyBackspace = eventWhich === 8 || (eventType !== 'keyup' && isDeletion && (caretPosDelta === -1)),\n              isKeyDelete = eventWhich === 46 || (eventType !== 'keyup' && isDeletion && (caretPosDelta === 0 ) && !wasSelected),\n\n            // Handles cases where caret is moved and placed in front of invalid maskCaretMap position. Logic below\n            // ensures that, on click or leftward caret placement, caret is moved leftward until directly right of\n            // non-mask character. Also applied to click since users are (arguably) more likely to backspace\n            // a character when clicking within a filled input.\n              caretBumpBack = (isKeyLeftArrow || isKeyBackspace || eventType === 'click') && caretPos > caretPosMin;\n\n            oldSelectionLength = getSelectionLength(this);\n\n            // These events don't require any action\n            if (isSelection || (isSelected && (eventType === 'click' || eventType === 'keyup'))) {\n              return;\n            }\n\n            // Value Handling\n            // ==============\n\n            // User attempted to delete but raw value was unaffected--correct this grievous offense\n            if ((eventType === 'input') && isDeletion && !wasSelected && valUnmasked === valUnmaskedOld) {\n              while (isKeyBackspace && caretPos > caretPosMin && !isValidCaretPosition(caretPos)) {\n                caretPos--;\n              }\n              while (isKeyDelete && caretPos < caretPosMax && maskCaretMap.indexOf(caretPos) === -1) {\n                caretPos++;\n              }\n              var charIndex = maskCaretMap.indexOf(caretPos);\n              // Strip out non-mask character that user would have deleted if mask hadn't been in the way.\n              valUnmasked = valUnmasked.substring(0, charIndex) + valUnmasked.substring(charIndex + 1);\n              valAltered = true;\n            }\n\n            // Update values\n            valMasked = maskValue(valUnmasked);\n\n            oldValue = valMasked;\n            oldValueUnmasked = valUnmasked;\n            iElement.val(valMasked);\n            if (valAltered) {\n              // We've altered the raw value after it's been $digest'ed, we need to $apply the new value.\n              scope.$apply(function (){\n                controller.$setViewValue(valUnmasked);\n              });\n            }\n\n            // Caret Repositioning\n            // ===================\n\n            // Ensure that typing always places caret ahead of typed character in cases where the first char of\n            // the input is a mask char and the caret is placed at the 0 position.\n            if (isAddition && (caretPos <= caretPosMin)) {\n              caretPos = caretPosMin + 1;\n            }\n\n            if (caretBumpBack) {\n              caretPos--;\n            }\n\n            // Make sure caret is within min and max position limits\n            caretPos = caretPos > caretPosMax ? caretPosMax : caretPos < caretPosMin ? caretPosMin : caretPos;\n\n            // Scoot the caret back or forth until it's in a non-mask position and within min/max position limits\n            while (!isValidCaretPosition(caretPos) && caretPos > caretPosMin && caretPos < caretPosMax) {\n              caretPos += caretBumpBack ? -1 : 1;\n            }\n\n            if ((caretBumpBack && caretPos < caretPosMax) || (isAddition && !isValidCaretPosition(caretPosOld))) {\n              caretPos++;\n            }\n            oldCaretPosition = caretPos;\n            setCaretPosition(this, caretPos);\n          }\n\n          function isValidCaretPosition(pos){ return maskCaretMap.indexOf(pos) > -1; }\n\n          function getCaretPosition(input){\n            if (!input) return 0;\n            if (input.selectionStart !== undefined) {\n              return input.selectionStart;\n            } else if (document.selection) {\n              if (iElement.is(':focus')) {\n                // Curse you IE\n                input.focus();\n                var selection = document.selection.createRange();\n                selection.moveStart('character', input.value ? -input.value.length : 0);\n                return selection.text.length;\n              }\n            }\n            return 0;\n          }\n\n          function setCaretPosition(input, pos){\n            if (!input) return 0;\n            if (input.offsetWidth === 0 || input.offsetHeight === 0) {\n              return; // Input's hidden\n            }\n            if (input.setSelectionRange) {\n              if (iElement.is(':focus')) {\n                input.focus();\n                input.setSelectionRange(pos, pos);\n              }\n            }\n            else if (input.createTextRange) {\n                // Curse you IE\n                var range = input.createTextRange();\n                range.collapse(true);\n                range.moveEnd('character', pos);\n                range.moveStart('character', pos);\n                range.select();\n            }\n          }\n\n          function getSelectionLength(input){\n            if (!input) return 0;\n            if (input.selectionStart !== undefined) {\n              return (input.selectionEnd - input.selectionStart);\n            }\n            if (document.selection) {\n              return (document.selection.createRange().text.length);\n            }\n            return 0;\n          }\n\n          // https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/indexOf\n          if (!Array.prototype.indexOf) {\n            Array.prototype.indexOf = function (searchElement /*, fromIndex */){\n              if (this === null) {\n                throw new TypeError();\n              }\n              var t = Object(this);\n              var len = t.length >>> 0;\n              if (len === 0) {\n                return -1;\n              }\n              var n = 0;\n              if (arguments.length > 1) {\n                n = Number(arguments[1]);\n                if (n !== n) { // shortcut for verifying if it's NaN\n                  n = 0;\n                } else if (n !== 0 && n !== Infinity && n !== -Infinity) {\n                  n = (n > 0 || -1) * Math.floor(Math.abs(n));\n                }\n              }\n              if (n >= len) {\n                return -1;\n              }\n              var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);\n              for (; k < len; k++) {\n                if (k in t && t[k] === searchElement) {\n                  return k;\n                }\n              }\n              return -1;\n            };\n          }\n\n        };\n      }\n    };\n  }\n]);\n\n/**\n * Add a clear button to form inputs to reset their value\n */\nangular.module('ui.reset',[]).value('uiResetConfig',null).directive('uiReset', ['uiResetConfig', function (uiResetConfig) {\n  'use strict';\n\n  var resetValue = null;\n  if (uiResetConfig !== undefined){\n      resetValue = uiResetConfig;\n  }\n  return {\n    require: 'ngModel',\n    link: function (scope, elm, attrs, ctrl) {\n      var aElement;\n      aElement = angular.element('<a class=\"ui-reset\" />');\n      elm.wrap('<span class=\"ui-resetwrap\" />').after(aElement);\n      aElement.bind('click', function (e) {\n        e.preventDefault();\n        scope.$apply(function () {\n          if (attrs.uiReset){\n            ctrl.$setViewValue(scope.$eval(attrs.uiReset));\n          }else{\n            ctrl.$setViewValue(resetValue);\n          }\n          ctrl.$render();\n        });\n      });\n    }\n  };\n}]);\n\n/**\n * Set a $uiRoute boolean to see if the current route matches\n */\nangular.module('ui.route', []).directive('uiRoute', ['$location', '$parse', function ($location, $parse) {\n  'use strict';\n\n  return {\n    restrict: 'AC',\n    scope: true,\n    compile: function(tElement, tAttrs) {\n      var useProperty;\n      if (tAttrs.uiRoute) {\n        useProperty = 'uiRoute';\n      } else if (tAttrs.ngHref) {\n        useProperty = 'ngHref';\n      } else if (tAttrs.href) {\n        useProperty = 'href';\n      } else {\n        throw new Error('uiRoute missing a route or href property on ' + tElement[0]);\n      }\n      return function ($scope, elm, attrs) {\n        var modelSetter = $parse(attrs.ngModel || attrs.routeModel || '$uiRoute').assign;\n        var watcher = angular.noop;\n\n        // Used by href and ngHref\n        function staticWatcher(newVal) {\n          var hash = newVal.indexOf('#');\n          if (hash > -1){\n            newVal = newVal.substr(hash + 1);\n          }\n          watcher = function watchHref() {\n            modelSetter($scope, ($location.path().indexOf(newVal) > -1));\n          };\n          watcher();\n        }\n        // Used by uiRoute\n        function regexWatcher(newVal) {\n          var hash = newVal.indexOf('#');\n          if (hash > -1){\n            newVal = newVal.substr(hash + 1);\n          }\n          watcher = function watchRegex() {\n            var regexp = new RegExp('^' + newVal + '$', ['i']);\n            modelSetter($scope, regexp.test($location.path()));\n          };\n          watcher();\n        }\n\n        switch (useProperty) {\n          case 'uiRoute':\n            // if uiRoute={{}} this will be undefined, otherwise it will have a value and $observe() never gets triggered\n            if (attrs.uiRoute){\n              regexWatcher(attrs.uiRoute);\n            }else{\n              attrs.$observe('uiRoute', regexWatcher);\n            }\n            break;\n          case 'ngHref':\n            // Setup watcher() every time ngHref changes\n            if (attrs.ngHref){\n              staticWatcher(attrs.ngHref);\n            }else{\n              attrs.$observe('ngHref', staticWatcher);\n            }\n            break;\n          case 'href':\n            // Setup watcher()\n            staticWatcher(attrs.href);\n        }\n\n        $scope.$on('$routeChangeSuccess', function(){\n          watcher();\n        });\n\n        //Added for compatibility with ui-router\n        $scope.$on('$stateChangeSuccess', function(){\n          watcher();\n        });\n      };\n    }\n  };\n}]);\n\nangular.module('ui.scroll.jqlite', ['ui.scroll']).service('jqLiteExtras', [\n  '$log', '$window', function(console, window) {\n    'use strict';\n\n    return {\n      registerFor: function(element) {\n        var convertToPx, css, getMeasurements, getStyle, getWidthHeight, isWindow, scrollTo;\n        css = angular.element.prototype.css;\n        element.prototype.css = function(name, value) {\n          var elem, self;\n          self = this;\n          elem = self[0];\n          if (!(!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style)) {\n            return css.call(self, name, value);\n          }\n        };\n        isWindow = function(obj) {\n          return obj && obj.document && obj.location && obj.alert && obj.setInterval;\n        };\n        scrollTo = function(self, direction, value) {\n          var elem, method, preserve, prop, _ref;\n          elem = self[0];\n          _ref = {\n            top: ['scrollTop', 'pageYOffset', 'scrollLeft'],\n            left: ['scrollLeft', 'pageXOffset', 'scrollTop']\n          }[direction], method = _ref[0], prop = _ref[1], preserve = _ref[2];\n          if (isWindow(elem)) {\n            if (angular.isDefined(value)) {\n              return elem.scrollTo(self[preserve].call(self), value);\n            } else {\n              if (prop in elem) {\n                return elem[prop];\n              } else {\n                return elem.document.documentElement[method];\n              }\n            }\n          } else {\n            if (angular.isDefined(value)) {\n              return elem[method] = value;\n            } else {\n              return elem[method];\n            }\n          }\n        };\n        if (window.getComputedStyle) {\n          getStyle = function(elem) {\n            return window.getComputedStyle(elem, null);\n          };\n          convertToPx = function(elem, value) {\n            return parseFloat(value);\n          };\n        } else {\n          getStyle = function(elem) {\n            return elem.currentStyle;\n          };\n          convertToPx = function(elem, value) {\n            var core_pnum, left, result, rnumnonpx, rs, rsLeft, style;\n            core_pnum = /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source;\n            rnumnonpx = new RegExp('^(' + core_pnum + ')(?!px)[a-z%]+$', 'i');\n            if (!rnumnonpx.test(value)) {\n              return parseFloat(value);\n            } else {\n              style = elem.style;\n              left = style.left;\n              rs = elem.runtimeStyle;\n              rsLeft = rs && rs.left;\n              if (rs) {\n                rs.left = style.left;\n              }\n              style.left = value;\n              result = style.pixelLeft;\n              style.left = left;\n              if (rsLeft) {\n                rs.left = rsLeft;\n              }\n              return result;\n            }\n          };\n        }\n        getMeasurements = function(elem, measure) {\n          var base, borderA, borderB, computedMarginA, computedMarginB, computedStyle, dirA, dirB, marginA, marginB, paddingA, paddingB, _ref;\n          if (isWindow(elem)) {\n            base = document.documentElement[{\n              height: 'clientHeight',\n              width: 'clientWidth'\n            }[measure]];\n            return {\n              base: base,\n              padding: 0,\n              border: 0,\n              margin: 0\n            };\n          }\n          _ref = {\n            width: [elem.offsetWidth, 'Left', 'Right'],\n            height: [elem.offsetHeight, 'Top', 'Bottom']\n          }[measure], base = _ref[0], dirA = _ref[1], dirB = _ref[2];\n          computedStyle = getStyle(elem);\n          paddingA = convertToPx(elem, computedStyle['padding' + dirA]) || 0;\n          paddingB = convertToPx(elem, computedStyle['padding' + dirB]) || 0;\n          borderA = convertToPx(elem, computedStyle['border' + dirA + 'Width']) || 0;\n          borderB = convertToPx(elem, computedStyle['border' + dirB + 'Width']) || 0;\n          computedMarginA = computedStyle['margin' + dirA];\n          computedMarginB = computedStyle['margin' + dirB];\n          marginA = convertToPx(elem, computedMarginA) || 0;\n          marginB = convertToPx(elem, computedMarginB) || 0;\n          return {\n            base: base,\n            padding: paddingA + paddingB,\n            border: borderA + borderB,\n            margin: marginA + marginB\n          };\n        };\n        getWidthHeight = function(elem, direction, measure) {\n          var computedStyle, measurements, result;\n          measurements = getMeasurements(elem, direction);\n          if (measurements.base > 0) {\n            return {\n              base: measurements.base - measurements.padding - measurements.border,\n              outer: measurements.base,\n              outerfull: measurements.base + measurements.margin\n            }[measure];\n          } else {\n            computedStyle = getStyle(elem);\n            result = computedStyle[direction];\n            if (result < 0 || result === null) {\n              result = elem.style[direction] || 0;\n            }\n            result = parseFloat(result) || 0;\n            return {\n              base: result - measurements.padding - measurements.border,\n              outer: result,\n              outerfull: result + measurements.padding + measurements.border + measurements.margin\n            }[measure];\n          }\n        };\n        return angular.forEach({\n          before: function(newElem) {\n            var children, elem, i, parent, self, _i, _ref;\n            self = this;\n            elem = self[0];\n            parent = self.parent();\n            children = parent.contents();\n            if (children[0] === elem) {\n              return parent.prepend(newElem);\n            } else {\n              for (i = _i = 1, _ref = children.length - 1; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {\n                if (children[i] === elem) {\n                  angular.element(children[i - 1]).after(newElem);\n                  return;\n                }\n              }\n              throw new Error('invalid DOM structure ' + elem.outerHTML);\n            }\n          },\n          height: function(value) {\n            var self;\n            self = this;\n            if (angular.isDefined(value)) {\n              if (angular.isNumber(value)) {\n                value = value + 'px';\n              }\n              return css.call(self, 'height', value);\n            } else {\n              return getWidthHeight(this[0], 'height', 'base');\n            }\n          },\n          outerHeight: function(option) {\n            return getWidthHeight(this[0], 'height', option ? 'outerfull' : 'outer');\n          },\n          /*\n          UIScroller no longer relies on jQuery method offset. The jQLite implementation of the method\n          is kept here just for the reference. Also the offset setter method was never implemented\n          */\n\n          offset: function(value) {\n            var box, doc, docElem, elem, self, win;\n            self = this;\n            if (arguments.length) {\n              if (value === void 0) {\n                return self;\n              } else {\n                throw new Error('offset setter method is not implemented');\n              }\n            }\n            box = {\n              top: 0,\n              left: 0\n            };\n            elem = self[0];\n            doc = elem && elem.ownerDocument;\n            if (!doc) {\n              return;\n            }\n            docElem = doc.documentElement;\n            if (elem.getBoundingClientRect != null) {\n              box = elem.getBoundingClientRect();\n            }\n            win = doc.defaultView || doc.parentWindow;\n            return {\n              top: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),\n              left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)\n            };\n          },\n          scrollTop: function(value) {\n            return scrollTo(this, 'top', value);\n          },\n          scrollLeft: function(value) {\n            return scrollTo(this, 'left', value);\n          }\n        }, function(value, key) {\n          if (!element.prototype[key]) {\n            return element.prototype[key] = value;\n          }\n        });\n      }\n    };\n  }\n]).run([\n  '$log', '$window', 'jqLiteExtras', function(console, window, jqLiteExtras) {\n    'use strict';\n\n    if (!window.jQuery) {\n      return jqLiteExtras.registerFor(angular.element);\n    }\n  }\n]);\n\n/*\n//# sourceURL=src/scripts/ui-scroll-jqlite.js\n*/\n\n\n/*\n globals: angular, window\n\n List of used element methods available in JQuery but not in JQuery Lite\n\n element.before(elem)\n element.height()\n element.outerHeight(true)\n element.height(value) = only for Top/Bottom padding elements\n element.scrollTop()\n element.scrollTop(value)\n */\nangular.module('ui.scroll', []).directive('uiScrollViewport', [\n\t'$log', function() {\n\t\t'use strict';\n\n\t\treturn {\n\t\t\tcontroller: [\n\t\t\t\t'$scope', '$element', function(scope, element) {\n\t\t\t\t\tthis.viewport = element;\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t}\n]).directive('uiScroll', [\n\t'$log', '$injector', '$rootScope', '$timeout', function(console, $injector, $rootScope, $timeout) {\n\t\t'use strict';\n\n\t\treturn {\n\t\t\trequire: ['?^uiScrollViewport'],\n\t\t\ttransclude: 'element',\n\t\t\tpriority: 1000,\n\t\t\tterminal: true,\n\t\t\tcompile: function(elementTemplate, attr, linker) {\n\t\t\t\treturn function($scope, element, $attr, controllers) {\n\t\t\t\t\tvar adapter, adapterOnScope, adjustBuffer, adjustRowHeight, applyUpdate, bof, bottomVisiblePos, buffer, bufferPadding, bufferSize, builder, clipBottom, clipTop, datasource, datasourceName, doAdjustment, doDelete, doInsert, doUpdate, enqueueFetch, eof, eventListener, fetch, finalize, first, getValueChain, hideElementBeforeAppend, insert, isDatasourceValid, itemName, loading, log, match, next, pending, reload, removeFromBuffer, resizeAndScrollHandler, ridActual, scrollHeight, setValueChain, shouldLoadBottom, shouldLoadTop, showElementAfterRender, topVisible, topVisiblePos, viewport, viewportScope, wheelHandler;\n\t\t\t\t\tlog = console.debug || console.log;\n\t\t\t\t\tmatch = $attr.uiScroll.match(/^\\s*(\\w+)\\s+in\\s+([\\w\\.]+)\\s*$/);\n\t\t\t\t\tif (!match) {\n\t\t\t\t\t\tthrow new Error('Expected uiScroll in form of \\'_item_ in _datasource_\\' but got \\'' + $attr.uiScroll + '\\'');\n\t\t\t\t\t}\n\t\t\t\t\titemName = match[1];\n\t\t\t\t\tdatasourceName = match[2];\n\t\t\t\t\tgetValueChain = function(targetScope, target) {\n\t\t\t\t\t\tvar chain;\n\t\t\t\t\t\tif (!targetScope) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tchain = target.match(/^([\\w]+)\\.(.+)$/);\n\t\t\t\t\t\tif (!chain || chain.length !== 3) {\n\t\t\t\t\t\t\treturn targetScope[target];\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn getValueChain(targetScope[chain[1]], chain[2]);\n\t\t\t\t\t};\n\t\t\t\t\tsetValueChain = function(targetScope, target, value, doNotSet) {\n\t\t\t\t\t\tvar chain;\n\t\t\t\t\t\tif (!targetScope || !target) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!(chain = target.match(/^([\\w]+)\\.(.+)$/))) {\n\t\t\t\t\t\t\tif (target.indexOf('.') !== -1) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!chain || chain.length !== 3) {\n\t\t\t\t\t\t\tif (!angular.isObject(targetScope[target]) && !doNotSet) {\n\t\t\t\t\t\t\t\treturn targetScope[target] = value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn targetScope[target] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!angular.isObject(targetScope[chain[1]]) && !doNotSet) {\n\t\t\t\t\t\t\ttargetScope[chain[1]] = {};\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn setValueChain(targetScope[chain[1]], chain[2], value, doNotSet);\n\t\t\t\t\t};\n\t\t\t\t\tdatasource = getValueChain($scope, datasourceName);\n\t\t\t\t\tisDatasourceValid = function() {\n\t\t\t\t\t\treturn angular.isObject(datasource) && typeof datasource.get === 'function';\n\t\t\t\t\t};\n\t\t\t\t\tif (!isDatasourceValid()) {\n\t\t\t\t\t\tdatasource = $injector.get(datasourceName);\n\t\t\t\t\t\tif (!isDatasourceValid()) {\n\t\t\t\t\t\t\tthrow new Error(datasourceName + ' is not a valid datasource');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbufferSize = Math.max(3, +$attr.bufferSize || 10);\n\t\t\t\t\tbufferPadding = function() {\n\t\t\t\t\t\treturn viewport.outerHeight() * Math.max(0.1, +$attr.padding || 0.1);\n\t\t\t\t\t};\n\t\t\t\t\tscrollHeight = function(elem) {\n\t\t\t\t\t\tvar ref;\n\t\t\t\t\t\treturn (ref = elem[0].scrollHeight) != null ? ref : elem[0].document.documentElement.scrollHeight;\n\t\t\t\t\t};\n\t\t\t\t\tbuilder = null;\n\t\t\t\t\tlinker($scope.$new(), function(template) {\n\t\t\t\t\t\tvar bottomPadding, createPadding, padding, repeaterType, topPadding, viewport;\n\t\t\t\t\t\trepeaterType = template[0].localName;\n\t\t\t\t\t\tif (repeaterType === 'dl') {\n\t\t\t\t\t\t\tthrow new Error('ui-scroll directive does not support <' + template[0].localName + '> as a repeating tag: ' + template[0].outerHTML);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (repeaterType !== 'li' && repeaterType !== 'tr') {\n\t\t\t\t\t\t\trepeaterType = 'div';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tviewport = controllers[0] && controllers[0].viewport ? controllers[0].viewport : angular.element(window);\n\t\t\t\t\t\tviewport.css({\n\t\t\t\t\t\t\t'overflow-y': 'auto',\n\t\t\t\t\t\t\t'display': 'block'\n\t\t\t\t\t\t});\n\t\t\t\t\t\tpadding = function(repeaterType) {\n\t\t\t\t\t\t\tvar div, result, table;\n\t\t\t\t\t\t\tswitch (repeaterType) {\n\t\t\t\t\t\t\t\tcase 'tr':\n\t\t\t\t\t\t\t\t\ttable = angular.element('<table><tr><td><div></div></td></tr></table>');\n\t\t\t\t\t\t\t\t\tdiv = table.find('div');\n\t\t\t\t\t\t\t\t\tresult = table.find('tr');\n\t\t\t\t\t\t\t\t\tresult.paddingHeight = function() {\n\t\t\t\t\t\t\t\t\t\treturn div.height.apply(div, arguments);\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tresult = angular.element('<' + repeaterType + '></' + repeaterType + '>');\n\t\t\t\t\t\t\t\t\tresult.paddingHeight = result.height;\n\t\t\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\tcreatePadding = function(padding, element, direction) {\n\t\t\t\t\t\t\telement[{\n\t\t\t\t\t\t\t\ttop: 'before',\n\t\t\t\t\t\t\t\tbottom: 'after'\n\t\t\t\t\t\t\t}[direction]](padding);\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tpaddingHeight: function() {\n\t\t\t\t\t\t\t\t\treturn padding.paddingHeight.apply(padding, arguments);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tinsert: function(element) {\n\t\t\t\t\t\t\t\t\treturn padding[{\n\t\t\t\t\t\t\t\t\t\ttop: 'after',\n\t\t\t\t\t\t\t\t\t\tbottom: 'before'\n\t\t\t\t\t\t\t\t\t}[direction]](element);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t};\n\t\t\t\t\t\ttopPadding = createPadding(padding(repeaterType), element, 'top');\n\t\t\t\t\t\tbottomPadding = createPadding(padding(repeaterType), element, 'bottom');\n\t\t\t\t\t\t$scope.$on('$destroy', function() {\n\t\t\t\t\t\t\treturn template.remove();\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn builder = {\n\t\t\t\t\t\t\tviewport: viewport,\n\t\t\t\t\t\t\ttopPadding: topPadding.paddingHeight,\n\t\t\t\t\t\t\tbottomPadding: bottomPadding.paddingHeight,\n\t\t\t\t\t\t\tappend: bottomPadding.insert,\n\t\t\t\t\t\t\tprepend: topPadding.insert,\n\t\t\t\t\t\t\tbottomDataPos: function() {\n\t\t\t\t\t\t\t\treturn scrollHeight(viewport) - bottomPadding.paddingHeight();\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttopDataPos: function() {\n\t\t\t\t\t\t\t\treturn topPadding.paddingHeight();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t\tviewport = builder.viewport;\n\t\t\t\t\tviewportScope = viewport.scope() || $rootScope;\n\t\t\t\t\ttopVisible = function(item) {\n\t\t\t\t\t\tadapter.topVisible = item.scope[itemName];\n\t\t\t\t\t\tadapter.topVisibleElement = item.element;\n\t\t\t\t\t\tadapter.topVisibleScope = item.scope;\n\t\t\t\t\t\tif ($attr.topVisible) {\n\t\t\t\t\t\t\tsetValueChain(viewportScope, $attr.topVisible, adapter.topVisible);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ($attr.topVisibleElement) {\n\t\t\t\t\t\t\tsetValueChain(viewportScope, $attr.topVisibleElement, adapter.topVisibleElement);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ($attr.topVisibleScope) {\n\t\t\t\t\t\t\tsetValueChain(viewportScope, $attr.topVisibleScope, adapter.topVisibleScope);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (typeof datasource.topVisible === 'function') {\n\t\t\t\t\t\t\treturn datasource.topVisible(item);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tloading = function(value) {\n\t\t\t\t\t\tadapter.isLoading = value;\n\t\t\t\t\t\tif ($attr.isLoading) {\n\t\t\t\t\t\t\tsetValueChain($scope, $attr.isLoading, value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (typeof datasource.loading === 'function') {\n\t\t\t\t\t\t\treturn datasource.loading(value);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tridActual = 0;\n\t\t\t\t\tfirst = 1;\n\t\t\t\t\tnext = 1;\n\t\t\t\t\tbuffer = [];\n\t\t\t\t\tpending = [];\n\t\t\t\t\teof = false;\n\t\t\t\t\tbof = false;\n\t\t\t\t\tremoveFromBuffer = function(start, stop) {\n\t\t\t\t\t\tvar i, j, ref, ref1;\n\t\t\t\t\t\tfor (i = j = ref = start, ref1 = stop; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {\n\t\t\t\t\t\t\tbuffer[i].scope.$destroy();\n\t\t\t\t\t\t\tbuffer[i].element.remove();\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn buffer.splice(start, stop - start);\n\t\t\t\t\t};\n\t\t\t\t\treload = function() {\n\t\t\t\t\t\tridActual++;\n\t\t\t\t\t\tfirst = 1;\n\t\t\t\t\t\tnext = 1;\n\t\t\t\t\t\tremoveFromBuffer(0, buffer.length);\n\t\t\t\t\t\tbuilder.topPadding(0);\n\t\t\t\t\t\tbuilder.bottomPadding(0);\n\t\t\t\t\t\tpending = [];\n\t\t\t\t\t\teof = false;\n\t\t\t\t\t\tbof = false;\n\t\t\t\t\t\treturn adjustBuffer(ridActual);\n\t\t\t\t\t};\n\t\t\t\t\tbottomVisiblePos = function() {\n\t\t\t\t\t\treturn viewport.scrollTop() + viewport.outerHeight();\n\t\t\t\t\t};\n\t\t\t\t\ttopVisiblePos = function() {\n\t\t\t\t\t\treturn viewport.scrollTop();\n\t\t\t\t\t};\n\t\t\t\t\tshouldLoadBottom = function() {\n\t\t\t\t\t\treturn !eof && builder.bottomDataPos() < bottomVisiblePos() + bufferPadding();\n\t\t\t\t\t};\n\t\t\t\t\tclipBottom = function() {\n\t\t\t\t\t\tvar bottomHeight, i, item, itemHeight, itemTop, j, newRow, overage, ref, rowTop;\n\t\t\t\t\t\tbottomHeight = 0;\n\t\t\t\t\t\toverage = 0;\n\t\t\t\t\t\tfor (i = j = ref = buffer.length - 1; ref <= 0 ? j <= 0 : j >= 0; i = ref <= 0 ? ++j : --j) {\n\t\t\t\t\t\t\titem = buffer[i];\n\t\t\t\t\t\t\titemTop = item.element.offset().top;\n\t\t\t\t\t\t\tnewRow = rowTop !== itemTop;\n\t\t\t\t\t\t\trowTop = itemTop;\n\t\t\t\t\t\t\tif (newRow) {\n\t\t\t\t\t\t\t\titemHeight = item.element.outerHeight(true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (builder.bottomDataPos() - bottomHeight - itemHeight > bottomVisiblePos() + bufferPadding()) {\n\t\t\t\t\t\t\t\tif (newRow) {\n\t\t\t\t\t\t\t\t\tbottomHeight += itemHeight;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\toverage++;\n\t\t\t\t\t\t\t\teof = false;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (newRow) {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\toverage++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (overage > 0) {\n\t\t\t\t\t\t\tbuilder.bottomPadding(builder.bottomPadding() + bottomHeight);\n\t\t\t\t\t\t\tremoveFromBuffer(buffer.length - overage, buffer.length);\n\t\t\t\t\t\t\treturn next -= overage;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tshouldLoadTop = function() {\n\t\t\t\t\t\treturn !bof && (builder.topDataPos() > topVisiblePos() - bufferPadding());\n\t\t\t\t\t};\n\t\t\t\t\tclipTop = function() {\n\t\t\t\t\t\tvar item, itemHeight, itemTop, j, len, newRow, overage, rowTop, topHeight;\n\t\t\t\t\t\ttopHeight = 0;\n\t\t\t\t\t\toverage = 0;\n\t\t\t\t\t\tfor (j = 0, len = buffer.length; j < len; j++) {\n\t\t\t\t\t\t\titem = buffer[j];\n\t\t\t\t\t\t\titemTop = item.element.offset().top;\n\t\t\t\t\t\t\tnewRow = rowTop !== itemTop;\n\t\t\t\t\t\t\trowTop = itemTop;\n\t\t\t\t\t\t\tif (newRow) {\n\t\t\t\t\t\t\t\titemHeight = item.element.outerHeight(true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (builder.topDataPos() + topHeight + itemHeight < topVisiblePos() - bufferPadding()) {\n\t\t\t\t\t\t\t\tif (newRow) {\n\t\t\t\t\t\t\t\t\ttopHeight += itemHeight;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\toverage++;\n\t\t\t\t\t\t\t\tbof = false;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (newRow) {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\toverage++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (overage > 0) {\n\t\t\t\t\t\t\tbuilder.topPadding(builder.topPadding() + topHeight);\n\t\t\t\t\t\t\tremoveFromBuffer(0, overage);\n\t\t\t\t\t\t\treturn first += overage;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tenqueueFetch = function(rid, direction) {\n\t\t\t\t\t\tif (!adapter.isLoading) {\n\t\t\t\t\t\t\tloading(true);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (pending.push(direction) === 1) {\n\t\t\t\t\t\t\treturn fetch(rid);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\thideElementBeforeAppend = function(element) {\n\t\t\t\t\t\telement.displayTemp = element.css('display');\n\t\t\t\t\t\treturn element.css('display', 'none');\n\t\t\t\t\t};\n\t\t\t\t\tshowElementAfterRender = function(element) {\n\t\t\t\t\t\tif (element.hasOwnProperty('displayTemp')) {\n\t\t\t\t\t\t\treturn element.css('display', element.displayTemp);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tinsert = function(index, item) {\n\t\t\t\t\t\tvar itemScope, toBeAppended, wrapper;\n\t\t\t\t\t\titemScope = $scope.$new();\n\t\t\t\t\t\titemScope[itemName] = item;\n\t\t\t\t\t\ttoBeAppended = index > first;\n\t\t\t\t\t\titemScope.$index = index;\n\t\t\t\t\t\tif (toBeAppended) {\n\t\t\t\t\t\t\titemScope.$index--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\twrapper = {\n\t\t\t\t\t\t\tscope: itemScope\n\t\t\t\t\t\t};\n\t\t\t\t\t\tlinker(itemScope, function(clone) {\n\t\t\t\t\t\t\twrapper.element = clone;\n\t\t\t\t\t\t\tif (toBeAppended) {\n\t\t\t\t\t\t\t\tif (index === next) {\n\t\t\t\t\t\t\t\t\thideElementBeforeAppend(clone);\n\t\t\t\t\t\t\t\t\tbuilder.append(clone);\n\t\t\t\t\t\t\t\t\treturn buffer.push(wrapper);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tbuffer[index - first].element.after(clone);\n\t\t\t\t\t\t\t\t\treturn buffer.splice(index - first + 1, 0, wrapper);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\thideElementBeforeAppend(clone);\n\t\t\t\t\t\t\t\tbuilder.prepend(clone);\n\t\t\t\t\t\t\t\treturn buffer.unshift(wrapper);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tappended: toBeAppended,\n\t\t\t\t\t\t\twrapper: wrapper\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t\tadjustRowHeight = function(appended, wrapper) {\n\t\t\t\t\t\tvar newHeight;\n\t\t\t\t\t\tif (appended) {\n\t\t\t\t\t\t\treturn builder.bottomPadding(Math.max(0, builder.bottomPadding() - wrapper.element.outerHeight(true)));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnewHeight = builder.topPadding() - wrapper.element.outerHeight(true);\n\t\t\t\t\t\t\tif (newHeight >= 0) {\n\t\t\t\t\t\t\t\treturn builder.topPadding(newHeight);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn viewport.scrollTop(viewport.scrollTop() + wrapper.element.outerHeight(true));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tdoAdjustment = function(rid, finalize) {\n\t\t\t\t\t\tvar item, itemHeight, itemTop, j, len, newRow, results, rowTop, topHeight;\n\t\t\t\t\t\tif (shouldLoadBottom()) {\n\t\t\t\t\t\t\tenqueueFetch(rid, true);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (shouldLoadTop()) {\n\t\t\t\t\t\t\t\tenqueueFetch(rid, false);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (finalize) {\n\t\t\t\t\t\t\tfinalize(rid);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (pending.length === 0) {\n\t\t\t\t\t\t\ttopHeight = 0;\n\t\t\t\t\t\t\tresults = [];\n\t\t\t\t\t\t\tfor (j = 0, len = buffer.length; j < len; j++) {\n\t\t\t\t\t\t\t\titem = buffer[j];\n\t\t\t\t\t\t\t\titemTop = item.element.offset().top;\n\t\t\t\t\t\t\t\tnewRow = rowTop !== itemTop;\n\t\t\t\t\t\t\t\trowTop = itemTop;\n\t\t\t\t\t\t\t\tif (newRow) {\n\t\t\t\t\t\t\t\t\titemHeight = item.element.outerHeight(true);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (newRow && (builder.topDataPos() + topHeight + itemHeight < topVisiblePos())) {\n\t\t\t\t\t\t\t\t\tresults.push(topHeight += itemHeight);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tif (newRow) {\n\t\t\t\t\t\t\t\t\t\ttopVisible(item);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tadjustBuffer = function(rid, newItems, finalize) {\n\t\t\t\t\t\tif (newItems && newItems.length) {\n\t\t\t\t\t\t\treturn $timeout(function() {\n\t\t\t\t\t\t\t\tvar elt, itemTop, j, k, len, len1, row, rowTop, rows;\n\t\t\t\t\t\t\t\trows = [];\n\t\t\t\t\t\t\t\tfor (j = 0, len = newItems.length; j < len; j++) {\n\t\t\t\t\t\t\t\t\trow = newItems[j];\n\t\t\t\t\t\t\t\t\telt = row.wrapper.element;\n\t\t\t\t\t\t\t\t\tshowElementAfterRender(elt);\n\t\t\t\t\t\t\t\t\titemTop = elt.offset().top;\n\t\t\t\t\t\t\t\t\tif (rowTop !== itemTop) {\n\t\t\t\t\t\t\t\t\t\trows.push(row);\n\t\t\t\t\t\t\t\t\t\trowTop = itemTop;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor (k = 0, len1 = rows.length; k < len1; k++) {\n\t\t\t\t\t\t\t\t\trow = rows[k];\n\t\t\t\t\t\t\t\t\tadjustRowHeight(row.appended, row.wrapper);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn doAdjustment(rid, finalize);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn doAdjustment(rid, finalize);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tfinalize = function(rid, newItems) {\n\t\t\t\t\t\treturn adjustBuffer(rid, newItems, function() {\n\t\t\t\t\t\t\tpending.shift();\n\t\t\t\t\t\t\tif (pending.length === 0) {\n\t\t\t\t\t\t\t\treturn loading(false);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn fetch(rid);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\t\t\t\t\tfetch = function(rid) {\n\t\t\t\t\t\tvar direction;\n\t\t\t\t\t\tdirection = pending[0];\n\t\t\t\t\t\tif (direction) {\n\t\t\t\t\t\t\tif (buffer.length && !shouldLoadBottom()) {\n\t\t\t\t\t\t\t\treturn finalize(rid);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn datasource.get(next, bufferSize, function(result) {\n\t\t\t\t\t\t\t\t\tvar item, j, len, newItems;\n\t\t\t\t\t\t\t\t\tif ((rid && rid !== ridActual) || $scope.$$destroyed) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tnewItems = [];\n\t\t\t\t\t\t\t\t\tif (result.length < bufferSize) {\n\t\t\t\t\t\t\t\t\t\teof = true;\n\t\t\t\t\t\t\t\t\t\tbuilder.bottomPadding(0);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (result.length > 0) {\n\t\t\t\t\t\t\t\t\t\tclipTop();\n\t\t\t\t\t\t\t\t\t\tfor (j = 0, len = result.length; j < len; j++) {\n\t\t\t\t\t\t\t\t\t\t\titem = result[j];\n\t\t\t\t\t\t\t\t\t\t\tnewItems.push(insert(++next, item));\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn finalize(rid, newItems);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (buffer.length && !shouldLoadTop()) {\n\t\t\t\t\t\t\t\treturn finalize(rid);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn datasource.get(first - bufferSize, bufferSize, function(result) {\n\t\t\t\t\t\t\t\t\tvar i, j, newItems, ref;\n\t\t\t\t\t\t\t\t\tif ((rid && rid !== ridActual) || $scope.$$destroyed) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tnewItems = [];\n\t\t\t\t\t\t\t\t\tif (result.length < bufferSize) {\n\t\t\t\t\t\t\t\t\t\tbof = true;\n\t\t\t\t\t\t\t\t\t\tbuilder.topPadding(0);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (result.length > 0) {\n\t\t\t\t\t\t\t\t\t\tif (buffer.length) {\n\t\t\t\t\t\t\t\t\t\t\tclipBottom();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tfor (i = j = ref = result.length - 1; ref <= 0 ? j <= 0 : j >= 0; i = ref <= 0 ? ++j : --j) {\n\t\t\t\t\t\t\t\t\t\t\tnewItems.unshift(insert(--first, result[i]));\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn finalize(rid, newItems);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tresizeAndScrollHandler = function() {\n\t\t\t\t\t\tif (!$rootScope.$$phase && !adapter.isLoading) {\n\t\t\t\t\t\t\tadjustBuffer();\n\t\t\t\t\t\t\treturn $scope.$apply();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\twheelHandler = function(event) {\n\t\t\t\t\t\tvar scrollTop, yMax;\n\t\t\t\t\t\tscrollTop = viewport[0].scrollTop;\n\t\t\t\t\t\tyMax = viewport[0].scrollHeight - viewport[0].clientHeight;\n\t\t\t\t\t\tif ((scrollTop === 0 && !bof) || (scrollTop === yMax && !eof)) {\n\t\t\t\t\t\t\treturn event.preventDefault();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tviewport.bind('resize', resizeAndScrollHandler);\n\t\t\t\t\tviewport.bind('scroll', resizeAndScrollHandler);\n\t\t\t\t\tviewport.bind('mousewheel', wheelHandler);\n\t\t\t\t\t$scope.$watch(datasource.revision, reload);\n\t\t\t\t\tif (datasource.scope) {\n\t\t\t\t\t\teventListener = datasource.scope.$new();\n\t\t\t\t\t} else {\n\t\t\t\t\t\teventListener = $scope.$new();\n\t\t\t\t\t}\n\t\t\t\t\t$scope.$on('$destroy', function() {\n\t\t\t\t\t\tvar item, j, len;\n\t\t\t\t\t\tfor (j = 0, len = buffer.length; j < len; j++) {\n\t\t\t\t\t\t\titem = buffer[j];\n\t\t\t\t\t\t\titem.scope.$destroy();\n\t\t\t\t\t\t\titem.element.remove();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tviewport.unbind('resize', resizeAndScrollHandler);\n\t\t\t\t\t\tviewport.unbind('scroll', resizeAndScrollHandler);\n\t\t\t\t\t\treturn viewport.unbind('mousewheel', wheelHandler);\n\t\t\t\t\t});\n\t\t\t\t\tadapter = {};\n\t\t\t\t\tadapter.isLoading = false;\n\t\t\t\t\tapplyUpdate = function(wrapper, newItems) {\n\t\t\t\t\t\tvar i, inserted, item, j, k, l, len, len1, len2, ndx, newItem, oldItemNdx;\n\t\t\t\t\t\tinserted = [];\n\t\t\t\t\t\tif (angular.isArray(newItems)) {\n\t\t\t\t\t\t\tif (newItems.length) {\n\t\t\t\t\t\t\t\tif (newItems.length === 1 && newItems[0] === wrapper.scope[itemName]) {\n\t\t\t\t\t\t\t\t\treturn inserted;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tndx = wrapper.scope.$index;\n\t\t\t\t\t\t\t\t\tif (ndx > first) {\n\t\t\t\t\t\t\t\t\t\toldItemNdx = ndx - first;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\toldItemNdx = 1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor (i = j = 0, len = newItems.length; j < len; i = ++j) {\n\t\t\t\t\t\t\t\t\t\tnewItem = newItems[i];\n\t\t\t\t\t\t\t\t\t\tinserted.push(insert(ndx + i, newItem));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tremoveFromBuffer(oldItemNdx, oldItemNdx + 1);\n\t\t\t\t\t\t\t\t\tfor (i = k = 0, len1 = buffer.length; k < len1; i = ++k) {\n\t\t\t\t\t\t\t\t\t\titem = buffer[i];\n\t\t\t\t\t\t\t\t\t\titem.scope.$index = first + i;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tremoveFromBuffer(wrapper.scope.$index - first, wrapper.scope.$index - first + 1);\n\t\t\t\t\t\t\t\tnext--;\n\t\t\t\t\t\t\t\tfor (i = l = 0, len2 = buffer.length; l < len2; i = ++l) {\n\t\t\t\t\t\t\t\t\titem = buffer[i];\n\t\t\t\t\t\t\t\t\titem.scope.$index = first + i;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn inserted;\n\t\t\t\t\t};\n\t\t\t\t\tadapter.applyUpdates = function(arg1, arg2) {\n\t\t\t\t\t\tvar inserted, j, len, ref, ref1, wrapper;\n\t\t\t\t\t\tinserted = [];\n\t\t\t\t\t\tridActual++;\n\t\t\t\t\t\tif (angular.isFunction(arg1)) {\n\t\t\t\t\t\t\tref = buffer.slice(0);\n\t\t\t\t\t\t\tfor (j = 0, len = ref.length; j < len; j++) {\n\t\t\t\t\t\t\t\twrapper = ref[j];\n\t\t\t\t\t\t\t\tinserted = inserted.concat(inserted, applyUpdate(wrapper, arg1(wrapper.scope[itemName], wrapper.scope, wrapper.element)));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (arg1 % 1 === 0) {\n\t\t\t\t\t\t\t\tif ((0 <= (ref1 = arg1 - first) && ref1 < buffer.length)) {\n\t\t\t\t\t\t\t\t\tinserted = applyUpdate(buffer[arg1 - first], arg2);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthrow new Error('applyUpdates - ' + arg1 + ' is not a valid index or outside of range');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn adjustBuffer(ridActual, inserted);\n\t\t\t\t\t};\n\t\t\t\t\tif ($attr.adapter) {\n\t\t\t\t\t\tadapterOnScope = getValueChain($scope, $attr.adapter);\n\t\t\t\t\t\tif (!adapterOnScope) {\n\t\t\t\t\t\t\tsetValueChain($scope, $attr.adapter, {});\n\t\t\t\t\t\t\tadapterOnScope = getValueChain($scope, $attr.adapter);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tangular.extend(adapterOnScope, adapter);\n\t\t\t\t\t\tadapter = adapterOnScope;\n\t\t\t\t\t}\n\t\t\t\t\tdoUpdate = function(locator, newItem) {\n\t\t\t\t\t\tvar fn, j, len, ref, wrapper;\n\t\t\t\t\t\tif (angular.isFunction(locator)) {\n\t\t\t\t\t\t\tfn = function(wrapper) {\n\t\t\t\t\t\t\t\treturn locator(wrapper.scope);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tfor (j = 0, len = buffer.length; j < len; j++) {\n\t\t\t\t\t\t\t\twrapper = buffer[j];\n\t\t\t\t\t\t\t\tfn(wrapper);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif ((0 <= (ref = locator - first - 1) && ref < buffer.length)) {\n\t\t\t\t\t\t\t\tbuffer[locator - first - 1].scope[itemName] = newItem;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t};\n\t\t\t\t\tdoDelete = function(locator) {\n\t\t\t\t\t\tvar fn, i, item, j, k, l, len, len1, len2, ref, temp, wrapper;\n\t\t\t\t\t\tif (angular.isFunction(locator)) {\n\t\t\t\t\t\t\ttemp = [];\n\t\t\t\t\t\t\tfor (j = 0, len = buffer.length; j < len; j++) {\n\t\t\t\t\t\t\t\titem = buffer[j];\n\t\t\t\t\t\t\t\ttemp.unshift(item);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfn = function(wrapper) {\n\t\t\t\t\t\t\t\tif (locator(wrapper.scope)) {\n\t\t\t\t\t\t\t\t\tremoveFromBuffer(temp.length - 1 - i, temp.length - i);\n\t\t\t\t\t\t\t\t\treturn next--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tfor (i = k = 0, len1 = temp.length; k < len1; i = ++k) {\n\t\t\t\t\t\t\t\twrapper = temp[i];\n\t\t\t\t\t\t\t\tfn(wrapper);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif ((0 <= (ref = locator - first - 1) && ref < buffer.length)) {\n\t\t\t\t\t\t\t\tremoveFromBuffer(locator - first - 1, locator - first);\n\t\t\t\t\t\t\t\tnext--;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (i = l = 0, len2 = buffer.length; l < len2; i = ++l) {\n\t\t\t\t\t\t\titem = buffer[i];\n\t\t\t\t\t\t\titem.scope.$index = first + i;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn adjustBuffer();\n\t\t\t\t\t};\n\t\t\t\t\tdoInsert = function(locator, item) {\n\t\t\t\t\t\tvar i, inserted, j, len, ref;\n\t\t\t\t\t\tinserted = [];\n\t\t\t\t\t\tif (angular.isFunction(locator)) {\n\t\t\t\t\t\t\tthrow new Error('not implemented - Insert with locator function');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif ((0 <= (ref = locator - first - 1) && ref < buffer.length)) {\n\t\t\t\t\t\t\t\tinserted.push(insert(locator, item));\n\t\t\t\t\t\t\t\tnext++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (i = j = 0, len = buffer.length; j < len; i = ++j) {\n\t\t\t\t\t\t\titem = buffer[i];\n\t\t\t\t\t\t\titem.scope.$index = first + i;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn adjustBuffer(null, inserted);\n\t\t\t\t\t};\n\t\t\t\t\teventListener.$on('insert.item', function(event, locator, item) {\n\t\t\t\t\t\treturn doInsert(locator, item);\n\t\t\t\t\t});\n\t\t\t\t\teventListener.$on('update.items', function(event, locator, newItem) {\n\t\t\t\t\t\treturn doUpdate(locator, newItem);\n\t\t\t\t\t});\n\t\t\t\t\treturn eventListener.$on('delete.items', function(event, locator) {\n\t\t\t\t\t\treturn doDelete(locator);\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t}\n]);\n\n\n/*\n //# sourceURL=src/scripts/ui-scroll.js\n */\n\n/**\n * Adds a 'ui-scrollfix' class to the element when the page scrolls past it's position.\n * @param [offset] {int} optional Y-offset to override the detected offset.\n *   Takes 300 (absolute) or -300 or +300 (relative to detected)\n */\nangular.module('ui.scrollfix',[]).directive('uiScrollfix', ['$window', function ($window) {\n  'use strict';\n\n  function getWindowScrollTop() {\n    if (angular.isDefined($window.pageYOffset)) {\n      return $window.pageYOffset;\n    } else {\n      var iebody = (document.compatMode && document.compatMode !== 'BackCompat') ? document.documentElement : document.body;\n      return iebody.scrollTop;\n    }\n  }\n  return {\n    require: '^?uiScrollfixTarget',\n    link: function (scope, elm, attrs, uiScrollfixTarget) {\n      var absolute = true,\n          shift = 0,\n          fixLimit,\n          $target = uiScrollfixTarget && uiScrollfixTarget.$element || angular.element($window);\n\n      if (!attrs.uiScrollfix) {\n          absolute = false;\n      } else if (typeof(attrs.uiScrollfix) === 'string') {\n        // charAt is generally faster than indexOf: http://jsperf.com/indexof-vs-charat\n        if (attrs.uiScrollfix.charAt(0) === '-') {\n          absolute = false;\n          shift = - parseFloat(attrs.uiScrollfix.substr(1));\n        } else if (attrs.uiScrollfix.charAt(0) === '+') {\n          absolute = false;\n          shift = parseFloat(attrs.uiScrollfix.substr(1));\n        }\n      }\n\n      fixLimit = absolute ? attrs.uiScrollfix : elm[0].offsetTop + shift;\n\n      function onScroll() {\n\n        var limit = absolute ? attrs.uiScrollfix : elm[0].offsetTop + shift;\n\n        // if pageYOffset is defined use it, otherwise use other crap for IE\n        var offset = uiScrollfixTarget ? $target[0].scrollTop : getWindowScrollTop();\n        if (!elm.hasClass('ui-scrollfix') && offset > limit) {\n          elm.addClass('ui-scrollfix');\n          fixLimit = limit;\n        } else if (elm.hasClass('ui-scrollfix') && offset < fixLimit) {\n          elm.removeClass('ui-scrollfix');\n        }\n      }\n\n      $target.on('scroll', onScroll);\n\n      // Unbind scroll event handler when directive is removed\n      scope.$on('$destroy', function() {\n        $target.off('scroll', onScroll);\n      });\n    }\n  };\n}]).directive('uiScrollfixTarget', [function () {\n  'use strict';\n  return {\n    controller: ['$element', function($element) {\n      this.$element = $element;\n    }]\n  };\n}]);\n\n/**\n * uiShow Directive\n *\n * Adds a 'ui-show' class to the element instead of display:block\n * Created to allow tighter control  of CSS without bulkier directives\n *\n * @param expression {boolean} evaluated expression to determine if the class should be added\n */\nangular.module('ui.showhide',[])\n.directive('uiShow', [function () {\n  'use strict';\n\n  return function (scope, elm, attrs) {\n    scope.$watch(attrs.uiShow, function (newVal) {\n      if (newVal) {\n        elm.addClass('ui-show');\n      } else {\n        elm.removeClass('ui-show');\n      }\n    });\n  };\n}])\n\n/**\n * uiHide Directive\n *\n * Adds a 'ui-hide' class to the element instead of display:block\n * Created to allow tighter control  of CSS without bulkier directives\n *\n * @param expression {boolean} evaluated expression to determine if the class should be added\n */\n.directive('uiHide', [function () {\n  'use strict';\n\n  return function (scope, elm, attrs) {\n    scope.$watch(attrs.uiHide, function (newVal) {\n      if (newVal) {\n        elm.addClass('ui-hide');\n      } else {\n        elm.removeClass('ui-hide');\n      }\n    });\n  };\n}])\n\n/**\n * uiToggle Directive\n *\n * Adds a class 'ui-show' if true, and a 'ui-hide' if false to the element instead of display:block/display:none\n * Created to allow tighter control  of CSS without bulkier directives. This also allows you to override the\n * default visibility of the element using either class.\n *\n * @param expression {boolean} evaluated expression to determine if the class should be added\n */\n.directive('uiToggle', [function () {\n  'use strict';\n\n  return function (scope, elm, attrs) {\n    scope.$watch(attrs.uiToggle, function (newVal) {\n      if (newVal) {\n        elm.removeClass('ui-hide').addClass('ui-show');\n      } else {\n        elm.removeClass('ui-show').addClass('ui-hide');\n      }\n    });\n  };\n}]);\n\n/**\n * Filters out all duplicate items from an array by checking the specified key\n * @param [key] {string} the name of the attribute of each object to compare for uniqueness\n if the key is empty, the entire object will be compared\n if the key === false then no filtering will be performed\n * @return {array}\n */\nangular.module('ui.unique',[]).filter('unique', ['$parse', function ($parse) {\n  'use strict';\n\n  return function (items, filterOn) {\n\n    if (filterOn === false) {\n      return items;\n    }\n\n    if ((filterOn || angular.isUndefined(filterOn)) && angular.isArray(items)) {\n      var newItems = [],\n        get = angular.isString(filterOn) ? $parse(filterOn) : function (item) { return item; };\n\n      var extractValueToCompare = function (item) {\n        return angular.isObject(item) ? get(item) : item;\n      };\n\n      angular.forEach(items, function (item) {\n        var isDuplicate = false;\n\n        for (var i = 0; i < newItems.length; i++) {\n          if (angular.equals(extractValueToCompare(newItems[i]), extractValueToCompare(item))) {\n            isDuplicate = true;\n            break;\n          }\n        }\n        if (!isDuplicate) {\n          newItems.push(item);\n        }\n\n      });\n      items = newItems;\n    }\n    return items;\n  };\n}]);\n\n/*\n * Author: Remy Alain Ticona Carbajal http://realtica.org\n * Description: The main objective of ng-uploader is to have a user control,\n * clean, simple, customizable, and above all very easy to implement.\n * Licence: MIT\n */\n\nangular.module('ui.uploader', []).service('uiUploader', uiUploader);\n\nuiUploader.$inject = ['$log'];\n\nfunction uiUploader($log) {\n    'use strict';\n\n    /*jshint validthis: true */\n    var self = this;\n    self.files = [];\n    self.options = {};\n    self.activeUploads = 0;\n    self.uploadedFiles = 0;\n    $log.info('uiUploader loaded');\n    \n    function addFiles(files) {\n        for (var i = 0; i < files.length; i++) {\n            self.files.push(files[i]);\n        }\n    }\n\n    function getFiles() {\n        return self.files;\n    }\n\n    function startUpload(options) {\n        self.options = options;\n        for (var i = 0; i < self.files.length; i++) {\n            if (self.activeUploads == self.options.concurrency) {\n                break;\n            }\n            if (self.files[i].active)\n                continue;\n            ajaxUpload(self.files[i], self.options.url, self.options.data);\n        }\n    }\n    \n    function removeFile(file){\n        self.files.splice(self.files.indexOf(file),1);\n    }\n    \n    function removeAll(){\n        self.files.splice(0,self.files.length);\n    }\n    \n    return {\n        addFiles: addFiles,\n        getFiles: getFiles,\n        files: self.files,\n        startUpload: startUpload,\n        removeFile: removeFile,\n        removeAll:removeAll\n    };\n    \n    function getHumanSize(bytes) {\n        var sizes = ['n/a', 'bytes', 'KiB', 'MiB', 'GiB', 'TB', 'PB', 'EiB', 'ZiB', 'YiB'];\n        var i = +Math.floor(Math.log(bytes) / Math.log(1024));\n        return (bytes / Math.pow(1024, i)).toFixed(i ? 1 : 0) + ' ' + sizes[isNaN(bytes) ? 0 : i + 1];\n    }\n\n    function ajaxUpload(file, url, data) {\n        var xhr, formData, prop, key = '' || 'file';\n        data = data || {};\n        \n        self.activeUploads += 1;\n        file.active = true;\n        xhr = new window.XMLHttpRequest();\n        formData = new window.FormData();\n        xhr.open('POST', url);\n\n        // Triggered when upload starts:\n        xhr.upload.onloadstart = function() {};\n\n        // Triggered many times during upload:\n        xhr.upload.onprogress = function(event) {\n            if (!event.lengthComputable) {\n                return;\n            }\n            // Update file size because it might be bigger than reported by\n            // the fileSize:\n            //$log.info(\"progres..\");\n            //console.info(event.loaded);\n            file.loaded = event.loaded;\n            file.humanSize = getHumanSize(event.loaded);\n            self.options.onProgress(file);\n        };\n\n        // Triggered when upload is completed:\n        xhr.onload = function() {\n            self.activeUploads -= 1;\n            self.uploadedFiles += 1;\n            startUpload(self.options);\n            self.options.onCompleted(file, xhr.responseText);\n            if(self.uploadedFiles === self.files.length) {\n                self.uploadedFiles = 0;\n                self.options.onCompletedAll(self.files);\n            }\n        };\n\n        // Triggered when upload fails:\n        xhr.onerror = function() {};\n\n        // Append additional data if provided:\n        if (data) {\n            for (prop in data) {\n                if (data.hasOwnProperty(prop)) {\n                    formData.append(prop, data[prop]);\n                }\n            }\n        }\n\n        // Append file data:\n        formData.append(key, file, file.name);\n\n        // Initiate upload:\n        xhr.send(formData);\n\n        return xhr;\n    }\n\n}\n\n/**\r\n * General-purpose validator for ngModel.\r\n * angular.js comes with several built-in validation mechanism for input fields (ngRequired, ngPattern etc.) but using\r\n * an arbitrary validation function requires creation of a custom formatters and / or parsers.\r\n * The ui-validate directive makes it easy to use any function(s) defined in scope as a validator function(s).\r\n * A validator function will trigger validation on both model and input changes.\r\n *\r\n * @example <input ui-validate=\" 'myValidatorFunction($value)' \">\r\n * @example <input ui-validate=\"{ foo : '$value > anotherModel', bar : 'validateFoo($value)' }\">\r\n * @example <input ui-validate=\"{ foo : '$value > anotherModel' }\" ui-validate-watch=\" 'anotherModel' \">\r\n * @example <input ui-validate=\"{ foo : '$value > anotherModel', bar : 'validateFoo($value)' }\" ui-validate-watch=\" { foo : 'anotherModel' } \">\r\n *\r\n * @param ui-validate {string|object literal} If strings is passed it should be a scope's function to be used as a validator.\r\n * If an object literal is passed a key denotes a validation error key while a value should be a validator function.\r\n * In both cases validator function should take a value to validate as its argument and should return true/false indicating a validation result.\r\n */\r\nangular.module('ui.validate',[]).directive('uiValidate', function () {\r\n  'use strict';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    require: 'ngModel',\r\n    link: function (scope, elm, attrs, ctrl) {\r\n      var validateFn, validators = {},\r\n          validateExpr = scope.$eval(attrs.uiValidate);\r\n\r\n      if (!validateExpr){ return;}\r\n\r\n      if (angular.isString(validateExpr)) {\r\n        validateExpr = { validator: validateExpr };\r\n      }\r\n\r\n      angular.forEach(validateExpr, function (exprssn, key) {\r\n        validateFn = function (valueToValidate) {\r\n          var expression = scope.$eval(exprssn, { '$value' : valueToValidate });\r\n          if (angular.isObject(expression) && angular.isFunction(expression.then)) {\r\n            // expression is a promise\r\n            if (angular.isUndefined(ctrl.$pending)) {\r\n              ctrl.$pending = {};\r\n            }\r\n            // set pending state until promise is resolved\r\n            ctrl.$pending[key] = true;\r\n            expression.then(function(){\r\n              ctrl.$setValidity(key, true);\r\n            }, function(){\r\n              ctrl.$setValidity(key, false);\r\n            });\r\n            return valueToValidate;\r\n          } else if (expression) {\r\n            // expression is true\r\n            ctrl.$setValidity(key, true);\r\n            return valueToValidate;\r\n          } else {\r\n            // expression is false\r\n            ctrl.$setValidity(key, false);\r\n            return valueToValidate;\r\n          }\r\n        };\r\n        validators[key] = validateFn;\r\n        ctrl.$formatters.push(validateFn);\r\n        ctrl.$parsers.push(validateFn);\r\n      });\r\n\r\n      function apply_watch(watch)\r\n      {\r\n          //string - update all validators on expression change\r\n          if (angular.isString(watch))\r\n          {\r\n              scope.$watch(watch, function(){\r\n                  angular.forEach(validators, function(validatorFn){\r\n                      validatorFn(ctrl.$modelValue);\r\n                  });\r\n              });\r\n              return;\r\n          }\r\n\r\n          //array - update all validators on change of any expression\r\n          if (angular.isArray(watch))\r\n          {\r\n              angular.forEach(watch, function(expression){\r\n                  scope.$watch(expression, function()\r\n                  {\r\n                      angular.forEach(validators, function(validatorFn){\r\n                          validatorFn(ctrl.$modelValue);\r\n                      });\r\n                  });\r\n              });\r\n              return;\r\n          }\r\n\r\n          //object - update appropriate validator\r\n          if (angular.isObject(watch))\r\n          {\r\n              angular.forEach(watch, function(expression, validatorKey)\r\n              {\r\n                  //value is string - look after one expression\r\n                  if (angular.isString(expression))\r\n                  {\r\n                      scope.$watch(expression, function(){\r\n                          validators[validatorKey](ctrl.$modelValue);\r\n                      });\r\n                  }\r\n\r\n                  //value is array - look after all expressions in array\r\n                  if (angular.isArray(expression))\r\n                  {\r\n                      angular.forEach(expression, function(intExpression)\r\n                      {\r\n                          scope.$watch(intExpression, function(){\r\n                              validators[validatorKey](ctrl.$modelValue);\r\n                          });\r\n                      });\r\n                  }\r\n              });\r\n          }\r\n      }\r\n      // Support for ui-validate-watch\r\n      if (attrs.uiValidateWatch){\r\n          apply_watch( scope.$eval(attrs.uiValidateWatch) );\r\n      }\r\n    }\r\n  };\r\n});\r\n\nangular.module('ui.utils',  [\n  'ui.event',\n  'ui.format',\n  'ui.highlight',\n  'ui.include',\n  'ui.indeterminate',\n  'ui.inflector',\n  'ui.jq',\n  'ui.keypress',\n  'ui.mask',\n  'ui.reset',\n  'ui.route',\n  'ui.scrollfix',\n  'ui.scroll',\n  'ui.scroll.jqlite',\n  'ui.showhide',\n  'ui.unique',\n  'ui.validate'\n]);\n","/**\n * @license AngularJS v1.3.18\n * (c) 2010-2014 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, document, undefined) {'use strict';\n\n/**\n * @description\n *\n * This object provides a utility for producing rich Error messages within\n * Angular. It can be called as follows:\n *\n * var exampleMinErr = minErr('example');\n * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);\n *\n * The above creates an instance of minErr in the example namespace. The\n * resulting error will have a namespaced error code of example.one.  The\n * resulting error will replace {0} with the value of foo, and {1} with the\n * value of bar. The object is not restricted in the number of arguments it can\n * take.\n *\n * If fewer arguments are specified than necessary for interpolation, the extra\n * interpolation markers will be preserved in the final string.\n *\n * Since data will be parsed statically during a build step, some restrictions\n * are applied with respect to how minErr instances are created and called.\n * Instances should have names of the form namespaceMinErr for a minErr created\n * using minErr('namespace') . Error codes, namespaces and template strings\n * should all be static strings, not variables or general expressions.\n *\n * @param {string} module The namespace to use for the new minErr instance.\n * @param {function} ErrorConstructor Custom error constructor to be instantiated when returning\n *   error from returned function, for cases when a particular type of error is useful.\n * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance\n */\n\nfunction minErr(module, ErrorConstructor) {\n  ErrorConstructor = ErrorConstructor || Error;\n  return function() {\n    var code = arguments[0],\n      prefix = '[' + (module ? module + ':' : '') + code + '] ',\n      template = arguments[1],\n      templateArgs = arguments,\n\n      message, i;\n\n    message = prefix + template.replace(/\\{\\d+\\}/g, function(match) {\n      var index = +match.slice(1, -1), arg;\n\n      if (index + 2 < templateArgs.length) {\n        return toDebugString(templateArgs[index + 2]);\n      }\n      return match;\n    });\n\n    message = message + '\\nhttp://errors.angularjs.org/1.3.18/' +\n      (module ? module + '/' : '') + code;\n    for (i = 2; i < arguments.length; i++) {\n      message = message + (i == 2 ? '?' : '&') + 'p' + (i - 2) + '=' +\n        encodeURIComponent(toDebugString(arguments[i]));\n    }\n    return new ErrorConstructor(message);\n  };\n}\n\n/* We need to tell jshint what variables are being exported */\n/* global angular: true,\n  msie: true,\n  jqLite: true,\n  jQuery: true,\n  slice: true,\n  splice: true,\n  push: true,\n  toString: true,\n  ngMinErr: true,\n  angularModule: true,\n  uid: true,\n  REGEX_STRING_REGEXP: true,\n  VALIDITY_STATE_PROPERTY: true,\n\n  lowercase: true,\n  uppercase: true,\n  manualLowercase: true,\n  manualUppercase: true,\n  nodeName_: true,\n  isArrayLike: true,\n  forEach: true,\n  sortedKeys: true,\n  forEachSorted: true,\n  reverseParams: true,\n  nextUid: true,\n  setHashKey: true,\n  extend: true,\n  int: true,\n  inherit: true,\n  noop: true,\n  identity: true,\n  valueFn: true,\n  isUndefined: true,\n  isDefined: true,\n  isObject: true,\n  isString: true,\n  isNumber: true,\n  isDate: true,\n  isArray: true,\n  isFunction: true,\n  isRegExp: true,\n  isWindow: true,\n  isScope: true,\n  isFile: true,\n  isFormData: true,\n  isBlob: true,\n  isBoolean: true,\n  isPromiseLike: true,\n  trim: true,\n  escapeForRegexp: true,\n  isElement: true,\n  makeMap: true,\n  includes: true,\n  arrayRemove: true,\n  copy: true,\n  shallowCopy: true,\n  equals: true,\n  csp: true,\n  concat: true,\n  sliceArgs: true,\n  bind: true,\n  toJsonReplacer: true,\n  toJson: true,\n  fromJson: true,\n  startingTag: true,\n  tryDecodeURIComponent: true,\n  parseKeyValue: true,\n  toKeyValue: true,\n  encodeUriSegment: true,\n  encodeUriQuery: true,\n  angularInit: true,\n  bootstrap: true,\n  getTestability: true,\n  snake_case: true,\n  bindJQuery: true,\n  assertArg: true,\n  assertArgFn: true,\n  assertNotHasOwnProperty: true,\n  getter: true,\n  getBlockNodes: true,\n  hasOwnProperty: true,\n  createMap: true,\n\n  NODE_TYPE_ELEMENT: true,\n  NODE_TYPE_ATTRIBUTE: true,\n  NODE_TYPE_TEXT: true,\n  NODE_TYPE_COMMENT: true,\n  NODE_TYPE_DOCUMENT: true,\n  NODE_TYPE_DOCUMENT_FRAGMENT: true,\n*/\n\n////////////////////////////////////\n\n/**\n * @ngdoc module\n * @name ng\n * @module ng\n * @description\n *\n * # ng (core module)\n * The ng module is loaded by default when an AngularJS application is started. The module itself\n * contains the essential components for an AngularJS application to function. The table below\n * lists a high level breakdown of each of the services/factories, filters, directives and testing\n * components available within this core module.\n *\n * <div doc-module-components=\"ng\"></div>\n */\n\nvar REGEX_STRING_REGEXP = /^\\/(.+)\\/([a-z]*)$/;\n\n// The name of a form control's ValidityState property.\n// This is used so that it's possible for internal tests to create mock ValidityStates.\nvar VALIDITY_STATE_PROPERTY = 'validity';\n\n/**\n * @ngdoc function\n * @name angular.lowercase\n * @module ng\n * @kind function\n *\n * @description Converts the specified string to lowercase.\n * @param {string} string String to be converted to lowercase.\n * @returns {string} Lowercased string.\n */\nvar lowercase = function(string) {return isString(string) ? string.toLowerCase() : string;};\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * @ngdoc function\n * @name angular.uppercase\n * @module ng\n * @kind function\n *\n * @description Converts the specified string to uppercase.\n * @param {string} string String to be converted to uppercase.\n * @returns {string} Uppercased string.\n */\nvar uppercase = function(string) {return isString(string) ? string.toUpperCase() : string;};\n\n\nvar manualLowercase = function(s) {\n  /* jshint bitwise: false */\n  return isString(s)\n      ? s.replace(/[A-Z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) | 32);})\n      : s;\n};\nvar manualUppercase = function(s) {\n  /* jshint bitwise: false */\n  return isString(s)\n      ? s.replace(/[a-z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) & ~32);})\n      : s;\n};\n\n\n// String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish\n// locale, for this reason we need to detect this case and redefine lowercase/uppercase methods\n// with correct but slower alternatives.\nif ('i' !== 'I'.toLowerCase()) {\n  lowercase = manualLowercase;\n  uppercase = manualUppercase;\n}\n\n\nvar\n    msie,             // holds major version number for IE, or NaN if UA is not IE.\n    jqLite,           // delay binding since jQuery could be loaded after us.\n    jQuery,           // delay binding\n    slice             = [].slice,\n    splice            = [].splice,\n    push              = [].push,\n    toString          = Object.prototype.toString,\n    ngMinErr          = minErr('ng'),\n\n    /** @name angular */\n    angular           = window.angular || (window.angular = {}),\n    angularModule,\n    uid               = 0;\n\n/**\n * documentMode is an IE-only property\n * http://msdn.microsoft.com/en-us/library/ie/cc196988(v=vs.85).aspx\n */\nmsie = document.documentMode;\n\n\n/**\n * @private\n * @param {*} obj\n * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,\n *                   String ...)\n */\nfunction isArrayLike(obj) {\n  if (obj == null || isWindow(obj)) {\n    return false;\n  }\n\n  // Support: iOS 8.2 (not reproducible in simulator)\n  // \"length\" in obj used to prevent JIT error (gh-11508)\n  var length = \"length\" in Object(obj) && obj.length;\n\n  if (obj.nodeType === NODE_TYPE_ELEMENT && length) {\n    return true;\n  }\n\n  return isString(obj) || isArray(obj) || length === 0 ||\n         typeof length === 'number' && length > 0 && (length - 1) in obj;\n}\n\n/**\n * @ngdoc function\n * @name angular.forEach\n * @module ng\n * @kind function\n *\n * @description\n * Invokes the `iterator` function once for each item in `obj` collection, which can be either an\n * object or an array. The `iterator` function is invoked with `iterator(value, key, obj)`, where `value`\n * is the value of an object property or an array element, `key` is the object property key or\n * array element index and obj is the `obj` itself. Specifying a `context` for the function is optional.\n *\n * It is worth noting that `.forEach` does not iterate over inherited properties because it filters\n * using the `hasOwnProperty` method.\n *\n * Unlike ES262's\n * [Array.prototype.forEach](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18),\n * Providing 'undefined' or 'null' values for `obj` will not throw a TypeError, but rather just\n * return the value provided.\n *\n   ```js\n     var values = {name: 'misko', gender: 'male'};\n     var log = [];\n     angular.forEach(values, function(value, key) {\n       this.push(key + ': ' + value);\n     }, log);\n     expect(log).toEqual(['name: misko', 'gender: male']);\n   ```\n *\n * @param {Object|Array} obj Object to iterate over.\n * @param {Function} iterator Iterator function.\n * @param {Object=} context Object to become context (`this`) for the iterator function.\n * @returns {Object|Array} Reference to `obj`.\n */\n\nfunction forEach(obj, iterator, context) {\n  var key, length;\n  if (obj) {\n    if (isFunction(obj)) {\n      for (key in obj) {\n        // Need to check if hasOwnProperty exists,\n        // as on IE8 the result of querySelectorAll is an object without a hasOwnProperty function\n        if (key != 'prototype' && key != 'length' && key != 'name' && (!obj.hasOwnProperty || obj.hasOwnProperty(key))) {\n          iterator.call(context, obj[key], key, obj);\n        }\n      }\n    } else if (isArray(obj) || isArrayLike(obj)) {\n      var isPrimitive = typeof obj !== 'object';\n      for (key = 0, length = obj.length; key < length; key++) {\n        if (isPrimitive || key in obj) {\n          iterator.call(context, obj[key], key, obj);\n        }\n      }\n    } else if (obj.forEach && obj.forEach !== forEach) {\n        obj.forEach(iterator, context, obj);\n    } else {\n      for (key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          iterator.call(context, obj[key], key, obj);\n        }\n      }\n    }\n  }\n  return obj;\n}\n\nfunction sortedKeys(obj) {\n  return Object.keys(obj).sort();\n}\n\nfunction forEachSorted(obj, iterator, context) {\n  var keys = sortedKeys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    iterator.call(context, obj[keys[i]], keys[i]);\n  }\n  return keys;\n}\n\n\n/**\n * when using forEach the params are value, key, but it is often useful to have key, value.\n * @param {function(string, *)} iteratorFn\n * @returns {function(*, string)}\n */\nfunction reverseParams(iteratorFn) {\n  return function(value, key) { iteratorFn(key, value); };\n}\n\n/**\n * A consistent way of creating unique IDs in angular.\n *\n * Using simple numbers allows us to generate 28.6 million unique ids per second for 10 years before\n * we hit number precision issues in JavaScript.\n *\n * Math.pow(2,53) / 60 / 60 / 24 / 365 / 10 = 28.6M\n *\n * @returns {number} an unique alpha-numeric string\n */\nfunction nextUid() {\n  return ++uid;\n}\n\n\n/**\n * Set or clear the hashkey for an object.\n * @param obj object\n * @param h the hashkey (!truthy to delete the hashkey)\n */\nfunction setHashKey(obj, h) {\n  if (h) {\n    obj.$$hashKey = h;\n  } else {\n    delete obj.$$hashKey;\n  }\n}\n\n/**\n * @ngdoc function\n * @name angular.extend\n * @module ng\n * @kind function\n *\n * @description\n * Extends the destination object `dst` by copying own enumerable properties from the `src` object(s)\n * to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so\n * by passing an empty object as the target: `var object = angular.extend({}, object1, object2)`.\n * Note: Keep in mind that `angular.extend` does not support recursive merge (deep copy).\n *\n * @param {Object} dst Destination object.\n * @param {...Object} src Source object(s).\n * @returns {Object} Reference to `dst`.\n */\nfunction extend(dst) {\n  var h = dst.$$hashKey;\n\n  for (var i = 1, ii = arguments.length; i < ii; i++) {\n    var obj = arguments[i];\n    if (obj) {\n      var keys = Object.keys(obj);\n      for (var j = 0, jj = keys.length; j < jj; j++) {\n        var key = keys[j];\n        dst[key] = obj[key];\n      }\n    }\n  }\n\n  setHashKey(dst, h);\n  return dst;\n}\n\nfunction int(str) {\n  return parseInt(str, 10);\n}\n\n\nfunction inherit(parent, extra) {\n  return extend(Object.create(parent), extra);\n}\n\n/**\n * @ngdoc function\n * @name angular.noop\n * @module ng\n * @kind function\n *\n * @description\n * A function that performs no operations. This function can be useful when writing code in the\n * functional style.\n   ```js\n     function foo(callback) {\n       var result = calculateResult();\n       (callback || angular.noop)(result);\n     }\n   ```\n */\nfunction noop() {}\nnoop.$inject = [];\n\n\n/**\n * @ngdoc function\n * @name angular.identity\n * @module ng\n * @kind function\n *\n * @description\n * A function that returns its first argument. This function is useful when writing code in the\n * functional style.\n *\n   ```js\n     function transformer(transformationFn, value) {\n       return (transformationFn || angular.identity)(value);\n     };\n   ```\n  * @param {*} value to be returned.\n  * @returns {*} the value passed in.\n */\nfunction identity($) {return $;}\nidentity.$inject = [];\n\n\nfunction valueFn(value) {return function() {return value;};}\n\n/**\n * @ngdoc function\n * @name angular.isUndefined\n * @module ng\n * @kind function\n *\n * @description\n * Determines if a reference is undefined.\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is undefined.\n */\nfunction isUndefined(value) {return typeof value === 'undefined';}\n\n\n/**\n * @ngdoc function\n * @name angular.isDefined\n * @module ng\n * @kind function\n *\n * @description\n * Determines if a reference is defined.\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is defined.\n */\nfunction isDefined(value) {return typeof value !== 'undefined';}\n\n\n/**\n * @ngdoc function\n * @name angular.isObject\n * @module ng\n * @kind function\n *\n * @description\n * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not\n * considered to be objects. Note that JavaScript arrays are objects.\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is an `Object` but not `null`.\n */\nfunction isObject(value) {\n  // http://jsperf.com/isobject4\n  return value !== null && typeof value === 'object';\n}\n\n\n/**\n * @ngdoc function\n * @name angular.isString\n * @module ng\n * @kind function\n *\n * @description\n * Determines if a reference is a `String`.\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is a `String`.\n */\nfunction isString(value) {return typeof value === 'string';}\n\n\n/**\n * @ngdoc function\n * @name angular.isNumber\n * @module ng\n * @kind function\n *\n * @description\n * Determines if a reference is a `Number`.\n *\n * This includes the \"special\" numbers `NaN`, `+Infinity` and `-Infinity`.\n *\n * If you wish to exclude these then you can use the native\n * [`isFinite'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite)\n * method.\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is a `Number`.\n */\nfunction isNumber(value) {return typeof value === 'number';}\n\n\n/**\n * @ngdoc function\n * @name angular.isDate\n * @module ng\n * @kind function\n *\n * @description\n * Determines if a value is a date.\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is a `Date`.\n */\nfunction isDate(value) {\n  return toString.call(value) === '[object Date]';\n}\n\n\n/**\n * @ngdoc function\n * @name angular.isArray\n * @module ng\n * @kind function\n *\n * @description\n * Determines if a reference is an `Array`.\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is an `Array`.\n */\nvar isArray = Array.isArray;\n\n/**\n * @ngdoc function\n * @name angular.isFunction\n * @module ng\n * @kind function\n *\n * @description\n * Determines if a reference is a `Function`.\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is a `Function`.\n */\nfunction isFunction(value) {return typeof value === 'function';}\n\n\n/**\n * Determines if a value is a regular expression object.\n *\n * @private\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is a `RegExp`.\n */\nfunction isRegExp(value) {\n  return toString.call(value) === '[object RegExp]';\n}\n\n\n/**\n * Checks if `obj` is a window object.\n *\n * @private\n * @param {*} obj Object to check\n * @returns {boolean} True if `obj` is a window obj.\n */\nfunction isWindow(obj) {\n  return obj && obj.window === obj;\n}\n\n\nfunction isScope(obj) {\n  return obj && obj.$evalAsync && obj.$watch;\n}\n\n\nfunction isFile(obj) {\n  return toString.call(obj) === '[object File]';\n}\n\n\nfunction isFormData(obj) {\n  return toString.call(obj) === '[object FormData]';\n}\n\n\nfunction isBlob(obj) {\n  return toString.call(obj) === '[object Blob]';\n}\n\n\nfunction isBoolean(value) {\n  return typeof value === 'boolean';\n}\n\n\nfunction isPromiseLike(obj) {\n  return obj && isFunction(obj.then);\n}\n\n\nvar trim = function(value) {\n  return isString(value) ? value.trim() : value;\n};\n\n// Copied from:\n// http://docs.closure-library.googlecode.com/git/local_closure_goog_string_string.js.source.html#line1021\n// Prereq: s is a string.\nvar escapeForRegexp = function(s) {\n  return s.replace(/([-()\\[\\]{}+?*.$\\^|,:#<!\\\\])/g, '\\\\$1').\n           replace(/\\x08/g, '\\\\x08');\n};\n\n\n/**\n * @ngdoc function\n * @name angular.isElement\n * @module ng\n * @kind function\n *\n * @description\n * Determines if a reference is a DOM element (or wrapped jQuery element).\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).\n */\nfunction isElement(node) {\n  return !!(node &&\n    (node.nodeName  // we are a direct element\n    || (node.prop && node.attr && node.find)));  // we have an on and find method part of jQuery API\n}\n\n/**\n * @param str 'key1,key2,...'\n * @returns {object} in the form of {key1:true, key2:true, ...}\n */\nfunction makeMap(str) {\n  var obj = {}, items = str.split(\",\"), i;\n  for (i = 0; i < items.length; i++)\n    obj[items[i]] = true;\n  return obj;\n}\n\n\nfunction nodeName_(element) {\n  return lowercase(element.nodeName || (element[0] && element[0].nodeName));\n}\n\nfunction includes(array, obj) {\n  return Array.prototype.indexOf.call(array, obj) != -1;\n}\n\nfunction arrayRemove(array, value) {\n  var index = array.indexOf(value);\n  if (index >= 0)\n    array.splice(index, 1);\n  return value;\n}\n\n/**\n * @ngdoc function\n * @name angular.copy\n * @module ng\n * @kind function\n *\n * @description\n * Creates a deep copy of `source`, which should be an object or an array.\n *\n * * If no destination is supplied, a copy of the object or array is created.\n * * If a destination is provided, all of its elements (for arrays) or properties (for objects)\n *   are deleted and then all elements/properties from the source are copied to it.\n * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.\n * * If `source` is identical to 'destination' an exception will be thrown.\n *\n * @param {*} source The source that will be used to make a copy.\n *                   Can be any type, including primitives, `null`, and `undefined`.\n * @param {(Object|Array)=} destination Destination into which the source is copied. If\n *     provided, must be of the same type as `source`.\n * @returns {*} The copy or updated `destination`, if `destination` was specified.\n *\n * @example\n <example module=\"copyExample\">\n <file name=\"index.html\">\n <div ng-controller=\"ExampleController\">\n <form novalidate class=\"simple-form\">\n Name: <input type=\"text\" ng-model=\"user.name\" /><br />\n E-mail: <input type=\"email\" ng-model=\"user.email\" /><br />\n Gender: <input type=\"radio\" ng-model=\"user.gender\" value=\"male\" />male\n <input type=\"radio\" ng-model=\"user.gender\" value=\"female\" />female<br />\n <button ng-click=\"reset()\">RESET</button>\n <button ng-click=\"update(user)\">SAVE</button>\n </form>\n <pre>form = {{user | json}}</pre>\n <pre>master = {{master | json}}</pre>\n </div>\n\n <script>\n  angular.module('copyExample', [])\n    .controller('ExampleController', ['$scope', function($scope) {\n      $scope.master= {};\n\n      $scope.update = function(user) {\n        // Example with 1 argument\n        $scope.master= angular.copy(user);\n      };\n\n      $scope.reset = function() {\n        // Example with 2 arguments\n        angular.copy($scope.master, $scope.user);\n      };\n\n      $scope.reset();\n    }]);\n </script>\n </file>\n </example>\n */\nfunction copy(source, destination, stackSource, stackDest) {\n  if (isWindow(source) || isScope(source)) {\n    throw ngMinErr('cpws',\n      \"Can't copy! Making copies of Window or Scope instances is not supported.\");\n  }\n\n  if (!destination) {\n    destination = source;\n    if (source) {\n      if (isArray(source)) {\n        destination = copy(source, [], stackSource, stackDest);\n      } else if (isDate(source)) {\n        destination = new Date(source.getTime());\n      } else if (isRegExp(source)) {\n        destination = new RegExp(source.source, source.toString().match(/[^\\/]*$/)[0]);\n        destination.lastIndex = source.lastIndex;\n      } else if (isObject(source)) {\n        var emptyObject = Object.create(Object.getPrototypeOf(source));\n        destination = copy(source, emptyObject, stackSource, stackDest);\n      }\n    }\n  } else {\n    if (source === destination) throw ngMinErr('cpi',\n      \"Can't copy! Source and destination are identical.\");\n\n    stackSource = stackSource || [];\n    stackDest = stackDest || [];\n\n    if (isObject(source)) {\n      var index = stackSource.indexOf(source);\n      if (index !== -1) return stackDest[index];\n\n      stackSource.push(source);\n      stackDest.push(destination);\n    }\n\n    var result;\n    if (isArray(source)) {\n      destination.length = 0;\n      for (var i = 0; i < source.length; i++) {\n        result = copy(source[i], null, stackSource, stackDest);\n        if (isObject(source[i])) {\n          stackSource.push(source[i]);\n          stackDest.push(result);\n        }\n        destination.push(result);\n      }\n    } else {\n      var h = destination.$$hashKey;\n      if (isArray(destination)) {\n        destination.length = 0;\n      } else {\n        forEach(destination, function(value, key) {\n          delete destination[key];\n        });\n      }\n      for (var key in source) {\n        if (source.hasOwnProperty(key)) {\n          result = copy(source[key], null, stackSource, stackDest);\n          if (isObject(source[key])) {\n            stackSource.push(source[key]);\n            stackDest.push(result);\n          }\n          destination[key] = result;\n        }\n      }\n      setHashKey(destination,h);\n    }\n\n  }\n  return destination;\n}\n\n/**\n * Creates a shallow copy of an object, an array or a primitive.\n *\n * Assumes that there are no proto properties for objects.\n */\nfunction shallowCopy(src, dst) {\n  if (isArray(src)) {\n    dst = dst || [];\n\n    for (var i = 0, ii = src.length; i < ii; i++) {\n      dst[i] = src[i];\n    }\n  } else if (isObject(src)) {\n    dst = dst || {};\n\n    for (var key in src) {\n      if (!(key.charAt(0) === '$' && key.charAt(1) === '$')) {\n        dst[key] = src[key];\n      }\n    }\n  }\n\n  return dst || src;\n}\n\n\n/**\n * @ngdoc function\n * @name angular.equals\n * @module ng\n * @kind function\n *\n * @description\n * Determines if two objects or two values are equivalent. Supports value types, regular\n * expressions, arrays and objects.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `angular.equals`.\n * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)\n * * Both values represent the same regular expression (In JavaScript,\n *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual\n *   representation matches).\n *\n * During a property comparison, properties of `function` type and properties with names\n * that begin with `$` are ignored.\n *\n * Scope and DOMWindow objects are being compared only by identify (`===`).\n *\n * @param {*} o1 Object or value to compare.\n * @param {*} o2 Object or value to compare.\n * @returns {boolean} True if arguments are equal.\n */\nfunction equals(o1, o2) {\n  if (o1 === o2) return true;\n  if (o1 === null || o2 === null) return false;\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n  var t1 = typeof o1, t2 = typeof o2, length, key, keySet;\n  if (t1 == t2) {\n    if (t1 == 'object') {\n      if (isArray(o1)) {\n        if (!isArray(o2)) return false;\n        if ((length = o1.length) == o2.length) {\n          for (key = 0; key < length; key++) {\n            if (!equals(o1[key], o2[key])) return false;\n          }\n          return true;\n        }\n      } else if (isDate(o1)) {\n        if (!isDate(o2)) return false;\n        return equals(o1.getTime(), o2.getTime());\n      } else if (isRegExp(o1)) {\n        return isRegExp(o2) ? o1.toString() == o2.toString() : false;\n      } else {\n        if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) ||\n          isArray(o2) || isDate(o2) || isRegExp(o2)) return false;\n        keySet = {};\n        for (key in o1) {\n          if (key.charAt(0) === '$' || isFunction(o1[key])) continue;\n          if (!equals(o1[key], o2[key])) return false;\n          keySet[key] = true;\n        }\n        for (key in o2) {\n          if (!keySet.hasOwnProperty(key) &&\n              key.charAt(0) !== '$' &&\n              o2[key] !== undefined &&\n              !isFunction(o2[key])) return false;\n        }\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nvar csp = function() {\n  if (isDefined(csp.isActive_)) return csp.isActive_;\n\n  var active = !!(document.querySelector('[ng-csp]') ||\n                  document.querySelector('[data-ng-csp]'));\n\n  if (!active) {\n    try {\n      /* jshint -W031, -W054 */\n      new Function('');\n      /* jshint +W031, +W054 */\n    } catch (e) {\n      active = true;\n    }\n  }\n\n  return (csp.isActive_ = active);\n};\n\n\n\nfunction concat(array1, array2, index) {\n  return array1.concat(slice.call(array2, index));\n}\n\nfunction sliceArgs(args, startIndex) {\n  return slice.call(args, startIndex || 0);\n}\n\n\n/* jshint -W101 */\n/**\n * @ngdoc function\n * @name angular.bind\n * @module ng\n * @kind function\n *\n * @description\n * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for\n * `fn`). You can supply optional `args` that are prebound to the function. This feature is also\n * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as\n * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).\n *\n * @param {Object} self Context which `fn` should be evaluated in.\n * @param {function()} fn Function to be bound.\n * @param {...*} args Optional arguments to be prebound to the `fn` function call.\n * @returns {function()} Function that wraps the `fn` with all the specified bindings.\n */\n/* jshint +W101 */\nfunction bind(self, fn) {\n  var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];\n  if (isFunction(fn) && !(fn instanceof RegExp)) {\n    return curryArgs.length\n      ? function() {\n          return arguments.length\n            ? fn.apply(self, concat(curryArgs, arguments, 0))\n            : fn.apply(self, curryArgs);\n        }\n      : function() {\n          return arguments.length\n            ? fn.apply(self, arguments)\n            : fn.call(self);\n        };\n  } else {\n    // in IE, native methods are not functions so they cannot be bound (note: they don't need to be)\n    return fn;\n  }\n}\n\n\nfunction toJsonReplacer(key, value) {\n  var val = value;\n\n  if (typeof key === 'string' && key.charAt(0) === '$' && key.charAt(1) === '$') {\n    val = undefined;\n  } else if (isWindow(value)) {\n    val = '$WINDOW';\n  } else if (value &&  document === value) {\n    val = '$DOCUMENT';\n  } else if (isScope(value)) {\n    val = '$SCOPE';\n  }\n\n  return val;\n}\n\n\n/**\n * @ngdoc function\n * @name angular.toJson\n * @module ng\n * @kind function\n *\n * @description\n * Serializes input into a JSON-formatted string. Properties with leading $$ characters will be\n * stripped since angular uses this notation internally.\n *\n * @param {Object|Array|Date|string|number} obj Input to be serialized into JSON.\n * @param {boolean|number} [pretty=2] If set to true, the JSON output will contain newlines and whitespace.\n *    If set to an integer, the JSON output will contain that many spaces per indentation.\n * @returns {string|undefined} JSON-ified string representing `obj`.\n */\nfunction toJson(obj, pretty) {\n  if (typeof obj === 'undefined') return undefined;\n  if (!isNumber(pretty)) {\n    pretty = pretty ? 2 : null;\n  }\n  return JSON.stringify(obj, toJsonReplacer, pretty);\n}\n\n\n/**\n * @ngdoc function\n * @name angular.fromJson\n * @module ng\n * @kind function\n *\n * @description\n * Deserializes a JSON string.\n *\n * @param {string} json JSON string to deserialize.\n * @returns {Object|Array|string|number} Deserialized JSON string.\n */\nfunction fromJson(json) {\n  return isString(json)\n      ? JSON.parse(json)\n      : json;\n}\n\n\n/**\n * @returns {string} Returns the string representation of the element.\n */\nfunction startingTag(element) {\n  element = jqLite(element).clone();\n  try {\n    // turns out IE does not let you set .html() on elements which\n    // are not allowed to have children. So we just ignore it.\n    element.empty();\n  } catch (e) {}\n  var elemHtml = jqLite('<div>').append(element).html();\n  try {\n    return element[0].nodeType === NODE_TYPE_TEXT ? lowercase(elemHtml) :\n        elemHtml.\n          match(/^(<[^>]+>)/)[1].\n          replace(/^<([\\w\\-]+)/, function(match, nodeName) { return '<' + lowercase(nodeName); });\n  } catch (e) {\n    return lowercase(elemHtml);\n  }\n\n}\n\n\n/////////////////////////////////////////////////\n\n/**\n * Tries to decode the URI component without throwing an exception.\n *\n * @private\n * @param str value potential URI component to check.\n * @returns {boolean} True if `value` can be decoded\n * with the decodeURIComponent function.\n */\nfunction tryDecodeURIComponent(value) {\n  try {\n    return decodeURIComponent(value);\n  } catch (e) {\n    // Ignore any invalid uri component\n  }\n}\n\n\n/**\n * Parses an escaped url query string into key-value pairs.\n * @returns {Object.<string,boolean|Array>}\n */\nfunction parseKeyValue(/**string*/keyValue) {\n  var obj = {}, key_value, key;\n  forEach((keyValue || \"\").split('&'), function(keyValue) {\n    if (keyValue) {\n      key_value = keyValue.replace(/\\+/g,'%20').split('=');\n      key = tryDecodeURIComponent(key_value[0]);\n      if (isDefined(key)) {\n        var val = isDefined(key_value[1]) ? tryDecodeURIComponent(key_value[1]) : true;\n        if (!hasOwnProperty.call(obj, key)) {\n          obj[key] = val;\n        } else if (isArray(obj[key])) {\n          obj[key].push(val);\n        } else {\n          obj[key] = [obj[key],val];\n        }\n      }\n    }\n  });\n  return obj;\n}\n\nfunction toKeyValue(obj) {\n  var parts = [];\n  forEach(obj, function(value, key) {\n    if (isArray(value)) {\n      forEach(value, function(arrayValue) {\n        parts.push(encodeUriQuery(key, true) +\n                   (arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true)));\n      });\n    } else {\n    parts.push(encodeUriQuery(key, true) +\n               (value === true ? '' : '=' + encodeUriQuery(value, true)));\n    }\n  });\n  return parts.length ? parts.join('&') : '';\n}\n\n\n/**\n * We need our custom method because encodeURIComponent is too aggressive and doesn't follow\n * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path\n * segments:\n *    segment       = *pchar\n *    pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n *    pct-encoded   = \"%\" HEXDIG HEXDIG\n *    unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n *    sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n *                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n */\nfunction encodeUriSegment(val) {\n  return encodeUriQuery(val, true).\n             replace(/%26/gi, '&').\n             replace(/%3D/gi, '=').\n             replace(/%2B/gi, '+');\n}\n\n\n/**\n * This method is intended for encoding *key* or *value* parts of query component. We need a custom\n * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be\n * encoded per http://tools.ietf.org/html/rfc3986:\n *    query       = *( pchar / \"/\" / \"?\" )\n *    pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n *    unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n *    pct-encoded   = \"%\" HEXDIG HEXDIG\n *    sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n *                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n */\nfunction encodeUriQuery(val, pctEncodeSpaces) {\n  return encodeURIComponent(val).\n             replace(/%40/gi, '@').\n             replace(/%3A/gi, ':').\n             replace(/%24/g, '$').\n             replace(/%2C/gi, ',').\n             replace(/%3B/gi, ';').\n             replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));\n}\n\nvar ngAttrPrefixes = ['ng-', 'data-ng-', 'ng:', 'x-ng-'];\n\nfunction getNgAttribute(element, ngAttr) {\n  var attr, i, ii = ngAttrPrefixes.length;\n  element = jqLite(element);\n  for (i = 0; i < ii; ++i) {\n    attr = ngAttrPrefixes[i] + ngAttr;\n    if (isString(attr = element.attr(attr))) {\n      return attr;\n    }\n  }\n  return null;\n}\n\n/**\n * @ngdoc directive\n * @name ngApp\n * @module ng\n *\n * @element ANY\n * @param {angular.Module} ngApp an optional application\n *   {@link angular.module module} name to load.\n * @param {boolean=} ngStrictDi if this attribute is present on the app element, the injector will be\n *   created in \"strict-di\" mode. This means that the application will fail to invoke functions which\n *   do not use explicit function annotation (and are thus unsuitable for minification), as described\n *   in {@link guide/di the Dependency Injection guide}, and useful debugging info will assist in\n *   tracking down the root of these bugs.\n *\n * @description\n *\n * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive\n * designates the **root element** of the application and is typically placed near the root element\n * of the page - e.g. on the `<body>` or `<html>` tags.\n *\n * Only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`\n * found in the document will be used to define the root element to auto-bootstrap as an\n * application. To run multiple applications in an HTML document you must manually bootstrap them using\n * {@link angular.bootstrap} instead. AngularJS applications cannot be nested within each other.\n *\n * You can specify an **AngularJS module** to be used as the root module for the application.  This\n * module will be loaded into the {@link auto.$injector} when the application is bootstrapped. It\n * should contain the application code needed or have dependencies on other modules that will\n * contain the code. See {@link angular.module} for more information.\n *\n * In the example below if the `ngApp` directive were not placed on the `html` element then the\n * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`\n * would not be resolved to `3`.\n *\n * `ngApp` is the easiest, and most common way to bootstrap an application.\n *\n <example module=\"ngAppDemo\">\n   <file name=\"index.html\">\n   <div ng-controller=\"ngAppDemoController\">\n     I can add: {{a}} + {{b}} =  {{ a+b }}\n   </div>\n   </file>\n   <file name=\"script.js\">\n   angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {\n     $scope.a = 1;\n     $scope.b = 2;\n   });\n   </file>\n </example>\n *\n * Using `ngStrictDi`, you would see something like this:\n *\n <example ng-app-included=\"true\">\n   <file name=\"index.html\">\n   <div ng-app=\"ngAppStrictDemo\" ng-strict-di>\n       <div ng-controller=\"GoodController1\">\n           I can add: {{a}} + {{b}} =  {{ a+b }}\n\n           <p>This renders because the controller does not fail to\n              instantiate, by using explicit annotation style (see\n              script.js for details)\n           </p>\n       </div>\n\n       <div ng-controller=\"GoodController2\">\n           Name: <input ng-model=\"name\"><br />\n           Hello, {{name}}!\n\n           <p>This renders because the controller does not fail to\n              instantiate, by using explicit annotation style\n              (see script.js for details)\n           </p>\n       </div>\n\n       <div ng-controller=\"BadController\">\n           I can add: {{a}} + {{b}} =  {{ a+b }}\n\n           <p>The controller could not be instantiated, due to relying\n              on automatic function annotations (which are disabled in\n              strict mode). As such, the content of this section is not\n              interpolated, and there should be an error in your web console.\n           </p>\n       </div>\n   </div>\n   </file>\n   <file name=\"script.js\">\n   angular.module('ngAppStrictDemo', [])\n     // BadController will fail to instantiate, due to relying on automatic function annotation,\n     // rather than an explicit annotation\n     .controller('BadController', function($scope) {\n       $scope.a = 1;\n       $scope.b = 2;\n     })\n     // Unlike BadController, GoodController1 and GoodController2 will not fail to be instantiated,\n     // due to using explicit annotations using the array style and $inject property, respectively.\n     .controller('GoodController1', ['$scope', function($scope) {\n       $scope.a = 1;\n       $scope.b = 2;\n     }])\n     .controller('GoodController2', GoodController2);\n     function GoodController2($scope) {\n       $scope.name = \"World\";\n     }\n     GoodController2.$inject = ['$scope'];\n   </file>\n   <file name=\"style.css\">\n   div[ng-controller] {\n       margin-bottom: 1em;\n       -webkit-border-radius: 4px;\n       border-radius: 4px;\n       border: 1px solid;\n       padding: .5em;\n   }\n   div[ng-controller^=Good] {\n       border-color: #d6e9c6;\n       background-color: #dff0d8;\n       color: #3c763d;\n   }\n   div[ng-controller^=Bad] {\n       border-color: #ebccd1;\n       background-color: #f2dede;\n       color: #a94442;\n       margin-bottom: 0;\n   }\n   </file>\n </example>\n */\nfunction angularInit(element, bootstrap) {\n  var appElement,\n      module,\n      config = {};\n\n  // The element `element` has priority over any other element\n  forEach(ngAttrPrefixes, function(prefix) {\n    var name = prefix + 'app';\n\n    if (!appElement && element.hasAttribute && element.hasAttribute(name)) {\n      appElement = element;\n      module = element.getAttribute(name);\n    }\n  });\n  forEach(ngAttrPrefixes, function(prefix) {\n    var name = prefix + 'app';\n    var candidate;\n\n    if (!appElement && (candidate = element.querySelector('[' + name.replace(':', '\\\\:') + ']'))) {\n      appElement = candidate;\n      module = candidate.getAttribute(name);\n    }\n  });\n  if (appElement) {\n    config.strictDi = getNgAttribute(appElement, \"strict-di\") !== null;\n    bootstrap(appElement, module ? [module] : [], config);\n  }\n}\n\n/**\n * @ngdoc function\n * @name angular.bootstrap\n * @module ng\n * @description\n * Use this function to manually start up angular application.\n *\n * See: {@link guide/bootstrap Bootstrap}\n *\n * Note that Protractor based end-to-end tests cannot use this function to bootstrap manually.\n * They must use {@link ng.directive:ngApp ngApp}.\n *\n * Angular will detect if it has been loaded into the browser more than once and only allow the\n * first loaded script to be bootstrapped and will report a warning to the browser console for\n * each of the subsequent scripts. This prevents strange results in applications, where otherwise\n * multiple instances of Angular try to work on the DOM.\n *\n * ```html\n * <!doctype html>\n * <html>\n * <body>\n * <div ng-controller=\"WelcomeController\">\n *   {{greeting}}\n * </div>\n *\n * <script src=\"angular.js\"></script>\n * <script>\n *   var app = angular.module('demo', [])\n *   .controller('WelcomeController', function($scope) {\n *       $scope.greeting = 'Welcome!';\n *   });\n *   angular.bootstrap(document, ['demo']);\n * </script>\n * </body>\n * </html>\n * ```\n *\n * @param {DOMElement} element DOM element which is the root of angular application.\n * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.\n *     Each item in the array should be the name of a predefined module or a (DI annotated)\n *     function that will be invoked by the injector as a `config` block.\n *     See: {@link angular.module modules}\n * @param {Object=} config an object for defining configuration options for the application. The\n *     following keys are supported:\n *\n * * `strictDi` - disable automatic function annotation for the application. This is meant to\n *   assist in finding bugs which break minified code. Defaults to `false`.\n *\n * @returns {auto.$injector} Returns the newly created injector for this app.\n */\nfunction bootstrap(element, modules, config) {\n  if (!isObject(config)) config = {};\n  var defaultConfig = {\n    strictDi: false\n  };\n  config = extend(defaultConfig, config);\n  var doBootstrap = function() {\n    element = jqLite(element);\n\n    if (element.injector()) {\n      var tag = (element[0] === document) ? 'document' : startingTag(element);\n      //Encode angle brackets to prevent input from being sanitized to empty string #8683\n      throw ngMinErr(\n          'btstrpd',\n          \"App Already Bootstrapped with this Element '{0}'\",\n          tag.replace(/</,'&lt;').replace(/>/,'&gt;'));\n    }\n\n    modules = modules || [];\n    modules.unshift(['$provide', function($provide) {\n      $provide.value('$rootElement', element);\n    }]);\n\n    if (config.debugInfoEnabled) {\n      // Pushing so that this overrides `debugInfoEnabled` setting defined in user's `modules`.\n      modules.push(['$compileProvider', function($compileProvider) {\n        $compileProvider.debugInfoEnabled(true);\n      }]);\n    }\n\n    modules.unshift('ng');\n    var injector = createInjector(modules, config.strictDi);\n    injector.invoke(['$rootScope', '$rootElement', '$compile', '$injector',\n       function bootstrapApply(scope, element, compile, injector) {\n        scope.$apply(function() {\n          element.data('$injector', injector);\n          compile(element)(scope);\n        });\n      }]\n    );\n    return injector;\n  };\n\n  var NG_ENABLE_DEBUG_INFO = /^NG_ENABLE_DEBUG_INFO!/;\n  var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;\n\n  if (window && NG_ENABLE_DEBUG_INFO.test(window.name)) {\n    config.debugInfoEnabled = true;\n    window.name = window.name.replace(NG_ENABLE_DEBUG_INFO, '');\n  }\n\n  if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {\n    return doBootstrap();\n  }\n\n  window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');\n  angular.resumeBootstrap = function(extraModules) {\n    forEach(extraModules, function(module) {\n      modules.push(module);\n    });\n    return doBootstrap();\n  };\n\n  if (isFunction(angular.resumeDeferredBootstrap)) {\n    angular.resumeDeferredBootstrap();\n  }\n}\n\n/**\n * @ngdoc function\n * @name angular.reloadWithDebugInfo\n * @module ng\n * @description\n * Use this function to reload the current application with debug information turned on.\n * This takes precedence over a call to `$compileProvider.debugInfoEnabled(false)`.\n *\n * See {@link ng.$compileProvider#debugInfoEnabled} for more.\n */\nfunction reloadWithDebugInfo() {\n  window.name = 'NG_ENABLE_DEBUG_INFO!' + window.name;\n  window.location.reload();\n}\n\n/**\n * @name angular.getTestability\n * @module ng\n * @description\n * Get the testability service for the instance of Angular on the given\n * element.\n * @param {DOMElement} element DOM element which is the root of angular application.\n */\nfunction getTestability(rootElement) {\n  var injector = angular.element(rootElement).injector();\n  if (!injector) {\n    throw ngMinErr('test',\n      'no injector found for element argument to getTestability');\n  }\n  return injector.get('$$testability');\n}\n\nvar SNAKE_CASE_REGEXP = /[A-Z]/g;\nfunction snake_case(name, separator) {\n  separator = separator || '_';\n  return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {\n    return (pos ? separator : '') + letter.toLowerCase();\n  });\n}\n\nvar bindJQueryFired = false;\nvar skipDestroyOnNextJQueryCleanData;\nfunction bindJQuery() {\n  var originalCleanData;\n\n  if (bindJQueryFired) {\n    return;\n  }\n\n  // bind to jQuery if present;\n  jQuery = window.jQuery;\n  // Use jQuery if it exists with proper functionality, otherwise default to us.\n  // Angular 1.2+ requires jQuery 1.7+ for on()/off() support.\n  // Angular 1.3+ technically requires at least jQuery 2.1+ but it may work with older\n  // versions. It will not work for sure with jQuery <1.7, though.\n  if (jQuery && jQuery.fn.on) {\n    jqLite = jQuery;\n    extend(jQuery.fn, {\n      scope: JQLitePrototype.scope,\n      isolateScope: JQLitePrototype.isolateScope,\n      controller: JQLitePrototype.controller,\n      injector: JQLitePrototype.injector,\n      inheritedData: JQLitePrototype.inheritedData\n    });\n\n    // All nodes removed from the DOM via various jQuery APIs like .remove()\n    // are passed through jQuery.cleanData. Monkey-patch this method to fire\n    // the $destroy event on all removed nodes.\n    originalCleanData = jQuery.cleanData;\n    jQuery.cleanData = function(elems) {\n      var events;\n      if (!skipDestroyOnNextJQueryCleanData) {\n        for (var i = 0, elem; (elem = elems[i]) != null; i++) {\n          events = jQuery._data(elem, \"events\");\n          if (events && events.$destroy) {\n            jQuery(elem).triggerHandler('$destroy');\n          }\n        }\n      } else {\n        skipDestroyOnNextJQueryCleanData = false;\n      }\n      originalCleanData(elems);\n    };\n  } else {\n    jqLite = JQLite;\n  }\n\n  angular.element = jqLite;\n\n  // Prevent double-proxying.\n  bindJQueryFired = true;\n}\n\n/**\n * throw error if the argument is falsy.\n */\nfunction assertArg(arg, name, reason) {\n  if (!arg) {\n    throw ngMinErr('areq', \"Argument '{0}' is {1}\", (name || '?'), (reason || \"required\"));\n  }\n  return arg;\n}\n\nfunction assertArgFn(arg, name, acceptArrayAnnotation) {\n  if (acceptArrayAnnotation && isArray(arg)) {\n      arg = arg[arg.length - 1];\n  }\n\n  assertArg(isFunction(arg), name, 'not a function, got ' +\n      (arg && typeof arg === 'object' ? arg.constructor.name || 'Object' : typeof arg));\n  return arg;\n}\n\n/**\n * throw error if the name given is hasOwnProperty\n * @param  {String} name    the name to test\n * @param  {String} context the context in which the name is used, such as module or directive\n */\nfunction assertNotHasOwnProperty(name, context) {\n  if (name === 'hasOwnProperty') {\n    throw ngMinErr('badname', \"hasOwnProperty is not a valid {0} name\", context);\n  }\n}\n\n/**\n * Return the value accessible from the object by path. Any undefined traversals are ignored\n * @param {Object} obj starting object\n * @param {String} path path to traverse\n * @param {boolean} [bindFnToScope=true]\n * @returns {Object} value as accessible by path\n */\n//TODO(misko): this function needs to be removed\nfunction getter(obj, path, bindFnToScope) {\n  if (!path) return obj;\n  var keys = path.split('.');\n  var key;\n  var lastInstance = obj;\n  var len = keys.length;\n\n  for (var i = 0; i < len; i++) {\n    key = keys[i];\n    if (obj) {\n      obj = (lastInstance = obj)[key];\n    }\n  }\n  if (!bindFnToScope && isFunction(obj)) {\n    return bind(lastInstance, obj);\n  }\n  return obj;\n}\n\n/**\n * Return the DOM siblings between the first and last node in the given array.\n * @param {Array} array like object\n * @returns {jqLite} jqLite collection containing the nodes\n */\nfunction getBlockNodes(nodes) {\n  // TODO(perf): just check if all items in `nodes` are siblings and if they are return the original\n  //             collection, otherwise update the original collection.\n  var node = nodes[0];\n  var endNode = nodes[nodes.length - 1];\n  var blockNodes = [node];\n\n  do {\n    node = node.nextSibling;\n    if (!node) break;\n    blockNodes.push(node);\n  } while (node !== endNode);\n\n  return jqLite(blockNodes);\n}\n\n\n/**\n * Creates a new object without a prototype. This object is useful for lookup without having to\n * guard against prototypically inherited properties via hasOwnProperty.\n *\n * Related micro-benchmarks:\n * - http://jsperf.com/object-create2\n * - http://jsperf.com/proto-map-lookup/2\n * - http://jsperf.com/for-in-vs-object-keys2\n *\n * @returns {Object}\n */\nfunction createMap() {\n  return Object.create(null);\n}\n\nvar NODE_TYPE_ELEMENT = 1;\nvar NODE_TYPE_ATTRIBUTE = 2;\nvar NODE_TYPE_TEXT = 3;\nvar NODE_TYPE_COMMENT = 8;\nvar NODE_TYPE_DOCUMENT = 9;\nvar NODE_TYPE_DOCUMENT_FRAGMENT = 11;\n\n/**\n * @ngdoc type\n * @name angular.Module\n * @module ng\n * @description\n *\n * Interface for configuring angular {@link angular.module modules}.\n */\n\nfunction setupModuleLoader(window) {\n\n  var $injectorMinErr = minErr('$injector');\n  var ngMinErr = minErr('ng');\n\n  function ensure(obj, name, factory) {\n    return obj[name] || (obj[name] = factory());\n  }\n\n  var angular = ensure(window, 'angular', Object);\n\n  // We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap\n  angular.$$minErr = angular.$$minErr || minErr;\n\n  return ensure(angular, 'module', function() {\n    /** @type {Object.<string, angular.Module>} */\n    var modules = {};\n\n    /**\n     * @ngdoc function\n     * @name angular.module\n     * @module ng\n     * @description\n     *\n     * The `angular.module` is a global place for creating, registering and retrieving Angular\n     * modules.\n     * All modules (angular core or 3rd party) that should be available to an application must be\n     * registered using this mechanism.\n     *\n     * When passed two or more arguments, a new module is created.  If passed only one argument, an\n     * existing module (the name passed as the first argument to `module`) is retrieved.\n     *\n     *\n     * # Module\n     *\n     * A module is a collection of services, directives, controllers, filters, and configuration information.\n     * `angular.module` is used to configure the {@link auto.$injector $injector}.\n     *\n     * ```js\n     * // Create a new module\n     * var myModule = angular.module('myModule', []);\n     *\n     * // register a new service\n     * myModule.value('appName', 'MyCoolApp');\n     *\n     * // configure existing services inside initialization blocks.\n     * myModule.config(['$locationProvider', function($locationProvider) {\n     *   // Configure existing providers\n     *   $locationProvider.hashPrefix('!');\n     * }]);\n     * ```\n     *\n     * Then you can create an injector and load your modules like this:\n     *\n     * ```js\n     * var injector = angular.injector(['ng', 'myModule'])\n     * ```\n     *\n     * However it's more likely that you'll just use\n     * {@link ng.directive:ngApp ngApp} or\n     * {@link angular.bootstrap} to simplify this process for you.\n     *\n     * @param {!string} name The name of the module to create or retrieve.\n     * @param {!Array.<string>=} requires If specified then new module is being created. If\n     *        unspecified then the module is being retrieved for further configuration.\n     * @param {Function=} configFn Optional configuration function for the module. Same as\n     *        {@link angular.Module#config Module#config()}.\n     * @returns {module} new module with the {@link angular.Module} api.\n     */\n    return function module(name, requires, configFn) {\n      var assertNotHasOwnProperty = function(name, context) {\n        if (name === 'hasOwnProperty') {\n          throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);\n        }\n      };\n\n      assertNotHasOwnProperty(name, 'module');\n      if (requires && modules.hasOwnProperty(name)) {\n        modules[name] = null;\n      }\n      return ensure(modules, name, function() {\n        if (!requires) {\n          throw $injectorMinErr('nomod', \"Module '{0}' is not available! You either misspelled \" +\n             \"the module name or forgot to load it. If registering a module ensure that you \" +\n             \"specify the dependencies as the second argument.\", name);\n        }\n\n        /** @type {!Array.<Array.<*>>} */\n        var invokeQueue = [];\n\n        /** @type {!Array.<Function>} */\n        var configBlocks = [];\n\n        /** @type {!Array.<Function>} */\n        var runBlocks = [];\n\n        var config = invokeLater('$injector', 'invoke', 'push', configBlocks);\n\n        /** @type {angular.Module} */\n        var moduleInstance = {\n          // Private state\n          _invokeQueue: invokeQueue,\n          _configBlocks: configBlocks,\n          _runBlocks: runBlocks,\n\n          /**\n           * @ngdoc property\n           * @name angular.Module#requires\n           * @module ng\n           *\n           * @description\n           * Holds the list of modules which the injector will load before the current module is\n           * loaded.\n           */\n          requires: requires,\n\n          /**\n           * @ngdoc property\n           * @name angular.Module#name\n           * @module ng\n           *\n           * @description\n           * Name of the module.\n           */\n          name: name,\n\n\n          /**\n           * @ngdoc method\n           * @name angular.Module#provider\n           * @module ng\n           * @param {string} name service name\n           * @param {Function} providerType Construction function for creating new instance of the\n           *                                service.\n           * @description\n           * See {@link auto.$provide#provider $provide.provider()}.\n           */\n          provider: invokeLater('$provide', 'provider'),\n\n          /**\n           * @ngdoc method\n           * @name angular.Module#factory\n           * @module ng\n           * @param {string} name service name\n           * @param {Function} providerFunction Function for creating new instance of the service.\n           * @description\n           * See {@link auto.$provide#factory $provide.factory()}.\n           */\n          factory: invokeLater('$provide', 'factory'),\n\n          /**\n           * @ngdoc method\n           * @name angular.Module#service\n           * @module ng\n           * @param {string} name service name\n           * @param {Function} constructor A constructor function that will be instantiated.\n           * @description\n           * See {@link auto.$provide#service $provide.service()}.\n           */\n          service: invokeLater('$provide', 'service'),\n\n          /**\n           * @ngdoc method\n           * @name angular.Module#value\n           * @module ng\n           * @param {string} name service name\n           * @param {*} object Service instance object.\n           * @description\n           * See {@link auto.$provide#value $provide.value()}.\n           */\n          value: invokeLater('$provide', 'value'),\n\n          /**\n           * @ngdoc method\n           * @name angular.Module#constant\n           * @module ng\n           * @param {string} name constant name\n           * @param {*} object Constant value.\n           * @description\n           * Because the constant are fixed, they get applied before other provide methods.\n           * See {@link auto.$provide#constant $provide.constant()}.\n           */\n          constant: invokeLater('$provide', 'constant', 'unshift'),\n\n          /**\n           * @ngdoc method\n           * @name angular.Module#animation\n           * @module ng\n           * @param {string} name animation name\n           * @param {Function} animationFactory Factory function for creating new instance of an\n           *                                    animation.\n           * @description\n           *\n           * **NOTE**: animations take effect only if the **ngAnimate** module is loaded.\n           *\n           *\n           * Defines an animation hook that can be later used with\n           * {@link ngAnimate.$animate $animate} service and directives that use this service.\n           *\n           * ```js\n           * module.animation('.animation-name', function($inject1, $inject2) {\n           *   return {\n           *     eventName : function(element, done) {\n           *       //code to run the animation\n           *       //once complete, then run done()\n           *       return function cancellationFunction(element) {\n           *         //code to cancel the animation\n           *       }\n           *     }\n           *   }\n           * })\n           * ```\n           *\n           * See {@link ng.$animateProvider#register $animateProvider.register()} and\n           * {@link ngAnimate ngAnimate module} for more information.\n           */\n          animation: invokeLater('$animateProvider', 'register'),\n\n          /**\n           * @ngdoc method\n           * @name angular.Module#filter\n           * @module ng\n           * @param {string} name Filter name - this must be a valid angular expression identifier\n           * @param {Function} filterFactory Factory function for creating new instance of filter.\n           * @description\n           * See {@link ng.$filterProvider#register $filterProvider.register()}.\n           *\n           * <div class=\"alert alert-warning\">\n           * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.\n           * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace\n           * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores\n           * (`myapp_subsection_filterx`).\n           * </div>\n           */\n          filter: invokeLater('$filterProvider', 'register'),\n\n          /**\n           * @ngdoc method\n           * @name angular.Module#controller\n           * @module ng\n           * @param {string|Object} name Controller name, or an object map of controllers where the\n           *    keys are the names and the values are the constructors.\n           * @param {Function} constructor Controller constructor function.\n           * @description\n           * See {@link ng.$controllerProvider#register $controllerProvider.register()}.\n           */\n          controller: invokeLater('$controllerProvider', 'register'),\n\n          /**\n           * @ngdoc method\n           * @name angular.Module#directive\n           * @module ng\n           * @param {string|Object} name Directive name, or an object map of directives where the\n           *    keys are the names and the values are the factories.\n           * @param {Function} directiveFactory Factory function for creating new instance of\n           * directives.\n           * @description\n           * See {@link ng.$compileProvider#directive $compileProvider.directive()}.\n           */\n          directive: invokeLater('$compileProvider', 'directive'),\n\n          /**\n           * @ngdoc method\n           * @name angular.Module#config\n           * @module ng\n           * @param {Function} configFn Execute this function on module load. Useful for service\n           *    configuration.\n           * @description\n           * Use this method to register work which needs to be performed on module loading.\n           * For more about how to configure services, see\n           * {@link providers#provider-recipe Provider Recipe}.\n           */\n          config: config,\n\n          /**\n           * @ngdoc method\n           * @name angular.Module#run\n           * @module ng\n           * @param {Function} initializationFn Execute this function after injector creation.\n           *    Useful for application initialization.\n           * @description\n           * Use this method to register work which should be performed when the injector is done\n           * loading all modules.\n           */\n          run: function(block) {\n            runBlocks.push(block);\n            return this;\n          }\n        };\n\n        if (configFn) {\n          config(configFn);\n        }\n\n        return moduleInstance;\n\n        /**\n         * @param {string} provider\n         * @param {string} method\n         * @param {String=} insertMethod\n         * @returns {angular.Module}\n         */\n        function invokeLater(provider, method, insertMethod, queue) {\n          if (!queue) queue = invokeQueue;\n          return function() {\n            queue[insertMethod || 'push']([provider, method, arguments]);\n            return moduleInstance;\n          };\n        }\n      });\n    };\n  });\n\n}\n\n/* global: toDebugString: true */\n\nfunction serializeObject(obj) {\n  var seen = [];\n\n  return JSON.stringify(obj, function(key, val) {\n    val = toJsonReplacer(key, val);\n    if (isObject(val)) {\n\n      if (seen.indexOf(val) >= 0) return '<<already seen>>';\n\n      seen.push(val);\n    }\n    return val;\n  });\n}\n\nfunction toDebugString(obj) {\n  if (typeof obj === 'function') {\n    return obj.toString().replace(/ \\{[\\s\\S]*$/, '');\n  } else if (typeof obj === 'undefined') {\n    return 'undefined';\n  } else if (typeof obj !== 'string') {\n    return serializeObject(obj);\n  }\n  return obj;\n}\n\n/* global angularModule: true,\n  version: true,\n\n  $LocaleProvider,\n  $CompileProvider,\n\n  htmlAnchorDirective,\n  inputDirective,\n  inputDirective,\n  formDirective,\n  scriptDirective,\n  selectDirective,\n  styleDirective,\n  optionDirective,\n  ngBindDirective,\n  ngBindHtmlDirective,\n  ngBindTemplateDirective,\n  ngClassDirective,\n  ngClassEvenDirective,\n  ngClassOddDirective,\n  ngCspDirective,\n  ngCloakDirective,\n  ngControllerDirective,\n  ngFormDirective,\n  ngHideDirective,\n  ngIfDirective,\n  ngIncludeDirective,\n  ngIncludeFillContentDirective,\n  ngInitDirective,\n  ngNonBindableDirective,\n  ngPluralizeDirective,\n  ngRepeatDirective,\n  ngShowDirective,\n  ngStyleDirective,\n  ngSwitchDirective,\n  ngSwitchWhenDirective,\n  ngSwitchDefaultDirective,\n  ngOptionsDirective,\n  ngTranscludeDirective,\n  ngModelDirective,\n  ngListDirective,\n  ngChangeDirective,\n  patternDirective,\n  patternDirective,\n  requiredDirective,\n  requiredDirective,\n  minlengthDirective,\n  minlengthDirective,\n  maxlengthDirective,\n  maxlengthDirective,\n  ngValueDirective,\n  ngModelOptionsDirective,\n  ngAttributeAliasDirectives,\n  ngEventDirectives,\n\n  $AnchorScrollProvider,\n  $AnimateProvider,\n  $BrowserProvider,\n  $CacheFactoryProvider,\n  $ControllerProvider,\n  $DocumentProvider,\n  $ExceptionHandlerProvider,\n  $FilterProvider,\n  $InterpolateProvider,\n  $IntervalProvider,\n  $HttpProvider,\n  $HttpBackendProvider,\n  $LocationProvider,\n  $LogProvider,\n  $ParseProvider,\n  $RootScopeProvider,\n  $QProvider,\n  $$QProvider,\n  $$SanitizeUriProvider,\n  $SceProvider,\n  $SceDelegateProvider,\n  $SnifferProvider,\n  $TemplateCacheProvider,\n  $TemplateRequestProvider,\n  $$TestabilityProvider,\n  $TimeoutProvider,\n  $$RAFProvider,\n  $$AsyncCallbackProvider,\n  $WindowProvider,\n  $$jqLiteProvider\n*/\n\n\n/**\n * @ngdoc object\n * @name angular.version\n * @module ng\n * @description\n * An object that contains information about the current AngularJS version. This object has the\n * following properties:\n *\n * - `full` – `{string}` – Full version string, such as \"0.9.18\".\n * - `major` – `{number}` – Major version number, such as \"0\".\n * - `minor` – `{number}` – Minor version number, such as \"9\".\n * - `dot` – `{number}` – Dot version number, such as \"18\".\n * - `codeName` – `{string}` – Code name of the release, such as \"jiggling-armfat\".\n */\nvar version = {\n  full: '1.3.18',    // all of these placeholder strings will be replaced by grunt's\n  major: 1,    // package task\n  minor: 3,\n  dot: 18,\n  codeName: 'collective-penmanship'\n};\n\n\nfunction publishExternalAPI(angular) {\n  extend(angular, {\n    'bootstrap': bootstrap,\n    'copy': copy,\n    'extend': extend,\n    'equals': equals,\n    'element': jqLite,\n    'forEach': forEach,\n    'injector': createInjector,\n    'noop': noop,\n    'bind': bind,\n    'toJson': toJson,\n    'fromJson': fromJson,\n    'identity': identity,\n    'isUndefined': isUndefined,\n    'isDefined': isDefined,\n    'isString': isString,\n    'isFunction': isFunction,\n    'isObject': isObject,\n    'isNumber': isNumber,\n    'isElement': isElement,\n    'isArray': isArray,\n    'version': version,\n    'isDate': isDate,\n    'lowercase': lowercase,\n    'uppercase': uppercase,\n    'callbacks': {counter: 0},\n    'getTestability': getTestability,\n    '$$minErr': minErr,\n    '$$csp': csp,\n    'reloadWithDebugInfo': reloadWithDebugInfo\n  });\n\n  angularModule = setupModuleLoader(window);\n  try {\n    angularModule('ngLocale');\n  } catch (e) {\n    angularModule('ngLocale', []).provider('$locale', $LocaleProvider);\n  }\n\n  angularModule('ng', ['ngLocale'], ['$provide',\n    function ngModule($provide) {\n      // $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.\n      $provide.provider({\n        $$sanitizeUri: $$SanitizeUriProvider\n      });\n      $provide.provider('$compile', $CompileProvider).\n        directive({\n            a: htmlAnchorDirective,\n            input: inputDirective,\n            textarea: inputDirective,\n            form: formDirective,\n            script: scriptDirective,\n            select: selectDirective,\n            style: styleDirective,\n            option: optionDirective,\n            ngBind: ngBindDirective,\n            ngBindHtml: ngBindHtmlDirective,\n            ngBindTemplate: ngBindTemplateDirective,\n            ngClass: ngClassDirective,\n            ngClassEven: ngClassEvenDirective,\n            ngClassOdd: ngClassOddDirective,\n            ngCloak: ngCloakDirective,\n            ngController: ngControllerDirective,\n            ngForm: ngFormDirective,\n            ngHide: ngHideDirective,\n            ngIf: ngIfDirective,\n            ngInclude: ngIncludeDirective,\n            ngInit: ngInitDirective,\n            ngNonBindable: ngNonBindableDirective,\n            ngPluralize: ngPluralizeDirective,\n            ngRepeat: ngRepeatDirective,\n            ngShow: ngShowDirective,\n            ngStyle: ngStyleDirective,\n            ngSwitch: ngSwitchDirective,\n            ngSwitchWhen: ngSwitchWhenDirective,\n            ngSwitchDefault: ngSwitchDefaultDirective,\n            ngOptions: ngOptionsDirective,\n            ngTransclude: ngTranscludeDirective,\n            ngModel: ngModelDirective,\n            ngList: ngListDirective,\n            ngChange: ngChangeDirective,\n            pattern: patternDirective,\n            ngPattern: patternDirective,\n            required: requiredDirective,\n            ngRequired: requiredDirective,\n            minlength: minlengthDirective,\n            ngMinlength: minlengthDirective,\n            maxlength: maxlengthDirective,\n            ngMaxlength: maxlengthDirective,\n            ngValue: ngValueDirective,\n            ngModelOptions: ngModelOptionsDirective\n        }).\n        directive({\n          ngInclude: ngIncludeFillContentDirective\n        }).\n        directive(ngAttributeAliasDirectives).\n        directive(ngEventDirectives);\n      $provide.provider({\n        $anchorScroll: $AnchorScrollProvider,\n        $animate: $AnimateProvider,\n        $browser: $BrowserProvider,\n        $cacheFactory: $CacheFactoryProvider,\n        $controller: $ControllerProvider,\n        $document: $DocumentProvider,\n        $exceptionHandler: $ExceptionHandlerProvider,\n        $filter: $FilterProvider,\n        $interpolate: $InterpolateProvider,\n        $interval: $IntervalProvider,\n        $http: $HttpProvider,\n        $httpBackend: $HttpBackendProvider,\n        $location: $LocationProvider,\n        $log: $LogProvider,\n        $parse: $ParseProvider,\n        $rootScope: $RootScopeProvider,\n        $q: $QProvider,\n        $$q: $$QProvider,\n        $sce: $SceProvider,\n        $sceDelegate: $SceDelegateProvider,\n        $sniffer: $SnifferProvider,\n        $templateCache: $TemplateCacheProvider,\n        $templateRequest: $TemplateRequestProvider,\n        $$testability: $$TestabilityProvider,\n        $timeout: $TimeoutProvider,\n        $window: $WindowProvider,\n        $$rAF: $$RAFProvider,\n        $$asyncCallback: $$AsyncCallbackProvider,\n        $$jqLite: $$jqLiteProvider\n      });\n    }\n  ]);\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *     Any commits to this file should be reviewed with security in mind.  *\n *   Changes to this file can potentially create security vulnerabilities. *\n *          An approval from 2 Core members with history of modifying      *\n *                         this file is required.                          *\n *                                                                         *\n *  Does the change somehow allow for arbitrary javascript to be executed? *\n *    Or allows for someone to change the prototype of built-in objects?   *\n *     Or gives undesired access to variables likes document or window?    *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n/* global JQLitePrototype: true,\n  addEventListenerFn: true,\n  removeEventListenerFn: true,\n  BOOLEAN_ATTR: true,\n  ALIASED_ATTR: true,\n*/\n\n//////////////////////////////////\n//JQLite\n//////////////////////////////////\n\n/**\n * @ngdoc function\n * @name angular.element\n * @module ng\n * @kind function\n *\n * @description\n * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.\n *\n * If jQuery is available, `angular.element` is an alias for the\n * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`\n * delegates to Angular's built-in subset of jQuery, called \"jQuery lite\" or \"jqLite.\"\n *\n * <div class=\"alert alert-success\">jqLite is a tiny, API-compatible subset of jQuery that allows\n * Angular to manipulate the DOM in a cross-browser compatible way. **jqLite** implements only the most\n * commonly needed functionality with the goal of having a very small footprint.</div>\n *\n * To use `jQuery`, simply ensure it is loaded before the `angular.js` file.\n *\n * <div class=\"alert\">**Note:** all element references in Angular are always wrapped with jQuery or\n * jqLite; they are never raw DOM references.</div>\n *\n * ## Angular's jqLite\n * jqLite provides only the following jQuery methods:\n *\n * - [`addClass()`](http://api.jquery.com/addClass/)\n * - [`after()`](http://api.jquery.com/after/)\n * - [`append()`](http://api.jquery.com/append/)\n * - [`attr()`](http://api.jquery.com/attr/) - Does not support functions as parameters\n * - [`bind()`](http://api.jquery.com/bind/) - Does not support namespaces, selectors or eventData\n * - [`children()`](http://api.jquery.com/children/) - Does not support selectors\n * - [`clone()`](http://api.jquery.com/clone/)\n * - [`contents()`](http://api.jquery.com/contents/)\n * - [`css()`](http://api.jquery.com/css/) - Only retrieves inline-styles, does not call `getComputedStyle()`. As a setter, does not convert numbers to strings or append 'px'.\n * - [`data()`](http://api.jquery.com/data/)\n * - [`detach()`](http://api.jquery.com/detach/)\n * - [`empty()`](http://api.jquery.com/empty/)\n * - [`eq()`](http://api.jquery.com/eq/)\n * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name\n * - [`hasClass()`](http://api.jquery.com/hasClass/)\n * - [`html()`](http://api.jquery.com/html/)\n * - [`next()`](http://api.jquery.com/next/) - Does not support selectors\n * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData\n * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces or selectors\n * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors\n * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors\n * - [`prepend()`](http://api.jquery.com/prepend/)\n * - [`prop()`](http://api.jquery.com/prop/)\n * - [`ready()`](http://api.jquery.com/ready/)\n * - [`remove()`](http://api.jquery.com/remove/)\n * - [`removeAttr()`](http://api.jquery.com/removeAttr/)\n * - [`removeClass()`](http://api.jquery.com/removeClass/)\n * - [`removeData()`](http://api.jquery.com/removeData/)\n * - [`replaceWith()`](http://api.jquery.com/replaceWith/)\n * - [`text()`](http://api.jquery.com/text/)\n * - [`toggleClass()`](http://api.jquery.com/toggleClass/)\n * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers.\n * - [`unbind()`](http://api.jquery.com/unbind/) - Does not support namespaces\n * - [`val()`](http://api.jquery.com/val/)\n * - [`wrap()`](http://api.jquery.com/wrap/)\n *\n * ## jQuery/jqLite Extras\n * Angular also provides the following additional methods and events to both jQuery and jqLite:\n *\n * ### Events\n * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event\n *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM\n *    element before it is removed.\n *\n * ### Methods\n * - `controller(name)` - retrieves the controller of the current element or its parent. By default\n *   retrieves controller associated with the `ngController` directive. If `name` is provided as\n *   camelCase directive name, then the controller for this directive will be retrieved (e.g.\n *   `'ngModel'`).\n * - `injector()` - retrieves the injector of the current element or its parent.\n * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current\n *   element or its parent. Requires {@link guide/production#disabling-debug-data Debug Data} to\n *   be enabled.\n * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the\n *   current element. This getter should be used only on elements that contain a directive which starts a new isolate\n *   scope. Calling `scope()` on this element always returns the original non-isolate scope.\n *   Requires {@link guide/production#disabling-debug-data Debug Data} to be enabled.\n * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top\n *   parent element is reached.\n *\n * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.\n * @returns {Object} jQuery object.\n */\n\nJQLite.expando = 'ng339';\n\nvar jqCache = JQLite.cache = {},\n    jqId = 1,\n    addEventListenerFn = function(element, type, fn) {\n      element.addEventListener(type, fn, false);\n    },\n    removeEventListenerFn = function(element, type, fn) {\n      element.removeEventListener(type, fn, false);\n    };\n\n/*\n * !!! This is an undocumented \"private\" function !!!\n */\nJQLite._data = function(node) {\n  //jQuery always returns an object on cache miss\n  return this.cache[node[this.expando]] || {};\n};\n\nfunction jqNextId() { return ++jqId; }\n\n\nvar SPECIAL_CHARS_REGEXP = /([\\:\\-\\_]+(.))/g;\nvar MOZ_HACK_REGEXP = /^moz([A-Z])/;\nvar MOUSE_EVENT_MAP= { mouseleave: \"mouseout\", mouseenter: \"mouseover\"};\nvar jqLiteMinErr = minErr('jqLite');\n\n/**\n * Converts snake_case to camelCase.\n * Also there is special case for Moz prefix starting with upper case letter.\n * @param name Name to normalize\n */\nfunction camelCase(name) {\n  return name.\n    replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {\n      return offset ? letter.toUpperCase() : letter;\n    }).\n    replace(MOZ_HACK_REGEXP, 'Moz$1');\n}\n\nvar SINGLE_TAG_REGEXP = /^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/;\nvar HTML_REGEXP = /<|&#?\\w+;/;\nvar TAG_NAME_REGEXP = /<([\\w:]+)/;\nvar XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi;\n\nvar wrapMap = {\n  'option': [1, '<select multiple=\"multiple\">', '</select>'],\n\n  'thead': [1, '<table>', '</table>'],\n  'col': [2, '<table><colgroup>', '</colgroup></table>'],\n  'tr': [2, '<table><tbody>', '</tbody></table>'],\n  'td': [3, '<table><tbody><tr>', '</tr></tbody></table>'],\n  '_default': [0, \"\", \"\"]\n};\n\nwrapMap.optgroup = wrapMap.option;\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n\nfunction jqLiteIsTextNode(html) {\n  return !HTML_REGEXP.test(html);\n}\n\nfunction jqLiteAcceptsData(node) {\n  // The window object can accept data but has no nodeType\n  // Otherwise we are only interested in elements (1) and documents (9)\n  var nodeType = node.nodeType;\n  return nodeType === NODE_TYPE_ELEMENT || !nodeType || nodeType === NODE_TYPE_DOCUMENT;\n}\n\nfunction jqLiteBuildFragment(html, context) {\n  var tmp, tag, wrap,\n      fragment = context.createDocumentFragment(),\n      nodes = [], i;\n\n  if (jqLiteIsTextNode(html)) {\n    // Convert non-html into a text node\n    nodes.push(context.createTextNode(html));\n  } else {\n    // Convert html into DOM nodes\n    tmp = tmp || fragment.appendChild(context.createElement(\"div\"));\n    tag = (TAG_NAME_REGEXP.exec(html) || [\"\", \"\"])[1].toLowerCase();\n    wrap = wrapMap[tag] || wrapMap._default;\n    tmp.innerHTML = wrap[1] + html.replace(XHTML_TAG_REGEXP, \"<$1></$2>\") + wrap[2];\n\n    // Descend through wrappers to the right content\n    i = wrap[0];\n    while (i--) {\n      tmp = tmp.lastChild;\n    }\n\n    nodes = concat(nodes, tmp.childNodes);\n\n    tmp = fragment.firstChild;\n    tmp.textContent = \"\";\n  }\n\n  // Remove wrapper from fragment\n  fragment.textContent = \"\";\n  fragment.innerHTML = \"\"; // Clear inner HTML\n  forEach(nodes, function(node) {\n    fragment.appendChild(node);\n  });\n\n  return fragment;\n}\n\nfunction jqLiteParseHTML(html, context) {\n  context = context || document;\n  var parsed;\n\n  if ((parsed = SINGLE_TAG_REGEXP.exec(html))) {\n    return [context.createElement(parsed[1])];\n  }\n\n  if ((parsed = jqLiteBuildFragment(html, context))) {\n    return parsed.childNodes;\n  }\n\n  return [];\n}\n\n/////////////////////////////////////////////\nfunction JQLite(element) {\n  if (element instanceof JQLite) {\n    return element;\n  }\n\n  var argIsString;\n\n  if (isString(element)) {\n    element = trim(element);\n    argIsString = true;\n  }\n  if (!(this instanceof JQLite)) {\n    if (argIsString && element.charAt(0) != '<') {\n      throw jqLiteMinErr('nosel', 'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');\n    }\n    return new JQLite(element);\n  }\n\n  if (argIsString) {\n    jqLiteAddNodes(this, jqLiteParseHTML(element));\n  } else {\n    jqLiteAddNodes(this, element);\n  }\n}\n\nfunction jqLiteClone(element) {\n  return element.cloneNode(true);\n}\n\nfunction jqLiteDealoc(element, onlyDescendants) {\n  if (!onlyDescendants) jqLiteRemoveData(element);\n\n  if (element.querySelectorAll) {\n    var descendants = element.querySelectorAll('*');\n    for (var i = 0, l = descendants.length; i < l; i++) {\n      jqLiteRemoveData(descendants[i]);\n    }\n  }\n}\n\nfunction jqLiteOff(element, type, fn, unsupported) {\n  if (isDefined(unsupported)) throw jqLiteMinErr('offargs', 'jqLite#off() does not support the `selector` argument');\n\n  var expandoStore = jqLiteExpandoStore(element);\n  var events = expandoStore && expandoStore.events;\n  var handle = expandoStore && expandoStore.handle;\n\n  if (!handle) return; //no listeners registered\n\n  if (!type) {\n    for (type in events) {\n      if (type !== '$destroy') {\n        removeEventListenerFn(element, type, handle);\n      }\n      delete events[type];\n    }\n  } else {\n    forEach(type.split(' '), function(type) {\n      if (isDefined(fn)) {\n        var listenerFns = events[type];\n        arrayRemove(listenerFns || [], fn);\n        if (listenerFns && listenerFns.length > 0) {\n          return;\n        }\n      }\n\n      removeEventListenerFn(element, type, handle);\n      delete events[type];\n    });\n  }\n}\n\nfunction jqLiteRemoveData(element, name) {\n  var expandoId = element.ng339;\n  var expandoStore = expandoId && jqCache[expandoId];\n\n  if (expandoStore) {\n    if (name) {\n      delete expandoStore.data[name];\n      return;\n    }\n\n    if (expandoStore.handle) {\n      if (expandoStore.events.$destroy) {\n        expandoStore.handle({}, '$destroy');\n      }\n      jqLiteOff(element);\n    }\n    delete jqCache[expandoId];\n    element.ng339 = undefined; // don't delete DOM expandos. IE and Chrome don't like it\n  }\n}\n\n\nfunction jqLiteExpandoStore(element, createIfNecessary) {\n  var expandoId = element.ng339,\n      expandoStore = expandoId && jqCache[expandoId];\n\n  if (createIfNecessary && !expandoStore) {\n    element.ng339 = expandoId = jqNextId();\n    expandoStore = jqCache[expandoId] = {events: {}, data: {}, handle: undefined};\n  }\n\n  return expandoStore;\n}\n\n\nfunction jqLiteData(element, key, value) {\n  if (jqLiteAcceptsData(element)) {\n\n    var isSimpleSetter = isDefined(value);\n    var isSimpleGetter = !isSimpleSetter && key && !isObject(key);\n    var massGetter = !key;\n    var expandoStore = jqLiteExpandoStore(element, !isSimpleGetter);\n    var data = expandoStore && expandoStore.data;\n\n    if (isSimpleSetter) { // data('key', value)\n      data[key] = value;\n    } else {\n      if (massGetter) {  // data()\n        return data;\n      } else {\n        if (isSimpleGetter) { // data('key')\n          // don't force creation of expandoStore if it doesn't exist yet\n          return data && data[key];\n        } else { // mass-setter: data({key1: val1, key2: val2})\n          extend(data, key);\n        }\n      }\n    }\n  }\n}\n\nfunction jqLiteHasClass(element, selector) {\n  if (!element.getAttribute) return false;\n  return ((\" \" + (element.getAttribute('class') || '') + \" \").replace(/[\\n\\t]/g, \" \").\n      indexOf(\" \" + selector + \" \") > -1);\n}\n\nfunction jqLiteRemoveClass(element, cssClasses) {\n  if (cssClasses && element.setAttribute) {\n    forEach(cssClasses.split(' '), function(cssClass) {\n      element.setAttribute('class', trim(\n          (\" \" + (element.getAttribute('class') || '') + \" \")\n          .replace(/[\\n\\t]/g, \" \")\n          .replace(\" \" + trim(cssClass) + \" \", \" \"))\n      );\n    });\n  }\n}\n\nfunction jqLiteAddClass(element, cssClasses) {\n  if (cssClasses && element.setAttribute) {\n    var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ')\n                            .replace(/[\\n\\t]/g, \" \");\n\n    forEach(cssClasses.split(' '), function(cssClass) {\n      cssClass = trim(cssClass);\n      if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {\n        existingClasses += cssClass + ' ';\n      }\n    });\n\n    element.setAttribute('class', trim(existingClasses));\n  }\n}\n\n\nfunction jqLiteAddNodes(root, elements) {\n  // THIS CODE IS VERY HOT. Don't make changes without benchmarking.\n\n  if (elements) {\n\n    // if a Node (the most common case)\n    if (elements.nodeType) {\n      root[root.length++] = elements;\n    } else {\n      var length = elements.length;\n\n      // if an Array or NodeList and not a Window\n      if (typeof length === 'number' && elements.window !== elements) {\n        if (length) {\n          for (var i = 0; i < length; i++) {\n            root[root.length++] = elements[i];\n          }\n        }\n      } else {\n        root[root.length++] = elements;\n      }\n    }\n  }\n}\n\n\nfunction jqLiteController(element, name) {\n  return jqLiteInheritedData(element, '$' + (name || 'ngController') + 'Controller');\n}\n\nfunction jqLiteInheritedData(element, name, value) {\n  // if element is the document object work with the html element instead\n  // this makes $(document).scope() possible\n  if (element.nodeType == NODE_TYPE_DOCUMENT) {\n    element = element.documentElement;\n  }\n  var names = isArray(name) ? name : [name];\n\n  while (element) {\n    for (var i = 0, ii = names.length; i < ii; i++) {\n      if ((value = jqLite.data(element, names[i])) !== undefined) return value;\n    }\n\n    // If dealing with a document fragment node with a host element, and no parent, use the host\n    // element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM\n    // to lookup parent controllers.\n    element = element.parentNode || (element.nodeType === NODE_TYPE_DOCUMENT_FRAGMENT && element.host);\n  }\n}\n\nfunction jqLiteEmpty(element) {\n  jqLiteDealoc(element, true);\n  while (element.firstChild) {\n    element.removeChild(element.firstChild);\n  }\n}\n\nfunction jqLiteRemove(element, keepData) {\n  if (!keepData) jqLiteDealoc(element);\n  var parent = element.parentNode;\n  if (parent) parent.removeChild(element);\n}\n\n\nfunction jqLiteDocumentLoaded(action, win) {\n  win = win || window;\n  if (win.document.readyState === 'complete') {\n    // Force the action to be run async for consistent behaviour\n    // from the action's point of view\n    // i.e. it will definitely not be in a $apply\n    win.setTimeout(action);\n  } else {\n    // No need to unbind this handler as load is only ever called once\n    jqLite(win).on('load', action);\n  }\n}\n\n//////////////////////////////////////////\n// Functions which are declared directly.\n//////////////////////////////////////////\nvar JQLitePrototype = JQLite.prototype = {\n  ready: function(fn) {\n    var fired = false;\n\n    function trigger() {\n      if (fired) return;\n      fired = true;\n      fn();\n    }\n\n    // check if document is already loaded\n    if (document.readyState === 'complete') {\n      setTimeout(trigger);\n    } else {\n      this.on('DOMContentLoaded', trigger); // works for modern browsers and IE9\n      // we can not use jqLite since we are not done loading and jQuery could be loaded later.\n      // jshint -W064\n      JQLite(window).on('load', trigger); // fallback to window.onload for others\n      // jshint +W064\n    }\n  },\n  toString: function() {\n    var value = [];\n    forEach(this, function(e) { value.push('' + e);});\n    return '[' + value.join(', ') + ']';\n  },\n\n  eq: function(index) {\n      return (index >= 0) ? jqLite(this[index]) : jqLite(this[this.length + index]);\n  },\n\n  length: 0,\n  push: push,\n  sort: [].sort,\n  splice: [].splice\n};\n\n//////////////////////////////////////////\n// Functions iterating getter/setters.\n// these functions return self on setter and\n// value on get.\n//////////////////////////////////////////\nvar BOOLEAN_ATTR = {};\nforEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function(value) {\n  BOOLEAN_ATTR[lowercase(value)] = value;\n});\nvar BOOLEAN_ELEMENTS = {};\nforEach('input,select,option,textarea,button,form,details'.split(','), function(value) {\n  BOOLEAN_ELEMENTS[value] = true;\n});\nvar ALIASED_ATTR = {\n  'ngMinlength': 'minlength',\n  'ngMaxlength': 'maxlength',\n  'ngMin': 'min',\n  'ngMax': 'max',\n  'ngPattern': 'pattern'\n};\n\nfunction getBooleanAttrName(element, name) {\n  // check dom last since we will most likely fail on name\n  var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];\n\n  // booleanAttr is here twice to minimize DOM access\n  return booleanAttr && BOOLEAN_ELEMENTS[nodeName_(element)] && booleanAttr;\n}\n\nfunction getAliasedAttrName(element, name) {\n  var nodeName = element.nodeName;\n  return (nodeName === 'INPUT' || nodeName === 'TEXTAREA') && ALIASED_ATTR[name];\n}\n\nforEach({\n  data: jqLiteData,\n  removeData: jqLiteRemoveData\n}, function(fn, name) {\n  JQLite[name] = fn;\n});\n\nforEach({\n  data: jqLiteData,\n  inheritedData: jqLiteInheritedData,\n\n  scope: function(element) {\n    // Can't use jqLiteData here directly so we stay compatible with jQuery!\n    return jqLite.data(element, '$scope') || jqLiteInheritedData(element.parentNode || element, ['$isolateScope', '$scope']);\n  },\n\n  isolateScope: function(element) {\n    // Can't use jqLiteData here directly so we stay compatible with jQuery!\n    return jqLite.data(element, '$isolateScope') || jqLite.data(element, '$isolateScopeNoTemplate');\n  },\n\n  controller: jqLiteController,\n\n  injector: function(element) {\n    return jqLiteInheritedData(element, '$injector');\n  },\n\n  removeAttr: function(element, name) {\n    element.removeAttribute(name);\n  },\n\n  hasClass: jqLiteHasClass,\n\n  css: function(element, name, value) {\n    name = camelCase(name);\n\n    if (isDefined(value)) {\n      element.style[name] = value;\n    } else {\n      return element.style[name];\n    }\n  },\n\n  attr: function(element, name, value) {\n    var nodeType = element.nodeType;\n    if (nodeType === NODE_TYPE_TEXT || nodeType === NODE_TYPE_ATTRIBUTE || nodeType === NODE_TYPE_COMMENT) {\n      return;\n    }\n    var lowercasedName = lowercase(name);\n    if (BOOLEAN_ATTR[lowercasedName]) {\n      if (isDefined(value)) {\n        if (!!value) {\n          element[name] = true;\n          element.setAttribute(name, lowercasedName);\n        } else {\n          element[name] = false;\n          element.removeAttribute(lowercasedName);\n        }\n      } else {\n        return (element[name] ||\n                 (element.attributes.getNamedItem(name) || noop).specified)\n               ? lowercasedName\n               : undefined;\n      }\n    } else if (isDefined(value)) {\n      element.setAttribute(name, value);\n    } else if (element.getAttribute) {\n      // the extra argument \"2\" is to get the right thing for a.href in IE, see jQuery code\n      // some elements (e.g. Document) don't have get attribute, so return undefined\n      var ret = element.getAttribute(name, 2);\n      // normalize non-existing attributes to undefined (as jQuery)\n      return ret === null ? undefined : ret;\n    }\n  },\n\n  prop: function(element, name, value) {\n    if (isDefined(value)) {\n      element[name] = value;\n    } else {\n      return element[name];\n    }\n  },\n\n  text: (function() {\n    getText.$dv = '';\n    return getText;\n\n    function getText(element, value) {\n      if (isUndefined(value)) {\n        var nodeType = element.nodeType;\n        return (nodeType === NODE_TYPE_ELEMENT || nodeType === NODE_TYPE_TEXT) ? element.textContent : '';\n      }\n      element.textContent = value;\n    }\n  })(),\n\n  val: function(element, value) {\n    if (isUndefined(value)) {\n      if (element.multiple && nodeName_(element) === 'select') {\n        var result = [];\n        forEach(element.options, function(option) {\n          if (option.selected) {\n            result.push(option.value || option.text);\n          }\n        });\n        return result.length === 0 ? null : result;\n      }\n      return element.value;\n    }\n    element.value = value;\n  },\n\n  html: function(element, value) {\n    if (isUndefined(value)) {\n      return element.innerHTML;\n    }\n    jqLiteDealoc(element, true);\n    element.innerHTML = value;\n  },\n\n  empty: jqLiteEmpty\n}, function(fn, name) {\n  /**\n   * Properties: writes return selection, reads return first value\n   */\n  JQLite.prototype[name] = function(arg1, arg2) {\n    var i, key;\n    var nodeCount = this.length;\n\n    // jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it\n    // in a way that survives minification.\n    // jqLiteEmpty takes no arguments but is a setter.\n    if (fn !== jqLiteEmpty &&\n        (((fn.length == 2 && (fn !== jqLiteHasClass && fn !== jqLiteController)) ? arg1 : arg2) === undefined)) {\n      if (isObject(arg1)) {\n\n        // we are a write, but the object properties are the key/values\n        for (i = 0; i < nodeCount; i++) {\n          if (fn === jqLiteData) {\n            // data() takes the whole object in jQuery\n            fn(this[i], arg1);\n          } else {\n            for (key in arg1) {\n              fn(this[i], key, arg1[key]);\n            }\n          }\n        }\n        // return self for chaining\n        return this;\n      } else {\n        // we are a read, so read the first child.\n        // TODO: do we still need this?\n        var value = fn.$dv;\n        // Only if we have $dv do we iterate over all, otherwise it is just the first element.\n        var jj = (value === undefined) ? Math.min(nodeCount, 1) : nodeCount;\n        for (var j = 0; j < jj; j++) {\n          var nodeValue = fn(this[j], arg1, arg2);\n          value = value ? value + nodeValue : nodeValue;\n        }\n        return value;\n      }\n    } else {\n      // we are a write, so apply to all children\n      for (i = 0; i < nodeCount; i++) {\n        fn(this[i], arg1, arg2);\n      }\n      // return self for chaining\n      return this;\n    }\n  };\n});\n\nfunction createEventHandler(element, events) {\n  var eventHandler = function(event, type) {\n    // jQuery specific api\n    event.isDefaultPrevented = function() {\n      return event.defaultPrevented;\n    };\n\n    var eventFns = events[type || event.type];\n    var eventFnsLength = eventFns ? eventFns.length : 0;\n\n    if (!eventFnsLength) return;\n\n    if (isUndefined(event.immediatePropagationStopped)) {\n      var originalStopImmediatePropagation = event.stopImmediatePropagation;\n      event.stopImmediatePropagation = function() {\n        event.immediatePropagationStopped = true;\n\n        if (event.stopPropagation) {\n          event.stopPropagation();\n        }\n\n        if (originalStopImmediatePropagation) {\n          originalStopImmediatePropagation.call(event);\n        }\n      };\n    }\n\n    event.isImmediatePropagationStopped = function() {\n      return event.immediatePropagationStopped === true;\n    };\n\n    // Copy event handlers in case event handlers array is modified during execution.\n    if ((eventFnsLength > 1)) {\n      eventFns = shallowCopy(eventFns);\n    }\n\n    for (var i = 0; i < eventFnsLength; i++) {\n      if (!event.isImmediatePropagationStopped()) {\n        eventFns[i].call(element, event);\n      }\n    }\n  };\n\n  // TODO: this is a hack for angularMocks/clearDataCache that makes it possible to deregister all\n  //       events on `element`\n  eventHandler.elem = element;\n  return eventHandler;\n}\n\n//////////////////////////////////////////\n// Functions iterating traversal.\n// These functions chain results into a single\n// selector.\n//////////////////////////////////////////\nforEach({\n  removeData: jqLiteRemoveData,\n\n  on: function jqLiteOn(element, type, fn, unsupported) {\n    if (isDefined(unsupported)) throw jqLiteMinErr('onargs', 'jqLite#on() does not support the `selector` or `eventData` parameters');\n\n    // Do not add event handlers to non-elements because they will not be cleaned up.\n    if (!jqLiteAcceptsData(element)) {\n      return;\n    }\n\n    var expandoStore = jqLiteExpandoStore(element, true);\n    var events = expandoStore.events;\n    var handle = expandoStore.handle;\n\n    if (!handle) {\n      handle = expandoStore.handle = createEventHandler(element, events);\n    }\n\n    // http://jsperf.com/string-indexof-vs-split\n    var types = type.indexOf(' ') >= 0 ? type.split(' ') : [type];\n    var i = types.length;\n\n    while (i--) {\n      type = types[i];\n      var eventFns = events[type];\n\n      if (!eventFns) {\n        events[type] = [];\n\n        if (type === 'mouseenter' || type === 'mouseleave') {\n          // Refer to jQuery's implementation of mouseenter & mouseleave\n          // Read about mouseenter and mouseleave:\n          // http://www.quirksmode.org/js/events_mouse.html#link8\n\n          jqLiteOn(element, MOUSE_EVENT_MAP[type], function(event) {\n            var target = this, related = event.relatedTarget;\n            // For mousenter/leave call the handler if related is outside the target.\n            // NB: No relatedTarget if the mouse left/entered the browser window\n            if (!related || (related !== target && !target.contains(related))) {\n              handle(event, type);\n            }\n          });\n\n        } else {\n          if (type !== '$destroy') {\n            addEventListenerFn(element, type, handle);\n          }\n        }\n        eventFns = events[type];\n      }\n      eventFns.push(fn);\n    }\n  },\n\n  off: jqLiteOff,\n\n  one: function(element, type, fn) {\n    element = jqLite(element);\n\n    //add the listener twice so that when it is called\n    //you can remove the original function and still be\n    //able to call element.off(ev, fn) normally\n    element.on(type, function onFn() {\n      element.off(type, fn);\n      element.off(type, onFn);\n    });\n    element.on(type, fn);\n  },\n\n  replaceWith: function(element, replaceNode) {\n    var index, parent = element.parentNode;\n    jqLiteDealoc(element);\n    forEach(new JQLite(replaceNode), function(node) {\n      if (index) {\n        parent.insertBefore(node, index.nextSibling);\n      } else {\n        parent.replaceChild(node, element);\n      }\n      index = node;\n    });\n  },\n\n  children: function(element) {\n    var children = [];\n    forEach(element.childNodes, function(element) {\n      if (element.nodeType === NODE_TYPE_ELEMENT)\n        children.push(element);\n    });\n    return children;\n  },\n\n  contents: function(element) {\n    return element.contentDocument || element.childNodes || [];\n  },\n\n  append: function(element, node) {\n    var nodeType = element.nodeType;\n    if (nodeType !== NODE_TYPE_ELEMENT && nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT) return;\n\n    node = new JQLite(node);\n\n    for (var i = 0, ii = node.length; i < ii; i++) {\n      var child = node[i];\n      element.appendChild(child);\n    }\n  },\n\n  prepend: function(element, node) {\n    if (element.nodeType === NODE_TYPE_ELEMENT) {\n      var index = element.firstChild;\n      forEach(new JQLite(node), function(child) {\n        element.insertBefore(child, index);\n      });\n    }\n  },\n\n  wrap: function(element, wrapNode) {\n    wrapNode = jqLite(wrapNode).eq(0).clone()[0];\n    var parent = element.parentNode;\n    if (parent) {\n      parent.replaceChild(wrapNode, element);\n    }\n    wrapNode.appendChild(element);\n  },\n\n  remove: jqLiteRemove,\n\n  detach: function(element) {\n    jqLiteRemove(element, true);\n  },\n\n  after: function(element, newElement) {\n    var index = element, parent = element.parentNode;\n    newElement = new JQLite(newElement);\n\n    for (var i = 0, ii = newElement.length; i < ii; i++) {\n      var node = newElement[i];\n      parent.insertBefore(node, index.nextSibling);\n      index = node;\n    }\n  },\n\n  addClass: jqLiteAddClass,\n  removeClass: jqLiteRemoveClass,\n\n  toggleClass: function(element, selector, condition) {\n    if (selector) {\n      forEach(selector.split(' '), function(className) {\n        var classCondition = condition;\n        if (isUndefined(classCondition)) {\n          classCondition = !jqLiteHasClass(element, className);\n        }\n        (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);\n      });\n    }\n  },\n\n  parent: function(element) {\n    var parent = element.parentNode;\n    return parent && parent.nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT ? parent : null;\n  },\n\n  next: function(element) {\n    return element.nextElementSibling;\n  },\n\n  find: function(element, selector) {\n    if (element.getElementsByTagName) {\n      return element.getElementsByTagName(selector);\n    } else {\n      return [];\n    }\n  },\n\n  clone: jqLiteClone,\n\n  triggerHandler: function(element, event, extraParameters) {\n\n    var dummyEvent, eventFnsCopy, handlerArgs;\n    var eventName = event.type || event;\n    var expandoStore = jqLiteExpandoStore(element);\n    var events = expandoStore && expandoStore.events;\n    var eventFns = events && events[eventName];\n\n    if (eventFns) {\n      // Create a dummy event to pass to the handlers\n      dummyEvent = {\n        preventDefault: function() { this.defaultPrevented = true; },\n        isDefaultPrevented: function() { return this.defaultPrevented === true; },\n        stopImmediatePropagation: function() { this.immediatePropagationStopped = true; },\n        isImmediatePropagationStopped: function() { return this.immediatePropagationStopped === true; },\n        stopPropagation: noop,\n        type: eventName,\n        target: element\n      };\n\n      // If a custom event was provided then extend our dummy event with it\n      if (event.type) {\n        dummyEvent = extend(dummyEvent, event);\n      }\n\n      // Copy event handlers in case event handlers array is modified during execution.\n      eventFnsCopy = shallowCopy(eventFns);\n      handlerArgs = extraParameters ? [dummyEvent].concat(extraParameters) : [dummyEvent];\n\n      forEach(eventFnsCopy, function(fn) {\n        if (!dummyEvent.isImmediatePropagationStopped()) {\n          fn.apply(element, handlerArgs);\n        }\n      });\n    }\n  }\n}, function(fn, name) {\n  /**\n   * chaining functions\n   */\n  JQLite.prototype[name] = function(arg1, arg2, arg3) {\n    var value;\n\n    for (var i = 0, ii = this.length; i < ii; i++) {\n      if (isUndefined(value)) {\n        value = fn(this[i], arg1, arg2, arg3);\n        if (isDefined(value)) {\n          // any function which returns a value needs to be wrapped\n          value = jqLite(value);\n        }\n      } else {\n        jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));\n      }\n    }\n    return isDefined(value) ? value : this;\n  };\n\n  // bind legacy bind/unbind to on/off\n  JQLite.prototype.bind = JQLite.prototype.on;\n  JQLite.prototype.unbind = JQLite.prototype.off;\n});\n\n\n// Provider for private $$jqLite service\nfunction $$jqLiteProvider() {\n  this.$get = function $$jqLite() {\n    return extend(JQLite, {\n      hasClass: function(node, classes) {\n        if (node.attr) node = node[0];\n        return jqLiteHasClass(node, classes);\n      },\n      addClass: function(node, classes) {\n        if (node.attr) node = node[0];\n        return jqLiteAddClass(node, classes);\n      },\n      removeClass: function(node, classes) {\n        if (node.attr) node = node[0];\n        return jqLiteRemoveClass(node, classes);\n      }\n    });\n  };\n}\n\n/**\n * Computes a hash of an 'obj'.\n * Hash of a:\n *  string is string\n *  number is number as string\n *  object is either result of calling $$hashKey function on the object or uniquely generated id,\n *         that is also assigned to the $$hashKey property of the object.\n *\n * @param obj\n * @returns {string} hash string such that the same input will have the same hash string.\n *         The resulting string key is in 'type:hashKey' format.\n */\nfunction hashKey(obj, nextUidFn) {\n  var key = obj && obj.$$hashKey;\n\n  if (key) {\n    if (typeof key === 'function') {\n      key = obj.$$hashKey();\n    }\n    return key;\n  }\n\n  var objType = typeof obj;\n  if (objType == 'function' || (objType == 'object' && obj !== null)) {\n    key = obj.$$hashKey = objType + ':' + (nextUidFn || nextUid)();\n  } else {\n    key = objType + ':' + obj;\n  }\n\n  return key;\n}\n\n/**\n * HashMap which can use objects as keys\n */\nfunction HashMap(array, isolatedUid) {\n  if (isolatedUid) {\n    var uid = 0;\n    this.nextUid = function() {\n      return ++uid;\n    };\n  }\n  forEach(array, this.put, this);\n}\nHashMap.prototype = {\n  /**\n   * Store key value pair\n   * @param key key to store can be any type\n   * @param value value to store can be any type\n   */\n  put: function(key, value) {\n    this[hashKey(key, this.nextUid)] = value;\n  },\n\n  /**\n   * @param key\n   * @returns {Object} the value for the key\n   */\n  get: function(key) {\n    return this[hashKey(key, this.nextUid)];\n  },\n\n  /**\n   * Remove the key/value pair\n   * @param key\n   */\n  remove: function(key) {\n    var value = this[key = hashKey(key, this.nextUid)];\n    delete this[key];\n    return value;\n  }\n};\n\n/**\n * @ngdoc function\n * @module ng\n * @name angular.injector\n * @kind function\n *\n * @description\n * Creates an injector object that can be used for retrieving services as well as for\n * dependency injection (see {@link guide/di dependency injection}).\n *\n * @param {Array.<string|Function>} modules A list of module functions or their aliases. See\n *     {@link angular.module}. The `ng` module must be explicitly added.\n * @param {boolean=} [strictDi=false] Whether the injector should be in strict mode, which\n *     disallows argument name annotation inference.\n * @returns {injector} Injector object. See {@link auto.$injector $injector}.\n *\n * @example\n * Typical usage\n * ```js\n *   // create an injector\n *   var $injector = angular.injector(['ng']);\n *\n *   // use the injector to kick off your application\n *   // use the type inference to auto inject arguments, or use implicit injection\n *   $injector.invoke(function($rootScope, $compile, $document) {\n *     $compile($document)($rootScope);\n *     $rootScope.$digest();\n *   });\n * ```\n *\n * Sometimes you want to get access to the injector of a currently running Angular app\n * from outside Angular. Perhaps, you want to inject and compile some markup after the\n * application has been bootstrapped. You can do this using the extra `injector()` added\n * to JQuery/jqLite elements. See {@link angular.element}.\n *\n * *This is fairly rare but could be the case if a third party library is injecting the\n * markup.*\n *\n * In the following example a new block of HTML containing a `ng-controller`\n * directive is added to the end of the document body by JQuery. We then compile and link\n * it into the current AngularJS scope.\n *\n * ```js\n * var $div = $('<div ng-controller=\"MyCtrl\">{{content.label}}</div>');\n * $(document.body).append($div);\n *\n * angular.element(document).injector().invoke(function($compile) {\n *   var scope = angular.element($div).scope();\n *   $compile($div)(scope);\n * });\n * ```\n */\n\n\n/**\n * @ngdoc module\n * @name auto\n * @description\n *\n * Implicit module which gets automatically added to each {@link auto.$injector $injector}.\n */\n\nvar FN_ARGS = /^function\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m;\nvar FN_ARG_SPLIT = /,/;\nvar FN_ARG = /^\\s*(_?)(\\S+?)\\1\\s*$/;\nvar STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\nvar $injectorMinErr = minErr('$injector');\n\nfunction anonFn(fn) {\n  // For anonymous functions, showing at the very least the function signature can help in\n  // debugging.\n  var fnText = fn.toString().replace(STRIP_COMMENTS, ''),\n      args = fnText.match(FN_ARGS);\n  if (args) {\n    return 'function(' + (args[1] || '').replace(/[\\s\\r\\n]+/, ' ') + ')';\n  }\n  return 'fn';\n}\n\nfunction annotate(fn, strictDi, name) {\n  var $inject,\n      fnText,\n      argDecl,\n      last;\n\n  if (typeof fn === 'function') {\n    if (!($inject = fn.$inject)) {\n      $inject = [];\n      if (fn.length) {\n        if (strictDi) {\n          if (!isString(name) || !name) {\n            name = fn.name || anonFn(fn);\n          }\n          throw $injectorMinErr('strictdi',\n            '{0} is not using explicit annotation and cannot be invoked in strict mode', name);\n        }\n        fnText = fn.toString().replace(STRIP_COMMENTS, '');\n        argDecl = fnText.match(FN_ARGS);\n        forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg) {\n          arg.replace(FN_ARG, function(all, underscore, name) {\n            $inject.push(name);\n          });\n        });\n      }\n      fn.$inject = $inject;\n    }\n  } else if (isArray(fn)) {\n    last = fn.length - 1;\n    assertArgFn(fn[last], 'fn');\n    $inject = fn.slice(0, last);\n  } else {\n    assertArgFn(fn, 'fn', true);\n  }\n  return $inject;\n}\n\n///////////////////////////////////////\n\n/**\n * @ngdoc service\n * @name $injector\n *\n * @description\n *\n * `$injector` is used to retrieve object instances as defined by\n * {@link auto.$provide provider}, instantiate types, invoke methods,\n * and load modules.\n *\n * The following always holds true:\n *\n * ```js\n *   var $injector = angular.injector();\n *   expect($injector.get('$injector')).toBe($injector);\n *   expect($injector.invoke(function($injector) {\n *     return $injector;\n *   })).toBe($injector);\n * ```\n *\n * # Injection Function Annotation\n *\n * JavaScript does not have annotations, and annotations are needed for dependency injection. The\n * following are all valid ways of annotating function with injection arguments and are equivalent.\n *\n * ```js\n *   // inferred (only works if code not minified/obfuscated)\n *   $injector.invoke(function(serviceA){});\n *\n *   // annotated\n *   function explicit(serviceA) {};\n *   explicit.$inject = ['serviceA'];\n *   $injector.invoke(explicit);\n *\n *   // inline\n *   $injector.invoke(['serviceA', function(serviceA){}]);\n * ```\n *\n * ## Inference\n *\n * In JavaScript calling `toString()` on a function returns the function definition. The definition\n * can then be parsed and the function arguments can be extracted. This method of discovering\n * annotations is disallowed when the injector is in strict mode.\n * *NOTE:* This does not work with minification, and obfuscation tools since these tools change the\n * argument names.\n *\n * ## `$inject` Annotation\n * By adding an `$inject` property onto a function the injection parameters can be specified.\n *\n * ## Inline\n * As an array of injection names, where the last item in the array is the function to call.\n */\n\n/**\n * @ngdoc method\n * @name $injector#get\n *\n * @description\n * Return an instance of the service.\n *\n * @param {string} name The name of the instance to retrieve.\n * @param {string=} caller An optional string to provide the origin of the function call for error messages.\n * @return {*} The instance.\n */\n\n/**\n * @ngdoc method\n * @name $injector#invoke\n *\n * @description\n * Invoke the method and supply the method arguments from the `$injector`.\n *\n * @param {Function|Array.<string|Function>} fn The injectable function to invoke. Function parameters are\n *   injected according to the {@link guide/di $inject Annotation} rules.\n * @param {Object=} self The `this` for the invoked method.\n * @param {Object=} locals Optional object. If preset then any argument names are read from this\n *                         object first, before the `$injector` is consulted.\n * @returns {*} the value returned by the invoked `fn` function.\n */\n\n/**\n * @ngdoc method\n * @name $injector#has\n *\n * @description\n * Allows the user to query if the particular service exists.\n *\n * @param {string} name Name of the service to query.\n * @returns {boolean} `true` if injector has given service.\n */\n\n/**\n * @ngdoc method\n * @name $injector#instantiate\n * @description\n * Create a new instance of JS type. The method takes a constructor function, invokes the new\n * operator, and supplies all of the arguments to the constructor function as specified by the\n * constructor annotation.\n *\n * @param {Function} Type Annotated constructor function.\n * @param {Object=} locals Optional object. If preset then any argument names are read from this\n * object first, before the `$injector` is consulted.\n * @returns {Object} new instance of `Type`.\n */\n\n/**\n * @ngdoc method\n * @name $injector#annotate\n *\n * @description\n * Returns an array of service names which the function is requesting for injection. This API is\n * used by the injector to determine which services need to be injected into the function when the\n * function is invoked. There are three ways in which the function can be annotated with the needed\n * dependencies.\n *\n * # Argument names\n *\n * The simplest form is to extract the dependencies from the arguments of the function. This is done\n * by converting the function into a string using `toString()` method and extracting the argument\n * names.\n * ```js\n *   // Given\n *   function MyController($scope, $route) {\n *     // ...\n *   }\n *\n *   // Then\n *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);\n * ```\n *\n * You can disallow this method by using strict injection mode.\n *\n * This method does not work with code minification / obfuscation. For this reason the following\n * annotation strategies are supported.\n *\n * # The `$inject` property\n *\n * If a function has an `$inject` property and its value is an array of strings, then the strings\n * represent names of services to be injected into the function.\n * ```js\n *   // Given\n *   var MyController = function(obfuscatedScope, obfuscatedRoute) {\n *     // ...\n *   }\n *   // Define function dependencies\n *   MyController['$inject'] = ['$scope', '$route'];\n *\n *   // Then\n *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);\n * ```\n *\n * # The array notation\n *\n * It is often desirable to inline Injected functions and that's when setting the `$inject` property\n * is very inconvenient. In these situations using the array notation to specify the dependencies in\n * a way that survives minification is a better choice:\n *\n * ```js\n *   // We wish to write this (not minification / obfuscation safe)\n *   injector.invoke(function($compile, $rootScope) {\n *     // ...\n *   });\n *\n *   // We are forced to write break inlining\n *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {\n *     // ...\n *   };\n *   tmpFn.$inject = ['$compile', '$rootScope'];\n *   injector.invoke(tmpFn);\n *\n *   // To better support inline function the inline annotation is supported\n *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {\n *     // ...\n *   }]);\n *\n *   // Therefore\n *   expect(injector.annotate(\n *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])\n *    ).toEqual(['$compile', '$rootScope']);\n * ```\n *\n * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to\n * be retrieved as described above.\n *\n * @param {boolean=} [strictDi=false] Disallow argument name annotation inference.\n *\n * @returns {Array.<string>} The names of the services which the function requires.\n */\n\n\n\n\n/**\n * @ngdoc service\n * @name $provide\n *\n * @description\n *\n * The {@link auto.$provide $provide} service has a number of methods for registering components\n * with the {@link auto.$injector $injector}. Many of these functions are also exposed on\n * {@link angular.Module}.\n *\n * An Angular **service** is a singleton object created by a **service factory**.  These **service\n * factories** are functions which, in turn, are created by a **service provider**.\n * The **service providers** are constructor functions. When instantiated they must contain a\n * property called `$get`, which holds the **service factory** function.\n *\n * When you request a service, the {@link auto.$injector $injector} is responsible for finding the\n * correct **service provider**, instantiating it and then calling its `$get` **service factory**\n * function to get the instance of the **service**.\n *\n * Often services have no configuration options and there is no need to add methods to the service\n * provider.  The provider will be no more than a constructor function with a `$get` property. For\n * these cases the {@link auto.$provide $provide} service has additional helper methods to register\n * services without specifying a provider.\n *\n * * {@link auto.$provide#provider provider(provider)} - registers a **service provider** with the\n *     {@link auto.$injector $injector}\n * * {@link auto.$provide#constant constant(obj)} - registers a value/object that can be accessed by\n *     providers and services.\n * * {@link auto.$provide#value value(obj)} - registers a value/object that can only be accessed by\n *     services, not providers.\n * * {@link auto.$provide#factory factory(fn)} - registers a service **factory function**, `fn`,\n *     that will be wrapped in a **service provider** object, whose `$get` property will contain the\n *     given factory function.\n * * {@link auto.$provide#service service(class)} - registers a **constructor function**, `class`\n *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate\n *      a new object using the given constructor function.\n *\n * See the individual methods for more information and examples.\n */\n\n/**\n * @ngdoc method\n * @name $provide#provider\n * @description\n *\n * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions\n * are constructor functions, whose instances are responsible for \"providing\" a factory for a\n * service.\n *\n * Service provider names start with the name of the service they provide followed by `Provider`.\n * For example, the {@link ng.$log $log} service has a provider called\n * {@link ng.$logProvider $logProvider}.\n *\n * Service provider objects can have additional methods which allow configuration of the provider\n * and its service. Importantly, you can configure what kind of service is created by the `$get`\n * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a\n * method {@link ng.$logProvider#debugEnabled debugEnabled}\n * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the\n * console or not.\n *\n * @param {string} name The name of the instance. NOTE: the provider will be available under `name +\n                        'Provider'` key.\n * @param {(Object|function())} provider If the provider is:\n *\n *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using\n *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.\n *   - `Constructor`: a new instance of the provider will be created using\n *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.\n *\n * @returns {Object} registered provider instance\n\n * @example\n *\n * The following example shows how to create a simple event tracking service and register it using\n * {@link auto.$provide#provider $provide.provider()}.\n *\n * ```js\n *  // Define the eventTracker provider\n *  function EventTrackerProvider() {\n *    var trackingUrl = '/track';\n *\n *    // A provider method for configuring where the tracked events should been saved\n *    this.setTrackingUrl = function(url) {\n *      trackingUrl = url;\n *    };\n *\n *    // The service factory function\n *    this.$get = ['$http', function($http) {\n *      var trackedEvents = {};\n *      return {\n *        // Call this to track an event\n *        event: function(event) {\n *          var count = trackedEvents[event] || 0;\n *          count += 1;\n *          trackedEvents[event] = count;\n *          return count;\n *        },\n *        // Call this to save the tracked events to the trackingUrl\n *        save: function() {\n *          $http.post(trackingUrl, trackedEvents);\n *        }\n *      };\n *    }];\n *  }\n *\n *  describe('eventTracker', function() {\n *    var postSpy;\n *\n *    beforeEach(module(function($provide) {\n *      // Register the eventTracker provider\n *      $provide.provider('eventTracker', EventTrackerProvider);\n *    }));\n *\n *    beforeEach(module(function(eventTrackerProvider) {\n *      // Configure eventTracker provider\n *      eventTrackerProvider.setTrackingUrl('/custom-track');\n *    }));\n *\n *    it('tracks events', inject(function(eventTracker) {\n *      expect(eventTracker.event('login')).toEqual(1);\n *      expect(eventTracker.event('login')).toEqual(2);\n *    }));\n *\n *    it('saves to the tracking url', inject(function(eventTracker, $http) {\n *      postSpy = spyOn($http, 'post');\n *      eventTracker.event('login');\n *      eventTracker.save();\n *      expect(postSpy).toHaveBeenCalled();\n *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');\n *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');\n *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });\n *    }));\n *  });\n * ```\n */\n\n/**\n * @ngdoc method\n * @name $provide#factory\n * @description\n *\n * Register a **service factory**, which will be called to return the service instance.\n * This is short for registering a service where its provider consists of only a `$get` property,\n * which is the given service factory function.\n * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to\n * configure your service in a provider.\n *\n * @param {string} name The name of the instance.\n * @param {Function|Array.<string|Function>} $getFn The injectable $getFn for the instance creation.\n *                      Internally this is a short hand for `$provide.provider(name, {$get: $getFn})`.\n * @returns {Object} registered provider instance\n *\n * @example\n * Here is an example of registering a service\n * ```js\n *   $provide.factory('ping', ['$http', function($http) {\n *     return function ping() {\n *       return $http.send('/ping');\n *     };\n *   }]);\n * ```\n * You would then inject and use this service like this:\n * ```js\n *   someModule.controller('Ctrl', ['ping', function(ping) {\n *     ping();\n *   }]);\n * ```\n */\n\n\n/**\n * @ngdoc method\n * @name $provide#service\n * @description\n *\n * Register a **service constructor**, which will be invoked with `new` to create the service\n * instance.\n * This is short for registering a service where its provider's `$get` property is the service\n * constructor function that will be used to instantiate the service instance.\n *\n * You should use {@link auto.$provide#service $provide.service(class)} if you define your service\n * as a type/class.\n *\n * @param {string} name The name of the instance.\n * @param {Function|Array.<string|Function>} constructor An injectable class (constructor function)\n *     that will be instantiated.\n * @returns {Object} registered provider instance\n *\n * @example\n * Here is an example of registering a service using\n * {@link auto.$provide#service $provide.service(class)}.\n * ```js\n *   var Ping = function($http) {\n *     this.$http = $http;\n *   };\n *\n *   Ping.$inject = ['$http'];\n *\n *   Ping.prototype.send = function() {\n *     return this.$http.get('/ping');\n *   };\n *   $provide.service('ping', Ping);\n * ```\n * You would then inject and use this service like this:\n * ```js\n *   someModule.controller('Ctrl', ['ping', function(ping) {\n *     ping.send();\n *   }]);\n * ```\n */\n\n\n/**\n * @ngdoc method\n * @name $provide#value\n * @description\n *\n * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a\n * number, an array, an object or a function.  This is short for registering a service where its\n * provider's `$get` property is a factory function that takes no arguments and returns the **value\n * service**.\n *\n * Value services are similar to constant services, except that they cannot be injected into a\n * module configuration function (see {@link angular.Module#config}) but they can be overridden by\n * an Angular\n * {@link auto.$provide#decorator decorator}.\n *\n * @param {string} name The name of the instance.\n * @param {*} value The value.\n * @returns {Object} registered provider instance\n *\n * @example\n * Here are some examples of creating value services.\n * ```js\n *   $provide.value('ADMIN_USER', 'admin');\n *\n *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });\n *\n *   $provide.value('halfOf', function(value) {\n *     return value / 2;\n *   });\n * ```\n */\n\n\n/**\n * @ngdoc method\n * @name $provide#constant\n * @description\n *\n * Register a **constant service**, such as a string, a number, an array, an object or a function,\n * with the {@link auto.$injector $injector}. Unlike {@link auto.$provide#value value} it can be\n * injected into a module configuration function (see {@link angular.Module#config}) and it cannot\n * be overridden by an Angular {@link auto.$provide#decorator decorator}.\n *\n * @param {string} name The name of the constant.\n * @param {*} value The constant value.\n * @returns {Object} registered instance\n *\n * @example\n * Here a some examples of creating constants:\n * ```js\n *   $provide.constant('SHARD_HEIGHT', 306);\n *\n *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);\n *\n *   $provide.constant('double', function(value) {\n *     return value * 2;\n *   });\n * ```\n */\n\n\n/**\n * @ngdoc method\n * @name $provide#decorator\n * @description\n *\n * Register a **service decorator** with the {@link auto.$injector $injector}. A service decorator\n * intercepts the creation of a service, allowing it to override or modify the behaviour of the\n * service. The object returned by the decorator may be the original service, or a new service\n * object which replaces or wraps and delegates to the original service.\n *\n * @param {string} name The name of the service to decorate.\n * @param {Function|Array.<string|Function>} decorator This function will be invoked when the service needs to be\n *    instantiated and should return the decorated service instance. The function is called using\n *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.\n *    Local injection arguments:\n *\n *    * `$delegate` - The original service instance, which can be monkey patched, configured,\n *      decorated or delegated to.\n *\n * @example\n * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting\n * calls to {@link ng.$log#error $log.warn()}.\n * ```js\n *   $provide.decorator('$log', ['$delegate', function($delegate) {\n *     $delegate.warn = $delegate.error;\n *     return $delegate;\n *   }]);\n * ```\n */\n\n\nfunction createInjector(modulesToLoad, strictDi) {\n  strictDi = (strictDi === true);\n  var INSTANTIATING = {},\n      providerSuffix = 'Provider',\n      path = [],\n      loadedModules = new HashMap([], true),\n      providerCache = {\n        $provide: {\n            provider: supportObject(provider),\n            factory: supportObject(factory),\n            service: supportObject(service),\n            value: supportObject(value),\n            constant: supportObject(constant),\n            decorator: decorator\n          }\n      },\n      providerInjector = (providerCache.$injector =\n          createInternalInjector(providerCache, function(serviceName, caller) {\n            if (angular.isString(caller)) {\n              path.push(caller);\n            }\n            throw $injectorMinErr('unpr', \"Unknown provider: {0}\", path.join(' <- '));\n          })),\n      instanceCache = {},\n      instanceInjector = (instanceCache.$injector =\n          createInternalInjector(instanceCache, function(serviceName, caller) {\n            var provider = providerInjector.get(serviceName + providerSuffix, caller);\n            return instanceInjector.invoke(provider.$get, provider, undefined, serviceName);\n          }));\n\n\n  forEach(loadModules(modulesToLoad), function(fn) { instanceInjector.invoke(fn || noop); });\n\n  return instanceInjector;\n\n  ////////////////////////////////////\n  // $provider\n  ////////////////////////////////////\n\n  function supportObject(delegate) {\n    return function(key, value) {\n      if (isObject(key)) {\n        forEach(key, reverseParams(delegate));\n      } else {\n        return delegate(key, value);\n      }\n    };\n  }\n\n  function provider(name, provider_) {\n    assertNotHasOwnProperty(name, 'service');\n    if (isFunction(provider_) || isArray(provider_)) {\n      provider_ = providerInjector.instantiate(provider_);\n    }\n    if (!provider_.$get) {\n      throw $injectorMinErr('pget', \"Provider '{0}' must define $get factory method.\", name);\n    }\n    return providerCache[name + providerSuffix] = provider_;\n  }\n\n  function enforceReturnValue(name, factory) {\n    return function enforcedReturnValue() {\n      var result = instanceInjector.invoke(factory, this);\n      if (isUndefined(result)) {\n        throw $injectorMinErr('undef', \"Provider '{0}' must return a value from $get factory method.\", name);\n      }\n      return result;\n    };\n  }\n\n  function factory(name, factoryFn, enforce) {\n    return provider(name, {\n      $get: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn\n    });\n  }\n\n  function service(name, constructor) {\n    return factory(name, ['$injector', function($injector) {\n      return $injector.instantiate(constructor);\n    }]);\n  }\n\n  function value(name, val) { return factory(name, valueFn(val), false); }\n\n  function constant(name, value) {\n    assertNotHasOwnProperty(name, 'constant');\n    providerCache[name] = value;\n    instanceCache[name] = value;\n  }\n\n  function decorator(serviceName, decorFn) {\n    var origProvider = providerInjector.get(serviceName + providerSuffix),\n        orig$get = origProvider.$get;\n\n    origProvider.$get = function() {\n      var origInstance = instanceInjector.invoke(orig$get, origProvider);\n      return instanceInjector.invoke(decorFn, null, {$delegate: origInstance});\n    };\n  }\n\n  ////////////////////////////////////\n  // Module Loading\n  ////////////////////////////////////\n  function loadModules(modulesToLoad) {\n    var runBlocks = [], moduleFn;\n    forEach(modulesToLoad, function(module) {\n      if (loadedModules.get(module)) return;\n      loadedModules.put(module, true);\n\n      function runInvokeQueue(queue) {\n        var i, ii;\n        for (i = 0, ii = queue.length; i < ii; i++) {\n          var invokeArgs = queue[i],\n              provider = providerInjector.get(invokeArgs[0]);\n\n          provider[invokeArgs[1]].apply(provider, invokeArgs[2]);\n        }\n      }\n\n      try {\n        if (isString(module)) {\n          moduleFn = angularModule(module);\n          runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);\n          runInvokeQueue(moduleFn._invokeQueue);\n          runInvokeQueue(moduleFn._configBlocks);\n        } else if (isFunction(module)) {\n            runBlocks.push(providerInjector.invoke(module));\n        } else if (isArray(module)) {\n            runBlocks.push(providerInjector.invoke(module));\n        } else {\n          assertArgFn(module, 'module');\n        }\n      } catch (e) {\n        if (isArray(module)) {\n          module = module[module.length - 1];\n        }\n        if (e.message && e.stack && e.stack.indexOf(e.message) == -1) {\n          // Safari & FF's stack traces don't contain error.message content\n          // unlike those of Chrome and IE\n          // So if stack doesn't contain message, we create a new string that contains both.\n          // Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.\n          /* jshint -W022 */\n          e = e.message + '\\n' + e.stack;\n        }\n        throw $injectorMinErr('modulerr', \"Failed to instantiate module {0} due to:\\n{1}\",\n                  module, e.stack || e.message || e);\n      }\n    });\n    return runBlocks;\n  }\n\n  ////////////////////////////////////\n  // internal Injector\n  ////////////////////////////////////\n\n  function createInternalInjector(cache, factory) {\n\n    function getService(serviceName, caller) {\n      if (cache.hasOwnProperty(serviceName)) {\n        if (cache[serviceName] === INSTANTIATING) {\n          throw $injectorMinErr('cdep', 'Circular dependency found: {0}',\n                    serviceName + ' <- ' + path.join(' <- '));\n        }\n        return cache[serviceName];\n      } else {\n        try {\n          path.unshift(serviceName);\n          cache[serviceName] = INSTANTIATING;\n          return cache[serviceName] = factory(serviceName, caller);\n        } catch (err) {\n          if (cache[serviceName] === INSTANTIATING) {\n            delete cache[serviceName];\n          }\n          throw err;\n        } finally {\n          path.shift();\n        }\n      }\n    }\n\n    function invoke(fn, self, locals, serviceName) {\n      if (typeof locals === 'string') {\n        serviceName = locals;\n        locals = null;\n      }\n\n      var args = [],\n          $inject = createInjector.$$annotate(fn, strictDi, serviceName),\n          length, i,\n          key;\n\n      for (i = 0, length = $inject.length; i < length; i++) {\n        key = $inject[i];\n        if (typeof key !== 'string') {\n          throw $injectorMinErr('itkn',\n                  'Incorrect injection token! Expected service name as string, got {0}', key);\n        }\n        args.push(\n          locals && locals.hasOwnProperty(key)\n          ? locals[key]\n          : getService(key, serviceName)\n        );\n      }\n      if (isArray(fn)) {\n        fn = fn[length];\n      }\n\n      // http://jsperf.com/angularjs-invoke-apply-vs-switch\n      // #5388\n      return fn.apply(self, args);\n    }\n\n    function instantiate(Type, locals, serviceName) {\n      // Check if Type is annotated and use just the given function at n-1 as parameter\n      // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);\n      // Object creation: http://jsperf.com/create-constructor/2\n      var instance = Object.create((isArray(Type) ? Type[Type.length - 1] : Type).prototype || null);\n      var returnedValue = invoke(Type, instance, locals, serviceName);\n\n      return isObject(returnedValue) || isFunction(returnedValue) ? returnedValue : instance;\n    }\n\n    return {\n      invoke: invoke,\n      instantiate: instantiate,\n      get: getService,\n      annotate: createInjector.$$annotate,\n      has: function(name) {\n        return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);\n      }\n    };\n  }\n}\n\ncreateInjector.$$annotate = annotate;\n\n/**\n * @ngdoc provider\n * @name $anchorScrollProvider\n *\n * @description\n * Use `$anchorScrollProvider` to disable automatic scrolling whenever\n * {@link ng.$location#hash $location.hash()} changes.\n */\nfunction $AnchorScrollProvider() {\n\n  var autoScrollingEnabled = true;\n\n  /**\n   * @ngdoc method\n   * @name $anchorScrollProvider#disableAutoScrolling\n   *\n   * @description\n   * By default, {@link ng.$anchorScroll $anchorScroll()} will automatically detect changes to\n   * {@link ng.$location#hash $location.hash()} and scroll to the element matching the new hash.<br />\n   * Use this method to disable automatic scrolling.\n   *\n   * If automatic scrolling is disabled, one must explicitly call\n   * {@link ng.$anchorScroll $anchorScroll()} in order to scroll to the element related to the\n   * current hash.\n   */\n  this.disableAutoScrolling = function() {\n    autoScrollingEnabled = false;\n  };\n\n  /**\n   * @ngdoc service\n   * @name $anchorScroll\n   * @kind function\n   * @requires $window\n   * @requires $location\n   * @requires $rootScope\n   *\n   * @description\n   * When called, it checks the current value of {@link ng.$location#hash $location.hash()} and\n   * scrolls to the related element, according to the rules specified in the\n   * [Html5 spec](http://dev.w3.org/html5/spec/Overview.html#the-indicated-part-of-the-document).\n   *\n   * It also watches the {@link ng.$location#hash $location.hash()} and automatically scrolls to\n   * match any anchor whenever it changes. This can be disabled by calling\n   * {@link ng.$anchorScrollProvider#disableAutoScrolling $anchorScrollProvider.disableAutoScrolling()}.\n   *\n   * Additionally, you can use its {@link ng.$anchorScroll#yOffset yOffset} property to specify a\n   * vertical scroll-offset (either fixed or dynamic).\n   *\n   * @property {(number|function|jqLite)} yOffset\n   * If set, specifies a vertical scroll-offset. This is often useful when there are fixed\n   * positioned elements at the top of the page, such as navbars, headers etc.\n   *\n   * `yOffset` can be specified in various ways:\n   * - **number**: A fixed number of pixels to be used as offset.<br /><br />\n   * - **function**: A getter function called everytime `$anchorScroll()` is executed. Must return\n   *   a number representing the offset (in pixels).<br /><br />\n   * - **jqLite**: A jqLite/jQuery element to be used for specifying the offset. The distance from\n   *   the top of the page to the element's bottom will be used as offset.<br />\n   *   **Note**: The element will be taken into account only as long as its `position` is set to\n   *   `fixed`. This option is useful, when dealing with responsive navbars/headers that adjust\n   *   their height and/or positioning according to the viewport's size.\n   *\n   * <br />\n   * <div class=\"alert alert-warning\">\n   * In order for `yOffset` to work properly, scrolling should take place on the document's root and\n   * not some child element.\n   * </div>\n   *\n   * @example\n     <example module=\"anchorScrollExample\">\n       <file name=\"index.html\">\n         <div id=\"scrollArea\" ng-controller=\"ScrollController\">\n           <a ng-click=\"gotoBottom()\">Go to bottom</a>\n           <a id=\"bottom\"></a> You're at the bottom!\n         </div>\n       </file>\n       <file name=\"script.js\">\n         angular.module('anchorScrollExample', [])\n           .controller('ScrollController', ['$scope', '$location', '$anchorScroll',\n             function ($scope, $location, $anchorScroll) {\n               $scope.gotoBottom = function() {\n                 // set the location.hash to the id of\n                 // the element you wish to scroll to.\n                 $location.hash('bottom');\n\n                 // call $anchorScroll()\n                 $anchorScroll();\n               };\n             }]);\n       </file>\n       <file name=\"style.css\">\n         #scrollArea {\n           height: 280px;\n           overflow: auto;\n         }\n\n         #bottom {\n           display: block;\n           margin-top: 2000px;\n         }\n       </file>\n     </example>\n   *\n   * <hr />\n   * The example below illustrates the use of a vertical scroll-offset (specified as a fixed value).\n   * See {@link ng.$anchorScroll#yOffset $anchorScroll.yOffset} for more details.\n   *\n   * @example\n     <example module=\"anchorScrollOffsetExample\">\n       <file name=\"index.html\">\n         <div class=\"fixed-header\" ng-controller=\"headerCtrl\">\n           <a href=\"\" ng-click=\"gotoAnchor(x)\" ng-repeat=\"x in [1,2,3,4,5]\">\n             Go to anchor {{x}}\n           </a>\n         </div>\n         <div id=\"anchor{{x}}\" class=\"anchor\" ng-repeat=\"x in [1,2,3,4,5]\">\n           Anchor {{x}} of 5\n         </div>\n       </file>\n       <file name=\"script.js\">\n         angular.module('anchorScrollOffsetExample', [])\n           .run(['$anchorScroll', function($anchorScroll) {\n             $anchorScroll.yOffset = 50;   // always scroll by 50 extra pixels\n           }])\n           .controller('headerCtrl', ['$anchorScroll', '$location', '$scope',\n             function ($anchorScroll, $location, $scope) {\n               $scope.gotoAnchor = function(x) {\n                 var newHash = 'anchor' + x;\n                 if ($location.hash() !== newHash) {\n                   // set the $location.hash to `newHash` and\n                   // $anchorScroll will automatically scroll to it\n                   $location.hash('anchor' + x);\n                 } else {\n                   // call $anchorScroll() explicitly,\n                   // since $location.hash hasn't changed\n                   $anchorScroll();\n                 }\n               };\n             }\n           ]);\n       </file>\n       <file name=\"style.css\">\n         body {\n           padding-top: 50px;\n         }\n\n         .anchor {\n           border: 2px dashed DarkOrchid;\n           padding: 10px 10px 200px 10px;\n         }\n\n         .fixed-header {\n           background-color: rgba(0, 0, 0, 0.2);\n           height: 50px;\n           position: fixed;\n           top: 0; left: 0; right: 0;\n         }\n\n         .fixed-header > a {\n           display: inline-block;\n           margin: 5px 15px;\n         }\n       </file>\n     </example>\n   */\n  this.$get = ['$window', '$location', '$rootScope', function($window, $location, $rootScope) {\n    var document = $window.document;\n\n    // Helper function to get first anchor from a NodeList\n    // (using `Array#some()` instead of `angular#forEach()` since it's more performant\n    //  and working in all supported browsers.)\n    function getFirstAnchor(list) {\n      var result = null;\n      Array.prototype.some.call(list, function(element) {\n        if (nodeName_(element) === 'a') {\n          result = element;\n          return true;\n        }\n      });\n      return result;\n    }\n\n    function getYOffset() {\n\n      var offset = scroll.yOffset;\n\n      if (isFunction(offset)) {\n        offset = offset();\n      } else if (isElement(offset)) {\n        var elem = offset[0];\n        var style = $window.getComputedStyle(elem);\n        if (style.position !== 'fixed') {\n          offset = 0;\n        } else {\n          offset = elem.getBoundingClientRect().bottom;\n        }\n      } else if (!isNumber(offset)) {\n        offset = 0;\n      }\n\n      return offset;\n    }\n\n    function scrollTo(elem) {\n      if (elem) {\n        elem.scrollIntoView();\n\n        var offset = getYOffset();\n\n        if (offset) {\n          // `offset` is the number of pixels we should scroll UP in order to align `elem` properly.\n          // This is true ONLY if the call to `elem.scrollIntoView()` initially aligns `elem` at the\n          // top of the viewport.\n          //\n          // IF the number of pixels from the top of `elem` to the end of the page's content is less\n          // than the height of the viewport, then `elem.scrollIntoView()` will align the `elem` some\n          // way down the page.\n          //\n          // This is often the case for elements near the bottom of the page.\n          //\n          // In such cases we do not need to scroll the whole `offset` up, just the difference between\n          // the top of the element and the offset, which is enough to align the top of `elem` at the\n          // desired position.\n          var elemTop = elem.getBoundingClientRect().top;\n          $window.scrollBy(0, elemTop - offset);\n        }\n      } else {\n        $window.scrollTo(0, 0);\n      }\n    }\n\n    function scroll() {\n      var hash = $location.hash(), elm;\n\n      // empty hash, scroll to the top of the page\n      if (!hash) scrollTo(null);\n\n      // element with given id\n      else if ((elm = document.getElementById(hash))) scrollTo(elm);\n\n      // first anchor with given name :-D\n      else if ((elm = getFirstAnchor(document.getElementsByName(hash)))) scrollTo(elm);\n\n      // no element and hash == 'top', scroll to the top of the page\n      else if (hash === 'top') scrollTo(null);\n    }\n\n    // does not scroll when user clicks on anchor link that is currently on\n    // (no url change, no $location.hash() change), browser native does scroll\n    if (autoScrollingEnabled) {\n      $rootScope.$watch(function autoScrollWatch() {return $location.hash();},\n        function autoScrollWatchAction(newVal, oldVal) {\n          // skip the initial scroll if $location.hash is empty\n          if (newVal === oldVal && newVal === '') return;\n\n          jqLiteDocumentLoaded(function() {\n            $rootScope.$evalAsync(scroll);\n          });\n        });\n    }\n\n    return scroll;\n  }];\n}\n\nvar $animateMinErr = minErr('$animate');\n\n/**\n * @ngdoc provider\n * @name $animateProvider\n *\n * @description\n * Default implementation of $animate that doesn't perform any animations, instead just\n * synchronously performs DOM\n * updates and calls done() callbacks.\n *\n * In order to enable animations the ngAnimate module has to be loaded.\n *\n * To see the functional implementation check out src/ngAnimate/animate.js\n */\nvar $AnimateProvider = ['$provide', function($provide) {\n\n\n  this.$$selectors = {};\n\n\n  /**\n   * @ngdoc method\n   * @name $animateProvider#register\n   *\n   * @description\n   * Registers a new injectable animation factory function. The factory function produces the\n   * animation object which contains callback functions for each event that is expected to be\n   * animated.\n   *\n   *   * `eventFn`: `function(Element, doneFunction)` The element to animate, the `doneFunction`\n   *   must be called once the element animation is complete. If a function is returned then the\n   *   animation service will use this function to cancel the animation whenever a cancel event is\n   *   triggered.\n   *\n   *\n   * ```js\n   *   return {\n     *     eventFn : function(element, done) {\n     *       //code to run the animation\n     *       //once complete, then run done()\n     *       return function cancellationFunction() {\n     *         //code to cancel the animation\n     *       }\n     *     }\n     *   }\n   * ```\n   *\n   * @param {string} name The name of the animation.\n   * @param {Function} factory The factory function that will be executed to return the animation\n   *                           object.\n   */\n  this.register = function(name, factory) {\n    var key = name + '-animation';\n    if (name && name.charAt(0) != '.') throw $animateMinErr('notcsel',\n        \"Expecting class selector starting with '.' got '{0}'.\", name);\n    this.$$selectors[name.substr(1)] = key;\n    $provide.factory(key, factory);\n  };\n\n  /**\n   * @ngdoc method\n   * @name $animateProvider#classNameFilter\n   *\n   * @description\n   * Sets and/or returns the CSS class regular expression that is checked when performing\n   * an animation. Upon bootstrap the classNameFilter value is not set at all and will\n   * therefore enable $animate to attempt to perform an animation on any element.\n   * When setting the classNameFilter value, animations will only be performed on elements\n   * that successfully match the filter expression. This in turn can boost performance\n   * for low-powered devices as well as applications containing a lot of structural operations.\n   * @param {RegExp=} expression The className expression which will be checked against all animations\n   * @return {RegExp} The current CSS className expression value. If null then there is no expression value\n   */\n  this.classNameFilter = function(expression) {\n    if (arguments.length === 1) {\n      this.$$classNameFilter = (expression instanceof RegExp) ? expression : null;\n    }\n    return this.$$classNameFilter;\n  };\n\n  this.$get = ['$$q', '$$asyncCallback', '$rootScope', function($$q, $$asyncCallback, $rootScope) {\n\n    var currentDefer;\n\n    function runAnimationPostDigest(fn) {\n      var cancelFn, defer = $$q.defer();\n      defer.promise.$$cancelFn = function ngAnimateMaybeCancel() {\n        cancelFn && cancelFn();\n      };\n\n      $rootScope.$$postDigest(function ngAnimatePostDigest() {\n        cancelFn = fn(function ngAnimateNotifyComplete() {\n          defer.resolve();\n        });\n      });\n\n      return defer.promise;\n    }\n\n    function resolveElementClasses(element, classes) {\n      var toAdd = [], toRemove = [];\n\n      var hasClasses = createMap();\n      forEach((element.attr('class') || '').split(/\\s+/), function(className) {\n        hasClasses[className] = true;\n      });\n\n      forEach(classes, function(status, className) {\n        var hasClass = hasClasses[className];\n\n        // If the most recent class manipulation (via $animate) was to remove the class, and the\n        // element currently has the class, the class is scheduled for removal. Otherwise, if\n        // the most recent class manipulation (via $animate) was to add the class, and the\n        // element does not currently have the class, the class is scheduled to be added.\n        if (status === false && hasClass) {\n          toRemove.push(className);\n        } else if (status === true && !hasClass) {\n          toAdd.push(className);\n        }\n      });\n\n      return (toAdd.length + toRemove.length) > 0 &&\n        [toAdd.length ? toAdd : null, toRemove.length ? toRemove : null];\n    }\n\n    function cachedClassManipulation(cache, classes, op) {\n      for (var i=0, ii = classes.length; i < ii; ++i) {\n        var className = classes[i];\n        cache[className] = op;\n      }\n    }\n\n    function asyncPromise() {\n      // only serve one instance of a promise in order to save CPU cycles\n      if (!currentDefer) {\n        currentDefer = $$q.defer();\n        $$asyncCallback(function() {\n          currentDefer.resolve();\n          currentDefer = null;\n        });\n      }\n      return currentDefer.promise;\n    }\n\n    function applyStyles(element, options) {\n      if (angular.isObject(options)) {\n        var styles = extend(options.from || {}, options.to || {});\n        element.css(styles);\n      }\n    }\n\n    /**\n     *\n     * @ngdoc service\n     * @name $animate\n     * @description The $animate service provides rudimentary DOM manipulation functions to\n     * insert, remove and move elements within the DOM, as well as adding and removing classes.\n     * This service is the core service used by the ngAnimate $animator service which provides\n     * high-level animation hooks for CSS and JavaScript.\n     *\n     * $animate is available in the AngularJS core, however, the ngAnimate module must be included\n     * to enable full out animation support. Otherwise, $animate will only perform simple DOM\n     * manipulation operations.\n     *\n     * To learn more about enabling animation support, click here to visit the {@link ngAnimate\n     * ngAnimate module page} as well as the {@link ngAnimate.$animate ngAnimate $animate service\n     * page}.\n     */\n    return {\n      animate: function(element, from, to) {\n        applyStyles(element, { from: from, to: to });\n        return asyncPromise();\n      },\n\n      /**\n       *\n       * @ngdoc method\n       * @name $animate#enter\n       * @kind function\n       * @description Inserts the element into the DOM either after the `after` element or\n       * as the first child within the `parent` element. When the function is called a promise\n       * is returned that will be resolved at a later time.\n       * @param {DOMElement} element the element which will be inserted into the DOM\n       * @param {DOMElement} parent the parent element which will append the element as\n       *   a child (if the after element is not present)\n       * @param {DOMElement} after the sibling element which will append the element\n       *   after itself\n       * @param {object=} options an optional collection of styles that will be applied to the element.\n       * @return {Promise} the animation callback promise\n       */\n      enter: function(element, parent, after, options) {\n        applyStyles(element, options);\n        after ? after.after(element)\n              : parent.prepend(element);\n        return asyncPromise();\n      },\n\n      /**\n       *\n       * @ngdoc method\n       * @name $animate#leave\n       * @kind function\n       * @description Removes the element from the DOM. When the function is called a promise\n       * is returned that will be resolved at a later time.\n       * @param {DOMElement} element the element which will be removed from the DOM\n       * @param {object=} options an optional collection of options that will be applied to the element.\n       * @return {Promise} the animation callback promise\n       */\n      leave: function(element, options) {\n        applyStyles(element, options);\n        element.remove();\n        return asyncPromise();\n      },\n\n      /**\n       *\n       * @ngdoc method\n       * @name $animate#move\n       * @kind function\n       * @description Moves the position of the provided element within the DOM to be placed\n       * either after the `after` element or inside of the `parent` element. When the function\n       * is called a promise is returned that will be resolved at a later time.\n       *\n       * @param {DOMElement} element the element which will be moved around within the\n       *   DOM\n       * @param {DOMElement} parent the parent element where the element will be\n       *   inserted into (if the after element is not present)\n       * @param {DOMElement} after the sibling element where the element will be\n       *   positioned next to\n       * @param {object=} options an optional collection of options that will be applied to the element.\n       * @return {Promise} the animation callback promise\n       */\n      move: function(element, parent, after, options) {\n        // Do not remove element before insert. Removing will cause data associated with the\n        // element to be dropped. Insert will implicitly do the remove.\n        return this.enter(element, parent, after, options);\n      },\n\n      /**\n       *\n       * @ngdoc method\n       * @name $animate#addClass\n       * @kind function\n       * @description Adds the provided className CSS class value to the provided element.\n       * When the function is called a promise is returned that will be resolved at a later time.\n       * @param {DOMElement} element the element which will have the className value\n       *   added to it\n       * @param {string} className the CSS class which will be added to the element\n       * @param {object=} options an optional collection of options that will be applied to the element.\n       * @return {Promise} the animation callback promise\n       */\n      addClass: function(element, className, options) {\n        return this.setClass(element, className, [], options);\n      },\n\n      $$addClassImmediately: function(element, className, options) {\n        element = jqLite(element);\n        className = !isString(className)\n                        ? (isArray(className) ? className.join(' ') : '')\n                        : className;\n        forEach(element, function(element) {\n          jqLiteAddClass(element, className);\n        });\n        applyStyles(element, options);\n        return asyncPromise();\n      },\n\n      /**\n       *\n       * @ngdoc method\n       * @name $animate#removeClass\n       * @kind function\n       * @description Removes the provided className CSS class value from the provided element.\n       * When the function is called a promise is returned that will be resolved at a later time.\n       * @param {DOMElement} element the element which will have the className value\n       *   removed from it\n       * @param {string} className the CSS class which will be removed from the element\n       * @param {object=} options an optional collection of options that will be applied to the element.\n       * @return {Promise} the animation callback promise\n       */\n      removeClass: function(element, className, options) {\n        return this.setClass(element, [], className, options);\n      },\n\n      $$removeClassImmediately: function(element, className, options) {\n        element = jqLite(element);\n        className = !isString(className)\n                        ? (isArray(className) ? className.join(' ') : '')\n                        : className;\n        forEach(element, function(element) {\n          jqLiteRemoveClass(element, className);\n        });\n        applyStyles(element, options);\n        return asyncPromise();\n      },\n\n      /**\n       *\n       * @ngdoc method\n       * @name $animate#setClass\n       * @kind function\n       * @description Adds and/or removes the given CSS classes to and from the element.\n       * When the function is called a promise is returned that will be resolved at a later time.\n       * @param {DOMElement} element the element which will have its CSS classes changed\n       *   removed from it\n       * @param {string} add the CSS classes which will be added to the element\n       * @param {string} remove the CSS class which will be removed from the element\n       * @param {object=} options an optional collection of options that will be applied to the element.\n       * @return {Promise} the animation callback promise\n       */\n      setClass: function(element, add, remove, options) {\n        var self = this;\n        var STORAGE_KEY = '$$animateClasses';\n        var createdCache = false;\n        element = jqLite(element);\n\n        var cache = element.data(STORAGE_KEY);\n        if (!cache) {\n          cache = {\n            classes: {},\n            options: options\n          };\n          createdCache = true;\n        } else if (options && cache.options) {\n          cache.options = angular.extend(cache.options || {}, options);\n        }\n\n        var classes = cache.classes;\n\n        add = isArray(add) ? add : add.split(' ');\n        remove = isArray(remove) ? remove : remove.split(' ');\n        cachedClassManipulation(classes, add, true);\n        cachedClassManipulation(classes, remove, false);\n\n        if (createdCache) {\n          cache.promise = runAnimationPostDigest(function(done) {\n            var cache = element.data(STORAGE_KEY);\n            element.removeData(STORAGE_KEY);\n\n            // in the event that the element is removed before postDigest\n            // is run then the cache will be undefined and there will be\n            // no need anymore to add or remove and of the element classes\n            if (cache) {\n              var classes = resolveElementClasses(element, cache.classes);\n              if (classes) {\n                self.$$setClassImmediately(element, classes[0], classes[1], cache.options);\n              }\n            }\n\n            done();\n          });\n          element.data(STORAGE_KEY, cache);\n        }\n\n        return cache.promise;\n      },\n\n      $$setClassImmediately: function(element, add, remove, options) {\n        add && this.$$addClassImmediately(element, add);\n        remove && this.$$removeClassImmediately(element, remove);\n        applyStyles(element, options);\n        return asyncPromise();\n      },\n\n      enabled: noop,\n      cancel: noop\n    };\n  }];\n}];\n\nfunction $$AsyncCallbackProvider() {\n  this.$get = ['$$rAF', '$timeout', function($$rAF, $timeout) {\n    return $$rAF.supported\n      ? function(fn) { return $$rAF(fn); }\n      : function(fn) {\n        return $timeout(fn, 0, false);\n      };\n  }];\n}\n\n/* global stripHash: true */\n\n/**\n * ! This is a private undocumented service !\n *\n * @name $browser\n * @requires $log\n * @description\n * This object has two goals:\n *\n * - hide all the global state in the browser caused by the window object\n * - abstract away all the browser specific features and inconsistencies\n *\n * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`\n * service, which can be used for convenient testing of the application without the interaction with\n * the real browser apis.\n */\n/**\n * @param {object} window The global window object.\n * @param {object} document jQuery wrapped document.\n * @param {object} $log window.console or an object with the same interface.\n * @param {object} $sniffer $sniffer service\n */\nfunction Browser(window, document, $log, $sniffer) {\n  var self = this,\n      rawDocument = document[0],\n      location = window.location,\n      history = window.history,\n      setTimeout = window.setTimeout,\n      clearTimeout = window.clearTimeout,\n      pendingDeferIds = {};\n\n  self.isMock = false;\n\n  var outstandingRequestCount = 0;\n  var outstandingRequestCallbacks = [];\n\n  // TODO(vojta): remove this temporary api\n  self.$$completeOutstandingRequest = completeOutstandingRequest;\n  self.$$incOutstandingRequestCount = function() { outstandingRequestCount++; };\n\n  /**\n   * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`\n   * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.\n   */\n  function completeOutstandingRequest(fn) {\n    try {\n      fn.apply(null, sliceArgs(arguments, 1));\n    } finally {\n      outstandingRequestCount--;\n      if (outstandingRequestCount === 0) {\n        while (outstandingRequestCallbacks.length) {\n          try {\n            outstandingRequestCallbacks.pop()();\n          } catch (e) {\n            $log.error(e);\n          }\n        }\n      }\n    }\n  }\n\n  function getHash(url) {\n    var index = url.indexOf('#');\n    return index === -1 ? '' : url.substr(index);\n  }\n\n  /**\n   * @private\n   * Note: this method is used only by scenario runner\n   * TODO(vojta): prefix this method with $$ ?\n   * @param {function()} callback Function that will be called when no outstanding request\n   */\n  self.notifyWhenNoOutstandingRequests = function(callback) {\n    // force browser to execute all pollFns - this is needed so that cookies and other pollers fire\n    // at some deterministic time in respect to the test runner's actions. Leaving things up to the\n    // regular poller would result in flaky tests.\n    forEach(pollFns, function(pollFn) { pollFn(); });\n\n    if (outstandingRequestCount === 0) {\n      callback();\n    } else {\n      outstandingRequestCallbacks.push(callback);\n    }\n  };\n\n  //////////////////////////////////////////////////////////////\n  // Poll Watcher API\n  //////////////////////////////////////////////////////////////\n  var pollFns = [],\n      pollTimeout;\n\n  /**\n   * @name $browser#addPollFn\n   *\n   * @param {function()} fn Poll function to add\n   *\n   * @description\n   * Adds a function to the list of functions that poller periodically executes,\n   * and starts polling if not started yet.\n   *\n   * @returns {function()} the added function\n   */\n  self.addPollFn = function(fn) {\n    if (isUndefined(pollTimeout)) startPoller(100, setTimeout);\n    pollFns.push(fn);\n    return fn;\n  };\n\n  /**\n   * @param {number} interval How often should browser call poll functions (ms)\n   * @param {function()} setTimeout Reference to a real or fake `setTimeout` function.\n   *\n   * @description\n   * Configures the poller to run in the specified intervals, using the specified\n   * setTimeout fn and kicks it off.\n   */\n  function startPoller(interval, setTimeout) {\n    (function check() {\n      forEach(pollFns, function(pollFn) { pollFn(); });\n      pollTimeout = setTimeout(check, interval);\n    })();\n  }\n\n  //////////////////////////////////////////////////////////////\n  // URL API\n  //////////////////////////////////////////////////////////////\n\n  var cachedState, lastHistoryState,\n      lastBrowserUrl = location.href,\n      baseElement = document.find('base'),\n      reloadLocation = null;\n\n  cacheState();\n  lastHistoryState = cachedState;\n\n  /**\n   * @name $browser#url\n   *\n   * @description\n   * GETTER:\n   * Without any argument, this method just returns current value of location.href.\n   *\n   * SETTER:\n   * With at least one argument, this method sets url to new value.\n   * If html5 history api supported, pushState/replaceState is used, otherwise\n   * location.href/location.replace is used.\n   * Returns its own instance to allow chaining\n   *\n   * NOTE: this api is intended for use only by the $location service. Please use the\n   * {@link ng.$location $location service} to change url.\n   *\n   * @param {string} url New url (when used as setter)\n   * @param {boolean=} replace Should new url replace current history record?\n   * @param {object=} state object to use with pushState/replaceState\n   */\n  self.url = function(url, replace, state) {\n    // In modern browsers `history.state` is `null` by default; treating it separately\n    // from `undefined` would cause `$browser.url('/foo')` to change `history.state`\n    // to undefined via `pushState`. Instead, let's change `undefined` to `null` here.\n    if (isUndefined(state)) {\n      state = null;\n    }\n\n    // Android Browser BFCache causes location, history reference to become stale.\n    if (location !== window.location) location = window.location;\n    if (history !== window.history) history = window.history;\n\n    // setter\n    if (url) {\n      var sameState = lastHistoryState === state;\n\n      // Don't change anything if previous and current URLs and states match. This also prevents\n      // IE<10 from getting into redirect loop when in LocationHashbangInHtml5Url mode.\n      // See https://github.com/angular/angular.js/commit/ffb2701\n      if (lastBrowserUrl === url && (!$sniffer.history || sameState)) {\n        return self;\n      }\n      var sameBase = lastBrowserUrl && stripHash(lastBrowserUrl) === stripHash(url);\n      lastBrowserUrl = url;\n      lastHistoryState = state;\n      // Don't use history API if only the hash changed\n      // due to a bug in IE10/IE11 which leads\n      // to not firing a `hashchange` nor `popstate` event\n      // in some cases (see #9143).\n      if ($sniffer.history && (!sameBase || !sameState)) {\n        history[replace ? 'replaceState' : 'pushState'](state, '', url);\n        cacheState();\n        // Do the assignment again so that those two variables are referentially identical.\n        lastHistoryState = cachedState;\n      } else {\n        if (!sameBase || reloadLocation) {\n          reloadLocation = url;\n        }\n        if (replace) {\n          location.replace(url);\n        } else if (!sameBase) {\n          location.href = url;\n        } else {\n          location.hash = getHash(url);\n        }\n      }\n      return self;\n    // getter\n    } else {\n      // - reloadLocation is needed as browsers don't allow to read out\n      //   the new location.href if a reload happened.\n      // - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172\n      return reloadLocation || location.href.replace(/%27/g,\"'\");\n    }\n  };\n\n  /**\n   * @name $browser#state\n   *\n   * @description\n   * This method is a getter.\n   *\n   * Return history.state or null if history.state is undefined.\n   *\n   * @returns {object} state\n   */\n  self.state = function() {\n    return cachedState;\n  };\n\n  var urlChangeListeners = [],\n      urlChangeInit = false;\n\n  function cacheStateAndFireUrlChange() {\n    cacheState();\n    fireUrlChange();\n  }\n\n  function getCurrentState() {\n    try {\n      return history.state;\n    } catch (e) {\n      // MSIE can reportedly throw when there is no state (UNCONFIRMED).\n    }\n  }\n\n  // This variable should be used *only* inside the cacheState function.\n  var lastCachedState = null;\n  function cacheState() {\n    // This should be the only place in $browser where `history.state` is read.\n    cachedState = getCurrentState();\n    cachedState = isUndefined(cachedState) ? null : cachedState;\n\n    // Prevent callbacks fo fire twice if both hashchange & popstate were fired.\n    if (equals(cachedState, lastCachedState)) {\n      cachedState = lastCachedState;\n    }\n    lastCachedState = cachedState;\n  }\n\n  function fireUrlChange() {\n    if (lastBrowserUrl === self.url() && lastHistoryState === cachedState) {\n      return;\n    }\n\n    lastBrowserUrl = self.url();\n    lastHistoryState = cachedState;\n    forEach(urlChangeListeners, function(listener) {\n      listener(self.url(), cachedState);\n    });\n  }\n\n  /**\n   * @name $browser#onUrlChange\n   *\n   * @description\n   * Register callback function that will be called, when url changes.\n   *\n   * It's only called when the url is changed from outside of angular:\n   * - user types different url into address bar\n   * - user clicks on history (forward/back) button\n   * - user clicks on a link\n   *\n   * It's not called when url is changed by $browser.url() method\n   *\n   * The listener gets called with new url as parameter.\n   *\n   * NOTE: this api is intended for use only by the $location service. Please use the\n   * {@link ng.$location $location service} to monitor url changes in angular apps.\n   *\n   * @param {function(string)} listener Listener function to be called when url changes.\n   * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.\n   */\n  self.onUrlChange = function(callback) {\n    // TODO(vojta): refactor to use node's syntax for events\n    if (!urlChangeInit) {\n      // We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)\n      // don't fire popstate when user change the address bar and don't fire hashchange when url\n      // changed by push/replaceState\n\n      // html5 history api - popstate event\n      if ($sniffer.history) jqLite(window).on('popstate', cacheStateAndFireUrlChange);\n      // hashchange event\n      jqLite(window).on('hashchange', cacheStateAndFireUrlChange);\n\n      urlChangeInit = true;\n    }\n\n    urlChangeListeners.push(callback);\n    return callback;\n  };\n\n  /**\n   * Checks whether the url has changed outside of Angular.\n   * Needs to be exported to be able to check for changes that have been done in sync,\n   * as hashchange/popstate events fire in async.\n   */\n  self.$$checkUrlChange = fireUrlChange;\n\n  //////////////////////////////////////////////////////////////\n  // Misc API\n  //////////////////////////////////////////////////////////////\n\n  /**\n   * @name $browser#baseHref\n   *\n   * @description\n   * Returns current <base href>\n   * (always relative - without domain)\n   *\n   * @returns {string} The current base href\n   */\n  self.baseHref = function() {\n    var href = baseElement.attr('href');\n    return href ? href.replace(/^(https?\\:)?\\/\\/[^\\/]*/, '') : '';\n  };\n\n  //////////////////////////////////////////////////////////////\n  // Cookies API\n  //////////////////////////////////////////////////////////////\n  var lastCookies = {};\n  var lastCookieString = '';\n  var cookiePath = self.baseHref();\n\n  function safeDecodeURIComponent(str) {\n    try {\n      return decodeURIComponent(str);\n    } catch (e) {\n      return str;\n    }\n  }\n\n  /**\n   * @name $browser#cookies\n   *\n   * @param {string=} name Cookie name\n   * @param {string=} value Cookie value\n   *\n   * @description\n   * The cookies method provides a 'private' low level access to browser cookies.\n   * It is not meant to be used directly, use the $cookie service instead.\n   *\n   * The return values vary depending on the arguments that the method was called with as follows:\n   *\n   * - cookies() -> hash of all cookies, this is NOT a copy of the internal state, so do not modify\n   *   it\n   * - cookies(name, value) -> set name to value, if value is undefined delete the cookie\n   * - cookies(name) -> the same as (name, undefined) == DELETES (no one calls it right now that\n   *   way)\n   *\n   * @returns {Object} Hash of all cookies (if called without any parameter)\n   */\n  self.cookies = function(name, value) {\n    var cookieLength, cookieArray, cookie, i, index;\n\n    if (name) {\n      if (value === undefined) {\n        rawDocument.cookie = encodeURIComponent(name) + \"=;path=\" + cookiePath +\n                                \";expires=Thu, 01 Jan 1970 00:00:00 GMT\";\n      } else {\n        if (isString(value)) {\n          cookieLength = (rawDocument.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value) +\n                                ';path=' + cookiePath).length + 1;\n\n          // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:\n          // - 300 cookies\n          // - 20 cookies per unique domain\n          // - 4096 bytes per cookie\n          if (cookieLength > 4096) {\n            $log.warn(\"Cookie '\" + name +\n              \"' possibly not set or overflowed because it was too large (\" +\n              cookieLength + \" > 4096 bytes)!\");\n          }\n        }\n      }\n    } else {\n      if (rawDocument.cookie !== lastCookieString) {\n        lastCookieString = rawDocument.cookie;\n        cookieArray = lastCookieString.split(\"; \");\n        lastCookies = {};\n\n        for (i = 0; i < cookieArray.length; i++) {\n          cookie = cookieArray[i];\n          index = cookie.indexOf('=');\n          if (index > 0) { //ignore nameless cookies\n            name = safeDecodeURIComponent(cookie.substring(0, index));\n            // the first value that is seen for a cookie is the most\n            // specific one.  values for the same cookie name that\n            // follow are for less specific paths.\n            if (lastCookies[name] === undefined) {\n              lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1));\n            }\n          }\n        }\n      }\n      return lastCookies;\n    }\n  };\n\n\n  /**\n   * @name $browser#defer\n   * @param {function()} fn A function, who's execution should be deferred.\n   * @param {number=} [delay=0] of milliseconds to defer the function execution.\n   * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.\n   *\n   * @description\n   * Executes a fn asynchronously via `setTimeout(fn, delay)`.\n   *\n   * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using\n   * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed\n   * via `$browser.defer.flush()`.\n   *\n   */\n  self.defer = function(fn, delay) {\n    var timeoutId;\n    outstandingRequestCount++;\n    timeoutId = setTimeout(function() {\n      delete pendingDeferIds[timeoutId];\n      completeOutstandingRequest(fn);\n    }, delay || 0);\n    pendingDeferIds[timeoutId] = true;\n    return timeoutId;\n  };\n\n\n  /**\n   * @name $browser#defer.cancel\n   *\n   * @description\n   * Cancels a deferred task identified with `deferId`.\n   *\n   * @param {*} deferId Token returned by the `$browser.defer` function.\n   * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully\n   *                    canceled.\n   */\n  self.defer.cancel = function(deferId) {\n    if (pendingDeferIds[deferId]) {\n      delete pendingDeferIds[deferId];\n      clearTimeout(deferId);\n      completeOutstandingRequest(noop);\n      return true;\n    }\n    return false;\n  };\n\n}\n\nfunction $BrowserProvider() {\n  this.$get = ['$window', '$log', '$sniffer', '$document',\n      function($window, $log, $sniffer, $document) {\n        return new Browser($window, $document, $log, $sniffer);\n      }];\n}\n\n/**\n * @ngdoc service\n * @name $cacheFactory\n *\n * @description\n * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to\n * them.\n *\n * ```js\n *\n *  var cache = $cacheFactory('cacheId');\n *  expect($cacheFactory.get('cacheId')).toBe(cache);\n *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();\n *\n *  cache.put(\"key\", \"value\");\n *  cache.put(\"another key\", \"another value\");\n *\n *  // We've specified no options on creation\n *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});\n *\n * ```\n *\n *\n * @param {string} cacheId Name or id of the newly created cache.\n * @param {object=} options Options object that specifies the cache behavior. Properties:\n *\n *   - `{number=}` `capacity` — turns the cache into LRU cache.\n *\n * @returns {object} Newly created cache object with the following set of methods:\n *\n * - `{object}` `info()` — Returns id, size, and options of cache.\n * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns\n *   it.\n * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.\n * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.\n * - `{void}` `removeAll()` — Removes all cached values.\n * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.\n *\n * @example\n   <example module=\"cacheExampleApp\">\n     <file name=\"index.html\">\n       <div ng-controller=\"CacheController\">\n         <input ng-model=\"newCacheKey\" placeholder=\"Key\">\n         <input ng-model=\"newCacheValue\" placeholder=\"Value\">\n         <button ng-click=\"put(newCacheKey, newCacheValue)\">Cache</button>\n\n         <p ng-if=\"keys.length\">Cached Values</p>\n         <div ng-repeat=\"key in keys\">\n           <span ng-bind=\"key\"></span>\n           <span>: </span>\n           <b ng-bind=\"cache.get(key)\"></b>\n         </div>\n\n         <p>Cache Info</p>\n         <div ng-repeat=\"(key, value) in cache.info()\">\n           <span ng-bind=\"key\"></span>\n           <span>: </span>\n           <b ng-bind=\"value\"></b>\n         </div>\n       </div>\n     </file>\n     <file name=\"script.js\">\n       angular.module('cacheExampleApp', []).\n         controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {\n           $scope.keys = [];\n           $scope.cache = $cacheFactory('cacheId');\n           $scope.put = function(key, value) {\n             if ($scope.cache.get(key) === undefined) {\n               $scope.keys.push(key);\n             }\n             $scope.cache.put(key, value === undefined ? null : value);\n           };\n         }]);\n     </file>\n     <file name=\"style.css\">\n       p {\n         margin: 10px 0 3px;\n       }\n     </file>\n   </example>\n */\nfunction $CacheFactoryProvider() {\n\n  this.$get = function() {\n    var caches = {};\n\n    function cacheFactory(cacheId, options) {\n      if (cacheId in caches) {\n        throw minErr('$cacheFactory')('iid', \"CacheId '{0}' is already taken!\", cacheId);\n      }\n\n      var size = 0,\n          stats = extend({}, options, {id: cacheId}),\n          data = {},\n          capacity = (options && options.capacity) || Number.MAX_VALUE,\n          lruHash = {},\n          freshEnd = null,\n          staleEnd = null;\n\n      /**\n       * @ngdoc type\n       * @name $cacheFactory.Cache\n       *\n       * @description\n       * A cache object used to store and retrieve data, primarily used by\n       * {@link $http $http} and the {@link ng.directive:script script} directive to cache\n       * templates and other data.\n       *\n       * ```js\n       *  angular.module('superCache')\n       *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {\n       *      return $cacheFactory('super-cache');\n       *    }]);\n       * ```\n       *\n       * Example test:\n       *\n       * ```js\n       *  it('should behave like a cache', inject(function(superCache) {\n       *    superCache.put('key', 'value');\n       *    superCache.put('another key', 'another value');\n       *\n       *    expect(superCache.info()).toEqual({\n       *      id: 'super-cache',\n       *      size: 2\n       *    });\n       *\n       *    superCache.remove('another key');\n       *    expect(superCache.get('another key')).toBeUndefined();\n       *\n       *    superCache.removeAll();\n       *    expect(superCache.info()).toEqual({\n       *      id: 'super-cache',\n       *      size: 0\n       *    });\n       *  }));\n       * ```\n       */\n      return caches[cacheId] = {\n\n        /**\n         * @ngdoc method\n         * @name $cacheFactory.Cache#put\n         * @kind function\n         *\n         * @description\n         * Inserts a named entry into the {@link $cacheFactory.Cache Cache} object to be\n         * retrieved later, and incrementing the size of the cache if the key was not already\n         * present in the cache. If behaving like an LRU cache, it will also remove stale\n         * entries from the set.\n         *\n         * It will not insert undefined values into the cache.\n         *\n         * @param {string} key the key under which the cached data is stored.\n         * @param {*} value the value to store alongside the key. If it is undefined, the key\n         *    will not be stored.\n         * @returns {*} the value stored.\n         */\n        put: function(key, value) {\n          if (capacity < Number.MAX_VALUE) {\n            var lruEntry = lruHash[key] || (lruHash[key] = {key: key});\n\n            refresh(lruEntry);\n          }\n\n          if (isUndefined(value)) return;\n          if (!(key in data)) size++;\n          data[key] = value;\n\n          if (size > capacity) {\n            this.remove(staleEnd.key);\n          }\n\n          return value;\n        },\n\n        /**\n         * @ngdoc method\n         * @name $cacheFactory.Cache#get\n         * @kind function\n         *\n         * @description\n         * Retrieves named data stored in the {@link $cacheFactory.Cache Cache} object.\n         *\n         * @param {string} key the key of the data to be retrieved\n         * @returns {*} the value stored.\n         */\n        get: function(key) {\n          if (capacity < Number.MAX_VALUE) {\n            var lruEntry = lruHash[key];\n\n            if (!lruEntry) return;\n\n            refresh(lruEntry);\n          }\n\n          return data[key];\n        },\n\n\n        /**\n         * @ngdoc method\n         * @name $cacheFactory.Cache#remove\n         * @kind function\n         *\n         * @description\n         * Removes an entry from the {@link $cacheFactory.Cache Cache} object.\n         *\n         * @param {string} key the key of the entry to be removed\n         */\n        remove: function(key) {\n          if (capacity < Number.MAX_VALUE) {\n            var lruEntry = lruHash[key];\n\n            if (!lruEntry) return;\n\n            if (lruEntry == freshEnd) freshEnd = lruEntry.p;\n            if (lruEntry == staleEnd) staleEnd = lruEntry.n;\n            link(lruEntry.n,lruEntry.p);\n\n            delete lruHash[key];\n          }\n\n          delete data[key];\n          size--;\n        },\n\n\n        /**\n         * @ngdoc method\n         * @name $cacheFactory.Cache#removeAll\n         * @kind function\n         *\n         * @description\n         * Clears the cache object of any entries.\n         */\n        removeAll: function() {\n          data = {};\n          size = 0;\n          lruHash = {};\n          freshEnd = staleEnd = null;\n        },\n\n\n        /**\n         * @ngdoc method\n         * @name $cacheFactory.Cache#destroy\n         * @kind function\n         *\n         * @description\n         * Destroys the {@link $cacheFactory.Cache Cache} object entirely,\n         * removing it from the {@link $cacheFactory $cacheFactory} set.\n         */\n        destroy: function() {\n          data = null;\n          stats = null;\n          lruHash = null;\n          delete caches[cacheId];\n        },\n\n\n        /**\n         * @ngdoc method\n         * @name $cacheFactory.Cache#info\n         * @kind function\n         *\n         * @description\n         * Retrieve information regarding a particular {@link $cacheFactory.Cache Cache}.\n         *\n         * @returns {object} an object with the following properties:\n         *   <ul>\n         *     <li>**id**: the id of the cache instance</li>\n         *     <li>**size**: the number of entries kept in the cache instance</li>\n         *     <li>**...**: any additional properties from the options object when creating the\n         *       cache.</li>\n         *   </ul>\n         */\n        info: function() {\n          return extend({}, stats, {size: size});\n        }\n      };\n\n\n      /**\n       * makes the `entry` the freshEnd of the LRU linked list\n       */\n      function refresh(entry) {\n        if (entry != freshEnd) {\n          if (!staleEnd) {\n            staleEnd = entry;\n          } else if (staleEnd == entry) {\n            staleEnd = entry.n;\n          }\n\n          link(entry.n, entry.p);\n          link(entry, freshEnd);\n          freshEnd = entry;\n          freshEnd.n = null;\n        }\n      }\n\n\n      /**\n       * bidirectionally links two entries of the LRU linked list\n       */\n      function link(nextEntry, prevEntry) {\n        if (nextEntry != prevEntry) {\n          if (nextEntry) nextEntry.p = prevEntry; //p stands for previous, 'prev' didn't minify\n          if (prevEntry) prevEntry.n = nextEntry; //n stands for next, 'next' didn't minify\n        }\n      }\n    }\n\n\n  /**\n   * @ngdoc method\n   * @name $cacheFactory#info\n   *\n   * @description\n   * Get information about all the caches that have been created\n   *\n   * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`\n   */\n    cacheFactory.info = function() {\n      var info = {};\n      forEach(caches, function(cache, cacheId) {\n        info[cacheId] = cache.info();\n      });\n      return info;\n    };\n\n\n  /**\n   * @ngdoc method\n   * @name $cacheFactory#get\n   *\n   * @description\n   * Get access to a cache object by the `cacheId` used when it was created.\n   *\n   * @param {string} cacheId Name or id of a cache to access.\n   * @returns {object} Cache object identified by the cacheId or undefined if no such cache.\n   */\n    cacheFactory.get = function(cacheId) {\n      return caches[cacheId];\n    };\n\n\n    return cacheFactory;\n  };\n}\n\n/**\n * @ngdoc service\n * @name $templateCache\n *\n * @description\n * The first time a template is used, it is loaded in the template cache for quick retrieval. You\n * can load templates directly into the cache in a `script` tag, or by consuming the\n * `$templateCache` service directly.\n *\n * Adding via the `script` tag:\n *\n * ```html\n *   <script type=\"text/ng-template\" id=\"templateId.html\">\n *     <p>This is the content of the template</p>\n *   </script>\n * ```\n *\n * **Note:** the `script` tag containing the template does not need to be included in the `head` of\n * the document, but it must be a descendent of the {@link ng.$rootElement $rootElement} (IE,\n * element with ng-app attribute), otherwise the template will be ignored.\n *\n * Adding via the `$templateCache` service:\n *\n * ```js\n * var myApp = angular.module('myApp', []);\n * myApp.run(function($templateCache) {\n *   $templateCache.put('templateId.html', 'This is the content of the template');\n * });\n * ```\n *\n * To retrieve the template later, simply use it in your HTML:\n * ```html\n * <div ng-include=\" 'templateId.html' \"></div>\n * ```\n *\n * or get it via Javascript:\n * ```js\n * $templateCache.get('templateId.html')\n * ```\n *\n * See {@link ng.$cacheFactory $cacheFactory}.\n *\n */\nfunction $TemplateCacheProvider() {\n  this.$get = ['$cacheFactory', function($cacheFactory) {\n    return $cacheFactory('templates');\n  }];\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *     Any commits to this file should be reviewed with security in mind.  *\n *   Changes to this file can potentially create security vulnerabilities. *\n *          An approval from 2 Core members with history of modifying      *\n *                         this file is required.                          *\n *                                                                         *\n *  Does the change somehow allow for arbitrary javascript to be executed? *\n *    Or allows for someone to change the prototype of built-in objects?   *\n *     Or gives undesired access to variables likes document or window?    *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n/* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!\n *\n * DOM-related variables:\n *\n * - \"node\" - DOM Node\n * - \"element\" - DOM Element or Node\n * - \"$node\" or \"$element\" - jqLite-wrapped node or element\n *\n *\n * Compiler related stuff:\n *\n * - \"linkFn\" - linking fn of a single directive\n * - \"nodeLinkFn\" - function that aggregates all linking fns for a particular node\n * - \"childLinkFn\" -  function that aggregates all linking fns for child nodes of a particular node\n * - \"compositeLinkFn\" - function that aggregates all linking fns for a compilation root (nodeList)\n */\n\n\n/**\n * @ngdoc service\n * @name $compile\n * @kind function\n *\n * @description\n * Compiles an HTML string or DOM into a template and produces a template function, which\n * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.\n *\n * The compilation is a process of walking the DOM tree and matching DOM elements to\n * {@link ng.$compileProvider#directive directives}.\n *\n * <div class=\"alert alert-warning\">\n * **Note:** This document is an in-depth reference of all directive options.\n * For a gentle introduction to directives with examples of common use cases,\n * see the {@link guide/directive directive guide}.\n * </div>\n *\n * ## Comprehensive Directive API\n *\n * There are many different options for a directive.\n *\n * The difference resides in the return value of the factory function.\n * You can either return a \"Directive Definition Object\" (see below) that defines the directive properties,\n * or just the `postLink` function (all other properties will have the default values).\n *\n * <div class=\"alert alert-success\">\n * **Best Practice:** It's recommended to use the \"directive definition object\" form.\n * </div>\n *\n * Here's an example directive declared with a Directive Definition Object:\n *\n * ```js\n *   var myModule = angular.module(...);\n *\n *   myModule.directive('directiveName', function factory(injectables) {\n *     var directiveDefinitionObject = {\n *       priority: 0,\n *       template: '<div></div>', // or // function(tElement, tAttrs) { ... },\n *       // or\n *       // templateUrl: 'directive.html', // or // function(tElement, tAttrs) { ... },\n *       transclude: false,\n *       restrict: 'A',\n *       templateNamespace: 'html',\n *       scope: false,\n *       controller: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },\n *       controllerAs: 'stringIdentifier',\n *       bindToController: false,\n *       require: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],\n *       compile: function compile(tElement, tAttrs, transclude) {\n *         return {\n *           pre: function preLink(scope, iElement, iAttrs, controller) { ... },\n *           post: function postLink(scope, iElement, iAttrs, controller) { ... }\n *         }\n *         // or\n *         // return function postLink( ... ) { ... }\n *       },\n *       // or\n *       // link: {\n *       //  pre: function preLink(scope, iElement, iAttrs, controller) { ... },\n *       //  post: function postLink(scope, iElement, iAttrs, controller) { ... }\n *       // }\n *       // or\n *       // link: function postLink( ... ) { ... }\n *     };\n *     return directiveDefinitionObject;\n *   });\n * ```\n *\n * <div class=\"alert alert-warning\">\n * **Note:** Any unspecified options will use the default value. You can see the default values below.\n * </div>\n *\n * Therefore the above can be simplified as:\n *\n * ```js\n *   var myModule = angular.module(...);\n *\n *   myModule.directive('directiveName', function factory(injectables) {\n *     var directiveDefinitionObject = {\n *       link: function postLink(scope, iElement, iAttrs) { ... }\n *     };\n *     return directiveDefinitionObject;\n *     // or\n *     // return function postLink(scope, iElement, iAttrs) { ... }\n *   });\n * ```\n *\n *\n *\n * ### Directive Definition Object\n *\n * The directive definition object provides instructions to the {@link ng.$compile\n * compiler}. The attributes are:\n *\n * #### `multiElement`\n * When this property is set to true, the HTML compiler will collect DOM nodes between\n * nodes with the attributes `directive-name-start` and `directive-name-end`, and group them\n * together as the directive elements. It is recommended that this feature be used on directives\n * which are not strictly behavioural (such as {@link ngClick}), and which\n * do not manipulate or replace child nodes (such as {@link ngInclude}).\n *\n * #### `priority`\n * When there are multiple directives defined on a single DOM element, sometimes it\n * is necessary to specify the order in which the directives are applied. The `priority` is used\n * to sort the directives before their `compile` functions get called. Priority is defined as a\n * number. Directives with greater numerical `priority` are compiled first. Pre-link functions\n * are also run in priority order, but post-link functions are run in reverse order. The order\n * of directives with the same priority is undefined. The default priority is `0`.\n *\n * #### `terminal`\n * If set to true then the current `priority` will be the last set of directives\n * which will execute (any directives at the current priority will still execute\n * as the order of execution on same `priority` is undefined). Note that expressions\n * and other directives used in the directive's template will also be excluded from execution.\n *\n * #### `scope`\n * **If set to `true`,** then a new scope will be created for this directive. If multiple directives on the\n * same element request a new scope, only one new scope is created. The new scope rule does not\n * apply for the root of the template since the root of the template always gets a new scope.\n *\n * **If set to `{}` (object hash),** then a new \"isolate\" scope is created. The 'isolate' scope differs from\n * normal scope in that it does not prototypically inherit from the parent scope. This is useful\n * when creating reusable components, which should not accidentally read or modify data in the\n * parent scope.\n *\n * The 'isolate' scope takes an object hash which defines a set of local scope properties\n * derived from the parent scope. These local properties are useful for aliasing values for\n * templates. Locals definition is a hash of local scope property to its source:\n *\n * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is\n *   always a string since DOM attributes are strings. If no `attr` name is specified  then the\n *   attribute name is assumed to be the same as the local name.\n *   Given `<widget my-attr=\"hello {{name}}\">` and widget definition\n *   of `scope: { localName:'@myAttr' }`, then widget scope property `localName` will reflect\n *   the interpolated value of `hello {{name}}`. As the `name` attribute changes so will the\n *   `localName` property on the widget scope. The `name` is read from the parent scope (not\n *   component scope).\n *\n * * `=` or `=attr` - set up bi-directional binding between a local scope property and the\n *   parent scope property of name defined via the value of the `attr` attribute. If no `attr`\n *   name is specified then the attribute name is assumed to be the same as the local name.\n *   Given `<widget my-attr=\"parentModel\">` and widget definition of\n *   `scope: { localModel:'=myAttr' }`, then widget scope property `localModel` will reflect the\n *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected\n *   in `localModel` and any changes in `localModel` will reflect in `parentModel`. If the parent\n *   scope property doesn't exist, it will throw a NON_ASSIGNABLE_MODEL_EXPRESSION exception. You\n *   can avoid this behavior using `=?` or `=?attr` in order to flag the property as optional. If\n *   you want to shallow watch for changes (i.e. $watchCollection instead of $watch) you can use\n *   `=*` or `=*attr` (`=*?` or `=*?attr` if the property is optional).\n *\n * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope.\n *   If no `attr` name is specified then the attribute name is assumed to be the same as the\n *   local name. Given `<widget my-attr=\"count = count + value\">` and widget definition of\n *   `scope: { localFn:'&myAttr' }`, then isolate scope property `localFn` will point to\n *   a function wrapper for the `count = count + value` expression. Often it's desirable to\n *   pass data from the isolated scope via an expression to the parent scope, this can be\n *   done by passing a map of local variable names and values into the expression wrapper fn.\n *   For example, if the expression is `increment(amount)` then we can specify the amount value\n *   by calling the `localFn` as `localFn({amount: 22})`.\n *\n *\n * #### `bindToController`\n * When an isolate scope is used for a component (see above), and `controllerAs` is used, `bindToController: true` will\n * allow a component to have its properties bound to the controller, rather than to scope. When the controller\n * is instantiated, the initial values of the isolate scope bindings are already available.\n *\n * #### `controller`\n * Controller constructor function. The controller is instantiated before the\n * pre-linking phase and it is shared with other directives (see\n * `require` attribute). This allows the directives to communicate with each other and augment\n * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:\n *\n * * `$scope` - Current scope associated with the element\n * * `$element` - Current element\n * * `$attrs` - Current attributes object for the element\n * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope:\n *   `function([scope], cloneLinkingFn, futureParentElement)`.\n *    * `scope`: optional argument to override the scope.\n *    * `cloneLinkingFn`: optional argument to create clones of the original transcluded content.\n *    * `futureParentElement`:\n *        * defines the parent to which the `cloneLinkingFn` will add the cloned elements.\n *        * default: `$element.parent()` resp. `$element` for `transclude:'element'` resp. `transclude:true`.\n *        * only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements)\n *          and when the `cloneLinkinFn` is passed,\n *          as those elements need to created and cloned in a special way when they are defined outside their\n *          usual containers (e.g. like `<svg>`).\n *        * See also the `directive.templateNamespace` property.\n *\n *\n * #### `require`\n * Require another directive and inject its controller as the fourth argument to the linking function. The\n * `require` takes a string name (or array of strings) of the directive(s) to pass in. If an array is used, the\n * injected argument will be an array in corresponding order. If no such directive can be\n * found, or if the directive does not have a controller, then an error is raised (unless no link function\n * is specified, in which case error checking is skipped). The name can be prefixed with:\n *\n * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.\n * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.\n * * `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.\n * * `^^` - Locate the required controller by searching the element's parents. Throw an error if not found.\n * * `?^` - Attempt to locate the required controller by searching the element and its parents or pass\n *   `null` to the `link` fn if not found.\n * * `?^^` - Attempt to locate the required controller by searching the element's parents, or pass\n *   `null` to the `link` fn if not found.\n *\n *\n * #### `controllerAs`\n * Controller alias at the directive scope. An alias for the controller so it\n * can be referenced at the directive template. The directive needs to define a scope for this\n * configuration to be used. Useful in the case when directive is used as component.\n *\n *\n * #### `restrict`\n * String of subset of `EACM` which restricts the directive to a specific directive\n * declaration style. If omitted, the defaults (elements and attributes) are used.\n *\n * * `E` - Element name (default): `<my-directive></my-directive>`\n * * `A` - Attribute (default): `<div my-directive=\"exp\"></div>`\n * * `C` - Class: `<div class=\"my-directive: exp;\"></div>`\n * * `M` - Comment: `<!-- directive: my-directive exp -->`\n *\n *\n * #### `templateNamespace`\n * String representing the document type used by the markup in the template.\n * AngularJS needs this information as those elements need to be created and cloned\n * in a special way when they are defined outside their usual containers like `<svg>` and `<math>`.\n *\n * * `html` - All root nodes in the template are HTML. Root nodes may also be\n *   top-level elements such as `<svg>` or `<math>`.\n * * `svg` - The root nodes in the template are SVG elements (excluding `<math>`).\n * * `math` - The root nodes in the template are MathML elements (excluding `<svg>`).\n *\n * If no `templateNamespace` is specified, then the namespace is considered to be `html`.\n *\n * #### `template`\n * HTML markup that may:\n * * Replace the contents of the directive's element (default).\n * * Replace the directive's element itself (if `replace` is true - DEPRECATED).\n * * Wrap the contents of the directive's element (if `transclude` is true).\n *\n * Value may be:\n *\n * * A string. For example `<div red-on-hover>{{delete_str}}</div>`.\n * * A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`\n *   function api below) and returns a string value.\n *\n *\n * #### `templateUrl`\n * This is similar to `template` but the template is loaded from the specified URL, asynchronously.\n *\n * Because template loading is asynchronous the compiler will suspend compilation of directives on that element\n * for later when the template has been resolved.  In the meantime it will continue to compile and link\n * sibling and parent elements as though this element had not contained any directives.\n *\n * The compiler does not suspend the entire compilation to wait for templates to be loaded because this\n * would result in the whole app \"stalling\" until all templates are loaded asynchronously - even in the\n * case when only one deeply nested directive has `templateUrl`.\n *\n * Template loading is asynchronous even if the template has been preloaded into the {@link $templateCache}\n *\n * You can specify `templateUrl` as a string representing the URL or as a function which takes two\n * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns\n * a string value representing the url.  In either case, the template URL is passed through {@link\n * $sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.\n *\n *\n * #### `replace` ([*DEPRECATED*!], will be removed in next major release - i.e. v2.0)\n * specify what the template should replace. Defaults to `false`.\n *\n * * `true` - the template will replace the directive's element.\n * * `false` - the template will replace the contents of the directive's element.\n *\n * The replacement process migrates all of the attributes / classes from the old element to the new\n * one. See the {@link guide/directive#template-expanding-directive\n * Directives Guide} for an example.\n *\n * There are very few scenarios where element replacement is required for the application function,\n * the main one being reusable custom components that are used within SVG contexts\n * (because SVG doesn't work with custom elements in the DOM tree).\n *\n * #### `transclude`\n * Extract the contents of the element where the directive appears and make it available to the directive.\n * The contents are compiled and provided to the directive as a **transclusion function**. See the\n * {@link $compile#transclusion Transclusion} section below.\n *\n * There are two kinds of transclusion depending upon whether you want to transclude just the contents of the\n * directive's element or the entire element:\n *\n * * `true` - transclude the content (i.e. the child nodes) of the directive's element.\n * * `'element'` - transclude the whole of the directive's element including any directives on this\n *   element that defined at a lower priority than this directive. When used, the `template`\n *   property is ignored.\n *\n *\n * #### `compile`\n *\n * ```js\n *   function compile(tElement, tAttrs, transclude) { ... }\n * ```\n *\n * The compile function deals with transforming the template DOM. Since most directives do not do\n * template transformation, it is not used often. The compile function takes the following arguments:\n *\n *   * `tElement` - template element - The element where the directive has been declared. It is\n *     safe to do template transformation on the element and child elements only.\n *\n *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared\n *     between all directive compile functions.\n *\n *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`\n *\n * <div class=\"alert alert-warning\">\n * **Note:** The template instance and the link instance may be different objects if the template has\n * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that\n * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration\n * should be done in a linking function rather than in a compile function.\n * </div>\n\n * <div class=\"alert alert-warning\">\n * **Note:** The compile function cannot handle directives that recursively use themselves in their\n * own templates or compile functions. Compiling these directives results in an infinite loop and a\n * stack overflow errors.\n *\n * This can be avoided by manually using $compile in the postLink function to imperatively compile\n * a directive's template instead of relying on automatic template compilation via `template` or\n * `templateUrl` declaration or manual compilation inside the compile function.\n * </div>\n *\n * <div class=\"alert alert-error\">\n * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it\n *   e.g. does not know about the right outer scope. Please use the transclude function that is passed\n *   to the link function instead.\n * </div>\n\n * A compile function can have a return value which can be either a function or an object.\n *\n * * returning a (post-link) function - is equivalent to registering the linking function via the\n *   `link` property of the config object when the compile function is empty.\n *\n * * returning an object with function(s) registered via `pre` and `post` properties - allows you to\n *   control when a linking function should be called during the linking phase. See info about\n *   pre-linking and post-linking functions below.\n *\n *\n * #### `link`\n * This property is used only if the `compile` property is not defined.\n *\n * ```js\n *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }\n * ```\n *\n * The link function is responsible for registering DOM listeners as well as updating the DOM. It is\n * executed after the template has been cloned. This is where most of the directive logic will be\n * put.\n *\n *   * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the\n *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.\n *\n *   * `iElement` - instance element - The element where the directive is to be used. It is safe to\n *     manipulate the children of the element only in `postLink` function since the children have\n *     already been linked.\n *\n *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared\n *     between all directive linking functions.\n *\n *   * `controller` - the directive's required controller instance(s) - Instances are shared\n *     among all directives, which allows the directives to use the controllers as a communication\n *     channel. The exact value depends on the directive's `require` property:\n *       * `string`: the controller instance\n *       * `array`: array of controller instances\n *       * no controller(s) required: `undefined`\n *\n *     If a required controller cannot be found, and it is optional, the instance is `null`,\n *     otherwise the {@link error:$compile:ctreq Missing Required Controller} error is thrown.\n *\n *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.\n *     This is the same as the `$transclude`\n *     parameter of directive controllers, see there for details.\n *     `function([scope], cloneLinkingFn, futureParentElement)`.\n *\n * #### Pre-linking function\n *\n * Executed before the child elements are linked. Not safe to do DOM transformation since the\n * compiler linking function will fail to locate the correct elements for linking.\n *\n * #### Post-linking function\n *\n * Executed after the child elements are linked.\n *\n * Note that child elements that contain `templateUrl` directives will not have been compiled\n * and linked since they are waiting for their template to load asynchronously and their own\n * compilation and linking has been suspended until that occurs.\n *\n * It is safe to do DOM transformation in the post-linking function on elements that are not waiting\n * for their async templates to be resolved.\n *\n *\n * ### Transclusion\n *\n * Transclusion is the process of extracting a collection of DOM elements from one part of the DOM and\n * copying them to another part of the DOM, while maintaining their connection to the original AngularJS\n * scope from where they were taken.\n *\n * Transclusion is used (often with {@link ngTransclude}) to insert the\n * original contents of a directive's element into a specified place in the template of the directive.\n * The benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded\n * content has access to the properties on the scope from which it was taken, even if the directive\n * has isolated scope.\n * See the {@link guide/directive#creating-a-directive-that-wraps-other-elements Directives Guide}.\n *\n * This makes it possible for the widget to have private state for its template, while the transcluded\n * content has access to its originating scope.\n *\n * <div class=\"alert alert-warning\">\n * **Note:** When testing an element transclude directive you must not place the directive at the root of the\n * DOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives\n * Testing Transclusion Directives}.\n * </div>\n *\n * #### Transclusion Functions\n *\n * When a directive requests transclusion, the compiler extracts its contents and provides a **transclusion\n * function** to the directive's `link` function and `controller`. This transclusion function is a special\n * **linking function** that will return the compiled contents linked to a new transclusion scope.\n *\n * <div class=\"alert alert-info\">\n * If you are just using {@link ngTransclude} then you don't need to worry about this function, since\n * ngTransclude will deal with it for us.\n * </div>\n *\n * If you want to manually control the insertion and removal of the transcluded content in your directive\n * then you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery\n * object that contains the compiled DOM, which is linked to the correct transclusion scope.\n *\n * When you call a transclusion function you can pass in a **clone attach function**. This function accepts\n * two parameters, `function(clone, scope) { ... }`, where the `clone` is a fresh compiled copy of your transcluded\n * content and the `scope` is the newly created transclusion scope, to which the clone is bound.\n *\n * <div class=\"alert alert-info\">\n * **Best Practice**: Always provide a `cloneFn` (clone attach function) when you call a translude function\n * since you then get a fresh clone of the original DOM and also have access to the new transclusion scope.\n * </div>\n *\n * It is normal practice to attach your transcluded content (`clone`) to the DOM inside your **clone\n * attach function**:\n *\n * ```js\n * var transcludedContent, transclusionScope;\n *\n * $transclude(function(clone, scope) {\n *   element.append(clone);\n *   transcludedContent = clone;\n *   transclusionScope = scope;\n * });\n * ```\n *\n * Later, if you want to remove the transcluded content from your DOM then you should also destroy the\n * associated transclusion scope:\n *\n * ```js\n * transcludedContent.remove();\n * transclusionScope.$destroy();\n * ```\n *\n * <div class=\"alert alert-info\">\n * **Best Practice**: if you intend to add and remove transcluded content manually in your directive\n * (by calling the transclude function to get the DOM and and calling `element.remove()` to remove it),\n * then you are also responsible for calling `$destroy` on the transclusion scope.\n * </div>\n *\n * The built-in DOM manipulation directives, such as {@link ngIf}, {@link ngSwitch} and {@link ngRepeat}\n * automatically destroy their transluded clones as necessary so you do not need to worry about this if\n * you are simply using {@link ngTransclude} to inject the transclusion into your directive.\n *\n *\n * #### Transclusion Scopes\n *\n * When you call a transclude function it returns a DOM fragment that is pre-bound to a **transclusion\n * scope**. This scope is special, in that it is a child of the directive's scope (and so gets destroyed\n * when the directive's scope gets destroyed) but it inherits the properties of the scope from which it\n * was taken.\n *\n * For example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look\n * like this:\n *\n * ```html\n * <div ng-app>\n *   <div isolate>\n *     <div transclusion>\n *     </div>\n *   </div>\n * </div>\n * ```\n *\n * The `$parent` scope hierarchy will look like this:\n *\n * ```\n * - $rootScope\n *   - isolate\n *     - transclusion\n * ```\n *\n * but the scopes will inherit prototypically from different scopes to their `$parent`.\n *\n * ```\n * - $rootScope\n *   - transclusion\n * - isolate\n * ```\n *\n *\n * ### Attributes\n *\n * The {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the\n * `link()` or `compile()` functions. It has a variety of uses.\n *\n * accessing *Normalized attribute names:*\n * Directives like 'ngBind' can be expressed in many ways: 'ng:bind', `data-ng-bind`, or 'x-ng-bind'.\n * the attributes object allows for normalized access to\n *   the attributes.\n *\n * * *Directive inter-communication:* All directives share the same instance of the attributes\n *   object which allows the directives to use the attributes object as inter directive\n *   communication.\n *\n * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object\n *   allowing other directives to read the interpolated value.\n *\n * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes\n *   that contain interpolation (e.g. `src=\"{{bar}}\"`). Not only is this very efficient but it's also\n *   the only way to easily get the actual value because during the linking phase the interpolation\n *   hasn't been evaluated yet and so the value is at this time set to `undefined`.\n *\n * ```js\n * function linkingFn(scope, elm, attrs, ctrl) {\n *   // get the attribute value\n *   console.log(attrs.ngModel);\n *\n *   // change the attribute\n *   attrs.$set('ngModel', 'new value');\n *\n *   // observe changes to interpolated attribute\n *   attrs.$observe('ngModel', function(value) {\n *     console.log('ngModel has changed value to ' + value);\n *   });\n * }\n * ```\n *\n * ## Example\n *\n * <div class=\"alert alert-warning\">\n * **Note**: Typically directives are registered with `module.directive`. The example below is\n * to illustrate how `$compile` works.\n * </div>\n *\n <example module=\"compileExample\">\n   <file name=\"index.html\">\n    <script>\n      angular.module('compileExample', [], function($compileProvider) {\n        // configure new 'compile' directive by passing a directive\n        // factory function. The factory function injects the '$compile'\n        $compileProvider.directive('compile', function($compile) {\n          // directive factory creates a link function\n          return function(scope, element, attrs) {\n            scope.$watch(\n              function(scope) {\n                 // watch the 'compile' expression for changes\n                return scope.$eval(attrs.compile);\n              },\n              function(value) {\n                // when the 'compile' expression changes\n                // assign it into the current DOM\n                element.html(value);\n\n                // compile the new DOM and link it to the current\n                // scope.\n                // NOTE: we only compile .childNodes so that\n                // we don't get into infinite loop compiling ourselves\n                $compile(element.contents())(scope);\n              }\n            );\n          };\n        });\n      })\n      .controller('GreeterController', ['$scope', function($scope) {\n        $scope.name = 'Angular';\n        $scope.html = 'Hello {{name}}';\n      }]);\n    </script>\n    <div ng-controller=\"GreeterController\">\n      <input ng-model=\"name\"> <br>\n      <textarea ng-model=\"html\"></textarea> <br>\n      <div compile=\"html\"></div>\n    </div>\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n     it('should auto compile', function() {\n       var textarea = $('textarea');\n       var output = $('div[compile]');\n       // The initial state reads 'Hello Angular'.\n       expect(output.getText()).toBe('Hello Angular');\n       textarea.clear();\n       textarea.sendKeys('{{name}}!');\n       expect(output.getText()).toBe('Angular!');\n     });\n   </file>\n </example>\n\n *\n *\n * @param {string|DOMElement} element Element or HTML string to compile into a template function.\n * @param {function(angular.Scope, cloneAttachFn=)} transclude function available to directives - DEPRECATED.\n *\n * <div class=\"alert alert-error\">\n * **Note:** Passing a `transclude` function to the $compile function is deprecated, as it\n *   e.g. will not use the right outer scope. Please pass the transclude function as a\n *   `parentBoundTranscludeFn` to the link function instead.\n * </div>\n *\n * @param {number} maxPriority only apply directives lower than given priority (Only effects the\n *                 root element(s), not their children)\n * @returns {function(scope, cloneAttachFn=, options=)} a link function which is used to bind template\n * (a DOM element/tree) to a scope. Where:\n *\n *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.\n *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the\n *  `template` and call the `cloneAttachFn` function allowing the caller to attach the\n *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is\n *  called as: <br> `cloneAttachFn(clonedElement, scope)` where:\n *\n *      * `clonedElement` - is a clone of the original `element` passed into the compiler.\n *      * `scope` - is the current scope with which the linking function is working with.\n *\n *  * `options` - An optional object hash with linking options. If `options` is provided, then the following\n *  keys may be used to control linking behavior:\n *\n *      * `parentBoundTranscludeFn` - the transclude function made available to\n *        directives; if given, it will be passed through to the link functions of\n *        directives found in `element` during compilation.\n *      * `transcludeControllers` - an object hash with keys that map controller names\n *        to controller instances; if given, it will make the controllers\n *        available to directives.\n *      * `futureParentElement` - defines the parent to which the `cloneAttachFn` will add\n *        the cloned elements; only needed for transcludes that are allowed to contain non html\n *        elements (e.g. SVG elements). See also the directive.controller property.\n *\n * Calling the linking function returns the element of the template. It is either the original\n * element passed in, or the clone of the element if the `cloneAttachFn` is provided.\n *\n * After linking the view is not updated until after a call to $digest which typically is done by\n * Angular automatically.\n *\n * If you need access to the bound view, there are two ways to do it:\n *\n * - If you are not asking the linking function to clone the template, create the DOM element(s)\n *   before you send them to the compiler and keep this reference around.\n *   ```js\n *     var element = $compile('<p>{{total}}</p>')(scope);\n *   ```\n *\n * - if on the other hand, you need the element to be cloned, the view reference from the original\n *   example would not point to the clone, but rather to the original template that was cloned. In\n *   this case, you can access the clone via the cloneAttachFn:\n *   ```js\n *     var templateElement = angular.element('<p>{{total}}</p>'),\n *         scope = ....;\n *\n *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {\n *       //attach the clone to DOM document at the right place\n *     });\n *\n *     //now we have reference to the cloned DOM via `clonedElement`\n *   ```\n *\n *\n * For information on how the compiler works, see the\n * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.\n */\n\nvar $compileMinErr = minErr('$compile');\n\n/**\n * @ngdoc provider\n * @name $compileProvider\n *\n * @description\n */\n$CompileProvider.$inject = ['$provide', '$$sanitizeUriProvider'];\nfunction $CompileProvider($provide, $$sanitizeUriProvider) {\n  var hasDirectives = {},\n      Suffix = 'Directive',\n      COMMENT_DIRECTIVE_REGEXP = /^\\s*directive\\:\\s*([\\w\\-]+)\\s+(.*)$/,\n      CLASS_DIRECTIVE_REGEXP = /(([\\w\\-]+)(?:\\:([^;]+))?;?)/,\n      ALL_OR_NOTHING_ATTRS = makeMap('ngSrc,ngSrcset,src,srcset'),\n      REQUIRE_PREFIX_REGEXP = /^(?:(\\^\\^?)?(\\?)?(\\^\\^?)?)?/;\n\n  // Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes\n  // The assumption is that future DOM event attribute names will begin with\n  // 'on' and be composed of only English letters.\n  var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;\n\n  function parseIsolateBindings(scope, directiveName) {\n    var LOCAL_REGEXP = /^\\s*([@&]|=(\\*?))(\\??)\\s*(\\w*)\\s*$/;\n\n    var bindings = {};\n\n    forEach(scope, function(definition, scopeName) {\n      var match = definition.match(LOCAL_REGEXP);\n\n      if (!match) {\n        throw $compileMinErr('iscp',\n            \"Invalid isolate scope definition for directive '{0}'.\" +\n            \" Definition: {... {1}: '{2}' ...}\",\n            directiveName, scopeName, definition);\n      }\n\n      bindings[scopeName] = {\n        mode: match[1][0],\n        collection: match[2] === '*',\n        optional: match[3] === '?',\n        attrName: match[4] || scopeName\n      };\n    });\n\n    return bindings;\n  }\n\n  function assertValidDirectiveName(name) {\n    var letter = name.charAt(0);\n    if (!letter || letter !== lowercase(letter)) {\n      throw $compileMinErr('baddir', \"Directive name '{0}' is invalid. The first character must be a lowercase letter\", name);\n    }\n    return name;\n  }\n\n  /**\n   * @ngdoc method\n   * @name $compileProvider#directive\n   * @kind function\n   *\n   * @description\n   * Register a new directive with the compiler.\n   *\n   * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which\n   *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the\n   *    names and the values are the factories.\n   * @param {Function|Array} directiveFactory An injectable directive factory function. See\n   *    {@link guide/directive} for more info.\n   * @returns {ng.$compileProvider} Self for chaining.\n   */\n   this.directive = function registerDirective(name, directiveFactory) {\n    assertNotHasOwnProperty(name, 'directive');\n    if (isString(name)) {\n      assertValidDirectiveName(name);\n      assertArg(directiveFactory, 'directiveFactory');\n      if (!hasDirectives.hasOwnProperty(name)) {\n        hasDirectives[name] = [];\n        $provide.factory(name + Suffix, ['$injector', '$exceptionHandler',\n          function($injector, $exceptionHandler) {\n            var directives = [];\n            forEach(hasDirectives[name], function(directiveFactory, index) {\n              try {\n                var directive = $injector.invoke(directiveFactory);\n                if (isFunction(directive)) {\n                  directive = { compile: valueFn(directive) };\n                } else if (!directive.compile && directive.link) {\n                  directive.compile = valueFn(directive.link);\n                }\n                directive.priority = directive.priority || 0;\n                directive.index = index;\n                directive.name = directive.name || name;\n                directive.require = directive.require || (directive.controller && directive.name);\n                directive.restrict = directive.restrict || 'EA';\n                if (isObject(directive.scope)) {\n                  directive.$$isolateBindings = parseIsolateBindings(directive.scope, directive.name);\n                }\n                directives.push(directive);\n              } catch (e) {\n                $exceptionHandler(e);\n              }\n            });\n            return directives;\n          }]);\n      }\n      hasDirectives[name].push(directiveFactory);\n    } else {\n      forEach(name, reverseParams(registerDirective));\n    }\n    return this;\n  };\n\n\n  /**\n   * @ngdoc method\n   * @name $compileProvider#aHrefSanitizationWhitelist\n   * @kind function\n   *\n   * @description\n   * Retrieves or overrides the default regular expression that is used for whitelisting of safe\n   * urls during a[href] sanitization.\n   *\n   * The sanitization is a security measure aimed at preventing XSS attacks via html links.\n   *\n   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into\n   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`\n   * regular expression. If a match is found, the original url is written into the dom. Otherwise,\n   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.\n   *\n   * @param {RegExp=} regexp New regexp to whitelist urls with.\n   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for\n   *    chaining otherwise.\n   */\n  this.aHrefSanitizationWhitelist = function(regexp) {\n    if (isDefined(regexp)) {\n      $$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);\n      return this;\n    } else {\n      return $$sanitizeUriProvider.aHrefSanitizationWhitelist();\n    }\n  };\n\n\n  /**\n   * @ngdoc method\n   * @name $compileProvider#imgSrcSanitizationWhitelist\n   * @kind function\n   *\n   * @description\n   * Retrieves or overrides the default regular expression that is used for whitelisting of safe\n   * urls during img[src] sanitization.\n   *\n   * The sanitization is a security measure aimed at prevent XSS attacks via html links.\n   *\n   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into\n   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`\n   * regular expression. If a match is found, the original url is written into the dom. Otherwise,\n   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.\n   *\n   * @param {RegExp=} regexp New regexp to whitelist urls with.\n   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for\n   *    chaining otherwise.\n   */\n  this.imgSrcSanitizationWhitelist = function(regexp) {\n    if (isDefined(regexp)) {\n      $$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);\n      return this;\n    } else {\n      return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();\n    }\n  };\n\n  /**\n   * @ngdoc method\n   * @name  $compileProvider#debugInfoEnabled\n   *\n   * @param {boolean=} enabled update the debugInfoEnabled state if provided, otherwise just return the\n   * current debugInfoEnabled state\n   * @returns {*} current value if used as getter or itself (chaining) if used as setter\n   *\n   * @kind function\n   *\n   * @description\n   * Call this method to enable/disable various debug runtime information in the compiler such as adding\n   * binding information and a reference to the current scope on to DOM elements.\n   * If enabled, the compiler will add the following to DOM elements that have been bound to the scope\n   * * `ng-binding` CSS class\n   * * `$binding` data property containing an array of the binding expressions\n   *\n   * You may want to disable this in production for a significant performance boost. See\n   * {@link guide/production#disabling-debug-data Disabling Debug Data} for more.\n   *\n   * The default value is true.\n   */\n  var debugInfoEnabled = true;\n  this.debugInfoEnabled = function(enabled) {\n    if (isDefined(enabled)) {\n      debugInfoEnabled = enabled;\n      return this;\n    }\n    return debugInfoEnabled;\n  };\n\n  this.$get = [\n            '$injector', '$interpolate', '$exceptionHandler', '$templateRequest', '$parse',\n            '$controller', '$rootScope', '$document', '$sce', '$animate', '$$sanitizeUri',\n    function($injector,   $interpolate,   $exceptionHandler,   $templateRequest,   $parse,\n             $controller,   $rootScope,   $document,   $sce,   $animate,   $$sanitizeUri) {\n\n    var Attributes = function(element, attributesToCopy) {\n      if (attributesToCopy) {\n        var keys = Object.keys(attributesToCopy);\n        var i, l, key;\n\n        for (i = 0, l = keys.length; i < l; i++) {\n          key = keys[i];\n          this[key] = attributesToCopy[key];\n        }\n      } else {\n        this.$attr = {};\n      }\n\n      this.$$element = element;\n    };\n\n    Attributes.prototype = {\n      /**\n       * @ngdoc method\n       * @name $compile.directive.Attributes#$normalize\n       * @kind function\n       *\n       * @description\n       * Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with `x-` or\n       * `data-`) to its normalized, camelCase form.\n       *\n       * Also there is special case for Moz prefix starting with upper case letter.\n       *\n       * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}\n       *\n       * @param {string} name Name to normalize\n       */\n      $normalize: directiveNormalize,\n\n\n      /**\n       * @ngdoc method\n       * @name $compile.directive.Attributes#$addClass\n       * @kind function\n       *\n       * @description\n       * Adds the CSS class value specified by the classVal parameter to the element. If animations\n       * are enabled then an animation will be triggered for the class addition.\n       *\n       * @param {string} classVal The className value that will be added to the element\n       */\n      $addClass: function(classVal) {\n        if (classVal && classVal.length > 0) {\n          $animate.addClass(this.$$element, classVal);\n        }\n      },\n\n      /**\n       * @ngdoc method\n       * @name $compile.directive.Attributes#$removeClass\n       * @kind function\n       *\n       * @description\n       * Removes the CSS class value specified by the classVal parameter from the element. If\n       * animations are enabled then an animation will be triggered for the class removal.\n       *\n       * @param {string} classVal The className value that will be removed from the element\n       */\n      $removeClass: function(classVal) {\n        if (classVal && classVal.length > 0) {\n          $animate.removeClass(this.$$element, classVal);\n        }\n      },\n\n      /**\n       * @ngdoc method\n       * @name $compile.directive.Attributes#$updateClass\n       * @kind function\n       *\n       * @description\n       * Adds and removes the appropriate CSS class values to the element based on the difference\n       * between the new and old CSS class values (specified as newClasses and oldClasses).\n       *\n       * @param {string} newClasses The current CSS className value\n       * @param {string} oldClasses The former CSS className value\n       */\n      $updateClass: function(newClasses, oldClasses) {\n        var toAdd = tokenDifference(newClasses, oldClasses);\n        if (toAdd && toAdd.length) {\n          $animate.addClass(this.$$element, toAdd);\n        }\n\n        var toRemove = tokenDifference(oldClasses, newClasses);\n        if (toRemove && toRemove.length) {\n          $animate.removeClass(this.$$element, toRemove);\n        }\n      },\n\n      /**\n       * Set a normalized attribute on the element in a way such that all directives\n       * can share the attribute. This function properly handles boolean attributes.\n       * @param {string} key Normalized key. (ie ngAttribute)\n       * @param {string|boolean} value The value to set. If `null` attribute will be deleted.\n       * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.\n       *     Defaults to true.\n       * @param {string=} attrName Optional none normalized name. Defaults to key.\n       */\n      $set: function(key, value, writeAttr, attrName) {\n        // TODO: decide whether or not to throw an error if \"class\"\n        //is set through this function since it may cause $updateClass to\n        //become unstable.\n\n        var node = this.$$element[0],\n            booleanKey = getBooleanAttrName(node, key),\n            aliasedKey = getAliasedAttrName(node, key),\n            observer = key,\n            nodeName;\n\n        if (booleanKey) {\n          this.$$element.prop(key, value);\n          attrName = booleanKey;\n        } else if (aliasedKey) {\n          this[aliasedKey] = value;\n          observer = aliasedKey;\n        }\n\n        this[key] = value;\n\n        // translate normalized key to actual key\n        if (attrName) {\n          this.$attr[key] = attrName;\n        } else {\n          attrName = this.$attr[key];\n          if (!attrName) {\n            this.$attr[key] = attrName = snake_case(key, '-');\n          }\n        }\n\n        nodeName = nodeName_(this.$$element);\n\n        if ((nodeName === 'a' && key === 'href') ||\n            (nodeName === 'img' && key === 'src')) {\n          // sanitize a[href] and img[src] values\n          this[key] = value = $$sanitizeUri(value, key === 'src');\n        } else if (nodeName === 'img' && key === 'srcset') {\n          // sanitize img[srcset] values\n          var result = \"\";\n\n          // first check if there are spaces because it's not the same pattern\n          var trimmedSrcset = trim(value);\n          //                (   999x   ,|   999w   ,|   ,|,   )\n          var srcPattern = /(\\s+\\d+x\\s*,|\\s+\\d+w\\s*,|\\s+,|,\\s+)/;\n          var pattern = /\\s/.test(trimmedSrcset) ? srcPattern : /(,)/;\n\n          // split srcset into tuple of uri and descriptor except for the last item\n          var rawUris = trimmedSrcset.split(pattern);\n\n          // for each tuples\n          var nbrUrisWith2parts = Math.floor(rawUris.length / 2);\n          for (var i = 0; i < nbrUrisWith2parts; i++) {\n            var innerIdx = i * 2;\n            // sanitize the uri\n            result += $$sanitizeUri(trim(rawUris[innerIdx]), true);\n            // add the descriptor\n            result += (\" \" + trim(rawUris[innerIdx + 1]));\n          }\n\n          // split the last item into uri and descriptor\n          var lastTuple = trim(rawUris[i * 2]).split(/\\s/);\n\n          // sanitize the last uri\n          result += $$sanitizeUri(trim(lastTuple[0]), true);\n\n          // and add the last descriptor if any\n          if (lastTuple.length === 2) {\n            result += (\" \" + trim(lastTuple[1]));\n          }\n          this[key] = value = result;\n        }\n\n        if (writeAttr !== false) {\n          if (value === null || value === undefined) {\n            this.$$element.removeAttr(attrName);\n          } else {\n            this.$$element.attr(attrName, value);\n          }\n        }\n\n        // fire observers\n        var $$observers = this.$$observers;\n        $$observers && forEach($$observers[observer], function(fn) {\n          try {\n            fn(value);\n          } catch (e) {\n            $exceptionHandler(e);\n          }\n        });\n      },\n\n\n      /**\n       * @ngdoc method\n       * @name $compile.directive.Attributes#$observe\n       * @kind function\n       *\n       * @description\n       * Observes an interpolated attribute.\n       *\n       * The observer function will be invoked once during the next `$digest` following\n       * compilation. The observer is then invoked whenever the interpolated value\n       * changes.\n       *\n       * @param {string} key Normalized key. (ie ngAttribute) .\n       * @param {function(interpolatedValue)} fn Function that will be called whenever\n                the interpolated value of the attribute changes.\n       *        See the {@link guide/directive#text-and-attribute-bindings Directives} guide for more info.\n       * @returns {function()} Returns a deregistration function for this observer.\n       */\n      $observe: function(key, fn) {\n        var attrs = this,\n            $$observers = (attrs.$$observers || (attrs.$$observers = createMap())),\n            listeners = ($$observers[key] || ($$observers[key] = []));\n\n        listeners.push(fn);\n        $rootScope.$evalAsync(function() {\n          if (!listeners.$$inter && attrs.hasOwnProperty(key)) {\n            // no one registered attribute interpolation function, so lets call it manually\n            fn(attrs[key]);\n          }\n        });\n\n        return function() {\n          arrayRemove(listeners, fn);\n        };\n      }\n    };\n\n\n    function safeAddClass($element, className) {\n      try {\n        $element.addClass(className);\n      } catch (e) {\n        // ignore, since it means that we are trying to set class on\n        // SVG element, where class name is read-only.\n      }\n    }\n\n\n    var startSymbol = $interpolate.startSymbol(),\n        endSymbol = $interpolate.endSymbol(),\n        denormalizeTemplate = (startSymbol == '{{' || endSymbol  == '}}')\n            ? identity\n            : function denormalizeTemplate(template) {\n              return template.replace(/\\{\\{/g, startSymbol).replace(/}}/g, endSymbol);\n        },\n        NG_ATTR_BINDING = /^ngAttr[A-Z]/;\n\n    compile.$$addBindingInfo = debugInfoEnabled ? function $$addBindingInfo($element, binding) {\n      var bindings = $element.data('$binding') || [];\n\n      if (isArray(binding)) {\n        bindings = bindings.concat(binding);\n      } else {\n        bindings.push(binding);\n      }\n\n      $element.data('$binding', bindings);\n    } : noop;\n\n    compile.$$addBindingClass = debugInfoEnabled ? function $$addBindingClass($element) {\n      safeAddClass($element, 'ng-binding');\n    } : noop;\n\n    compile.$$addScopeInfo = debugInfoEnabled ? function $$addScopeInfo($element, scope, isolated, noTemplate) {\n      var dataName = isolated ? (noTemplate ? '$isolateScopeNoTemplate' : '$isolateScope') : '$scope';\n      $element.data(dataName, scope);\n    } : noop;\n\n    compile.$$addScopeClass = debugInfoEnabled ? function $$addScopeClass($element, isolated) {\n      safeAddClass($element, isolated ? 'ng-isolate-scope' : 'ng-scope');\n    } : noop;\n\n    return compile;\n\n    //================================\n\n    function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective,\n                        previousCompileContext) {\n      if (!($compileNodes instanceof jqLite)) {\n        // jquery always rewraps, whereas we need to preserve the original selector so that we can\n        // modify it.\n        $compileNodes = jqLite($compileNodes);\n      }\n      // We can not compile top level text elements since text nodes can be merged and we will\n      // not be able to attach scope data to them, so we will wrap them in <span>\n      forEach($compileNodes, function(node, index) {\n        if (node.nodeType == NODE_TYPE_TEXT && node.nodeValue.match(/\\S+/) /* non-empty */ ) {\n          $compileNodes[index] = jqLite(node).wrap('<span></span>').parent()[0];\n        }\n      });\n      var compositeLinkFn =\n              compileNodes($compileNodes, transcludeFn, $compileNodes,\n                           maxPriority, ignoreDirective, previousCompileContext);\n      compile.$$addScopeClass($compileNodes);\n      var namespace = null;\n      return function publicLinkFn(scope, cloneConnectFn, options) {\n        assertArg(scope, 'scope');\n\n        options = options || {};\n        var parentBoundTranscludeFn = options.parentBoundTranscludeFn,\n          transcludeControllers = options.transcludeControllers,\n          futureParentElement = options.futureParentElement;\n\n        // When `parentBoundTranscludeFn` is passed, it is a\n        // `controllersBoundTransclude` function (it was previously passed\n        // as `transclude` to directive.link) so we must unwrap it to get\n        // its `boundTranscludeFn`\n        if (parentBoundTranscludeFn && parentBoundTranscludeFn.$$boundTransclude) {\n          parentBoundTranscludeFn = parentBoundTranscludeFn.$$boundTransclude;\n        }\n\n        if (!namespace) {\n          namespace = detectNamespaceForChildElements(futureParentElement);\n        }\n        var $linkNode;\n        if (namespace !== 'html') {\n          // When using a directive with replace:true and templateUrl the $compileNodes\n          // (or a child element inside of them)\n          // might change, so we need to recreate the namespace adapted compileNodes\n          // for call to the link function.\n          // Note: This will already clone the nodes...\n          $linkNode = jqLite(\n            wrapTemplate(namespace, jqLite('<div>').append($compileNodes).html())\n          );\n        } else if (cloneConnectFn) {\n          // important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart\n          // and sometimes changes the structure of the DOM.\n          $linkNode = JQLitePrototype.clone.call($compileNodes);\n        } else {\n          $linkNode = $compileNodes;\n        }\n\n        if (transcludeControllers) {\n          for (var controllerName in transcludeControllers) {\n            $linkNode.data('$' + controllerName + 'Controller', transcludeControllers[controllerName].instance);\n          }\n        }\n\n        compile.$$addScopeInfo($linkNode, scope);\n\n        if (cloneConnectFn) cloneConnectFn($linkNode, scope);\n        if (compositeLinkFn) compositeLinkFn(scope, $linkNode, $linkNode, parentBoundTranscludeFn);\n        return $linkNode;\n      };\n    }\n\n    function detectNamespaceForChildElements(parentElement) {\n      // TODO: Make this detect MathML as well...\n      var node = parentElement && parentElement[0];\n      if (!node) {\n        return 'html';\n      } else {\n        return nodeName_(node) !== 'foreignobject' && node.toString().match(/SVG/) ? 'svg' : 'html';\n      }\n    }\n\n    /**\n     * Compile function matches each node in nodeList against the directives. Once all directives\n     * for a particular node are collected their compile functions are executed. The compile\n     * functions return values - the linking functions - are combined into a composite linking\n     * function, which is the a linking function for the node.\n     *\n     * @param {NodeList} nodeList an array of nodes or NodeList to compile\n     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the\n     *        scope argument is auto-generated to the new child of the transcluded parent scope.\n     * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then\n     *        the rootElement must be set the jqLite collection of the compile root. This is\n     *        needed so that the jqLite collection items can be replaced with widgets.\n     * @param {number=} maxPriority Max directive priority.\n     * @returns {Function} A composite linking function of all of the matched directives or null.\n     */\n    function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective,\n                            previousCompileContext) {\n      var linkFns = [],\n          attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound, nodeLinkFnFound;\n\n      for (var i = 0; i < nodeList.length; i++) {\n        attrs = new Attributes();\n\n        // we must always refer to nodeList[i] since the nodes can be replaced underneath us.\n        directives = collectDirectives(nodeList[i], [], attrs, i === 0 ? maxPriority : undefined,\n                                        ignoreDirective);\n\n        nodeLinkFn = (directives.length)\n            ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement,\n                                      null, [], [], previousCompileContext)\n            : null;\n\n        if (nodeLinkFn && nodeLinkFn.scope) {\n          compile.$$addScopeClass(attrs.$$element);\n        }\n\n        childLinkFn = (nodeLinkFn && nodeLinkFn.terminal ||\n                      !(childNodes = nodeList[i].childNodes) ||\n                      !childNodes.length)\n            ? null\n            : compileNodes(childNodes,\n                 nodeLinkFn ? (\n                  (nodeLinkFn.transcludeOnThisElement || !nodeLinkFn.templateOnThisElement)\n                     && nodeLinkFn.transclude) : transcludeFn);\n\n        if (nodeLinkFn || childLinkFn) {\n          linkFns.push(i, nodeLinkFn, childLinkFn);\n          linkFnFound = true;\n          nodeLinkFnFound = nodeLinkFnFound || nodeLinkFn;\n        }\n\n        //use the previous context only for the first element in the virtual group\n        previousCompileContext = null;\n      }\n\n      // return a linking function if we have found anything, null otherwise\n      return linkFnFound ? compositeLinkFn : null;\n\n      function compositeLinkFn(scope, nodeList, $rootElement, parentBoundTranscludeFn) {\n        var nodeLinkFn, childLinkFn, node, childScope, i, ii, idx, childBoundTranscludeFn;\n        var stableNodeList;\n\n\n        if (nodeLinkFnFound) {\n          // copy nodeList so that if a nodeLinkFn removes or adds an element at this DOM level our\n          // offsets don't get screwed up\n          var nodeListLength = nodeList.length;\n          stableNodeList = new Array(nodeListLength);\n\n          // create a sparse array by only copying the elements which have a linkFn\n          for (i = 0; i < linkFns.length; i+=3) {\n            idx = linkFns[i];\n            stableNodeList[idx] = nodeList[idx];\n          }\n        } else {\n          stableNodeList = nodeList;\n        }\n\n        for (i = 0, ii = linkFns.length; i < ii;) {\n          node = stableNodeList[linkFns[i++]];\n          nodeLinkFn = linkFns[i++];\n          childLinkFn = linkFns[i++];\n\n          if (nodeLinkFn) {\n            if (nodeLinkFn.scope) {\n              childScope = scope.$new();\n              compile.$$addScopeInfo(jqLite(node), childScope);\n            } else {\n              childScope = scope;\n            }\n\n            if (nodeLinkFn.transcludeOnThisElement) {\n              childBoundTranscludeFn = createBoundTranscludeFn(\n                  scope, nodeLinkFn.transclude, parentBoundTranscludeFn,\n                  nodeLinkFn.elementTranscludeOnThisElement);\n\n            } else if (!nodeLinkFn.templateOnThisElement && parentBoundTranscludeFn) {\n              childBoundTranscludeFn = parentBoundTranscludeFn;\n\n            } else if (!parentBoundTranscludeFn && transcludeFn) {\n              childBoundTranscludeFn = createBoundTranscludeFn(scope, transcludeFn);\n\n            } else {\n              childBoundTranscludeFn = null;\n            }\n\n            nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn);\n\n          } else if (childLinkFn) {\n            childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn);\n          }\n        }\n      }\n    }\n\n    function createBoundTranscludeFn(scope, transcludeFn, previousBoundTranscludeFn, elementTransclusion) {\n\n      var boundTranscludeFn = function(transcludedScope, cloneFn, controllers, futureParentElement, containingScope) {\n\n        if (!transcludedScope) {\n          transcludedScope = scope.$new(false, containingScope);\n          transcludedScope.$$transcluded = true;\n        }\n\n        return transcludeFn(transcludedScope, cloneFn, {\n          parentBoundTranscludeFn: previousBoundTranscludeFn,\n          transcludeControllers: controllers,\n          futureParentElement: futureParentElement\n        });\n      };\n\n      return boundTranscludeFn;\n    }\n\n    /**\n     * Looks for directives on the given node and adds them to the directive collection which is\n     * sorted.\n     *\n     * @param node Node to search.\n     * @param directives An array to which the directives are added to. This array is sorted before\n     *        the function returns.\n     * @param attrs The shared attrs object which is used to populate the normalized attributes.\n     * @param {number=} maxPriority Max directive priority.\n     */\n    function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {\n      var nodeType = node.nodeType,\n          attrsMap = attrs.$attr,\n          match,\n          className;\n\n      switch (nodeType) {\n        case NODE_TYPE_ELEMENT: /* Element */\n          // use the node name: <directive>\n          addDirective(directives,\n              directiveNormalize(nodeName_(node)), 'E', maxPriority, ignoreDirective);\n\n          // iterate over the attributes\n          for (var attr, name, nName, ngAttrName, value, isNgAttr, nAttrs = node.attributes,\n                   j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {\n            var attrStartName = false;\n            var attrEndName = false;\n\n            attr = nAttrs[j];\n            name = attr.name;\n            value = trim(attr.value);\n\n            // support ngAttr attribute binding\n            ngAttrName = directiveNormalize(name);\n            if (isNgAttr = NG_ATTR_BINDING.test(ngAttrName)) {\n              name = name.replace(PREFIX_REGEXP, '')\n                .substr(8).replace(/_(.)/g, function(match, letter) {\n                  return letter.toUpperCase();\n                });\n            }\n\n            var directiveNName = ngAttrName.replace(/(Start|End)$/, '');\n            if (directiveIsMultiElement(directiveNName)) {\n              if (ngAttrName === directiveNName + 'Start') {\n                attrStartName = name;\n                attrEndName = name.substr(0, name.length - 5) + 'end';\n                name = name.substr(0, name.length - 6);\n              }\n            }\n\n            nName = directiveNormalize(name.toLowerCase());\n            attrsMap[nName] = name;\n            if (isNgAttr || !attrs.hasOwnProperty(nName)) {\n                attrs[nName] = value;\n                if (getBooleanAttrName(node, nName)) {\n                  attrs[nName] = true; // presence means true\n                }\n            }\n            addAttrInterpolateDirective(node, directives, value, nName, isNgAttr);\n            addDirective(directives, nName, 'A', maxPriority, ignoreDirective, attrStartName,\n                          attrEndName);\n          }\n\n          // use class as directive\n          className = node.className;\n          if (isObject(className)) {\n              // Maybe SVGAnimatedString\n              className = className.animVal;\n          }\n          if (isString(className) && className !== '') {\n            while (match = CLASS_DIRECTIVE_REGEXP.exec(className)) {\n              nName = directiveNormalize(match[2]);\n              if (addDirective(directives, nName, 'C', maxPriority, ignoreDirective)) {\n                attrs[nName] = trim(match[3]);\n              }\n              className = className.substr(match.index + match[0].length);\n            }\n          }\n          break;\n        case NODE_TYPE_TEXT: /* Text Node */\n          addTextInterpolateDirective(directives, node.nodeValue);\n          break;\n        case NODE_TYPE_COMMENT: /* Comment */\n          try {\n            match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);\n            if (match) {\n              nName = directiveNormalize(match[1]);\n              if (addDirective(directives, nName, 'M', maxPriority, ignoreDirective)) {\n                attrs[nName] = trim(match[2]);\n              }\n            }\n          } catch (e) {\n            // turns out that under some circumstances IE9 throws errors when one attempts to read\n            // comment's node value.\n            // Just ignore it and continue. (Can't seem to reproduce in test case.)\n          }\n          break;\n      }\n\n      directives.sort(byPriority);\n      return directives;\n    }\n\n    /**\n     * Given a node with an directive-start it collects all of the siblings until it finds\n     * directive-end.\n     * @param node\n     * @param attrStart\n     * @param attrEnd\n     * @returns {*}\n     */\n    function groupScan(node, attrStart, attrEnd) {\n      var nodes = [];\n      var depth = 0;\n      if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {\n        do {\n          if (!node) {\n            throw $compileMinErr('uterdir',\n                      \"Unterminated attribute, found '{0}' but no matching '{1}' found.\",\n                      attrStart, attrEnd);\n          }\n          if (node.nodeType == NODE_TYPE_ELEMENT) {\n            if (node.hasAttribute(attrStart)) depth++;\n            if (node.hasAttribute(attrEnd)) depth--;\n          }\n          nodes.push(node);\n          node = node.nextSibling;\n        } while (depth > 0);\n      } else {\n        nodes.push(node);\n      }\n\n      return jqLite(nodes);\n    }\n\n    /**\n     * Wrapper for linking function which converts normal linking function into a grouped\n     * linking function.\n     * @param linkFn\n     * @param attrStart\n     * @param attrEnd\n     * @returns {Function}\n     */\n    function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {\n      return function(scope, element, attrs, controllers, transcludeFn) {\n        element = groupScan(element[0], attrStart, attrEnd);\n        return linkFn(scope, element, attrs, controllers, transcludeFn);\n      };\n    }\n\n    /**\n     * Once the directives have been collected, their compile functions are executed. This method\n     * is responsible for inlining directive templates as well as terminating the application\n     * of the directives if the terminal directive has been reached.\n     *\n     * @param {Array} directives Array of collected directives to execute their compile function.\n     *        this needs to be pre-sorted by priority order.\n     * @param {Node} compileNode The raw DOM node to apply the compile functions to\n     * @param {Object} templateAttrs The shared attribute function\n     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the\n     *                                                  scope argument is auto-generated to the new\n     *                                                  child of the transcluded parent scope.\n     * @param {JQLite} jqCollection If we are working on the root of the compile tree then this\n     *                              argument has the root jqLite array so that we can replace nodes\n     *                              on it.\n     * @param {Object=} originalReplaceDirective An optional directive that will be ignored when\n     *                                           compiling the transclusion.\n     * @param {Array.<Function>} preLinkFns\n     * @param {Array.<Function>} postLinkFns\n     * @param {Object} previousCompileContext Context used for previous compilation of the current\n     *                                        node\n     * @returns {Function} linkFn\n     */\n    function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn,\n                                   jqCollection, originalReplaceDirective, preLinkFns, postLinkFns,\n                                   previousCompileContext) {\n      previousCompileContext = previousCompileContext || {};\n\n      var terminalPriority = -Number.MAX_VALUE,\n          newScopeDirective,\n          controllerDirectives = previousCompileContext.controllerDirectives,\n          controllers,\n          newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective,\n          templateDirective = previousCompileContext.templateDirective,\n          nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective,\n          hasTranscludeDirective = false,\n          hasTemplate = false,\n          hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective,\n          $compileNode = templateAttrs.$$element = jqLite(compileNode),\n          directive,\n          directiveName,\n          $template,\n          replaceDirective = originalReplaceDirective,\n          childTranscludeFn = transcludeFn,\n          linkFn,\n          directiveValue;\n\n      // executes all directives on the current element\n      for (var i = 0, ii = directives.length; i < ii; i++) {\n        directive = directives[i];\n        var attrStart = directive.$$start;\n        var attrEnd = directive.$$end;\n\n        // collect multiblock sections\n        if (attrStart) {\n          $compileNode = groupScan(compileNode, attrStart, attrEnd);\n        }\n        $template = undefined;\n\n        if (terminalPriority > directive.priority) {\n          break; // prevent further processing of directives\n        }\n\n        if (directiveValue = directive.scope) {\n\n          // skip the check for directives with async templates, we'll check the derived sync\n          // directive when the template arrives\n          if (!directive.templateUrl) {\n            if (isObject(directiveValue)) {\n              // This directive is trying to add an isolated scope.\n              // Check that there is no scope of any kind already\n              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective || newScopeDirective,\n                                directive, $compileNode);\n              newIsolateScopeDirective = directive;\n            } else {\n              // This directive is trying to add a child scope.\n              // Check that there is no isolated scope already\n              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective, directive,\n                                $compileNode);\n            }\n          }\n\n          newScopeDirective = newScopeDirective || directive;\n        }\n\n        directiveName = directive.name;\n\n        if (!directive.templateUrl && directive.controller) {\n          directiveValue = directive.controller;\n          controllerDirectives = controllerDirectives || {};\n          assertNoDuplicate(\"'\" + directiveName + \"' controller\",\n              controllerDirectives[directiveName], directive, $compileNode);\n          controllerDirectives[directiveName] = directive;\n        }\n\n        if (directiveValue = directive.transclude) {\n          hasTranscludeDirective = true;\n\n          // Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.\n          // This option should only be used by directives that know how to safely handle element transclusion,\n          // where the transcluded nodes are added or replaced after linking.\n          if (!directive.$$tlb) {\n            assertNoDuplicate('transclusion', nonTlbTranscludeDirective, directive, $compileNode);\n            nonTlbTranscludeDirective = directive;\n          }\n\n          if (directiveValue == 'element') {\n            hasElementTranscludeDirective = true;\n            terminalPriority = directive.priority;\n            $template = $compileNode;\n            $compileNode = templateAttrs.$$element =\n                jqLite(document.createComment(' ' + directiveName + ': ' +\n                                              templateAttrs[directiveName] + ' '));\n            compileNode = $compileNode[0];\n            replaceWith(jqCollection, sliceArgs($template), compileNode);\n\n            childTranscludeFn = compile($template, transcludeFn, terminalPriority,\n                                        replaceDirective && replaceDirective.name, {\n                                          // Don't pass in:\n                                          // - controllerDirectives - otherwise we'll create duplicates controllers\n                                          // - newIsolateScopeDirective or templateDirective - combining templates with\n                                          //   element transclusion doesn't make sense.\n                                          //\n                                          // We need only nonTlbTranscludeDirective so that we prevent putting transclusion\n                                          // on the same element more than once.\n                                          nonTlbTranscludeDirective: nonTlbTranscludeDirective\n                                        });\n          } else {\n            $template = jqLite(jqLiteClone(compileNode)).contents();\n            $compileNode.empty(); // clear contents\n            childTranscludeFn = compile($template, transcludeFn);\n          }\n        }\n\n        if (directive.template) {\n          hasTemplate = true;\n          assertNoDuplicate('template', templateDirective, directive, $compileNode);\n          templateDirective = directive;\n\n          directiveValue = (isFunction(directive.template))\n              ? directive.template($compileNode, templateAttrs)\n              : directive.template;\n\n          directiveValue = denormalizeTemplate(directiveValue);\n\n          if (directive.replace) {\n            replaceDirective = directive;\n            if (jqLiteIsTextNode(directiveValue)) {\n              $template = [];\n            } else {\n              $template = removeComments(wrapTemplate(directive.templateNamespace, trim(directiveValue)));\n            }\n            compileNode = $template[0];\n\n            if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {\n              throw $compileMinErr('tplrt',\n                  \"Template for directive '{0}' must have exactly one root element. {1}\",\n                  directiveName, '');\n            }\n\n            replaceWith(jqCollection, $compileNode, compileNode);\n\n            var newTemplateAttrs = {$attr: {}};\n\n            // combine directives from the original node and from the template:\n            // - take the array of directives for this element\n            // - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)\n            // - collect directives from the template and sort them by priority\n            // - combine directives as: processed + template + unprocessed\n            var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs);\n            var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));\n\n            if (newIsolateScopeDirective) {\n              markDirectivesAsIsolate(templateDirectives);\n            }\n            directives = directives.concat(templateDirectives).concat(unprocessedDirectives);\n            mergeTemplateAttributes(templateAttrs, newTemplateAttrs);\n\n            ii = directives.length;\n          } else {\n            $compileNode.html(directiveValue);\n          }\n        }\n\n        if (directive.templateUrl) {\n          hasTemplate = true;\n          assertNoDuplicate('template', templateDirective, directive, $compileNode);\n          templateDirective = directive;\n\n          if (directive.replace) {\n            replaceDirective = directive;\n          }\n\n          nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode,\n              templateAttrs, jqCollection, hasTranscludeDirective && childTranscludeFn, preLinkFns, postLinkFns, {\n                controllerDirectives: controllerDirectives,\n                newIsolateScopeDirective: newIsolateScopeDirective,\n                templateDirective: templateDirective,\n                nonTlbTranscludeDirective: nonTlbTranscludeDirective\n              });\n          ii = directives.length;\n        } else if (directive.compile) {\n          try {\n            linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);\n            if (isFunction(linkFn)) {\n              addLinkFns(null, linkFn, attrStart, attrEnd);\n            } else if (linkFn) {\n              addLinkFns(linkFn.pre, linkFn.post, attrStart, attrEnd);\n            }\n          } catch (e) {\n            $exceptionHandler(e, startingTag($compileNode));\n          }\n        }\n\n        if (directive.terminal) {\n          nodeLinkFn.terminal = true;\n          terminalPriority = Math.max(terminalPriority, directive.priority);\n        }\n\n      }\n\n      nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true;\n      nodeLinkFn.transcludeOnThisElement = hasTranscludeDirective;\n      nodeLinkFn.elementTranscludeOnThisElement = hasElementTranscludeDirective;\n      nodeLinkFn.templateOnThisElement = hasTemplate;\n      nodeLinkFn.transclude = childTranscludeFn;\n\n      previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;\n\n      // might be normal or delayed nodeLinkFn depending on if templateUrl is present\n      return nodeLinkFn;\n\n      ////////////////////\n\n      function addLinkFns(pre, post, attrStart, attrEnd) {\n        if (pre) {\n          if (attrStart) pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);\n          pre.require = directive.require;\n          pre.directiveName = directiveName;\n          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {\n            pre = cloneAndAnnotateFn(pre, {isolateScope: true});\n          }\n          preLinkFns.push(pre);\n        }\n        if (post) {\n          if (attrStart) post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);\n          post.require = directive.require;\n          post.directiveName = directiveName;\n          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {\n            post = cloneAndAnnotateFn(post, {isolateScope: true});\n          }\n          postLinkFns.push(post);\n        }\n      }\n\n\n      function getControllers(directiveName, require, $element, elementControllers) {\n        var value, retrievalMethod = 'data', optional = false;\n        var $searchElement = $element;\n        var match;\n        if (isString(require)) {\n          match = require.match(REQUIRE_PREFIX_REGEXP);\n          require = require.substring(match[0].length);\n\n          if (match[3]) {\n            if (match[1]) match[3] = null;\n            else match[1] = match[3];\n          }\n          if (match[1] === '^') {\n            retrievalMethod = 'inheritedData';\n          } else if (match[1] === '^^') {\n            retrievalMethod = 'inheritedData';\n            $searchElement = $element.parent();\n          }\n          if (match[2] === '?') {\n            optional = true;\n          }\n\n          value = null;\n\n          if (elementControllers && retrievalMethod === 'data') {\n            if (value = elementControllers[require]) {\n              value = value.instance;\n            }\n          }\n          value = value || $searchElement[retrievalMethod]('$' + require + 'Controller');\n\n          if (!value && !optional) {\n            throw $compileMinErr('ctreq',\n                \"Controller '{0}', required by directive '{1}', can't be found!\",\n                require, directiveName);\n          }\n          return value || null;\n        } else if (isArray(require)) {\n          value = [];\n          forEach(require, function(require) {\n            value.push(getControllers(directiveName, require, $element, elementControllers));\n          });\n        }\n        return value;\n      }\n\n\n      function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn) {\n        var i, ii, linkFn, controller, isolateScope, elementControllers, transcludeFn, $element,\n            attrs;\n\n        if (compileNode === linkNode) {\n          attrs = templateAttrs;\n          $element = templateAttrs.$$element;\n        } else {\n          $element = jqLite(linkNode);\n          attrs = new Attributes($element, templateAttrs);\n        }\n\n        if (newIsolateScopeDirective) {\n          isolateScope = scope.$new(true);\n        }\n\n        if (boundTranscludeFn) {\n          // track `boundTranscludeFn` so it can be unwrapped if `transcludeFn`\n          // is later passed as `parentBoundTranscludeFn` to `publicLinkFn`\n          transcludeFn = controllersBoundTransclude;\n          transcludeFn.$$boundTransclude = boundTranscludeFn;\n        }\n\n        if (controllerDirectives) {\n          // TODO: merge `controllers` and `elementControllers` into single object.\n          controllers = {};\n          elementControllers = {};\n          forEach(controllerDirectives, function(directive) {\n            var locals = {\n              $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,\n              $element: $element,\n              $attrs: attrs,\n              $transclude: transcludeFn\n            }, controllerInstance;\n\n            controller = directive.controller;\n            if (controller == '@') {\n              controller = attrs[directive.name];\n            }\n\n            controllerInstance = $controller(controller, locals, true, directive.controllerAs);\n\n            // For directives with element transclusion the element is a comment,\n            // but jQuery .data doesn't support attaching data to comment nodes as it's hard to\n            // clean up (http://bugs.jquery.com/ticket/8335).\n            // Instead, we save the controllers for the element in a local hash and attach to .data\n            // later, once we have the actual element.\n            elementControllers[directive.name] = controllerInstance;\n            if (!hasElementTranscludeDirective) {\n              $element.data('$' + directive.name + 'Controller', controllerInstance.instance);\n            }\n\n            controllers[directive.name] = controllerInstance;\n          });\n        }\n\n        if (newIsolateScopeDirective) {\n          compile.$$addScopeInfo($element, isolateScope, true, !(templateDirective && (templateDirective === newIsolateScopeDirective ||\n              templateDirective === newIsolateScopeDirective.$$originalDirective)));\n          compile.$$addScopeClass($element, true);\n\n          var isolateScopeController = controllers && controllers[newIsolateScopeDirective.name];\n          var isolateBindingContext = isolateScope;\n          if (isolateScopeController && isolateScopeController.identifier &&\n              newIsolateScopeDirective.bindToController === true) {\n            isolateBindingContext = isolateScopeController.instance;\n          }\n\n          forEach(isolateScope.$$isolateBindings = newIsolateScopeDirective.$$isolateBindings, function(definition, scopeName) {\n            var attrName = definition.attrName,\n                optional = definition.optional,\n                mode = definition.mode, // @, =, or &\n                lastValue,\n                parentGet, parentSet, compare;\n\n            switch (mode) {\n\n              case '@':\n                attrs.$observe(attrName, function(value) {\n                  isolateBindingContext[scopeName] = value;\n                });\n                attrs.$$observers[attrName].$$scope = scope;\n                if (attrs[attrName]) {\n                  // If the attribute has been provided then we trigger an interpolation to ensure\n                  // the value is there for use in the link fn\n                  isolateBindingContext[scopeName] = $interpolate(attrs[attrName])(scope);\n                }\n                break;\n\n              case '=':\n                if (optional && !attrs[attrName]) {\n                  return;\n                }\n                parentGet = $parse(attrs[attrName]);\n                if (parentGet.literal) {\n                  compare = equals;\n                } else {\n                  compare = function(a, b) { return a === b || (a !== a && b !== b); };\n                }\n                parentSet = parentGet.assign || function() {\n                  // reset the change, or we will throw this exception on every $digest\n                  lastValue = isolateBindingContext[scopeName] = parentGet(scope);\n                  throw $compileMinErr('nonassign',\n                      \"Expression '{0}' used with directive '{1}' is non-assignable!\",\n                      attrs[attrName], newIsolateScopeDirective.name);\n                };\n                lastValue = isolateBindingContext[scopeName] = parentGet(scope);\n                var parentValueWatch = function parentValueWatch(parentValue) {\n                  if (!compare(parentValue, isolateBindingContext[scopeName])) {\n                    // we are out of sync and need to copy\n                    if (!compare(parentValue, lastValue)) {\n                      // parent changed and it has precedence\n                      isolateBindingContext[scopeName] = parentValue;\n                    } else {\n                      // if the parent can be assigned then do so\n                      parentSet(scope, parentValue = isolateBindingContext[scopeName]);\n                    }\n                  }\n                  return lastValue = parentValue;\n                };\n                parentValueWatch.$stateful = true;\n                var unwatch;\n                if (definition.collection) {\n                  unwatch = scope.$watchCollection(attrs[attrName], parentValueWatch);\n                } else {\n                  unwatch = scope.$watch($parse(attrs[attrName], parentValueWatch), null, parentGet.literal);\n                }\n                isolateScope.$on('$destroy', unwatch);\n                break;\n\n              case '&':\n                parentGet = $parse(attrs[attrName]);\n                isolateBindingContext[scopeName] = function(locals) {\n                  return parentGet(scope, locals);\n                };\n                break;\n            }\n          });\n        }\n        if (controllers) {\n          forEach(controllers, function(controller) {\n            controller();\n          });\n          controllers = null;\n        }\n\n        // PRELINKING\n        for (i = 0, ii = preLinkFns.length; i < ii; i++) {\n          linkFn = preLinkFns[i];\n          invokeLinkFn(linkFn,\n              linkFn.isolateScope ? isolateScope : scope,\n              $element,\n              attrs,\n              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),\n              transcludeFn\n          );\n        }\n\n        // RECURSION\n        // We only pass the isolate scope, if the isolate directive has a template,\n        // otherwise the child elements do not belong to the isolate directive.\n        var scopeToChild = scope;\n        if (newIsolateScopeDirective && (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)) {\n          scopeToChild = isolateScope;\n        }\n        childLinkFn && childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);\n\n        // POSTLINKING\n        for (i = postLinkFns.length - 1; i >= 0; i--) {\n          linkFn = postLinkFns[i];\n          invokeLinkFn(linkFn,\n              linkFn.isolateScope ? isolateScope : scope,\n              $element,\n              attrs,\n              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),\n              transcludeFn\n          );\n        }\n\n        // This is the function that is injected as `$transclude`.\n        // Note: all arguments are optional!\n        function controllersBoundTransclude(scope, cloneAttachFn, futureParentElement) {\n          var transcludeControllers;\n\n          // No scope passed in:\n          if (!isScope(scope)) {\n            futureParentElement = cloneAttachFn;\n            cloneAttachFn = scope;\n            scope = undefined;\n          }\n\n          if (hasElementTranscludeDirective) {\n            transcludeControllers = elementControllers;\n          }\n          if (!futureParentElement) {\n            futureParentElement = hasElementTranscludeDirective ? $element.parent() : $element;\n          }\n          return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);\n        }\n      }\n    }\n\n    function markDirectivesAsIsolate(directives) {\n      // mark all directives as needing isolate scope.\n      for (var j = 0, jj = directives.length; j < jj; j++) {\n        directives[j] = inherit(directives[j], {$$isolateScope: true});\n      }\n    }\n\n    /**\n     * looks up the directive and decorates it with exception handling and proper parameters. We\n     * call this the boundDirective.\n     *\n     * @param {string} name name of the directive to look up.\n     * @param {string} location The directive must be found in specific format.\n     *   String containing any of theses characters:\n     *\n     *   * `E`: element name\n     *   * `A': attribute\n     *   * `C`: class\n     *   * `M`: comment\n     * @returns {boolean} true if directive was added.\n     */\n    function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName,\n                          endAttrName) {\n      if (name === ignoreDirective) return null;\n      var match = null;\n      if (hasDirectives.hasOwnProperty(name)) {\n        for (var directive, directives = $injector.get(name + Suffix),\n            i = 0, ii = directives.length; i < ii; i++) {\n          try {\n            directive = directives[i];\n            if ((maxPriority === undefined || maxPriority > directive.priority) &&\n                 directive.restrict.indexOf(location) != -1) {\n              if (startAttrName) {\n                directive = inherit(directive, {$$start: startAttrName, $$end: endAttrName});\n              }\n              tDirectives.push(directive);\n              match = directive;\n            }\n          } catch (e) { $exceptionHandler(e); }\n        }\n      }\n      return match;\n    }\n\n\n    /**\n     * looks up the directive and returns true if it is a multi-element directive,\n     * and therefore requires DOM nodes between -start and -end markers to be grouped\n     * together.\n     *\n     * @param {string} name name of the directive to look up.\n     * @returns true if directive was registered as multi-element.\n     */\n    function directiveIsMultiElement(name) {\n      if (hasDirectives.hasOwnProperty(name)) {\n        for (var directive, directives = $injector.get(name + Suffix),\n            i = 0, ii = directives.length; i < ii; i++) {\n          directive = directives[i];\n          if (directive.multiElement) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    /**\n     * When the element is replaced with HTML template then the new attributes\n     * on the template need to be merged with the existing attributes in the DOM.\n     * The desired effect is to have both of the attributes present.\n     *\n     * @param {object} dst destination attributes (original DOM)\n     * @param {object} src source attributes (from the directive template)\n     */\n    function mergeTemplateAttributes(dst, src) {\n      var srcAttr = src.$attr,\n          dstAttr = dst.$attr,\n          $element = dst.$$element;\n\n      // reapply the old attributes to the new element\n      forEach(dst, function(value, key) {\n        if (key.charAt(0) != '$') {\n          if (src[key] && src[key] !== value) {\n            value += (key === 'style' ? ';' : ' ') + src[key];\n          }\n          dst.$set(key, value, true, srcAttr[key]);\n        }\n      });\n\n      // copy the new attributes on the old attrs object\n      forEach(src, function(value, key) {\n        if (key == 'class') {\n          safeAddClass($element, value);\n          dst['class'] = (dst['class'] ? dst['class'] + ' ' : '') + value;\n        } else if (key == 'style') {\n          $element.attr('style', $element.attr('style') + ';' + value);\n          dst['style'] = (dst['style'] ? dst['style'] + ';' : '') + value;\n          // `dst` will never contain hasOwnProperty as DOM parser won't let it.\n          // You will get an \"InvalidCharacterError: DOM Exception 5\" error if you\n          // have an attribute like \"has-own-property\" or \"data-has-own-property\", etc.\n        } else if (key.charAt(0) != '$' && !dst.hasOwnProperty(key)) {\n          dst[key] = value;\n          dstAttr[key] = srcAttr[key];\n        }\n      });\n    }\n\n\n    function compileTemplateUrl(directives, $compileNode, tAttrs,\n        $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {\n      var linkQueue = [],\n          afterTemplateNodeLinkFn,\n          afterTemplateChildLinkFn,\n          beforeTemplateCompileNode = $compileNode[0],\n          origAsyncDirective = directives.shift(),\n          derivedSyncDirective = inherit(origAsyncDirective, {\n            templateUrl: null, transclude: null, replace: null, $$originalDirective: origAsyncDirective\n          }),\n          templateUrl = (isFunction(origAsyncDirective.templateUrl))\n              ? origAsyncDirective.templateUrl($compileNode, tAttrs)\n              : origAsyncDirective.templateUrl,\n          templateNamespace = origAsyncDirective.templateNamespace;\n\n      $compileNode.empty();\n\n      $templateRequest(templateUrl)\n        .then(function(content) {\n          var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;\n\n          content = denormalizeTemplate(content);\n\n          if (origAsyncDirective.replace) {\n            if (jqLiteIsTextNode(content)) {\n              $template = [];\n            } else {\n              $template = removeComments(wrapTemplate(templateNamespace, trim(content)));\n            }\n            compileNode = $template[0];\n\n            if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {\n              throw $compileMinErr('tplrt',\n                  \"Template for directive '{0}' must have exactly one root element. {1}\",\n                  origAsyncDirective.name, templateUrl);\n            }\n\n            tempTemplateAttrs = {$attr: {}};\n            replaceWith($rootElement, $compileNode, compileNode);\n            var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);\n\n            if (isObject(origAsyncDirective.scope)) {\n              markDirectivesAsIsolate(templateDirectives);\n            }\n            directives = templateDirectives.concat(directives);\n            mergeTemplateAttributes(tAttrs, tempTemplateAttrs);\n          } else {\n            compileNode = beforeTemplateCompileNode;\n            $compileNode.html(content);\n          }\n\n          directives.unshift(derivedSyncDirective);\n\n          afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs,\n              childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns,\n              previousCompileContext);\n          forEach($rootElement, function(node, i) {\n            if (node == compileNode) {\n              $rootElement[i] = $compileNode[0];\n            }\n          });\n          afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);\n\n          while (linkQueue.length) {\n            var scope = linkQueue.shift(),\n                beforeTemplateLinkNode = linkQueue.shift(),\n                linkRootElement = linkQueue.shift(),\n                boundTranscludeFn = linkQueue.shift(),\n                linkNode = $compileNode[0];\n\n            if (scope.$$destroyed) continue;\n\n            if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {\n              var oldClasses = beforeTemplateLinkNode.className;\n\n              if (!(previousCompileContext.hasElementTranscludeDirective &&\n                  origAsyncDirective.replace)) {\n                // it was cloned therefore we have to clone as well.\n                linkNode = jqLiteClone(compileNode);\n              }\n              replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);\n\n              // Copy in CSS classes from original node\n              safeAddClass(jqLite(linkNode), oldClasses);\n            }\n            if (afterTemplateNodeLinkFn.transcludeOnThisElement) {\n              childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);\n            } else {\n              childBoundTranscludeFn = boundTranscludeFn;\n            }\n            afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement,\n              childBoundTranscludeFn);\n          }\n          linkQueue = null;\n        });\n\n      return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {\n        var childBoundTranscludeFn = boundTranscludeFn;\n        if (scope.$$destroyed) return;\n        if (linkQueue) {\n          linkQueue.push(scope,\n                         node,\n                         rootElement,\n                         childBoundTranscludeFn);\n        } else {\n          if (afterTemplateNodeLinkFn.transcludeOnThisElement) {\n            childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);\n          }\n          afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, childBoundTranscludeFn);\n        }\n      };\n    }\n\n\n    /**\n     * Sorting function for bound directives.\n     */\n    function byPriority(a, b) {\n      var diff = b.priority - a.priority;\n      if (diff !== 0) return diff;\n      if (a.name !== b.name) return (a.name < b.name) ? -1 : 1;\n      return a.index - b.index;\n    }\n\n\n    function assertNoDuplicate(what, previousDirective, directive, element) {\n      if (previousDirective) {\n        throw $compileMinErr('multidir', 'Multiple directives [{0}, {1}] asking for {2} on: {3}',\n            previousDirective.name, directive.name, what, startingTag(element));\n      }\n    }\n\n\n    function addTextInterpolateDirective(directives, text) {\n      var interpolateFn = $interpolate(text, true);\n      if (interpolateFn) {\n        directives.push({\n          priority: 0,\n          compile: function textInterpolateCompileFn(templateNode) {\n            var templateNodeParent = templateNode.parent(),\n                hasCompileParent = !!templateNodeParent.length;\n\n            // When transcluding a template that has bindings in the root\n            // we don't have a parent and thus need to add the class during linking fn.\n            if (hasCompileParent) compile.$$addBindingClass(templateNodeParent);\n\n            return function textInterpolateLinkFn(scope, node) {\n              var parent = node.parent();\n              if (!hasCompileParent) compile.$$addBindingClass(parent);\n              compile.$$addBindingInfo(parent, interpolateFn.expressions);\n              scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {\n                node[0].nodeValue = value;\n              });\n            };\n          }\n        });\n      }\n    }\n\n\n    function wrapTemplate(type, template) {\n      type = lowercase(type || 'html');\n      switch (type) {\n      case 'svg':\n      case 'math':\n        var wrapper = document.createElement('div');\n        wrapper.innerHTML = '<' + type + '>' + template + '</' + type + '>';\n        return wrapper.childNodes[0].childNodes;\n      default:\n        return template;\n      }\n    }\n\n\n    function getTrustedContext(node, attrNormalizedName) {\n      if (attrNormalizedName == \"srcdoc\") {\n        return $sce.HTML;\n      }\n      var tag = nodeName_(node);\n      // maction[xlink:href] can source SVG.  It's not limited to <maction>.\n      if (attrNormalizedName == \"xlinkHref\" ||\n          (tag == \"form\" && attrNormalizedName == \"action\") ||\n          (tag != \"img\" && (attrNormalizedName == \"src\" ||\n                            attrNormalizedName == \"ngSrc\"))) {\n        return $sce.RESOURCE_URL;\n      }\n    }\n\n\n    function addAttrInterpolateDirective(node, directives, value, name, allOrNothing) {\n      var trustedContext = getTrustedContext(node, name);\n      allOrNothing = ALL_OR_NOTHING_ATTRS[name] || allOrNothing;\n\n      var interpolateFn = $interpolate(value, true, trustedContext, allOrNothing);\n\n      // no interpolation found -> ignore\n      if (!interpolateFn) return;\n\n\n      if (name === \"multiple\" && nodeName_(node) === \"select\") {\n        throw $compileMinErr(\"selmulti\",\n            \"Binding to the 'multiple' attribute is not supported. Element: {0}\",\n            startingTag(node));\n      }\n\n      directives.push({\n        priority: 100,\n        compile: function() {\n            return {\n              pre: function attrInterpolatePreLinkFn(scope, element, attr) {\n                var $$observers = (attr.$$observers || (attr.$$observers = {}));\n\n                if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {\n                  throw $compileMinErr('nodomevents',\n                      \"Interpolations for HTML DOM event attributes are disallowed.  Please use the \" +\n                          \"ng- versions (such as ng-click instead of onclick) instead.\");\n                }\n\n                // If the attribute has changed since last $interpolate()ed\n                var newValue = attr[name];\n                if (newValue !== value) {\n                  // we need to interpolate again since the attribute value has been updated\n                  // (e.g. by another directive's compile function)\n                  // ensure unset/empty values make interpolateFn falsy\n                  interpolateFn = newValue && $interpolate(newValue, true, trustedContext, allOrNothing);\n                  value = newValue;\n                }\n\n                // if attribute was updated so that there is no interpolation going on we don't want to\n                // register any observers\n                if (!interpolateFn) return;\n\n                // initialize attr object so that it's ready in case we need the value for isolate\n                // scope initialization, otherwise the value would not be available from isolate\n                // directive's linking fn during linking phase\n                attr[name] = interpolateFn(scope);\n\n                ($$observers[name] || ($$observers[name] = [])).$$inter = true;\n                (attr.$$observers && attr.$$observers[name].$$scope || scope).\n                  $watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {\n                    //special case for class attribute addition + removal\n                    //so that class changes can tap into the animation\n                    //hooks provided by the $animate service. Be sure to\n                    //skip animations when the first digest occurs (when\n                    //both the new and the old values are the same) since\n                    //the CSS classes are the non-interpolated values\n                    if (name === 'class' && newValue != oldValue) {\n                      attr.$updateClass(newValue, oldValue);\n                    } else {\n                      attr.$set(name, newValue);\n                    }\n                  });\n              }\n            };\n          }\n      });\n    }\n\n\n    /**\n     * This is a special jqLite.replaceWith, which can replace items which\n     * have no parents, provided that the containing jqLite collection is provided.\n     *\n     * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes\n     *                               in the root of the tree.\n     * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep\n     *                                  the shell, but replace its DOM node reference.\n     * @param {Node} newNode The new DOM node.\n     */\n    function replaceWith($rootElement, elementsToRemove, newNode) {\n      var firstElementToRemove = elementsToRemove[0],\n          removeCount = elementsToRemove.length,\n          parent = firstElementToRemove.parentNode,\n          i, ii;\n\n      if ($rootElement) {\n        for (i = 0, ii = $rootElement.length; i < ii; i++) {\n          if ($rootElement[i] == firstElementToRemove) {\n            $rootElement[i++] = newNode;\n            for (var j = i, j2 = j + removeCount - 1,\n                     jj = $rootElement.length;\n                 j < jj; j++, j2++) {\n              if (j2 < jj) {\n                $rootElement[j] = $rootElement[j2];\n              } else {\n                delete $rootElement[j];\n              }\n            }\n            $rootElement.length -= removeCount - 1;\n\n            // If the replaced element is also the jQuery .context then replace it\n            // .context is a deprecated jQuery api, so we should set it only when jQuery set it\n            // http://api.jquery.com/context/\n            if ($rootElement.context === firstElementToRemove) {\n              $rootElement.context = newNode;\n            }\n            break;\n          }\n        }\n      }\n\n      if (parent) {\n        parent.replaceChild(newNode, firstElementToRemove);\n      }\n\n      // TODO(perf): what's this document fragment for? is it needed? can we at least reuse it?\n      var fragment = document.createDocumentFragment();\n      fragment.appendChild(firstElementToRemove);\n\n      // Copy over user data (that includes Angular's $scope etc.). Don't copy private\n      // data here because there's no public interface in jQuery to do that and copying over\n      // event listeners (which is the main use of private data) wouldn't work anyway.\n      jqLite(newNode).data(jqLite(firstElementToRemove).data());\n\n      // Remove data of the replaced element. We cannot just call .remove()\n      // on the element it since that would deallocate scope that is needed\n      // for the new node. Instead, remove the data \"manually\".\n      if (!jQuery) {\n        delete jqLite.cache[firstElementToRemove[jqLite.expando]];\n      } else {\n        // jQuery 2.x doesn't expose the data storage. Use jQuery.cleanData to clean up after\n        // the replaced element. The cleanData version monkey-patched by Angular would cause\n        // the scope to be trashed and we do need the very same scope to work with the new\n        // element. However, we cannot just cache the non-patched version and use it here as\n        // that would break if another library patches the method after Angular does (one\n        // example is jQuery UI). Instead, set a flag indicating scope destroying should be\n        // skipped this one time.\n        skipDestroyOnNextJQueryCleanData = true;\n        jQuery.cleanData([firstElementToRemove]);\n      }\n\n      for (var k = 1, kk = elementsToRemove.length; k < kk; k++) {\n        var element = elementsToRemove[k];\n        jqLite(element).remove(); // must do this way to clean up expando\n        fragment.appendChild(element);\n        delete elementsToRemove[k];\n      }\n\n      elementsToRemove[0] = newNode;\n      elementsToRemove.length = 1;\n    }\n\n\n    function cloneAndAnnotateFn(fn, annotation) {\n      return extend(function() { return fn.apply(null, arguments); }, fn, annotation);\n    }\n\n\n    function invokeLinkFn(linkFn, scope, $element, attrs, controllers, transcludeFn) {\n      try {\n        linkFn(scope, $element, attrs, controllers, transcludeFn);\n      } catch (e) {\n        $exceptionHandler(e, startingTag($element));\n      }\n    }\n  }];\n}\n\nvar PREFIX_REGEXP = /^((?:x|data)[\\:\\-_])/i;\n/**\n * Converts all accepted directives format into proper directive name.\n * @param name Name to normalize\n */\nfunction directiveNormalize(name) {\n  return camelCase(name.replace(PREFIX_REGEXP, ''));\n}\n\n/**\n * @ngdoc type\n * @name $compile.directive.Attributes\n *\n * @description\n * A shared object between directive compile / linking functions which contains normalized DOM\n * element attributes. The values reflect current binding state `{{ }}`. The normalization is\n * needed since all of these are treated as equivalent in Angular:\n *\n * ```\n *    <span ng:bind=\"a\" ng-bind=\"a\" data-ng-bind=\"a\" x-ng-bind=\"a\">\n * ```\n */\n\n/**\n * @ngdoc property\n * @name $compile.directive.Attributes#$attr\n *\n * @description\n * A map of DOM element attribute names to the normalized name. This is\n * needed to do reverse lookup from normalized name back to actual name.\n */\n\n\n/**\n * @ngdoc method\n * @name $compile.directive.Attributes#$set\n * @kind function\n *\n * @description\n * Set DOM element attribute value.\n *\n *\n * @param {string} name Normalized element attribute name of the property to modify. The name is\n *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}\n *          property to the original name.\n * @param {string} value Value to set the attribute to. The value can be an interpolated string.\n */\n\n\n\n/**\n * Closure compiler type information\n */\n\nfunction nodesetLinkingFn(\n  /* angular.Scope */ scope,\n  /* NodeList */ nodeList,\n  /* Element */ rootElement,\n  /* function(Function) */ boundTranscludeFn\n) {}\n\nfunction directiveLinkingFn(\n  /* nodesetLinkingFn */ nodesetLinkingFn,\n  /* angular.Scope */ scope,\n  /* Node */ node,\n  /* Element */ rootElement,\n  /* function(Function) */ boundTranscludeFn\n) {}\n\nfunction tokenDifference(str1, str2) {\n  var values = '',\n      tokens1 = str1.split(/\\s+/),\n      tokens2 = str2.split(/\\s+/);\n\n  outer:\n  for (var i = 0; i < tokens1.length; i++) {\n    var token = tokens1[i];\n    for (var j = 0; j < tokens2.length; j++) {\n      if (token == tokens2[j]) continue outer;\n    }\n    values += (values.length > 0 ? ' ' : '') + token;\n  }\n  return values;\n}\n\nfunction removeComments(jqNodes) {\n  jqNodes = jqLite(jqNodes);\n  var i = jqNodes.length;\n\n  if (i <= 1) {\n    return jqNodes;\n  }\n\n  while (i--) {\n    var node = jqNodes[i];\n    if (node.nodeType === NODE_TYPE_COMMENT) {\n      splice.call(jqNodes, i, 1);\n    }\n  }\n  return jqNodes;\n}\n\nvar $controllerMinErr = minErr('$controller');\n\n/**\n * @ngdoc provider\n * @name $controllerProvider\n * @description\n * The {@link ng.$controller $controller service} is used by Angular to create new\n * controllers.\n *\n * This provider allows controller registration via the\n * {@link ng.$controllerProvider#register register} method.\n */\nfunction $ControllerProvider() {\n  var controllers = {},\n      globals = false,\n      CNTRL_REG = /^(\\S+)(\\s+as\\s+(\\w+))?$/;\n\n\n  /**\n   * @ngdoc method\n   * @name $controllerProvider#register\n   * @param {string|Object} name Controller name, or an object map of controllers where the keys are\n   *    the names and the values are the constructors.\n   * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI\n   *    annotations in the array notation).\n   */\n  this.register = function(name, constructor) {\n    assertNotHasOwnProperty(name, 'controller');\n    if (isObject(name)) {\n      extend(controllers, name);\n    } else {\n      controllers[name] = constructor;\n    }\n  };\n\n  /**\n   * @ngdoc method\n   * @name $controllerProvider#allowGlobals\n   * @description If called, allows `$controller` to find controller constructors on `window`\n   */\n  this.allowGlobals = function() {\n    globals = true;\n  };\n\n\n  this.$get = ['$injector', '$window', function($injector, $window) {\n\n    /**\n     * @ngdoc service\n     * @name $controller\n     * @requires $injector\n     *\n     * @param {Function|string} constructor If called with a function then it's considered to be the\n     *    controller constructor function. Otherwise it's considered to be a string which is used\n     *    to retrieve the controller constructor using the following steps:\n     *\n     *    * check if a controller with given name is registered via `$controllerProvider`\n     *    * check if evaluating the string on the current scope returns a constructor\n     *    * if $controllerProvider#allowGlobals, check `window[constructor]` on the global\n     *      `window` object (not recommended)\n     *\n     *    The string can use the `controller as property` syntax, where the controller instance is published\n     *    as the specified property on the `scope`; the `scope` must be injected into `locals` param for this\n     *    to work correctly.\n     *\n     * @param {Object} locals Injection locals for Controller.\n     * @return {Object} Instance of given controller.\n     *\n     * @description\n     * `$controller` service is responsible for instantiating controllers.\n     *\n     * It's just a simple call to {@link auto.$injector $injector}, but extracted into\n     * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).\n     */\n    return function(expression, locals, later, ident) {\n      // PRIVATE API:\n      //   param `later` --- indicates that the controller's constructor is invoked at a later time.\n      //                     If true, $controller will allocate the object with the correct\n      //                     prototype chain, but will not invoke the controller until a returned\n      //                     callback is invoked.\n      //   param `ident` --- An optional label which overrides the label parsed from the controller\n      //                     expression, if any.\n      var instance, match, constructor, identifier;\n      later = later === true;\n      if (ident && isString(ident)) {\n        identifier = ident;\n      }\n\n      if (isString(expression)) {\n        match = expression.match(CNTRL_REG);\n        if (!match) {\n          throw $controllerMinErr('ctrlfmt',\n            \"Badly formed controller string '{0}'. \" +\n            \"Must match `__name__ as __id__` or `__name__`.\", expression);\n        }\n        constructor = match[1],\n        identifier = identifier || match[3];\n        expression = controllers.hasOwnProperty(constructor)\n            ? controllers[constructor]\n            : getter(locals.$scope, constructor, true) ||\n                (globals ? getter($window, constructor, true) : undefined);\n\n        assertArgFn(expression, constructor, true);\n      }\n\n      if (later) {\n        // Instantiate controller later:\n        // This machinery is used to create an instance of the object before calling the\n        // controller's constructor itself.\n        //\n        // This allows properties to be added to the controller before the constructor is\n        // invoked. Primarily, this is used for isolate scope bindings in $compile.\n        //\n        // This feature is not intended for use by applications, and is thus not documented\n        // publicly.\n        // Object creation: http://jsperf.com/create-constructor/2\n        var controllerPrototype = (isArray(expression) ?\n          expression[expression.length - 1] : expression).prototype;\n        instance = Object.create(controllerPrototype || null);\n\n        if (identifier) {\n          addIdentifier(locals, identifier, instance, constructor || expression.name);\n        }\n\n        return extend(function() {\n          $injector.invoke(expression, instance, locals, constructor);\n          return instance;\n        }, {\n          instance: instance,\n          identifier: identifier\n        });\n      }\n\n      instance = $injector.instantiate(expression, locals, constructor);\n\n      if (identifier) {\n        addIdentifier(locals, identifier, instance, constructor || expression.name);\n      }\n\n      return instance;\n    };\n\n    function addIdentifier(locals, identifier, instance, name) {\n      if (!(locals && isObject(locals.$scope))) {\n        throw minErr('$controller')('noscp',\n          \"Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.\",\n          name, identifier);\n      }\n\n      locals.$scope[identifier] = instance;\n    }\n  }];\n}\n\n/**\n * @ngdoc service\n * @name $document\n * @requires $window\n *\n * @description\n * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.\n *\n * @example\n   <example module=\"documentExample\">\n     <file name=\"index.html\">\n       <div ng-controller=\"ExampleController\">\n         <p>$document title: <b ng-bind=\"title\"></b></p>\n         <p>window.document title: <b ng-bind=\"windowTitle\"></b></p>\n       </div>\n     </file>\n     <file name=\"script.js\">\n       angular.module('documentExample', [])\n         .controller('ExampleController', ['$scope', '$document', function($scope, $document) {\n           $scope.title = $document[0].title;\n           $scope.windowTitle = angular.element(window.document)[0].title;\n         }]);\n     </file>\n   </example>\n */\nfunction $DocumentProvider() {\n  this.$get = ['$window', function(window) {\n    return jqLite(window.document);\n  }];\n}\n\n/**\n * @ngdoc service\n * @name $exceptionHandler\n * @requires ng.$log\n *\n * @description\n * Any uncaught exception in angular expressions is delegated to this service.\n * The default implementation simply delegates to `$log.error` which logs it into\n * the browser console.\n *\n * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by\n * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.\n *\n * ## Example:\n *\n * ```js\n *   angular.module('exceptionOverride', []).factory('$exceptionHandler', function() {\n *     return function(exception, cause) {\n *       exception.message += ' (caused by \"' + cause + '\")';\n *       throw exception;\n *     };\n *   });\n * ```\n *\n * This example will override the normal action of `$exceptionHandler`, to make angular\n * exceptions fail hard when they happen, instead of just logging to the console.\n *\n * <hr />\n * Note, that code executed in event-listeners (even those registered using jqLite's `on`/`bind`\n * methods) does not delegate exceptions to the {@link ng.$exceptionHandler $exceptionHandler}\n * (unless executed during a digest).\n *\n * If you wish, you can manually delegate exceptions, e.g.\n * `try { ... } catch(e) { $exceptionHandler(e); }`\n *\n * @param {Error} exception Exception associated with the error.\n * @param {string=} cause optional information about the context in which\n *       the error was thrown.\n *\n */\nfunction $ExceptionHandlerProvider() {\n  this.$get = ['$log', function($log) {\n    return function(exception, cause) {\n      $log.error.apply($log, arguments);\n    };\n  }];\n}\n\nvar APPLICATION_JSON = 'application/json';\nvar CONTENT_TYPE_APPLICATION_JSON = {'Content-Type': APPLICATION_JSON + ';charset=utf-8'};\nvar JSON_START = /^\\[|^\\{(?!\\{)/;\nvar JSON_ENDS = {\n  '[': /]$/,\n  '{': /}$/\n};\nvar JSON_PROTECTION_PREFIX = /^\\)\\]\\}',?\\n/;\n\nfunction defaultHttpResponseTransform(data, headers) {\n  if (isString(data)) {\n    // Strip json vulnerability protection prefix and trim whitespace\n    var tempData = data.replace(JSON_PROTECTION_PREFIX, '').trim();\n\n    if (tempData) {\n      var contentType = headers('Content-Type');\n      if ((contentType && (contentType.indexOf(APPLICATION_JSON) === 0)) || isJsonLike(tempData)) {\n        data = fromJson(tempData);\n      }\n    }\n  }\n\n  return data;\n}\n\nfunction isJsonLike(str) {\n    var jsonStart = str.match(JSON_START);\n    return jsonStart && JSON_ENDS[jsonStart[0]].test(str);\n}\n\n/**\n * Parse headers into key value object\n *\n * @param {string} headers Raw headers as a string\n * @returns {Object} Parsed headers as key value object\n */\nfunction parseHeaders(headers) {\n  var parsed = createMap(), key, val, i;\n\n  if (!headers) return parsed;\n\n  forEach(headers.split('\\n'), function(line) {\n    i = line.indexOf(':');\n    key = lowercase(trim(line.substr(0, i)));\n    val = trim(line.substr(i + 1));\n\n    if (key) {\n      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n    }\n  });\n\n  return parsed;\n}\n\n\n/**\n * Returns a function that provides access to parsed headers.\n *\n * Headers are lazy parsed when first requested.\n * @see parseHeaders\n *\n * @param {(string|Object)} headers Headers to provide access to.\n * @returns {function(string=)} Returns a getter function which if called with:\n *\n *   - if called with single an argument returns a single header value or null\n *   - if called with no arguments returns an object containing all headers.\n */\nfunction headersGetter(headers) {\n  var headersObj = isObject(headers) ? headers : undefined;\n\n  return function(name) {\n    if (!headersObj) headersObj =  parseHeaders(headers);\n\n    if (name) {\n      var value = headersObj[lowercase(name)];\n      if (value === void 0) {\n        value = null;\n      }\n      return value;\n    }\n\n    return headersObj;\n  };\n}\n\n\n/**\n * Chain all given functions\n *\n * This function is used for both request and response transforming\n *\n * @param {*} data Data to transform.\n * @param {function(string=)} headers HTTP headers getter fn.\n * @param {number} status HTTP status code of the response.\n * @param {(Function|Array.<Function>)} fns Function or an array of functions.\n * @returns {*} Transformed data.\n */\nfunction transformData(data, headers, status, fns) {\n  if (isFunction(fns))\n    return fns(data, headers, status);\n\n  forEach(fns, function(fn) {\n    data = fn(data, headers, status);\n  });\n\n  return data;\n}\n\n\nfunction isSuccess(status) {\n  return 200 <= status && status < 300;\n}\n\n\n/**\n * @ngdoc provider\n * @name $httpProvider\n * @description\n * Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.\n * */\nfunction $HttpProvider() {\n  /**\n   * @ngdoc property\n   * @name $httpProvider#defaults\n   * @description\n   *\n   * Object containing default values for all {@link ng.$http $http} requests.\n   *\n   * - **`defaults.cache`** - {Object} - an object built with {@link ng.$cacheFactory `$cacheFactory`}\n   * that will provide the cache for all requests who set their `cache` property to `true`.\n   * If you set the `default.cache = false` then only requests that specify their own custom\n   * cache object will be cached. See {@link $http#caching $http Caching} for more information.\n   *\n   * - **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.\n   * Defaults value is `'XSRF-TOKEN'`.\n   *\n   * - **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the\n   * XSRF token. Defaults value is `'X-XSRF-TOKEN'`.\n   *\n   * - **`defaults.headers`** - {Object} - Default headers for all $http requests.\n   * Refer to {@link ng.$http#setting-http-headers $http} for documentation on\n   * setting default headers.\n   *     - **`defaults.headers.common`**\n   *     - **`defaults.headers.post`**\n   *     - **`defaults.headers.put`**\n   *     - **`defaults.headers.patch`**\n   *\n   **/\n  var defaults = this.defaults = {\n    // transform incoming response data\n    transformResponse: [defaultHttpResponseTransform],\n\n    // transform outgoing request data\n    transformRequest: [function(d) {\n      return isObject(d) && !isFile(d) && !isBlob(d) && !isFormData(d) ? toJson(d) : d;\n    }],\n\n    // default headers\n    headers: {\n      common: {\n        'Accept': 'application/json, text/plain, */*'\n      },\n      post:   shallowCopy(CONTENT_TYPE_APPLICATION_JSON),\n      put:    shallowCopy(CONTENT_TYPE_APPLICATION_JSON),\n      patch:  shallowCopy(CONTENT_TYPE_APPLICATION_JSON)\n    },\n\n    xsrfCookieName: 'XSRF-TOKEN',\n    xsrfHeaderName: 'X-XSRF-TOKEN'\n  };\n\n  var useApplyAsync = false;\n  /**\n   * @ngdoc method\n   * @name $httpProvider#useApplyAsync\n   * @description\n   *\n   * Configure $http service to combine processing of multiple http responses received at around\n   * the same time via {@link ng.$rootScope.Scope#$applyAsync $rootScope.$applyAsync}. This can result in\n   * significant performance improvement for bigger applications that make many HTTP requests\n   * concurrently (common during application bootstrap).\n   *\n   * Defaults to false. If no value is specifed, returns the current configured value.\n   *\n   * @param {boolean=} value If true, when requests are loaded, they will schedule a deferred\n   *    \"apply\" on the next tick, giving time for subsequent requests in a roughly ~10ms window\n   *    to load and share the same digest cycle.\n   *\n   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.\n   *    otherwise, returns the current configured value.\n   **/\n  this.useApplyAsync = function(value) {\n    if (isDefined(value)) {\n      useApplyAsync = !!value;\n      return this;\n    }\n    return useApplyAsync;\n  };\n\n  /**\n   * @ngdoc property\n   * @name $httpProvider#interceptors\n   * @description\n   *\n   * Array containing service factories for all synchronous or asynchronous {@link ng.$http $http}\n   * pre-processing of request or postprocessing of responses.\n   *\n   * These service factories are ordered by request, i.e. they are applied in the same order as the\n   * array, on request, but reverse order, on response.\n   *\n   * {@link ng.$http#interceptors Interceptors detailed info}\n   **/\n  var interceptorFactories = this.interceptors = [];\n\n  this.$get = ['$httpBackend', '$browser', '$cacheFactory', '$rootScope', '$q', '$injector',\n      function($httpBackend, $browser, $cacheFactory, $rootScope, $q, $injector) {\n\n    var defaultCache = $cacheFactory('$http');\n\n    /**\n     * Interceptors stored in reverse order. Inner interceptors before outer interceptors.\n     * The reversal is needed so that we can build up the interception chain around the\n     * server request.\n     */\n    var reversedInterceptors = [];\n\n    forEach(interceptorFactories, function(interceptorFactory) {\n      reversedInterceptors.unshift(isString(interceptorFactory)\n          ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));\n    });\n\n    /**\n     * @ngdoc service\n     * @kind function\n     * @name $http\n     * @requires ng.$httpBackend\n     * @requires $cacheFactory\n     * @requires $rootScope\n     * @requires $q\n     * @requires $injector\n     *\n     * @description\n     * The `$http` service is a core Angular service that facilitates communication with the remote\n     * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)\n     * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).\n     *\n     * For unit testing applications that use `$http` service, see\n     * {@link ngMock.$httpBackend $httpBackend mock}.\n     *\n     * For a higher level of abstraction, please check out the {@link ngResource.$resource\n     * $resource} service.\n     *\n     * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by\n     * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage\n     * it is important to familiarize yourself with these APIs and the guarantees they provide.\n     *\n     *\n     * ## General usage\n     * The `$http` service is a function which takes a single argument — a configuration object —\n     * that is used to generate an HTTP request and returns  a {@link ng.$q promise}\n     * with two $http specific methods: `success` and `error`.\n     *\n     * ```js\n     *   // Simple GET request example :\n     *   $http.get('/someUrl').\n     *     success(function(data, status, headers, config) {\n     *       // this callback will be called asynchronously\n     *       // when the response is available\n     *     }).\n     *     error(function(data, status, headers, config) {\n     *       // called asynchronously if an error occurs\n     *       // or server returns response with an error status.\n     *     });\n     * ```\n     *\n     * ```js\n     *   // Simple POST request example (passing data) :\n     *   $http.post('/someUrl', {msg:'hello word!'}).\n     *     success(function(data, status, headers, config) {\n     *       // this callback will be called asynchronously\n     *       // when the response is available\n     *     }).\n     *     error(function(data, status, headers, config) {\n     *       // called asynchronously if an error occurs\n     *       // or server returns response with an error status.\n     *     });\n     * ```\n     *\n     *\n     * Since the returned value of calling the $http function is a `promise`, you can also use\n     * the `then` method to register callbacks, and these callbacks will receive a single argument –\n     * an object representing the response. See the API signature and type info below for more\n     * details.\n     *\n     * A response status code between 200 and 299 is considered a success status and\n     * will result in the success callback being called. Note that if the response is a redirect,\n     * XMLHttpRequest will transparently follow it, meaning that the error callback will not be\n     * called for such responses.\n     *\n     * ## Writing Unit Tests that use $http\n     * When unit testing (using {@link ngMock ngMock}), it is necessary to call\n     * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending\n     * request using trained responses.\n     *\n     * ```\n     * $httpBackend.expectGET(...);\n     * $http.get(...);\n     * $httpBackend.flush();\n     * ```\n     *\n     * ## Shortcut methods\n     *\n     * Shortcut methods are also available. All shortcut methods require passing in the URL, and\n     * request data must be passed in for POST/PUT requests.\n     *\n     * ```js\n     *   $http.get('/someUrl').success(successCallback);\n     *   $http.post('/someUrl', data).success(successCallback);\n     * ```\n     *\n     * Complete list of shortcut methods:\n     *\n     * - {@link ng.$http#get $http.get}\n     * - {@link ng.$http#head $http.head}\n     * - {@link ng.$http#post $http.post}\n     * - {@link ng.$http#put $http.put}\n     * - {@link ng.$http#delete $http.delete}\n     * - {@link ng.$http#jsonp $http.jsonp}\n     * - {@link ng.$http#patch $http.patch}\n     *\n     *\n     * ## Setting HTTP Headers\n     *\n     * The $http service will automatically add certain HTTP headers to all requests. These defaults\n     * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration\n     * object, which currently contains this default configuration:\n     *\n     * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):\n     *   - `Accept: application/json, text/plain, * / *`\n     * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)\n     *   - `Content-Type: application/json`\n     * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)\n     *   - `Content-Type: application/json`\n     *\n     * To add or overwrite these defaults, simply add or remove a property from these configuration\n     * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object\n     * with the lowercased HTTP method name as the key, e.g.\n     * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }.\n     *\n     * The defaults can also be set at runtime via the `$http.defaults` object in the same\n     * fashion. For example:\n     *\n     * ```\n     * module.run(function($http) {\n     *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w'\n     * });\n     * ```\n     *\n     * In addition, you can supply a `headers` property in the config object passed when\n     * calling `$http(config)`, which overrides the defaults without changing them globally.\n     *\n     * To explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis,\n     * Use the `headers` property, setting the desired header to `undefined`. For example:\n     *\n     * ```js\n     * var req = {\n     *  method: 'POST',\n     *  url: 'http://example.com',\n     *  headers: {\n     *    'Content-Type': undefined\n     *  },\n     *  data: { test: 'test' }\n     * }\n     *\n     * $http(req).success(function(){...}).error(function(){...});\n     * ```\n     *\n     * ## Transforming Requests and Responses\n     *\n     * Both requests and responses can be transformed using transformation functions: `transformRequest`\n     * and `transformResponse`. These properties can be a single function that returns\n     * the transformed value (`function(data, headersGetter, status)`) or an array of such transformation functions,\n     * which allows you to `push` or `unshift` a new transformation function into the transformation chain.\n     *\n     * ### Default Transformations\n     *\n     * The `$httpProvider` provider and `$http` service expose `defaults.transformRequest` and\n     * `defaults.transformResponse` properties. If a request does not provide its own transformations\n     * then these will be applied.\n     *\n     * You can augment or replace the default transformations by modifying these properties by adding to or\n     * replacing the array.\n     *\n     * Angular provides the following default transformations:\n     *\n     * Request transformations (`$httpProvider.defaults.transformRequest` and `$http.defaults.transformRequest`):\n     *\n     * - If the `data` property of the request configuration object contains an object, serialize it\n     *   into JSON format.\n     *\n     * Response transformations (`$httpProvider.defaults.transformResponse` and `$http.defaults.transformResponse`):\n     *\n     *  - If XSRF prefix is detected, strip it (see Security Considerations section below).\n     *  - If JSON response is detected, deserialize it using a JSON parser.\n     *\n     *\n     * ### Overriding the Default Transformations Per Request\n     *\n     * If you wish override the request/response transformations only for a single request then provide\n     * `transformRequest` and/or `transformResponse` properties on the configuration object passed\n     * into `$http`.\n     *\n     * Note that if you provide these properties on the config object the default transformations will be\n     * overwritten. If you wish to augment the default transformations then you must include them in your\n     * local transformation array.\n     *\n     * The following code demonstrates adding a new response transformation to be run after the default response\n     * transformations have been run.\n     *\n     * ```js\n     * function appendTransform(defaults, transform) {\n     *\n     *   // We can't guarantee that the default transformation is an array\n     *   defaults = angular.isArray(defaults) ? defaults : [defaults];\n     *\n     *   // Append the new transformation to the defaults\n     *   return defaults.concat(transform);\n     * }\n     *\n     * $http({\n     *   url: '...',\n     *   method: 'GET',\n     *   transformResponse: appendTransform($http.defaults.transformResponse, function(value) {\n     *     return doTransform(value);\n     *   })\n     * });\n     * ```\n     *\n     *\n     * ## Caching\n     *\n     * To enable caching, set the request configuration `cache` property to `true` (to use default\n     * cache) or to a custom cache object (built with {@link ng.$cacheFactory `$cacheFactory`}).\n     * When the cache is enabled, `$http` stores the response from the server in the specified\n     * cache. The next time the same request is made, the response is served from the cache without\n     * sending a request to the server.\n     *\n     * Note that even if the response is served from cache, delivery of the data is asynchronous in\n     * the same way that real requests are.\n     *\n     * If there are multiple GET requests for the same URL that should be cached using the same\n     * cache, but the cache is not populated yet, only one request to the server will be made and\n     * the remaining requests will be fulfilled using the response from the first request.\n     *\n     * You can change the default cache to a new object (built with\n     * {@link ng.$cacheFactory `$cacheFactory`}) by updating the\n     * {@link ng.$http#defaults `$http.defaults.cache`} property. All requests who set\n     * their `cache` property to `true` will now use this cache object.\n     *\n     * If you set the default cache to `false` then only requests that specify their own custom\n     * cache object will be cached.\n     *\n     * ## Interceptors\n     *\n     * Before you start creating interceptors, be sure to understand the\n     * {@link ng.$q $q and deferred/promise APIs}.\n     *\n     * For purposes of global error handling, authentication, or any kind of synchronous or\n     * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be\n     * able to intercept requests before they are handed to the server and\n     * responses before they are handed over to the application code that\n     * initiated these requests. The interceptors leverage the {@link ng.$q\n     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.\n     *\n     * The interceptors are service factories that are registered with the `$httpProvider` by\n     * adding them to the `$httpProvider.interceptors` array. The factory is called and\n     * injected with dependencies (if specified) and returns the interceptor.\n     *\n     * There are two kinds of interceptors (and two kinds of rejection interceptors):\n     *\n     *   * `request`: interceptors get called with a http `config` object. The function is free to\n     *     modify the `config` object or create a new one. The function needs to return the `config`\n     *     object directly, or a promise containing the `config` or a new `config` object.\n     *   * `requestError`: interceptor gets called when a previous interceptor threw an error or\n     *     resolved with a rejection.\n     *   * `response`: interceptors get called with http `response` object. The function is free to\n     *     modify the `response` object or create a new one. The function needs to return the `response`\n     *     object directly, or as a promise containing the `response` or a new `response` object.\n     *   * `responseError`: interceptor gets called when a previous interceptor threw an error or\n     *     resolved with a rejection.\n     *\n     *\n     * ```js\n     *   // register the interceptor as a service\n     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {\n     *     return {\n     *       // optional method\n     *       'request': function(config) {\n     *         // do something on success\n     *         return config;\n     *       },\n     *\n     *       // optional method\n     *      'requestError': function(rejection) {\n     *         // do something on error\n     *         if (canRecover(rejection)) {\n     *           return responseOrNewPromise\n     *         }\n     *         return $q.reject(rejection);\n     *       },\n     *\n     *\n     *\n     *       // optional method\n     *       'response': function(response) {\n     *         // do something on success\n     *         return response;\n     *       },\n     *\n     *       // optional method\n     *      'responseError': function(rejection) {\n     *         // do something on error\n     *         if (canRecover(rejection)) {\n     *           return responseOrNewPromise\n     *         }\n     *         return $q.reject(rejection);\n     *       }\n     *     };\n     *   });\n     *\n     *   $httpProvider.interceptors.push('myHttpInterceptor');\n     *\n     *\n     *   // alternatively, register the interceptor via an anonymous factory\n     *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {\n     *     return {\n     *      'request': function(config) {\n     *          // same as above\n     *       },\n     *\n     *       'response': function(response) {\n     *          // same as above\n     *       }\n     *     };\n     *   });\n     * ```\n     *\n     * ## Security Considerations\n     *\n     * When designing web applications, consider security threats from:\n     *\n     * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)\n     * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)\n     *\n     * Both server and the client must cooperate in order to eliminate these threats. Angular comes\n     * pre-configured with strategies that address these issues, but for this to work backend server\n     * cooperation is required.\n     *\n     * ### JSON Vulnerability Protection\n     *\n     * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)\n     * allows third party website to turn your JSON resource URL into\n     * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To\n     * counter this your server can prefix all JSON requests with following string `\")]}',\\n\"`.\n     * Angular will automatically strip the prefix before processing it as JSON.\n     *\n     * For example if your server needs to return:\n     * ```js\n     * ['one','two']\n     * ```\n     *\n     * which is vulnerable to attack, your server can return:\n     * ```js\n     * )]}',\n     * ['one','two']\n     * ```\n     *\n     * Angular will strip the prefix, before processing the JSON.\n     *\n     *\n     * ### Cross Site Request Forgery (XSRF) Protection\n     *\n     * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is a technique by which\n     * an unauthorized site can gain your user's private data. Angular provides a mechanism\n     * to counter XSRF. When performing XHR requests, the $http service reads a token from a cookie\n     * (by default, `XSRF-TOKEN`) and sets it as an HTTP header (`X-XSRF-TOKEN`). Since only\n     * JavaScript that runs on your domain could read the cookie, your server can be assured that\n     * the XHR came from JavaScript running on your domain. The header will not be set for\n     * cross-domain requests.\n     *\n     * To take advantage of this, your server needs to set a token in a JavaScript readable session\n     * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the\n     * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure\n     * that only JavaScript running on your domain could have sent the request. The token must be\n     * unique for each user and must be verifiable by the server (to prevent the JavaScript from\n     * making up its own tokens). We recommend that the token is a digest of your site's\n     * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)\n     * for added security.\n     *\n     * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName\n     * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,\n     * or the per-request config object.\n     *\n     *\n     * @param {object} config Object describing the request to be made and how it should be\n     *    processed. The object has following properties:\n     *\n     *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)\n     *    - **url** – `{string}` – Absolute or relative URL of the resource that is being requested.\n     *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be turned\n     *      to `?key1=value1&key2=value2` after the url. If the value is not a string, it will be\n     *      JSONified.\n     *    - **data** – `{string|Object}` – Data to be sent as the request message data.\n     *    - **headers** – `{Object}` – Map of strings or functions which return strings representing\n     *      HTTP headers to send to the server. If the return value of a function is null, the\n     *      header will not be sent.\n     *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.\n     *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.\n     *    - **transformRequest** –\n     *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –\n     *      transform function or an array of such functions. The transform function takes the http\n     *      request body and headers and returns its transformed (typically serialized) version.\n     *      See {@link ng.$http#overriding-the-default-transformations-per-request\n     *      Overriding the Default Transformations}\n     *    - **transformResponse** –\n     *      `{function(data, headersGetter, status)|Array.<function(data, headersGetter, status)>}` –\n     *      transform function or an array of such functions. The transform function takes the http\n     *      response body, headers and status and returns its transformed (typically deserialized) version.\n     *      See {@link ng.$http#overriding-the-default-transformations-per-request\n     *      Overriding the Default Transformations}\n     *    - **cache** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the\n     *      GET request, otherwise if a cache instance built with\n     *      {@link ng.$cacheFactory $cacheFactory}, this cache will be used for\n     *      caching.\n     *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}\n     *      that should abort the request when resolved.\n     *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the\n     *      XHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)\n     *      for more information.\n     *    - **responseType** - `{string}` - see\n     *      [requestType](https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType).\n     *\n     * @returns {HttpPromise} Returns a {@link ng.$q promise} object with the\n     *   standard `then` method and two http specific methods: `success` and `error`. The `then`\n     *   method takes two arguments a success and an error callback which will be called with a\n     *   response object. The `success` and `error` methods take a single argument - a function that\n     *   will be called when the request succeeds or fails respectively. The arguments passed into\n     *   these functions are destructured representation of the response object passed into the\n     *   `then` method. The response object has these properties:\n     *\n     *   - **data** – `{string|Object}` – The response body transformed with the transform\n     *     functions.\n     *   - **status** – `{number}` – HTTP status code of the response.\n     *   - **headers** – `{function([headerName])}` – Header getter function.\n     *   - **config** – `{Object}` – The configuration object that was used to generate the request.\n     *   - **statusText** – `{string}` – HTTP status text of the response.\n     *\n     * @property {Array.<Object>} pendingRequests Array of config objects for currently pending\n     *   requests. This is primarily meant to be used for debugging purposes.\n     *\n     *\n     * @example\n<example module=\"httpExample\">\n<file name=\"index.html\">\n  <div ng-controller=\"FetchController\">\n    <select ng-model=\"method\">\n      <option>GET</option>\n      <option>JSONP</option>\n    </select>\n    <input type=\"text\" ng-model=\"url\" size=\"80\"/>\n    <button id=\"fetchbtn\" ng-click=\"fetch()\">fetch</button><br>\n    <button id=\"samplegetbtn\" ng-click=\"updateModel('GET', 'http-hello.html')\">Sample GET</button>\n    <button id=\"samplejsonpbtn\"\n      ng-click=\"updateModel('JSONP',\n                    'https://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')\">\n      Sample JSONP\n    </button>\n    <button id=\"invalidjsonpbtn\"\n      ng-click=\"updateModel('JSONP', 'https://angularjs.org/doesntexist&callback=JSON_CALLBACK')\">\n        Invalid JSONP\n      </button>\n    <pre>http status code: {{status}}</pre>\n    <pre>http response data: {{data}}</pre>\n  </div>\n</file>\n<file name=\"script.js\">\n  angular.module('httpExample', [])\n    .controller('FetchController', ['$scope', '$http', '$templateCache',\n      function($scope, $http, $templateCache) {\n        $scope.method = 'GET';\n        $scope.url = 'http-hello.html';\n\n        $scope.fetch = function() {\n          $scope.code = null;\n          $scope.response = null;\n\n          $http({method: $scope.method, url: $scope.url, cache: $templateCache}).\n            success(function(data, status) {\n              $scope.status = status;\n              $scope.data = data;\n            }).\n            error(function(data, status) {\n              $scope.data = data || \"Request failed\";\n              $scope.status = status;\n          });\n        };\n\n        $scope.updateModel = function(method, url) {\n          $scope.method = method;\n          $scope.url = url;\n        };\n      }]);\n</file>\n<file name=\"http-hello.html\">\n  Hello, $http!\n</file>\n<file name=\"protractor.js\" type=\"protractor\">\n  var status = element(by.binding('status'));\n  var data = element(by.binding('data'));\n  var fetchBtn = element(by.id('fetchbtn'));\n  var sampleGetBtn = element(by.id('samplegetbtn'));\n  var sampleJsonpBtn = element(by.id('samplejsonpbtn'));\n  var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));\n\n  it('should make an xhr GET request', function() {\n    sampleGetBtn.click();\n    fetchBtn.click();\n    expect(status.getText()).toMatch('200');\n    expect(data.getText()).toMatch(/Hello, \\$http!/);\n  });\n\n// Commented out due to flakes. See https://github.com/angular/angular.js/issues/9185\n// it('should make a JSONP request to angularjs.org', function() {\n//   sampleJsonpBtn.click();\n//   fetchBtn.click();\n//   expect(status.getText()).toMatch('200');\n//   expect(data.getText()).toMatch(/Super Hero!/);\n// });\n\n  it('should make JSONP request to invalid URL and invoke the error handler',\n      function() {\n    invalidJsonpBtn.click();\n    fetchBtn.click();\n    expect(status.getText()).toMatch('0');\n    expect(data.getText()).toMatch('Request failed');\n  });\n</file>\n</example>\n     */\n    function $http(requestConfig) {\n\n      if (!angular.isObject(requestConfig)) {\n        throw minErr('$http')('badreq', 'Http request configuration must be an object.  Received: {0}', requestConfig);\n      }\n\n      var config = extend({\n        method: 'get',\n        transformRequest: defaults.transformRequest,\n        transformResponse: defaults.transformResponse\n      }, requestConfig);\n\n      config.headers = mergeHeaders(requestConfig);\n      config.method = uppercase(config.method);\n\n      var serverRequest = function(config) {\n        var headers = config.headers;\n        var reqData = transformData(config.data, headersGetter(headers), undefined, config.transformRequest);\n\n        // strip content-type if data is undefined\n        if (isUndefined(reqData)) {\n          forEach(headers, function(value, header) {\n            if (lowercase(header) === 'content-type') {\n                delete headers[header];\n            }\n          });\n        }\n\n        if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {\n          config.withCredentials = defaults.withCredentials;\n        }\n\n        // send request\n        return sendReq(config, reqData).then(transformResponse, transformResponse);\n      };\n\n      var chain = [serverRequest, undefined];\n      var promise = $q.when(config);\n\n      // apply interceptors\n      forEach(reversedInterceptors, function(interceptor) {\n        if (interceptor.request || interceptor.requestError) {\n          chain.unshift(interceptor.request, interceptor.requestError);\n        }\n        if (interceptor.response || interceptor.responseError) {\n          chain.push(interceptor.response, interceptor.responseError);\n        }\n      });\n\n      while (chain.length) {\n        var thenFn = chain.shift();\n        var rejectFn = chain.shift();\n\n        promise = promise.then(thenFn, rejectFn);\n      }\n\n      promise.success = function(fn) {\n        assertArgFn(fn, 'fn');\n\n        promise.then(function(response) {\n          fn(response.data, response.status, response.headers, config);\n        });\n        return promise;\n      };\n\n      promise.error = function(fn) {\n        assertArgFn(fn, 'fn');\n\n        promise.then(null, function(response) {\n          fn(response.data, response.status, response.headers, config);\n        });\n        return promise;\n      };\n\n      return promise;\n\n      function transformResponse(response) {\n        // make a copy since the response must be cacheable\n        var resp = extend({}, response);\n        if (!response.data) {\n          resp.data = response.data;\n        } else {\n          resp.data = transformData(response.data, response.headers, response.status, config.transformResponse);\n        }\n        return (isSuccess(response.status))\n          ? resp\n          : $q.reject(resp);\n      }\n\n      function executeHeaderFns(headers) {\n        var headerContent, processedHeaders = {};\n\n        forEach(headers, function(headerFn, header) {\n          if (isFunction(headerFn)) {\n            headerContent = headerFn();\n            if (headerContent != null) {\n              processedHeaders[header] = headerContent;\n            }\n          } else {\n            processedHeaders[header] = headerFn;\n          }\n        });\n\n        return processedHeaders;\n      }\n\n      function mergeHeaders(config) {\n        var defHeaders = defaults.headers,\n            reqHeaders = extend({}, config.headers),\n            defHeaderName, lowercaseDefHeaderName, reqHeaderName;\n\n        defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);\n\n        // using for-in instead of forEach to avoid unecessary iteration after header has been found\n        defaultHeadersIteration:\n        for (defHeaderName in defHeaders) {\n          lowercaseDefHeaderName = lowercase(defHeaderName);\n\n          for (reqHeaderName in reqHeaders) {\n            if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {\n              continue defaultHeadersIteration;\n            }\n          }\n\n          reqHeaders[defHeaderName] = defHeaders[defHeaderName];\n        }\n\n        // execute if header value is a function for merged headers\n        return executeHeaderFns(reqHeaders);\n      }\n    }\n\n    $http.pendingRequests = [];\n\n    /**\n     * @ngdoc method\n     * @name $http#get\n     *\n     * @description\n     * Shortcut method to perform `GET` request.\n     *\n     * @param {string} url Relative or absolute URL specifying the destination of the request\n     * @param {Object=} config Optional configuration object\n     * @returns {HttpPromise} Future object\n     */\n\n    /**\n     * @ngdoc method\n     * @name $http#delete\n     *\n     * @description\n     * Shortcut method to perform `DELETE` request.\n     *\n     * @param {string} url Relative or absolute URL specifying the destination of the request\n     * @param {Object=} config Optional configuration object\n     * @returns {HttpPromise} Future object\n     */\n\n    /**\n     * @ngdoc method\n     * @name $http#head\n     *\n     * @description\n     * Shortcut method to perform `HEAD` request.\n     *\n     * @param {string} url Relative or absolute URL specifying the destination of the request\n     * @param {Object=} config Optional configuration object\n     * @returns {HttpPromise} Future object\n     */\n\n    /**\n     * @ngdoc method\n     * @name $http#jsonp\n     *\n     * @description\n     * Shortcut method to perform `JSONP` request.\n     *\n     * @param {string} url Relative or absolute URL specifying the destination of the request.\n     *                     The name of the callback should be the string `JSON_CALLBACK`.\n     * @param {Object=} config Optional configuration object\n     * @returns {HttpPromise} Future object\n     */\n    createShortMethods('get', 'delete', 'head', 'jsonp');\n\n    /**\n     * @ngdoc method\n     * @name $http#post\n     *\n     * @description\n     * Shortcut method to perform `POST` request.\n     *\n     * @param {string} url Relative or absolute URL specifying the destination of the request\n     * @param {*} data Request content\n     * @param {Object=} config Optional configuration object\n     * @returns {HttpPromise} Future object\n     */\n\n    /**\n     * @ngdoc method\n     * @name $http#put\n     *\n     * @description\n     * Shortcut method to perform `PUT` request.\n     *\n     * @param {string} url Relative or absolute URL specifying the destination of the request\n     * @param {*} data Request content\n     * @param {Object=} config Optional configuration object\n     * @returns {HttpPromise} Future object\n     */\n\n     /**\n      * @ngdoc method\n      * @name $http#patch\n      *\n      * @description\n      * Shortcut method to perform `PATCH` request.\n      *\n      * @param {string} url Relative or absolute URL specifying the destination of the request\n      * @param {*} data Request content\n      * @param {Object=} config Optional configuration object\n      * @returns {HttpPromise} Future object\n      */\n    createShortMethodsWithData('post', 'put', 'patch');\n\n        /**\n         * @ngdoc property\n         * @name $http#defaults\n         *\n         * @description\n         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of\n         * default headers, withCredentials as well as request and response transformations.\n         *\n         * See \"Setting HTTP Headers\" and \"Transforming Requests and Responses\" sections above.\n         */\n    $http.defaults = defaults;\n\n\n    return $http;\n\n\n    function createShortMethods(names) {\n      forEach(arguments, function(name) {\n        $http[name] = function(url, config) {\n          return $http(extend(config || {}, {\n            method: name,\n            url: url\n          }));\n        };\n      });\n    }\n\n\n    function createShortMethodsWithData(name) {\n      forEach(arguments, function(name) {\n        $http[name] = function(url, data, config) {\n          return $http(extend(config || {}, {\n            method: name,\n            url: url,\n            data: data\n          }));\n        };\n      });\n    }\n\n\n    /**\n     * Makes the request.\n     *\n     * !!! ACCESSES CLOSURE VARS:\n     * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests\n     */\n    function sendReq(config, reqData) {\n      var deferred = $q.defer(),\n          promise = deferred.promise,\n          cache,\n          cachedResp,\n          reqHeaders = config.headers,\n          url = buildUrl(config.url, config.params);\n\n      $http.pendingRequests.push(config);\n      promise.then(removePendingReq, removePendingReq);\n\n\n      if ((config.cache || defaults.cache) && config.cache !== false &&\n          (config.method === 'GET' || config.method === 'JSONP')) {\n        cache = isObject(config.cache) ? config.cache\n              : isObject(defaults.cache) ? defaults.cache\n              : defaultCache;\n      }\n\n      if (cache) {\n        cachedResp = cache.get(url);\n        if (isDefined(cachedResp)) {\n          if (isPromiseLike(cachedResp)) {\n            // cached request has already been sent, but there is no response yet\n            cachedResp.then(resolvePromiseWithResult, resolvePromiseWithResult);\n          } else {\n            // serving from cache\n            if (isArray(cachedResp)) {\n              resolvePromise(cachedResp[1], cachedResp[0], shallowCopy(cachedResp[2]), cachedResp[3]);\n            } else {\n              resolvePromise(cachedResp, 200, {}, 'OK');\n            }\n          }\n        } else {\n          // put the promise for the non-transformed response into cache as a placeholder\n          cache.put(url, promise);\n        }\n      }\n\n\n      // if we won't have the response in cache, set the xsrf headers and\n      // send the request to the backend\n      if (isUndefined(cachedResp)) {\n        var xsrfValue = urlIsSameOrigin(config.url)\n            ? $browser.cookies()[config.xsrfCookieName || defaults.xsrfCookieName]\n            : undefined;\n        if (xsrfValue) {\n          reqHeaders[(config.xsrfHeaderName || defaults.xsrfHeaderName)] = xsrfValue;\n        }\n\n        $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout,\n            config.withCredentials, config.responseType);\n      }\n\n      return promise;\n\n\n      /**\n       * Callback registered to $httpBackend():\n       *  - caches the response if desired\n       *  - resolves the raw $http promise\n       *  - calls $apply\n       */\n      function done(status, response, headersString, statusText) {\n        if (cache) {\n          if (isSuccess(status)) {\n            cache.put(url, [status, response, parseHeaders(headersString), statusText]);\n          } else {\n            // remove promise from the cache\n            cache.remove(url);\n          }\n        }\n\n        function resolveHttpPromise() {\n          resolvePromise(response, status, headersString, statusText);\n        }\n\n        if (useApplyAsync) {\n          $rootScope.$applyAsync(resolveHttpPromise);\n        } else {\n          resolveHttpPromise();\n          if (!$rootScope.$$phase) $rootScope.$apply();\n        }\n      }\n\n\n      /**\n       * Resolves the raw $http promise.\n       */\n      function resolvePromise(response, status, headers, statusText) {\n        // normalize internal statuses to 0\n        status = Math.max(status, 0);\n\n        (isSuccess(status) ? deferred.resolve : deferred.reject)({\n          data: response,\n          status: status,\n          headers: headersGetter(headers),\n          config: config,\n          statusText: statusText\n        });\n      }\n\n      function resolvePromiseWithResult(result) {\n        resolvePromise(result.data, result.status, shallowCopy(result.headers()), result.statusText);\n      }\n\n      function removePendingReq() {\n        var idx = $http.pendingRequests.indexOf(config);\n        if (idx !== -1) $http.pendingRequests.splice(idx, 1);\n      }\n    }\n\n\n    function buildUrl(url, params) {\n      if (!params) return url;\n      var parts = [];\n      forEachSorted(params, function(value, key) {\n        if (value === null || isUndefined(value)) return;\n        if (!isArray(value)) value = [value];\n\n        forEach(value, function(v) {\n          if (isObject(v)) {\n            if (isDate(v)) {\n              v = v.toISOString();\n            } else {\n              v = toJson(v);\n            }\n          }\n          parts.push(encodeUriQuery(key) + '=' +\n                     encodeUriQuery(v));\n        });\n      });\n      if (parts.length > 0) {\n        url += ((url.indexOf('?') == -1) ? '?' : '&') + parts.join('&');\n      }\n      return url;\n    }\n  }];\n}\n\nfunction createXhr() {\n    return new window.XMLHttpRequest();\n}\n\n/**\n * @ngdoc service\n * @name $httpBackend\n * @requires $window\n * @requires $document\n *\n * @description\n * HTTP backend used by the {@link ng.$http service} that delegates to\n * XMLHttpRequest object or JSONP and deals with browser incompatibilities.\n *\n * You should never need to use this service directly, instead use the higher-level abstractions:\n * {@link ng.$http $http} or {@link ngResource.$resource $resource}.\n *\n * During testing this implementation is swapped with {@link ngMock.$httpBackend mock\n * $httpBackend} which can be trained with responses.\n */\nfunction $HttpBackendProvider() {\n  this.$get = ['$browser', '$window', '$document', function($browser, $window, $document) {\n    return createHttpBackend($browser, createXhr, $browser.defer, $window.angular.callbacks, $document[0]);\n  }];\n}\n\nfunction createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {\n  // TODO(vojta): fix the signature\n  return function(method, url, post, callback, headers, timeout, withCredentials, responseType) {\n    $browser.$$incOutstandingRequestCount();\n    url = url || $browser.url();\n\n    if (lowercase(method) == 'jsonp') {\n      var callbackId = '_' + (callbacks.counter++).toString(36);\n      callbacks[callbackId] = function(data) {\n        callbacks[callbackId].data = data;\n        callbacks[callbackId].called = true;\n      };\n\n      var jsonpDone = jsonpReq(url.replace('JSON_CALLBACK', 'angular.callbacks.' + callbackId),\n          callbackId, function(status, text) {\n        completeRequest(callback, status, callbacks[callbackId].data, \"\", text);\n        callbacks[callbackId] = noop;\n      });\n    } else {\n\n      var xhr = createXhr();\n\n      xhr.open(method, url, true);\n      forEach(headers, function(value, key) {\n        if (isDefined(value)) {\n            xhr.setRequestHeader(key, value);\n        }\n      });\n\n      xhr.onload = function requestLoaded() {\n        var statusText = xhr.statusText || '';\n\n        // responseText is the old-school way of retrieving response (supported by IE9)\n        // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)\n        var response = ('response' in xhr) ? xhr.response : xhr.responseText;\n\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        var status = xhr.status === 1223 ? 204 : xhr.status;\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = response ? 200 : urlResolve(url).protocol == 'file' ? 404 : 0;\n        }\n\n        completeRequest(callback,\n            status,\n            response,\n            xhr.getAllResponseHeaders(),\n            statusText);\n      };\n\n      var requestError = function() {\n        // The response is always empty\n        // See https://xhr.spec.whatwg.org/#request-error-steps and https://fetch.spec.whatwg.org/#concept-network-error\n        completeRequest(callback, -1, null, null, '');\n      };\n\n      xhr.onerror = requestError;\n      xhr.onabort = requestError;\n\n      if (withCredentials) {\n        xhr.withCredentials = true;\n      }\n\n      if (responseType) {\n        try {\n          xhr.responseType = responseType;\n        } catch (e) {\n          // WebKit added support for the json responseType value on 09/03/2013\n          // https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are\n          // known to throw when setting the value \"json\" as the response type. Other older\n          // browsers implementing the responseType\n          //\n          // The json response type can be ignored if not supported, because JSON payloads are\n          // parsed on the client-side regardless.\n          if (responseType !== 'json') {\n            throw e;\n          }\n        }\n      }\n\n      xhr.send(post || null);\n    }\n\n    if (timeout > 0) {\n      var timeoutId = $browserDefer(timeoutRequest, timeout);\n    } else if (isPromiseLike(timeout)) {\n      timeout.then(timeoutRequest);\n    }\n\n\n    function timeoutRequest() {\n      jsonpDone && jsonpDone();\n      xhr && xhr.abort();\n    }\n\n    function completeRequest(callback, status, response, headersString, statusText) {\n      // cancel timeout and subsequent timeout promise resolution\n      if (timeoutId !== undefined) {\n        $browserDefer.cancel(timeoutId);\n      }\n      jsonpDone = xhr = null;\n\n      callback(status, response, headersString, statusText);\n      $browser.$$completeOutstandingRequest(noop);\n    }\n  };\n\n  function jsonpReq(url, callbackId, done) {\n    // we can't use jQuery/jqLite here because jQuery does crazy stuff with script elements, e.g.:\n    // - fetches local scripts via XHR and evals them\n    // - adds and immediately removes script elements from the document\n    var script = rawDocument.createElement('script'), callback = null;\n    script.type = \"text/javascript\";\n    script.src = url;\n    script.async = true;\n\n    callback = function(event) {\n      removeEventListenerFn(script, \"load\", callback);\n      removeEventListenerFn(script, \"error\", callback);\n      rawDocument.body.removeChild(script);\n      script = null;\n      var status = -1;\n      var text = \"unknown\";\n\n      if (event) {\n        if (event.type === \"load\" && !callbacks[callbackId].called) {\n          event = { type: \"error\" };\n        }\n        text = event.type;\n        status = event.type === \"error\" ? 404 : 200;\n      }\n\n      if (done) {\n        done(status, text);\n      }\n    };\n\n    addEventListenerFn(script, \"load\", callback);\n    addEventListenerFn(script, \"error\", callback);\n    rawDocument.body.appendChild(script);\n    return callback;\n  }\n}\n\nvar $interpolateMinErr = minErr('$interpolate');\n\n/**\n * @ngdoc provider\n * @name $interpolateProvider\n *\n * @description\n *\n * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.\n *\n * @example\n<example module=\"customInterpolationApp\">\n<file name=\"index.html\">\n<script>\n  var customInterpolationApp = angular.module('customInterpolationApp', []);\n\n  customInterpolationApp.config(function($interpolateProvider) {\n    $interpolateProvider.startSymbol('//');\n    $interpolateProvider.endSymbol('//');\n  });\n\n\n  customInterpolationApp.controller('DemoController', function() {\n      this.label = \"This binding is brought you by // interpolation symbols.\";\n  });\n</script>\n<div ng-app=\"App\" ng-controller=\"DemoController as demo\">\n    //demo.label//\n</div>\n</file>\n<file name=\"protractor.js\" type=\"protractor\">\n  it('should interpolate binding with custom symbols', function() {\n    expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');\n  });\n</file>\n</example>\n */\nfunction $InterpolateProvider() {\n  var startSymbol = '{{';\n  var endSymbol = '}}';\n\n  /**\n   * @ngdoc method\n   * @name $interpolateProvider#startSymbol\n   * @description\n   * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.\n   *\n   * @param {string=} value new value to set the starting symbol to.\n   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.\n   */\n  this.startSymbol = function(value) {\n    if (value) {\n      startSymbol = value;\n      return this;\n    } else {\n      return startSymbol;\n    }\n  };\n\n  /**\n   * @ngdoc method\n   * @name $interpolateProvider#endSymbol\n   * @description\n   * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.\n   *\n   * @param {string=} value new value to set the ending symbol to.\n   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.\n   */\n  this.endSymbol = function(value) {\n    if (value) {\n      endSymbol = value;\n      return this;\n    } else {\n      return endSymbol;\n    }\n  };\n\n\n  this.$get = ['$parse', '$exceptionHandler', '$sce', function($parse, $exceptionHandler, $sce) {\n    var startSymbolLength = startSymbol.length,\n        endSymbolLength = endSymbol.length,\n        escapedStartRegexp = new RegExp(startSymbol.replace(/./g, escape), 'g'),\n        escapedEndRegexp = new RegExp(endSymbol.replace(/./g, escape), 'g');\n\n    function escape(ch) {\n      return '\\\\\\\\\\\\' + ch;\n    }\n\n    /**\n     * @ngdoc service\n     * @name $interpolate\n     * @kind function\n     *\n     * @requires $parse\n     * @requires $sce\n     *\n     * @description\n     *\n     * Compiles a string with markup into an interpolation function. This service is used by the\n     * HTML {@link ng.$compile $compile} service for data binding. See\n     * {@link ng.$interpolateProvider $interpolateProvider} for configuring the\n     * interpolation markup.\n     *\n     *\n     * ```js\n     *   var $interpolate = ...; // injected\n     *   var exp = $interpolate('Hello {{name | uppercase}}!');\n     *   expect(exp({name:'Angular'}).toEqual('Hello ANGULAR!');\n     * ```\n     *\n     * `$interpolate` takes an optional fourth argument, `allOrNothing`. If `allOrNothing` is\n     * `true`, the interpolation function will return `undefined` unless all embedded expressions\n     * evaluate to a value other than `undefined`.\n     *\n     * ```js\n     *   var $interpolate = ...; // injected\n     *   var context = {greeting: 'Hello', name: undefined };\n     *\n     *   // default \"forgiving\" mode\n     *   var exp = $interpolate('{{greeting}} {{name}}!');\n     *   expect(exp(context)).toEqual('Hello !');\n     *\n     *   // \"allOrNothing\" mode\n     *   exp = $interpolate('{{greeting}} {{name}}!', false, null, true);\n     *   expect(exp(context)).toBeUndefined();\n     *   context.name = 'Angular';\n     *   expect(exp(context)).toEqual('Hello Angular!');\n     * ```\n     *\n     * `allOrNothing` is useful for interpolating URLs. `ngSrc` and `ngSrcset` use this behavior.\n     *\n     * ####Escaped Interpolation\n     * $interpolate provides a mechanism for escaping interpolation markers. Start and end markers\n     * can be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).\n     * It will be rendered as a regular start/end marker, and will not be interpreted as an expression\n     * or binding.\n     *\n     * This enables web-servers to prevent script injection attacks and defacing attacks, to some\n     * degree, while also enabling code examples to work without relying on the\n     * {@link ng.directive:ngNonBindable ngNonBindable} directive.\n     *\n     * **For security purposes, it is strongly encouraged that web servers escape user-supplied data,\n     * replacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all\n     * interpolation start/end markers with their escaped counterparts.**\n     *\n     * Escaped interpolation markers are only replaced with the actual interpolation markers in rendered\n     * output when the $interpolate service processes the text. So, for HTML elements interpolated\n     * by {@link ng.$compile $compile}, or otherwise interpolated with the `mustHaveExpression` parameter\n     * set to `true`, the interpolated text must contain an unescaped interpolation expression. As such,\n     * this is typically useful only when user-data is used in rendering a template from the server, or\n     * when otherwise untrusted data is used by a directive.\n     *\n     * <example>\n     *  <file name=\"index.html\">\n     *    <div ng-init=\"username='A user'\">\n     *      <p ng-init=\"apptitle='Escaping demo'\">{{apptitle}}: \\{\\{ username = \"defaced value\"; \\}\\}\n     *        </p>\n     *      <p><strong>{{username}}</strong> attempts to inject code which will deface the\n     *        application, but fails to accomplish their task, because the server has correctly\n     *        escaped the interpolation start/end markers with REVERSE SOLIDUS U+005C (backslash)\n     *        characters.</p>\n     *      <p>Instead, the result of the attempted script injection is visible, and can be removed\n     *        from the database by an administrator.</p>\n     *    </div>\n     *  </file>\n     * </example>\n     *\n     * @param {string} text The text with markup to interpolate.\n     * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have\n     *    embedded expression in order to return an interpolation function. Strings with no\n     *    embedded expression will return null for the interpolation function.\n     * @param {string=} trustedContext when provided, the returned function passes the interpolated\n     *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,\n     *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that\n     *    provides Strict Contextual Escaping for details.\n     * @param {boolean=} allOrNothing if `true`, then the returned function returns undefined\n     *    unless all embedded expressions evaluate to a value other than `undefined`.\n     * @returns {function(context)} an interpolation function which is used to compute the\n     *    interpolated string. The function has these parameters:\n     *\n     * - `context`: evaluation context for all expressions embedded in the interpolated text\n     */\n    function $interpolate(text, mustHaveExpression, trustedContext, allOrNothing) {\n      allOrNothing = !!allOrNothing;\n      var startIndex,\n          endIndex,\n          index = 0,\n          expressions = [],\n          parseFns = [],\n          textLength = text.length,\n          exp,\n          concat = [],\n          expressionPositions = [];\n\n      while (index < textLength) {\n        if (((startIndex = text.indexOf(startSymbol, index)) != -1) &&\n             ((endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) != -1)) {\n          if (index !== startIndex) {\n            concat.push(unescapeText(text.substring(index, startIndex)));\n          }\n          exp = text.substring(startIndex + startSymbolLength, endIndex);\n          expressions.push(exp);\n          parseFns.push($parse(exp, parseStringifyInterceptor));\n          index = endIndex + endSymbolLength;\n          expressionPositions.push(concat.length);\n          concat.push('');\n        } else {\n          // we did not find an interpolation, so we have to add the remainder to the separators array\n          if (index !== textLength) {\n            concat.push(unescapeText(text.substring(index)));\n          }\n          break;\n        }\n      }\n\n      // Concatenating expressions makes it hard to reason about whether some combination of\n      // concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a\n      // single expression be used for iframe[src], object[src], etc., we ensure that the value\n      // that's used is assigned or constructed by some JS code somewhere that is more testable or\n      // make it obvious that you bound the value to some user controlled value.  This helps reduce\n      // the load when auditing for XSS issues.\n      if (trustedContext && concat.length > 1) {\n          throw $interpolateMinErr('noconcat',\n              \"Error while interpolating: {0}\\nStrict Contextual Escaping disallows \" +\n              \"interpolations that concatenate multiple expressions when a trusted value is \" +\n              \"required.  See http://docs.angularjs.org/api/ng.$sce\", text);\n      }\n\n      if (!mustHaveExpression || expressions.length) {\n        var compute = function(values) {\n          for (var i = 0, ii = expressions.length; i < ii; i++) {\n            if (allOrNothing && isUndefined(values[i])) return;\n            concat[expressionPositions[i]] = values[i];\n          }\n          return concat.join('');\n        };\n\n        var getValue = function(value) {\n          return trustedContext ?\n            $sce.getTrusted(trustedContext, value) :\n            $sce.valueOf(value);\n        };\n\n        var stringify = function(value) {\n          if (value == null) { // null || undefined\n            return '';\n          }\n          switch (typeof value) {\n            case 'string':\n              break;\n            case 'number':\n              value = '' + value;\n              break;\n            default:\n              value = toJson(value);\n          }\n\n          return value;\n        };\n\n        return extend(function interpolationFn(context) {\n            var i = 0;\n            var ii = expressions.length;\n            var values = new Array(ii);\n\n            try {\n              for (; i < ii; i++) {\n                values[i] = parseFns[i](context);\n              }\n\n              return compute(values);\n            } catch (err) {\n              var newErr = $interpolateMinErr('interr', \"Can't interpolate: {0}\\n{1}\", text,\n                  err.toString());\n              $exceptionHandler(newErr);\n            }\n\n          }, {\n          // all of these properties are undocumented for now\n          exp: text, //just for compatibility with regular watchers created via $watch\n          expressions: expressions,\n          $$watchDelegate: function(scope, listener, objectEquality) {\n            var lastValue;\n            return scope.$watchGroup(parseFns, function interpolateFnWatcher(values, oldValues) {\n              var currValue = compute(values);\n              if (isFunction(listener)) {\n                listener.call(this, currValue, values !== oldValues ? lastValue : currValue, scope);\n              }\n              lastValue = currValue;\n            }, objectEquality);\n          }\n        });\n      }\n\n      function unescapeText(text) {\n        return text.replace(escapedStartRegexp, startSymbol).\n          replace(escapedEndRegexp, endSymbol);\n      }\n\n      function parseStringifyInterceptor(value) {\n        try {\n          value = getValue(value);\n          return allOrNothing && !isDefined(value) ? value : stringify(value);\n        } catch (err) {\n          var newErr = $interpolateMinErr('interr', \"Can't interpolate: {0}\\n{1}\", text,\n            err.toString());\n          $exceptionHandler(newErr);\n        }\n      }\n    }\n\n\n    /**\n     * @ngdoc method\n     * @name $interpolate#startSymbol\n     * @description\n     * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.\n     *\n     * Use {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change\n     * the symbol.\n     *\n     * @returns {string} start symbol.\n     */\n    $interpolate.startSymbol = function() {\n      return startSymbol;\n    };\n\n\n    /**\n     * @ngdoc method\n     * @name $interpolate#endSymbol\n     * @description\n     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.\n     *\n     * Use {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change\n     * the symbol.\n     *\n     * @returns {string} end symbol.\n     */\n    $interpolate.endSymbol = function() {\n      return endSymbol;\n    };\n\n    return $interpolate;\n  }];\n}\n\nfunction $IntervalProvider() {\n  this.$get = ['$rootScope', '$window', '$q', '$$q',\n       function($rootScope,   $window,   $q,   $$q) {\n    var intervals = {};\n\n\n     /**\n      * @ngdoc service\n      * @name $interval\n      *\n      * @description\n      * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`\n      * milliseconds.\n      *\n      * The return value of registering an interval function is a promise. This promise will be\n      * notified upon each tick of the interval, and will be resolved after `count` iterations, or\n      * run indefinitely if `count` is not defined. The value of the notification will be the\n      * number of iterations that have run.\n      * To cancel an interval, call `$interval.cancel(promise)`.\n      *\n      * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to\n      * move forward by `millis` milliseconds and trigger any functions scheduled to run in that\n      * time.\n      *\n      * <div class=\"alert alert-warning\">\n      * **Note**: Intervals created by this service must be explicitly destroyed when you are finished\n      * with them.  In particular they are not automatically destroyed when a controller's scope or a\n      * directive's element are destroyed.\n      * You should take this into consideration and make sure to always cancel the interval at the\n      * appropriate moment.  See the example below for more details on how and when to do this.\n      * </div>\n      *\n      * @param {function()} fn A function that should be called repeatedly.\n      * @param {number} delay Number of milliseconds between each function call.\n      * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat\n      *   indefinitely.\n      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise\n      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.\n      * @returns {promise} A promise which will be notified on each iteration.\n      *\n      * @example\n      * <example module=\"intervalExample\">\n      * <file name=\"index.html\">\n      *   <script>\n      *     angular.module('intervalExample', [])\n      *       .controller('ExampleController', ['$scope', '$interval',\n      *         function($scope, $interval) {\n      *           $scope.format = 'M/d/yy h:mm:ss a';\n      *           $scope.blood_1 = 100;\n      *           $scope.blood_2 = 120;\n      *\n      *           var stop;\n      *           $scope.fight = function() {\n      *             // Don't start a new fight if we are already fighting\n      *             if ( angular.isDefined(stop) ) return;\n      *\n      *             stop = $interval(function() {\n      *               if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {\n      *                 $scope.blood_1 = $scope.blood_1 - 3;\n      *                 $scope.blood_2 = $scope.blood_2 - 4;\n      *               } else {\n      *                 $scope.stopFight();\n      *               }\n      *             }, 100);\n      *           };\n      *\n      *           $scope.stopFight = function() {\n      *             if (angular.isDefined(stop)) {\n      *               $interval.cancel(stop);\n      *               stop = undefined;\n      *             }\n      *           };\n      *\n      *           $scope.resetFight = function() {\n      *             $scope.blood_1 = 100;\n      *             $scope.blood_2 = 120;\n      *           };\n      *\n      *           $scope.$on('$destroy', function() {\n      *             // Make sure that the interval is destroyed too\n      *             $scope.stopFight();\n      *           });\n      *         }])\n      *       // Register the 'myCurrentTime' directive factory method.\n      *       // We inject $interval and dateFilter service since the factory method is DI.\n      *       .directive('myCurrentTime', ['$interval', 'dateFilter',\n      *         function($interval, dateFilter) {\n      *           // return the directive link function. (compile function not needed)\n      *           return function(scope, element, attrs) {\n      *             var format,  // date format\n      *                 stopTime; // so that we can cancel the time updates\n      *\n      *             // used to update the UI\n      *             function updateTime() {\n      *               element.text(dateFilter(new Date(), format));\n      *             }\n      *\n      *             // watch the expression, and update the UI on change.\n      *             scope.$watch(attrs.myCurrentTime, function(value) {\n      *               format = value;\n      *               updateTime();\n      *             });\n      *\n      *             stopTime = $interval(updateTime, 1000);\n      *\n      *             // listen on DOM destroy (removal) event, and cancel the next UI update\n      *             // to prevent updating time after the DOM element was removed.\n      *             element.on('$destroy', function() {\n      *               $interval.cancel(stopTime);\n      *             });\n      *           }\n      *         }]);\n      *   </script>\n      *\n      *   <div>\n      *     <div ng-controller=\"ExampleController\">\n      *       Date format: <input ng-model=\"format\"> <hr/>\n      *       Current time is: <span my-current-time=\"format\"></span>\n      *       <hr/>\n      *       Blood 1 : <font color='red'>{{blood_1}}</font>\n      *       Blood 2 : <font color='red'>{{blood_2}}</font>\n      *       <button type=\"button\" data-ng-click=\"fight()\">Fight</button>\n      *       <button type=\"button\" data-ng-click=\"stopFight()\">StopFight</button>\n      *       <button type=\"button\" data-ng-click=\"resetFight()\">resetFight</button>\n      *     </div>\n      *   </div>\n      *\n      * </file>\n      * </example>\n      */\n    function interval(fn, delay, count, invokeApply) {\n      var setInterval = $window.setInterval,\n          clearInterval = $window.clearInterval,\n          iteration = 0,\n          skipApply = (isDefined(invokeApply) && !invokeApply),\n          deferred = (skipApply ? $$q : $q).defer(),\n          promise = deferred.promise;\n\n      count = isDefined(count) ? count : 0;\n\n      promise.then(null, null, fn);\n\n      promise.$$intervalId = setInterval(function tick() {\n        deferred.notify(iteration++);\n\n        if (count > 0 && iteration >= count) {\n          deferred.resolve(iteration);\n          clearInterval(promise.$$intervalId);\n          delete intervals[promise.$$intervalId];\n        }\n\n        if (!skipApply) $rootScope.$apply();\n\n      }, delay);\n\n      intervals[promise.$$intervalId] = deferred;\n\n      return promise;\n    }\n\n\n     /**\n      * @ngdoc method\n      * @name $interval#cancel\n      *\n      * @description\n      * Cancels a task associated with the `promise`.\n      *\n      * @param {promise} promise returned by the `$interval` function.\n      * @returns {boolean} Returns `true` if the task was successfully canceled.\n      */\n    interval.cancel = function(promise) {\n      if (promise && promise.$$intervalId in intervals) {\n        intervals[promise.$$intervalId].reject('canceled');\n        $window.clearInterval(promise.$$intervalId);\n        delete intervals[promise.$$intervalId];\n        return true;\n      }\n      return false;\n    };\n\n    return interval;\n  }];\n}\n\n/**\n * @ngdoc service\n * @name $locale\n *\n * @description\n * $locale service provides localization rules for various Angular components. As of right now the\n * only public api is:\n *\n * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)\n */\nfunction $LocaleProvider() {\n  this.$get = function() {\n    return {\n      id: 'en-us',\n\n      NUMBER_FORMATS: {\n        DECIMAL_SEP: '.',\n        GROUP_SEP: ',',\n        PATTERNS: [\n          { // Decimal Pattern\n            minInt: 1,\n            minFrac: 0,\n            maxFrac: 3,\n            posPre: '',\n            posSuf: '',\n            negPre: '-',\n            negSuf: '',\n            gSize: 3,\n            lgSize: 3\n          },{ //Currency Pattern\n            minInt: 1,\n            minFrac: 2,\n            maxFrac: 2,\n            posPre: '\\u00A4',\n            posSuf: '',\n            negPre: '(\\u00A4',\n            negSuf: ')',\n            gSize: 3,\n            lgSize: 3\n          }\n        ],\n        CURRENCY_SYM: '$'\n      },\n\n      DATETIME_FORMATS: {\n        MONTH:\n            'January,February,March,April,May,June,July,August,September,October,November,December'\n            .split(','),\n        SHORTMONTH:  'Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec'.split(','),\n        DAY: 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday'.split(','),\n        SHORTDAY: 'Sun,Mon,Tue,Wed,Thu,Fri,Sat'.split(','),\n        AMPMS: ['AM','PM'],\n        medium: 'MMM d, y h:mm:ss a',\n        'short': 'M/d/yy h:mm a',\n        fullDate: 'EEEE, MMMM d, y',\n        longDate: 'MMMM d, y',\n        mediumDate: 'MMM d, y',\n        shortDate: 'M/d/yy',\n        mediumTime: 'h:mm:ss a',\n        shortTime: 'h:mm a',\n        ERANAMES: [\n          \"Before Christ\",\n          \"Anno Domini\"\n        ],\n        ERAS: [\n          \"BC\",\n          \"AD\"\n        ]\n      },\n\n      pluralCat: function(num) {\n        if (num === 1) {\n          return 'one';\n        }\n        return 'other';\n      }\n    };\n  };\n}\n\nvar PATH_MATCH = /^([^\\?#]*)(\\?([^#]*))?(#(.*))?$/,\n    DEFAULT_PORTS = {'http': 80, 'https': 443, 'ftp': 21};\nvar $locationMinErr = minErr('$location');\n\n\n/**\n * Encode path using encodeUriSegment, ignoring forward slashes\n *\n * @param {string} path Path to encode\n * @returns {string}\n */\nfunction encodePath(path) {\n  var segments = path.split('/'),\n      i = segments.length;\n\n  while (i--) {\n    segments[i] = encodeUriSegment(segments[i]);\n  }\n\n  return segments.join('/');\n}\n\nfunction parseAbsoluteUrl(absoluteUrl, locationObj) {\n  var parsedUrl = urlResolve(absoluteUrl);\n\n  locationObj.$$protocol = parsedUrl.protocol;\n  locationObj.$$host = parsedUrl.hostname;\n  locationObj.$$port = int(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;\n}\n\n\nfunction parseAppUrl(relativeUrl, locationObj) {\n  var prefixed = (relativeUrl.charAt(0) !== '/');\n  if (prefixed) {\n    relativeUrl = '/' + relativeUrl;\n  }\n  var match = urlResolve(relativeUrl);\n  locationObj.$$path = decodeURIComponent(prefixed && match.pathname.charAt(0) === '/' ?\n      match.pathname.substring(1) : match.pathname);\n  locationObj.$$search = parseKeyValue(match.search);\n  locationObj.$$hash = decodeURIComponent(match.hash);\n\n  // make sure path starts with '/';\n  if (locationObj.$$path && locationObj.$$path.charAt(0) != '/') {\n    locationObj.$$path = '/' + locationObj.$$path;\n  }\n}\n\n\n/**\n *\n * @param {string} begin\n * @param {string} whole\n * @returns {string} returns text from whole after begin or undefined if it does not begin with\n *                   expected string.\n */\nfunction beginsWith(begin, whole) {\n  if (whole.indexOf(begin) === 0) {\n    return whole.substr(begin.length);\n  }\n}\n\n\nfunction stripHash(url) {\n  var index = url.indexOf('#');\n  return index == -1 ? url : url.substr(0, index);\n}\n\nfunction trimEmptyHash(url) {\n  return url.replace(/(#.+)|#$/, '$1');\n}\n\n\nfunction stripFile(url) {\n  return url.substr(0, stripHash(url).lastIndexOf('/') + 1);\n}\n\n/* return the server only (scheme://host:port) */\nfunction serverBase(url) {\n  return url.substring(0, url.indexOf('/', url.indexOf('//') + 2));\n}\n\n\n/**\n * LocationHtml5Url represents an url\n * This object is exposed as $location service when HTML5 mode is enabled and supported\n *\n * @constructor\n * @param {string} appBase application base URL\n * @param {string} basePrefix url path prefix\n */\nfunction LocationHtml5Url(appBase, basePrefix) {\n  this.$$html5 = true;\n  basePrefix = basePrefix || '';\n  var appBaseNoFile = stripFile(appBase);\n  parseAbsoluteUrl(appBase, this);\n\n\n  /**\n   * Parse given html5 (regular) url string into properties\n   * @param {string} url HTML5 url\n   * @private\n   */\n  this.$$parse = function(url) {\n    var pathUrl = beginsWith(appBaseNoFile, url);\n    if (!isString(pathUrl)) {\n      throw $locationMinErr('ipthprfx', 'Invalid url \"{0}\", missing path prefix \"{1}\".', url,\n          appBaseNoFile);\n    }\n\n    parseAppUrl(pathUrl, this);\n\n    if (!this.$$path) {\n      this.$$path = '/';\n    }\n\n    this.$$compose();\n  };\n\n  /**\n   * Compose url and update `absUrl` property\n   * @private\n   */\n  this.$$compose = function() {\n    var search = toKeyValue(this.$$search),\n        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';\n\n    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;\n    this.$$absUrl = appBaseNoFile + this.$$url.substr(1); // first char is always '/'\n  };\n\n  this.$$parseLinkUrl = function(url, relHref) {\n    if (relHref && relHref[0] === '#') {\n      // special case for links to hash fragments:\n      // keep the old url and only replace the hash fragment\n      this.hash(relHref.slice(1));\n      return true;\n    }\n    var appUrl, prevAppUrl;\n    var rewrittenUrl;\n\n    if ((appUrl = beginsWith(appBase, url)) !== undefined) {\n      prevAppUrl = appUrl;\n      if ((appUrl = beginsWith(basePrefix, appUrl)) !== undefined) {\n        rewrittenUrl = appBaseNoFile + (beginsWith('/', appUrl) || appUrl);\n      } else {\n        rewrittenUrl = appBase + prevAppUrl;\n      }\n    } else if ((appUrl = beginsWith(appBaseNoFile, url)) !== undefined) {\n      rewrittenUrl = appBaseNoFile + appUrl;\n    } else if (appBaseNoFile == url + '/') {\n      rewrittenUrl = appBaseNoFile;\n    }\n    if (rewrittenUrl) {\n      this.$$parse(rewrittenUrl);\n    }\n    return !!rewrittenUrl;\n  };\n}\n\n\n/**\n * LocationHashbangUrl represents url\n * This object is exposed as $location service when developer doesn't opt into html5 mode.\n * It also serves as the base class for html5 mode fallback on legacy browsers.\n *\n * @constructor\n * @param {string} appBase application base URL\n * @param {string} hashPrefix hashbang prefix\n */\nfunction LocationHashbangUrl(appBase, hashPrefix) {\n  var appBaseNoFile = stripFile(appBase);\n\n  parseAbsoluteUrl(appBase, this);\n\n\n  /**\n   * Parse given hashbang url into properties\n   * @param {string} url Hashbang url\n   * @private\n   */\n  this.$$parse = function(url) {\n    var withoutBaseUrl = beginsWith(appBase, url) || beginsWith(appBaseNoFile, url);\n    var withoutHashUrl;\n\n    if (!isUndefined(withoutBaseUrl) && withoutBaseUrl.charAt(0) === '#') {\n\n      // The rest of the url starts with a hash so we have\n      // got either a hashbang path or a plain hash fragment\n      withoutHashUrl = beginsWith(hashPrefix, withoutBaseUrl);\n      if (isUndefined(withoutHashUrl)) {\n        // There was no hashbang prefix so we just have a hash fragment\n        withoutHashUrl = withoutBaseUrl;\n      }\n\n    } else {\n      // There was no hashbang path nor hash fragment:\n      // If we are in HTML5 mode we use what is left as the path;\n      // Otherwise we ignore what is left\n      if (this.$$html5) {\n        withoutHashUrl = withoutBaseUrl;\n      } else {\n        withoutHashUrl = '';\n        if (isUndefined(withoutBaseUrl)) {\n          appBase = url;\n          this.replace();\n        }\n      }\n    }\n\n    parseAppUrl(withoutHashUrl, this);\n\n    this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase);\n\n    this.$$compose();\n\n    /*\n     * In Windows, on an anchor node on documents loaded from\n     * the filesystem, the browser will return a pathname\n     * prefixed with the drive name ('/C:/path') when a\n     * pathname without a drive is set:\n     *  * a.setAttribute('href', '/foo')\n     *   * a.pathname === '/C:/foo' //true\n     *\n     * Inside of Angular, we're always using pathnames that\n     * do not include drive names for routing.\n     */\n    function removeWindowsDriveName(path, url, base) {\n      /*\n      Matches paths for file protocol on windows,\n      such as /C:/foo/bar, and captures only /foo/bar.\n      */\n      var windowsFilePathExp = /^\\/[A-Z]:(\\/.*)/;\n\n      var firstPathSegmentMatch;\n\n      //Get the relative path from the input URL.\n      if (url.indexOf(base) === 0) {\n        url = url.replace(base, '');\n      }\n\n      // The input URL intentionally contains a first path segment that ends with a colon.\n      if (windowsFilePathExp.exec(url)) {\n        return path;\n      }\n\n      firstPathSegmentMatch = windowsFilePathExp.exec(path);\n      return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;\n    }\n  };\n\n  /**\n   * Compose hashbang url and update `absUrl` property\n   * @private\n   */\n  this.$$compose = function() {\n    var search = toKeyValue(this.$$search),\n        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';\n\n    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;\n    this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : '');\n  };\n\n  this.$$parseLinkUrl = function(url, relHref) {\n    if (stripHash(appBase) == stripHash(url)) {\n      this.$$parse(url);\n      return true;\n    }\n    return false;\n  };\n}\n\n\n/**\n * LocationHashbangUrl represents url\n * This object is exposed as $location service when html5 history api is enabled but the browser\n * does not support it.\n *\n * @constructor\n * @param {string} appBase application base URL\n * @param {string} hashPrefix hashbang prefix\n */\nfunction LocationHashbangInHtml5Url(appBase, hashPrefix) {\n  this.$$html5 = true;\n  LocationHashbangUrl.apply(this, arguments);\n\n  var appBaseNoFile = stripFile(appBase);\n\n  this.$$parseLinkUrl = function(url, relHref) {\n    if (relHref && relHref[0] === '#') {\n      // special case for links to hash fragments:\n      // keep the old url and only replace the hash fragment\n      this.hash(relHref.slice(1));\n      return true;\n    }\n\n    var rewrittenUrl;\n    var appUrl;\n\n    if (appBase == stripHash(url)) {\n      rewrittenUrl = url;\n    } else if ((appUrl = beginsWith(appBaseNoFile, url))) {\n      rewrittenUrl = appBase + hashPrefix + appUrl;\n    } else if (appBaseNoFile === url + '/') {\n      rewrittenUrl = appBaseNoFile;\n    }\n    if (rewrittenUrl) {\n      this.$$parse(rewrittenUrl);\n    }\n    return !!rewrittenUrl;\n  };\n\n  this.$$compose = function() {\n    var search = toKeyValue(this.$$search),\n        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';\n\n    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;\n    // include hashPrefix in $$absUrl when $$url is empty so IE9 does not reload page because of removal of '#'\n    this.$$absUrl = appBase + hashPrefix + this.$$url;\n  };\n\n}\n\n\nvar locationPrototype = {\n\n  /**\n   * Are we in html5 mode?\n   * @private\n   */\n  $$html5: false,\n\n  /**\n   * Has any change been replacing?\n   * @private\n   */\n  $$replace: false,\n\n  /**\n   * @ngdoc method\n   * @name $location#absUrl\n   *\n   * @description\n   * This method is getter only.\n   *\n   * Return full url representation with all segments encoded according to rules specified in\n   * [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).\n   *\n   *\n   * ```js\n   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo\n   * var absUrl = $location.absUrl();\n   * // => \"http://example.com/#/some/path?foo=bar&baz=xoxo\"\n   * ```\n   *\n   * @return {string} full url\n   */\n  absUrl: locationGetter('$$absUrl'),\n\n  /**\n   * @ngdoc method\n   * @name $location#url\n   *\n   * @description\n   * This method is getter / setter.\n   *\n   * Return url (e.g. `/path?a=b#hash`) when called without any parameter.\n   *\n   * Change path, search and hash, when called with parameter and return `$location`.\n   *\n   *\n   * ```js\n   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo\n   * var url = $location.url();\n   * // => \"/some/path?foo=bar&baz=xoxo\"\n   * ```\n   *\n   * @param {string=} url New url without base prefix (e.g. `/path?a=b#hash`)\n   * @return {string} url\n   */\n  url: function(url) {\n    if (isUndefined(url))\n      return this.$$url;\n\n    var match = PATH_MATCH.exec(url);\n    if (match[1] || url === '') this.path(decodeURIComponent(match[1]));\n    if (match[2] || match[1] || url === '') this.search(match[3] || '');\n    this.hash(match[5] || '');\n\n    return this;\n  },\n\n  /**\n   * @ngdoc method\n   * @name $location#protocol\n   *\n   * @description\n   * This method is getter only.\n   *\n   * Return protocol of current url.\n   *\n   *\n   * ```js\n   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo\n   * var protocol = $location.protocol();\n   * // => \"http\"\n   * ```\n   *\n   * @return {string} protocol of current url\n   */\n  protocol: locationGetter('$$protocol'),\n\n  /**\n   * @ngdoc method\n   * @name $location#host\n   *\n   * @description\n   * This method is getter only.\n   *\n   * Return host of current url.\n   *\n   * Note: compared to the non-angular version `location.host` which returns `hostname:port`, this returns the `hostname` portion only.\n   *\n   *\n   * ```js\n   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo\n   * var host = $location.host();\n   * // => \"example.com\"\n   *\n   * // given url http://user:password@example.com:8080/#/some/path?foo=bar&baz=xoxo\n   * host = $location.host();\n   * // => \"example.com\"\n   * host = location.host;\n   * // => \"example.com:8080\"\n   * ```\n   *\n   * @return {string} host of current url.\n   */\n  host: locationGetter('$$host'),\n\n  /**\n   * @ngdoc method\n   * @name $location#port\n   *\n   * @description\n   * This method is getter only.\n   *\n   * Return port of current url.\n   *\n   *\n   * ```js\n   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo\n   * var port = $location.port();\n   * // => 80\n   * ```\n   *\n   * @return {Number} port\n   */\n  port: locationGetter('$$port'),\n\n  /**\n   * @ngdoc method\n   * @name $location#path\n   *\n   * @description\n   * This method is getter / setter.\n   *\n   * Return path of current url when called without any parameter.\n   *\n   * Change path when called with parameter and return `$location`.\n   *\n   * Note: Path should always begin with forward slash (/), this method will add the forward slash\n   * if it is missing.\n   *\n   *\n   * ```js\n   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo\n   * var path = $location.path();\n   * // => \"/some/path\"\n   * ```\n   *\n   * @param {(string|number)=} path New path\n   * @return {string} path\n   */\n  path: locationGetterSetter('$$path', function(path) {\n    path = path !== null ? path.toString() : '';\n    return path.charAt(0) == '/' ? path : '/' + path;\n  }),\n\n  /**\n   * @ngdoc method\n   * @name $location#search\n   *\n   * @description\n   * This method is getter / setter.\n   *\n   * Return search part (as object) of current url when called without any parameter.\n   *\n   * Change search part when called with parameter and return `$location`.\n   *\n   *\n   * ```js\n   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo\n   * var searchObject = $location.search();\n   * // => {foo: 'bar', baz: 'xoxo'}\n   *\n   * // set foo to 'yipee'\n   * $location.search('foo', 'yipee');\n   * // $location.search() => {foo: 'yipee', baz: 'xoxo'}\n   * ```\n   *\n   * @param {string|Object.<string>|Object.<Array.<string>>} search New search params - string or\n   * hash object.\n   *\n   * When called with a single argument the method acts as a setter, setting the `search` component\n   * of `$location` to the specified value.\n   *\n   * If the argument is a hash object containing an array of values, these values will be encoded\n   * as duplicate search parameters in the url.\n   *\n   * @param {(string|Number|Array<string>|boolean)=} paramValue If `search` is a string or number, then `paramValue`\n   * will override only a single search property.\n   *\n   * If `paramValue` is an array, it will override the property of the `search` component of\n   * `$location` specified via the first argument.\n   *\n   * If `paramValue` is `null`, the property specified via the first argument will be deleted.\n   *\n   * If `paramValue` is `true`, the property specified via the first argument will be added with no\n   * value nor trailing equal sign.\n   *\n   * @return {Object} If called with no arguments returns the parsed `search` object. If called with\n   * one or more arguments returns `$location` object itself.\n   */\n  search: function(search, paramValue) {\n    switch (arguments.length) {\n      case 0:\n        return this.$$search;\n      case 1:\n        if (isString(search) || isNumber(search)) {\n          search = search.toString();\n          this.$$search = parseKeyValue(search);\n        } else if (isObject(search)) {\n          search = copy(search, {});\n          // remove object undefined or null properties\n          forEach(search, function(value, key) {\n            if (value == null) delete search[key];\n          });\n\n          this.$$search = search;\n        } else {\n          throw $locationMinErr('isrcharg',\n              'The first argument of the `$location#search()` call must be a string or an object.');\n        }\n        break;\n      default:\n        if (isUndefined(paramValue) || paramValue === null) {\n          delete this.$$search[search];\n        } else {\n          this.$$search[search] = paramValue;\n        }\n    }\n\n    this.$$compose();\n    return this;\n  },\n\n  /**\n   * @ngdoc method\n   * @name $location#hash\n   *\n   * @description\n   * This method is getter / setter.\n   *\n   * Return hash fragment when called without any parameter.\n   *\n   * Change hash fragment when called with parameter and return `$location`.\n   *\n   *\n   * ```js\n   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo#hashValue\n   * var hash = $location.hash();\n   * // => \"hashValue\"\n   * ```\n   *\n   * @param {(string|number)=} hash New hash fragment\n   * @return {string} hash\n   */\n  hash: locationGetterSetter('$$hash', function(hash) {\n    return hash !== null ? hash.toString() : '';\n  }),\n\n  /**\n   * @ngdoc method\n   * @name $location#replace\n   *\n   * @description\n   * If called, all changes to $location during current `$digest` will be replacing current history\n   * record, instead of adding new one.\n   */\n  replace: function() {\n    this.$$replace = true;\n    return this;\n  }\n};\n\nforEach([LocationHashbangInHtml5Url, LocationHashbangUrl, LocationHtml5Url], function(Location) {\n  Location.prototype = Object.create(locationPrototype);\n\n  /**\n   * @ngdoc method\n   * @name $location#state\n   *\n   * @description\n   * This method is getter / setter.\n   *\n   * Return the history state object when called without any parameter.\n   *\n   * Change the history state object when called with one parameter and return `$location`.\n   * The state object is later passed to `pushState` or `replaceState`.\n   *\n   * NOTE: This method is supported only in HTML5 mode and only in browsers supporting\n   * the HTML5 History API (i.e. methods `pushState` and `replaceState`). If you need to support\n   * older browsers (like IE9 or Android < 4.0), don't use this method.\n   *\n   * @param {object=} state State object for pushState or replaceState\n   * @return {object} state\n   */\n  Location.prototype.state = function(state) {\n    if (!arguments.length)\n      return this.$$state;\n\n    if (Location !== LocationHtml5Url || !this.$$html5) {\n      throw $locationMinErr('nostate', 'History API state support is available only ' +\n        'in HTML5 mode and only in browsers supporting HTML5 History API');\n    }\n    // The user might modify `stateObject` after invoking `$location.state(stateObject)`\n    // but we're changing the $$state reference to $browser.state() during the $digest\n    // so the modification window is narrow.\n    this.$$state = isUndefined(state) ? null : state;\n\n    return this;\n  };\n});\n\n\nfunction locationGetter(property) {\n  return function() {\n    return this[property];\n  };\n}\n\n\nfunction locationGetterSetter(property, preprocess) {\n  return function(value) {\n    if (isUndefined(value))\n      return this[property];\n\n    this[property] = preprocess(value);\n    this.$$compose();\n\n    return this;\n  };\n}\n\n\n/**\n * @ngdoc service\n * @name $location\n *\n * @requires $rootElement\n *\n * @description\n * The $location service parses the URL in the browser address bar (based on the\n * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL\n * available to your application. Changes to the URL in the address bar are reflected into\n * $location service and changes to $location are reflected into the browser address bar.\n *\n * **The $location service:**\n *\n * - Exposes the current URL in the browser address bar, so you can\n *   - Watch and observe the URL.\n *   - Change the URL.\n * - Synchronizes the URL with the browser when the user\n *   - Changes the address bar.\n *   - Clicks the back or forward button (or clicks a History link).\n *   - Clicks on a link.\n * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).\n *\n * For more information see {@link guide/$location Developer Guide: Using $location}\n */\n\n/**\n * @ngdoc provider\n * @name $locationProvider\n * @description\n * Use the `$locationProvider` to configure how the application deep linking paths are stored.\n */\nfunction $LocationProvider() {\n  var hashPrefix = '',\n      html5Mode = {\n        enabled: false,\n        requireBase: true,\n        rewriteLinks: true\n      };\n\n  /**\n   * @ngdoc method\n   * @name $locationProvider#hashPrefix\n   * @description\n   * @param {string=} prefix Prefix for hash part (containing path and search)\n   * @returns {*} current value if used as getter or itself (chaining) if used as setter\n   */\n  this.hashPrefix = function(prefix) {\n    if (isDefined(prefix)) {\n      hashPrefix = prefix;\n      return this;\n    } else {\n      return hashPrefix;\n    }\n  };\n\n  /**\n   * @ngdoc method\n   * @name $locationProvider#html5Mode\n   * @description\n   * @param {(boolean|Object)=} mode If boolean, sets `html5Mode.enabled` to value.\n   *   If object, sets `enabled`, `requireBase` and `rewriteLinks` to respective values. Supported\n   *   properties:\n   *   - **enabled** – `{boolean}` – (default: false) If true, will rely on `history.pushState` to\n   *     change urls where supported. Will fall back to hash-prefixed paths in browsers that do not\n   *     support `pushState`.\n   *   - **requireBase** - `{boolean}` - (default: `true`) When html5Mode is enabled, specifies\n   *     whether or not a <base> tag is required to be present. If `enabled` and `requireBase` are\n   *     true, and a base tag is not present, an error will be thrown when `$location` is injected.\n   *     See the {@link guide/$location $location guide for more information}\n   *   - **rewriteLinks** - `{boolean}` - (default: `true`) When html5Mode is enabled,\n   *     enables/disables url rewriting for relative links.\n   *\n   * @returns {Object} html5Mode object if used as getter or itself (chaining) if used as setter\n   */\n  this.html5Mode = function(mode) {\n    if (isBoolean(mode)) {\n      html5Mode.enabled = mode;\n      return this;\n    } else if (isObject(mode)) {\n\n      if (isBoolean(mode.enabled)) {\n        html5Mode.enabled = mode.enabled;\n      }\n\n      if (isBoolean(mode.requireBase)) {\n        html5Mode.requireBase = mode.requireBase;\n      }\n\n      if (isBoolean(mode.rewriteLinks)) {\n        html5Mode.rewriteLinks = mode.rewriteLinks;\n      }\n\n      return this;\n    } else {\n      return html5Mode;\n    }\n  };\n\n  /**\n   * @ngdoc event\n   * @name $location#$locationChangeStart\n   * @eventType broadcast on root scope\n   * @description\n   * Broadcasted before a URL will change.\n   *\n   * This change can be prevented by calling\n   * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more\n   * details about event object. Upon successful change\n   * {@link ng.$location#$locationChangeSuccess $locationChangeSuccess} is fired.\n   *\n   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when\n   * the browser supports the HTML5 History API.\n   *\n   * @param {Object} angularEvent Synthetic event object.\n   * @param {string} newUrl New URL\n   * @param {string=} oldUrl URL that was before it was changed.\n   * @param {string=} newState New history state object\n   * @param {string=} oldState History state object that was before it was changed.\n   */\n\n  /**\n   * @ngdoc event\n   * @name $location#$locationChangeSuccess\n   * @eventType broadcast on root scope\n   * @description\n   * Broadcasted after a URL was changed.\n   *\n   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when\n   * the browser supports the HTML5 History API.\n   *\n   * @param {Object} angularEvent Synthetic event object.\n   * @param {string} newUrl New URL\n   * @param {string=} oldUrl URL that was before it was changed.\n   * @param {string=} newState New history state object\n   * @param {string=} oldState History state object that was before it was changed.\n   */\n\n  this.$get = ['$rootScope', '$browser', '$sniffer', '$rootElement', '$window',\n      function($rootScope, $browser, $sniffer, $rootElement, $window) {\n    var $location,\n        LocationMode,\n        baseHref = $browser.baseHref(), // if base[href] is undefined, it defaults to ''\n        initialUrl = $browser.url(),\n        appBase;\n\n    if (html5Mode.enabled) {\n      if (!baseHref && html5Mode.requireBase) {\n        throw $locationMinErr('nobase',\n          \"$location in HTML5 mode requires a <base> tag to be present!\");\n      }\n      appBase = serverBase(initialUrl) + (baseHref || '/');\n      LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;\n    } else {\n      appBase = stripHash(initialUrl);\n      LocationMode = LocationHashbangUrl;\n    }\n    $location = new LocationMode(appBase, '#' + hashPrefix);\n    $location.$$parseLinkUrl(initialUrl, initialUrl);\n\n    $location.$$state = $browser.state();\n\n    var IGNORE_URI_REGEXP = /^\\s*(javascript|mailto):/i;\n\n    function setBrowserUrlWithFallback(url, replace, state) {\n      var oldUrl = $location.url();\n      var oldState = $location.$$state;\n      try {\n        $browser.url(url, replace, state);\n\n        // Make sure $location.state() returns referentially identical (not just deeply equal)\n        // state object; this makes possible quick checking if the state changed in the digest\n        // loop. Checking deep equality would be too expensive.\n        $location.$$state = $browser.state();\n      } catch (e) {\n        // Restore old values if pushState fails\n        $location.url(oldUrl);\n        $location.$$state = oldState;\n\n        throw e;\n      }\n    }\n\n    $rootElement.on('click', function(event) {\n      // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)\n      // currently we open nice url link and redirect then\n\n      if (!html5Mode.rewriteLinks || event.ctrlKey || event.metaKey || event.shiftKey || event.which == 2 || event.button == 2) return;\n\n      var elm = jqLite(event.target);\n\n      // traverse the DOM up to find first A tag\n      while (nodeName_(elm[0]) !== 'a') {\n        // ignore rewriting if no A tag (reached root element, or no parent - removed from document)\n        if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;\n      }\n\n      var absHref = elm.prop('href');\n      // get the actual href attribute - see\n      // http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx\n      var relHref = elm.attr('href') || elm.attr('xlink:href');\n\n      if (isObject(absHref) && absHref.toString() === '[object SVGAnimatedString]') {\n        // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during\n        // an animation.\n        absHref = urlResolve(absHref.animVal).href;\n      }\n\n      // Ignore when url is started with javascript: or mailto:\n      if (IGNORE_URI_REGEXP.test(absHref)) return;\n\n      if (absHref && !elm.attr('target') && !event.isDefaultPrevented()) {\n        if ($location.$$parseLinkUrl(absHref, relHref)) {\n          // We do a preventDefault for all urls that are part of the angular application,\n          // in html5mode and also without, so that we are able to abort navigation without\n          // getting double entries in the location history.\n          event.preventDefault();\n          // update location manually\n          if ($location.absUrl() != $browser.url()) {\n            $rootScope.$apply();\n            // hack to work around FF6 bug 684208 when scenario runner clicks on links\n            $window.angular['ff-684208-preventDefault'] = true;\n          }\n        }\n      }\n    });\n\n\n    // rewrite hashbang url <> html5 url\n    if (trimEmptyHash($location.absUrl()) != trimEmptyHash(initialUrl)) {\n      $browser.url($location.absUrl(), true);\n    }\n\n    var initializing = true;\n\n    // update $location when $browser url changes\n    $browser.onUrlChange(function(newUrl, newState) {\n      $rootScope.$evalAsync(function() {\n        var oldUrl = $location.absUrl();\n        var oldState = $location.$$state;\n        var defaultPrevented;\n\n        $location.$$parse(newUrl);\n        $location.$$state = newState;\n\n        defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,\n            newState, oldState).defaultPrevented;\n\n        // if the location was changed by a `$locationChangeStart` handler then stop\n        // processing this location change\n        if ($location.absUrl() !== newUrl) return;\n\n        if (defaultPrevented) {\n          $location.$$parse(oldUrl);\n          $location.$$state = oldState;\n          setBrowserUrlWithFallback(oldUrl, false, oldState);\n        } else {\n          initializing = false;\n          afterLocationChange(oldUrl, oldState);\n        }\n      });\n      if (!$rootScope.$$phase) $rootScope.$digest();\n    });\n\n    // update browser\n    $rootScope.$watch(function $locationWatch() {\n      var oldUrl = trimEmptyHash($browser.url());\n      var newUrl = trimEmptyHash($location.absUrl());\n      var oldState = $browser.state();\n      var currentReplace = $location.$$replace;\n      var urlOrStateChanged = oldUrl !== newUrl ||\n        ($location.$$html5 && $sniffer.history && oldState !== $location.$$state);\n\n      if (initializing || urlOrStateChanged) {\n        initializing = false;\n\n        $rootScope.$evalAsync(function() {\n          var newUrl = $location.absUrl();\n          var defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,\n              $location.$$state, oldState).defaultPrevented;\n\n          // if the location was changed by a `$locationChangeStart` handler then stop\n          // processing this location change\n          if ($location.absUrl() !== newUrl) return;\n\n          if (defaultPrevented) {\n            $location.$$parse(oldUrl);\n            $location.$$state = oldState;\n          } else {\n            if (urlOrStateChanged) {\n              setBrowserUrlWithFallback(newUrl, currentReplace,\n                                        oldState === $location.$$state ? null : $location.$$state);\n            }\n            afterLocationChange(oldUrl, oldState);\n          }\n        });\n      }\n\n      $location.$$replace = false;\n\n      // we don't need to return anything because $evalAsync will make the digest loop dirty when\n      // there is a change\n    });\n\n    return $location;\n\n    function afterLocationChange(oldUrl, oldState) {\n      $rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl,\n        $location.$$state, oldState);\n    }\n}];\n}\n\n/**\n * @ngdoc service\n * @name $log\n * @requires $window\n *\n * @description\n * Simple service for logging. Default implementation safely writes the message\n * into the browser's console (if present).\n *\n * The main purpose of this service is to simplify debugging and troubleshooting.\n *\n * The default is to log `debug` messages. You can use\n * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.\n *\n * @example\n   <example module=\"logExample\">\n     <file name=\"script.js\">\n       angular.module('logExample', [])\n         .controller('LogController', ['$scope', '$log', function($scope, $log) {\n           $scope.$log = $log;\n           $scope.message = 'Hello World!';\n         }]);\n     </file>\n     <file name=\"index.html\">\n       <div ng-controller=\"LogController\">\n         <p>Reload this page with open console, enter text and hit the log button...</p>\n         Message:\n         <input type=\"text\" ng-model=\"message\"/>\n         <button ng-click=\"$log.log(message)\">log</button>\n         <button ng-click=\"$log.warn(message)\">warn</button>\n         <button ng-click=\"$log.info(message)\">info</button>\n         <button ng-click=\"$log.error(message)\">error</button>\n         <button ng-click=\"$log.debug(message)\">debug</button>\n       </div>\n     </file>\n   </example>\n */\n\n/**\n * @ngdoc provider\n * @name $logProvider\n * @description\n * Use the `$logProvider` to configure how the application logs messages\n */\nfunction $LogProvider() {\n  var debug = true,\n      self = this;\n\n  /**\n   * @ngdoc method\n   * @name $logProvider#debugEnabled\n   * @description\n   * @param {boolean=} flag enable or disable debug level messages\n   * @returns {*} current value if used as getter or itself (chaining) if used as setter\n   */\n  this.debugEnabled = function(flag) {\n    if (isDefined(flag)) {\n      debug = flag;\n    return this;\n    } else {\n      return debug;\n    }\n  };\n\n  this.$get = ['$window', function($window) {\n    return {\n      /**\n       * @ngdoc method\n       * @name $log#log\n       *\n       * @description\n       * Write a log message\n       */\n      log: consoleLog('log'),\n\n      /**\n       * @ngdoc method\n       * @name $log#info\n       *\n       * @description\n       * Write an information message\n       */\n      info: consoleLog('info'),\n\n      /**\n       * @ngdoc method\n       * @name $log#warn\n       *\n       * @description\n       * Write a warning message\n       */\n      warn: consoleLog('warn'),\n\n      /**\n       * @ngdoc method\n       * @name $log#error\n       *\n       * @description\n       * Write an error message\n       */\n      error: consoleLog('error'),\n\n      /**\n       * @ngdoc method\n       * @name $log#debug\n       *\n       * @description\n       * Write a debug message\n       */\n      debug: (function() {\n        var fn = consoleLog('debug');\n\n        return function() {\n          if (debug) {\n            fn.apply(self, arguments);\n          }\n        };\n      }())\n    };\n\n    function formatError(arg) {\n      if (arg instanceof Error) {\n        if (arg.stack) {\n          arg = (arg.message && arg.stack.indexOf(arg.message) === -1)\n              ? 'Error: ' + arg.message + '\\n' + arg.stack\n              : arg.stack;\n        } else if (arg.sourceURL) {\n          arg = arg.message + '\\n' + arg.sourceURL + ':' + arg.line;\n        }\n      }\n      return arg;\n    }\n\n    function consoleLog(type) {\n      var console = $window.console || {},\n          logFn = console[type] || console.log || noop,\n          hasApply = false;\n\n      // Note: reading logFn.apply throws an error in IE11 in IE8 document mode.\n      // The reason behind this is that console.log has type \"object\" in IE8...\n      try {\n        hasApply = !!logFn.apply;\n      } catch (e) {}\n\n      if (hasApply) {\n        return function() {\n          var args = [];\n          forEach(arguments, function(arg) {\n            args.push(formatError(arg));\n          });\n          return logFn.apply(console, args);\n        };\n      }\n\n      // we are IE which either doesn't have window.console => this is noop and we do nothing,\n      // or we are IE where console.log doesn't have apply so we log at least first 2 args\n      return function(arg1, arg2) {\n        logFn(arg1, arg2 == null ? '' : arg2);\n      };\n    }\n  }];\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *     Any commits to this file should be reviewed with security in mind.  *\n *   Changes to this file can potentially create security vulnerabilities. *\n *          An approval from 2 Core members with history of modifying      *\n *                         this file is required.                          *\n *                                                                         *\n *  Does the change somehow allow for arbitrary javascript to be executed? *\n *    Or allows for someone to change the prototype of built-in objects?   *\n *     Or gives undesired access to variables likes document or window?    *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\nvar $parseMinErr = minErr('$parse');\n\n// Sandboxing Angular Expressions\n// ------------------------------\n// Angular expressions are generally considered safe because these expressions only have direct\n// access to `$scope` and locals. However, one can obtain the ability to execute arbitrary JS code by\n// obtaining a reference to native JS functions such as the Function constructor.\n//\n// As an example, consider the following Angular expression:\n//\n//   {}.toString.constructor('alert(\"evil JS code\")')\n//\n// This sandboxing technique is not perfect and doesn't aim to be. The goal is to prevent exploits\n// against the expression language, but not to prevent exploits that were enabled by exposing\n// sensitive JavaScript or browser APIs on Scope. Exposing such objects on a Scope is never a good\n// practice and therefore we are not even trying to protect against interaction with an object\n// explicitly exposed in this way.\n//\n// In general, it is not possible to access a Window object from an angular expression unless a\n// window or some DOM object that has a reference to window is published onto a Scope.\n// Similarly we prevent invocations of function known to be dangerous, as well as assignments to\n// native objects.\n//\n// See https://docs.angularjs.org/guide/security\n\n\nfunction ensureSafeMemberName(name, fullExpression) {\n  if (name === \"__defineGetter__\" || name === \"__defineSetter__\"\n      || name === \"__lookupGetter__\" || name === \"__lookupSetter__\"\n      || name === \"__proto__\") {\n    throw $parseMinErr('isecfld',\n        'Attempting to access a disallowed field in Angular expressions! '\n        + 'Expression: {0}', fullExpression);\n  }\n  return name;\n}\n\nfunction ensureSafeObject(obj, fullExpression) {\n  // nifty check if obj is Function that is fast and works across iframes and other contexts\n  if (obj) {\n    if (obj.constructor === obj) {\n      throw $parseMinErr('isecfn',\n          'Referencing Function in Angular expressions is disallowed! Expression: {0}',\n          fullExpression);\n    } else if (// isWindow(obj)\n        obj.window === obj) {\n      throw $parseMinErr('isecwindow',\n          'Referencing the Window in Angular expressions is disallowed! Expression: {0}',\n          fullExpression);\n    } else if (// isElement(obj)\n        obj.children && (obj.nodeName || (obj.prop && obj.attr && obj.find))) {\n      throw $parseMinErr('isecdom',\n          'Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}',\n          fullExpression);\n    } else if (// block Object so that we can't get hold of dangerous Object.* methods\n        obj === Object) {\n      throw $parseMinErr('isecobj',\n          'Referencing Object in Angular expressions is disallowed! Expression: {0}',\n          fullExpression);\n    }\n  }\n  return obj;\n}\n\nvar CALL = Function.prototype.call;\nvar APPLY = Function.prototype.apply;\nvar BIND = Function.prototype.bind;\n\nfunction ensureSafeFunction(obj, fullExpression) {\n  if (obj) {\n    if (obj.constructor === obj) {\n      throw $parseMinErr('isecfn',\n        'Referencing Function in Angular expressions is disallowed! Expression: {0}',\n        fullExpression);\n    } else if (obj === CALL || obj === APPLY || obj === BIND) {\n      throw $parseMinErr('isecff',\n        'Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}',\n        fullExpression);\n    }\n  }\n}\n\n//Keyword constants\nvar CONSTANTS = createMap();\nforEach({\n  'null': function() { return null; },\n  'true': function() { return true; },\n  'false': function() { return false; },\n  'undefined': function() {}\n}, function(constantGetter, name) {\n  constantGetter.constant = constantGetter.literal = constantGetter.sharedGetter = true;\n  CONSTANTS[name] = constantGetter;\n});\n\n//Not quite a constant, but can be lex/parsed the same\nCONSTANTS['this'] = function(self) { return self; };\nCONSTANTS['this'].sharedGetter = true;\n\n\n//Operators - will be wrapped by binaryFn/unaryFn/assignment/filter\nvar OPERATORS = extend(createMap(), {\n    '+':function(self, locals, a, b) {\n      a=a(self, locals); b=b(self, locals);\n      if (isDefined(a)) {\n        if (isDefined(b)) {\n          return a + b;\n        }\n        return a;\n      }\n      return isDefined(b) ? b : undefined;},\n    '-':function(self, locals, a, b) {\n          a=a(self, locals); b=b(self, locals);\n          return (isDefined(a) ? a : 0) - (isDefined(b) ? b : 0);\n        },\n    '*':function(self, locals, a, b) {return a(self, locals) * b(self, locals);},\n    '/':function(self, locals, a, b) {return a(self, locals) / b(self, locals);},\n    '%':function(self, locals, a, b) {return a(self, locals) % b(self, locals);},\n    '===':function(self, locals, a, b) {return a(self, locals) === b(self, locals);},\n    '!==':function(self, locals, a, b) {return a(self, locals) !== b(self, locals);},\n    '==':function(self, locals, a, b) {return a(self, locals) == b(self, locals);},\n    '!=':function(self, locals, a, b) {return a(self, locals) != b(self, locals);},\n    '<':function(self, locals, a, b) {return a(self, locals) < b(self, locals);},\n    '>':function(self, locals, a, b) {return a(self, locals) > b(self, locals);},\n    '<=':function(self, locals, a, b) {return a(self, locals) <= b(self, locals);},\n    '>=':function(self, locals, a, b) {return a(self, locals) >= b(self, locals);},\n    '&&':function(self, locals, a, b) {return a(self, locals) && b(self, locals);},\n    '||':function(self, locals, a, b) {return a(self, locals) || b(self, locals);},\n    '!':function(self, locals, a) {return !a(self, locals);},\n\n    //Tokenized as operators but parsed as assignment/filters\n    '=':true,\n    '|':true\n});\nvar ESCAPE = {\"n\":\"\\n\", \"f\":\"\\f\", \"r\":\"\\r\", \"t\":\"\\t\", \"v\":\"\\v\", \"'\":\"'\", '\"':'\"'};\n\n\n/////////////////////////////////////////\n\n\n/**\n * @constructor\n */\nvar Lexer = function(options) {\n  this.options = options;\n};\n\nLexer.prototype = {\n  constructor: Lexer,\n\n  lex: function(text) {\n    this.text = text;\n    this.index = 0;\n    this.tokens = [];\n\n    while (this.index < this.text.length) {\n      var ch = this.text.charAt(this.index);\n      if (ch === '\"' || ch === \"'\") {\n        this.readString(ch);\n      } else if (this.isNumber(ch) || ch === '.' && this.isNumber(this.peek())) {\n        this.readNumber();\n      } else if (this.isIdent(ch)) {\n        this.readIdent();\n      } else if (this.is(ch, '(){}[].,;:?')) {\n        this.tokens.push({index: this.index, text: ch});\n        this.index++;\n      } else if (this.isWhitespace(ch)) {\n        this.index++;\n      } else {\n        var ch2 = ch + this.peek();\n        var ch3 = ch2 + this.peek(2);\n        var op1 = OPERATORS[ch];\n        var op2 = OPERATORS[ch2];\n        var op3 = OPERATORS[ch3];\n        if (op1 || op2 || op3) {\n          var token = op3 ? ch3 : (op2 ? ch2 : ch);\n          this.tokens.push({index: this.index, text: token, operator: true});\n          this.index += token.length;\n        } else {\n          this.throwError('Unexpected next character ', this.index, this.index + 1);\n        }\n      }\n    }\n    return this.tokens;\n  },\n\n  is: function(ch, chars) {\n    return chars.indexOf(ch) !== -1;\n  },\n\n  peek: function(i) {\n    var num = i || 1;\n    return (this.index + num < this.text.length) ? this.text.charAt(this.index + num) : false;\n  },\n\n  isNumber: function(ch) {\n    return ('0' <= ch && ch <= '9') && typeof ch === \"string\";\n  },\n\n  isWhitespace: function(ch) {\n    // IE treats non-breaking space as \\u00A0\n    return (ch === ' ' || ch === '\\r' || ch === '\\t' ||\n            ch === '\\n' || ch === '\\v' || ch === '\\u00A0');\n  },\n\n  isIdent: function(ch) {\n    return ('a' <= ch && ch <= 'z' ||\n            'A' <= ch && ch <= 'Z' ||\n            '_' === ch || ch === '$');\n  },\n\n  isExpOperator: function(ch) {\n    return (ch === '-' || ch === '+' || this.isNumber(ch));\n  },\n\n  throwError: function(error, start, end) {\n    end = end || this.index;\n    var colStr = (isDefined(start)\n            ? 's ' + start +  '-' + this.index + ' [' + this.text.substring(start, end) + ']'\n            : ' ' + end);\n    throw $parseMinErr('lexerr', 'Lexer Error: {0} at column{1} in expression [{2}].',\n        error, colStr, this.text);\n  },\n\n  readNumber: function() {\n    var number = '';\n    var start = this.index;\n    while (this.index < this.text.length) {\n      var ch = lowercase(this.text.charAt(this.index));\n      if (ch == '.' || this.isNumber(ch)) {\n        number += ch;\n      } else {\n        var peekCh = this.peek();\n        if (ch == 'e' && this.isExpOperator(peekCh)) {\n          number += ch;\n        } else if (this.isExpOperator(ch) &&\n            peekCh && this.isNumber(peekCh) &&\n            number.charAt(number.length - 1) == 'e') {\n          number += ch;\n        } else if (this.isExpOperator(ch) &&\n            (!peekCh || !this.isNumber(peekCh)) &&\n            number.charAt(number.length - 1) == 'e') {\n          this.throwError('Invalid exponent');\n        } else {\n          break;\n        }\n      }\n      this.index++;\n    }\n    this.tokens.push({\n      index: start,\n      text: number,\n      constant: true,\n      value: Number(number)\n    });\n  },\n\n  readIdent: function() {\n    var start = this.index;\n    while (this.index < this.text.length) {\n      var ch = this.text.charAt(this.index);\n      if (!(this.isIdent(ch) || this.isNumber(ch))) {\n        break;\n      }\n      this.index++;\n    }\n    this.tokens.push({\n      index: start,\n      text: this.text.slice(start, this.index),\n      identifier: true\n    });\n  },\n\n  readString: function(quote) {\n    var start = this.index;\n    this.index++;\n    var string = '';\n    var rawString = quote;\n    var escape = false;\n    while (this.index < this.text.length) {\n      var ch = this.text.charAt(this.index);\n      rawString += ch;\n      if (escape) {\n        if (ch === 'u') {\n          var hex = this.text.substring(this.index + 1, this.index + 5);\n          if (!hex.match(/[\\da-f]{4}/i))\n            this.throwError('Invalid unicode escape [\\\\u' + hex + ']');\n          this.index += 4;\n          string += String.fromCharCode(parseInt(hex, 16));\n        } else {\n          var rep = ESCAPE[ch];\n          string = string + (rep || ch);\n        }\n        escape = false;\n      } else if (ch === '\\\\') {\n        escape = true;\n      } else if (ch === quote) {\n        this.index++;\n        this.tokens.push({\n          index: start,\n          text: rawString,\n          constant: true,\n          value: string\n        });\n        return;\n      } else {\n        string += ch;\n      }\n      this.index++;\n    }\n    this.throwError('Unterminated quote', start);\n  }\n};\n\n\nfunction isConstant(exp) {\n  return exp.constant;\n}\n\n/**\n * @constructor\n */\nvar Parser = function(lexer, $filter, options) {\n  this.lexer = lexer;\n  this.$filter = $filter;\n  this.options = options;\n};\n\nParser.ZERO = extend(function() {\n  return 0;\n}, {\n  sharedGetter: true,\n  constant: true\n});\n\nParser.prototype = {\n  constructor: Parser,\n\n  parse: function(text) {\n    this.text = text;\n    this.tokens = this.lexer.lex(text);\n\n    var value = this.statements();\n\n    if (this.tokens.length !== 0) {\n      this.throwError('is an unexpected token', this.tokens[0]);\n    }\n\n    value.literal = !!value.literal;\n    value.constant = !!value.constant;\n\n    return value;\n  },\n\n  primary: function() {\n    var primary;\n    if (this.expect('(')) {\n      primary = this.filterChain();\n      this.consume(')');\n    } else if (this.expect('[')) {\n      primary = this.arrayDeclaration();\n    } else if (this.expect('{')) {\n      primary = this.object();\n    } else if (this.peek().identifier && this.peek().text in CONSTANTS) {\n      primary = CONSTANTS[this.consume().text];\n    } else if (this.peek().identifier) {\n      primary = this.identifier();\n    } else if (this.peek().constant) {\n      primary = this.constant();\n    } else {\n      this.throwError('not a primary expression', this.peek());\n    }\n\n    var next, context;\n    while ((next = this.expect('(', '[', '.'))) {\n      if (next.text === '(') {\n        primary = this.functionCall(primary, context);\n        context = null;\n      } else if (next.text === '[') {\n        context = primary;\n        primary = this.objectIndex(primary);\n      } else if (next.text === '.') {\n        context = primary;\n        primary = this.fieldAccess(primary);\n      } else {\n        this.throwError('IMPOSSIBLE');\n      }\n    }\n    return primary;\n  },\n\n  throwError: function(msg, token) {\n    throw $parseMinErr('syntax',\n        'Syntax Error: Token \\'{0}\\' {1} at column {2} of the expression [{3}] starting at [{4}].',\n          token.text, msg, (token.index + 1), this.text, this.text.substring(token.index));\n  },\n\n  peekToken: function() {\n    if (this.tokens.length === 0)\n      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);\n    return this.tokens[0];\n  },\n\n  peek: function(e1, e2, e3, e4) {\n    return this.peekAhead(0, e1, e2, e3, e4);\n  },\n  peekAhead: function(i, e1, e2, e3, e4) {\n    if (this.tokens.length > i) {\n      var token = this.tokens[i];\n      var t = token.text;\n      if (t === e1 || t === e2 || t === e3 || t === e4 ||\n          (!e1 && !e2 && !e3 && !e4)) {\n        return token;\n      }\n    }\n    return false;\n  },\n\n  expect: function(e1, e2, e3, e4) {\n    var token = this.peek(e1, e2, e3, e4);\n    if (token) {\n      this.tokens.shift();\n      return token;\n    }\n    return false;\n  },\n\n  consume: function(e1) {\n    if (this.tokens.length === 0) {\n      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);\n    }\n\n    var token = this.expect(e1);\n    if (!token) {\n      this.throwError('is unexpected, expecting [' + e1 + ']', this.peek());\n    }\n    return token;\n  },\n\n  unaryFn: function(op, right) {\n    var fn = OPERATORS[op];\n    return extend(function $parseUnaryFn(self, locals) {\n      return fn(self, locals, right);\n    }, {\n      constant:right.constant,\n      inputs: [right]\n    });\n  },\n\n  binaryFn: function(left, op, right, isBranching) {\n    var fn = OPERATORS[op];\n    return extend(function $parseBinaryFn(self, locals) {\n      return fn(self, locals, left, right);\n    }, {\n      constant: left.constant && right.constant,\n      inputs: !isBranching && [left, right]\n    });\n  },\n\n  identifier: function() {\n    var id = this.consume().text;\n\n    //Continue reading each `.identifier` unless it is a method invocation\n    while (this.peek('.') && this.peekAhead(1).identifier && !this.peekAhead(2, '(')) {\n      id += this.consume().text + this.consume().text;\n    }\n\n    return getterFn(id, this.options, this.text);\n  },\n\n  constant: function() {\n    var value = this.consume().value;\n\n    return extend(function $parseConstant() {\n      return value;\n    }, {\n      constant: true,\n      literal: true\n    });\n  },\n\n  statements: function() {\n    var statements = [];\n    while (true) {\n      if (this.tokens.length > 0 && !this.peek('}', ')', ';', ']'))\n        statements.push(this.filterChain());\n      if (!this.expect(';')) {\n        // optimize for the common case where there is only one statement.\n        // TODO(size): maybe we should not support multiple statements?\n        return (statements.length === 1)\n            ? statements[0]\n            : function $parseStatements(self, locals) {\n                var value;\n                for (var i = 0, ii = statements.length; i < ii; i++) {\n                  value = statements[i](self, locals);\n                }\n                return value;\n              };\n      }\n    }\n  },\n\n  filterChain: function() {\n    var left = this.expression();\n    var token;\n    while ((token = this.expect('|'))) {\n      left = this.filter(left);\n    }\n    return left;\n  },\n\n  filter: function(inputFn) {\n    var fn = this.$filter(this.consume().text);\n    var argsFn;\n    var args;\n\n    if (this.peek(':')) {\n      argsFn = [];\n      args = []; // we can safely reuse the array\n      while (this.expect(':')) {\n        argsFn.push(this.expression());\n      }\n    }\n\n    var inputs = [inputFn].concat(argsFn || []);\n\n    return extend(function $parseFilter(self, locals) {\n      var input = inputFn(self, locals);\n      if (args) {\n        args[0] = input;\n\n        var i = argsFn.length;\n        while (i--) {\n          args[i + 1] = argsFn[i](self, locals);\n        }\n\n        return fn.apply(undefined, args);\n      }\n\n      return fn(input);\n    }, {\n      constant: !fn.$stateful && inputs.every(isConstant),\n      inputs: !fn.$stateful && inputs\n    });\n  },\n\n  expression: function() {\n    return this.assignment();\n  },\n\n  assignment: function() {\n    var left = this.ternary();\n    var right;\n    var token;\n    if ((token = this.expect('='))) {\n      if (!left.assign) {\n        this.throwError('implies assignment but [' +\n            this.text.substring(0, token.index) + '] can not be assigned to', token);\n      }\n      right = this.ternary();\n      return extend(function $parseAssignment(scope, locals) {\n        return left.assign(scope, right(scope, locals), locals);\n      }, {\n        inputs: [left, right]\n      });\n    }\n    return left;\n  },\n\n  ternary: function() {\n    var left = this.logicalOR();\n    var middle;\n    var token;\n    if ((token = this.expect('?'))) {\n      middle = this.assignment();\n      if (this.consume(':')) {\n        var right = this.assignment();\n\n        return extend(function $parseTernary(self, locals) {\n          return left(self, locals) ? middle(self, locals) : right(self, locals);\n        }, {\n          constant: left.constant && middle.constant && right.constant\n        });\n      }\n    }\n\n    return left;\n  },\n\n  logicalOR: function() {\n    var left = this.logicalAND();\n    var token;\n    while ((token = this.expect('||'))) {\n      left = this.binaryFn(left, token.text, this.logicalAND(), true);\n    }\n    return left;\n  },\n\n  logicalAND: function() {\n    var left = this.equality();\n    var token;\n    while ((token = this.expect('&&'))) {\n      left = this.binaryFn(left, token.text, this.equality(), true);\n    }\n    return left;\n  },\n\n  equality: function() {\n    var left = this.relational();\n    var token;\n    while ((token = this.expect('==','!=','===','!=='))) {\n      left = this.binaryFn(left, token.text, this.relational());\n    }\n    return left;\n  },\n\n  relational: function() {\n    var left = this.additive();\n    var token;\n    while ((token = this.expect('<', '>', '<=', '>='))) {\n      left = this.binaryFn(left, token.text, this.additive());\n    }\n    return left;\n  },\n\n  additive: function() {\n    var left = this.multiplicative();\n    var token;\n    while ((token = this.expect('+','-'))) {\n      left = this.binaryFn(left, token.text, this.multiplicative());\n    }\n    return left;\n  },\n\n  multiplicative: function() {\n    var left = this.unary();\n    var token;\n    while ((token = this.expect('*','/','%'))) {\n      left = this.binaryFn(left, token.text, this.unary());\n    }\n    return left;\n  },\n\n  unary: function() {\n    var token;\n    if (this.expect('+')) {\n      return this.primary();\n    } else if ((token = this.expect('-'))) {\n      return this.binaryFn(Parser.ZERO, token.text, this.unary());\n    } else if ((token = this.expect('!'))) {\n      return this.unaryFn(token.text, this.unary());\n    } else {\n      return this.primary();\n    }\n  },\n\n  fieldAccess: function(object) {\n    var getter = this.identifier();\n\n    return extend(function $parseFieldAccess(scope, locals, self) {\n      var o = self || object(scope, locals);\n      return (o == null) ? undefined : getter(o);\n    }, {\n      assign: function(scope, value, locals) {\n        var o = object(scope, locals);\n        if (!o) object.assign(scope, o = {}, locals);\n        return getter.assign(o, value);\n      }\n    });\n  },\n\n  objectIndex: function(obj) {\n    var expression = this.text;\n\n    var indexFn = this.expression();\n    this.consume(']');\n\n    return extend(function $parseObjectIndex(self, locals) {\n      var o = obj(self, locals),\n          i = indexFn(self, locals),\n          v;\n\n      ensureSafeMemberName(i, expression);\n      if (!o) return undefined;\n      v = ensureSafeObject(o[i], expression);\n      return v;\n    }, {\n      assign: function(self, value, locals) {\n        var key = ensureSafeMemberName(indexFn(self, locals), expression);\n        // prevent overwriting of Function.constructor which would break ensureSafeObject check\n        var o = ensureSafeObject(obj(self, locals), expression);\n        if (!o) obj.assign(self, o = {}, locals);\n        return o[key] = value;\n      }\n    });\n  },\n\n  functionCall: function(fnGetter, contextGetter) {\n    var argsFn = [];\n    if (this.peekToken().text !== ')') {\n      do {\n        argsFn.push(this.expression());\n      } while (this.expect(','));\n    }\n    this.consume(')');\n\n    var expressionText = this.text;\n    // we can safely reuse the array across invocations\n    var args = argsFn.length ? [] : null;\n\n    return function $parseFunctionCall(scope, locals) {\n      var context = contextGetter ? contextGetter(scope, locals) : isDefined(contextGetter) ? undefined : scope;\n      var fn = fnGetter(scope, locals, context) || noop;\n\n      if (args) {\n        var i = argsFn.length;\n        while (i--) {\n          args[i] = ensureSafeObject(argsFn[i](scope, locals), expressionText);\n        }\n      }\n\n      ensureSafeObject(context, expressionText);\n      ensureSafeFunction(fn, expressionText);\n\n      // IE doesn't have apply for some native functions\n      var v = fn.apply\n            ? fn.apply(context, args)\n            : fn(args[0], args[1], args[2], args[3], args[4]);\n\n      if (args) {\n        // Free-up the memory (arguments of the last function call).\n        args.length = 0;\n      }\n\n      return ensureSafeObject(v, expressionText);\n      };\n  },\n\n  // This is used with json array declaration\n  arrayDeclaration: function() {\n    var elementFns = [];\n    if (this.peekToken().text !== ']') {\n      do {\n        if (this.peek(']')) {\n          // Support trailing commas per ES5.1.\n          break;\n        }\n        elementFns.push(this.expression());\n      } while (this.expect(','));\n    }\n    this.consume(']');\n\n    return extend(function $parseArrayLiteral(self, locals) {\n      var array = [];\n      for (var i = 0, ii = elementFns.length; i < ii; i++) {\n        array.push(elementFns[i](self, locals));\n      }\n      return array;\n    }, {\n      literal: true,\n      constant: elementFns.every(isConstant),\n      inputs: elementFns\n    });\n  },\n\n  object: function() {\n    var keys = [], valueFns = [];\n    if (this.peekToken().text !== '}') {\n      do {\n        if (this.peek('}')) {\n          // Support trailing commas per ES5.1.\n          break;\n        }\n        var token = this.consume();\n        if (token.constant) {\n          keys.push(token.value);\n        } else if (token.identifier) {\n          keys.push(token.text);\n        } else {\n          this.throwError(\"invalid key\", token);\n        }\n        this.consume(':');\n        valueFns.push(this.expression());\n      } while (this.expect(','));\n    }\n    this.consume('}');\n\n    return extend(function $parseObjectLiteral(self, locals) {\n      var object = {};\n      for (var i = 0, ii = valueFns.length; i < ii; i++) {\n        object[keys[i]] = valueFns[i](self, locals);\n      }\n      return object;\n    }, {\n      literal: true,\n      constant: valueFns.every(isConstant),\n      inputs: valueFns\n    });\n  }\n};\n\n\n//////////////////////////////////////////////////\n// Parser helper functions\n//////////////////////////////////////////////////\n\nfunction setter(obj, locals, path, setValue, fullExp) {\n  ensureSafeObject(obj, fullExp);\n  ensureSafeObject(locals, fullExp);\n\n  var element = path.split('.'), key;\n  for (var i = 0; element.length > 1; i++) {\n    key = ensureSafeMemberName(element.shift(), fullExp);\n    var propertyObj = (i === 0 && locals && locals[key]) || obj[key];\n    if (!propertyObj) {\n      propertyObj = {};\n      obj[key] = propertyObj;\n    }\n    obj = ensureSafeObject(propertyObj, fullExp);\n  }\n  key = ensureSafeMemberName(element.shift(), fullExp);\n  ensureSafeObject(obj[key], fullExp);\n  obj[key] = setValue;\n  return setValue;\n}\n\nvar getterFnCacheDefault = createMap();\nvar getterFnCacheExpensive = createMap();\n\nfunction isPossiblyDangerousMemberName(name) {\n  return name == 'constructor';\n}\n\n/**\n * Implementation of the \"Black Hole\" variant from:\n * - http://jsperf.com/angularjs-parse-getter/4\n * - http://jsperf.com/path-evaluation-simplified/7\n */\nfunction cspSafeGetterFn(key0, key1, key2, key3, key4, fullExp, expensiveChecks) {\n  ensureSafeMemberName(key0, fullExp);\n  ensureSafeMemberName(key1, fullExp);\n  ensureSafeMemberName(key2, fullExp);\n  ensureSafeMemberName(key3, fullExp);\n  ensureSafeMemberName(key4, fullExp);\n  var eso = function(o) {\n    return ensureSafeObject(o, fullExp);\n  };\n  var eso0 = (expensiveChecks || isPossiblyDangerousMemberName(key0)) ? eso : identity;\n  var eso1 = (expensiveChecks || isPossiblyDangerousMemberName(key1)) ? eso : identity;\n  var eso2 = (expensiveChecks || isPossiblyDangerousMemberName(key2)) ? eso : identity;\n  var eso3 = (expensiveChecks || isPossiblyDangerousMemberName(key3)) ? eso : identity;\n  var eso4 = (expensiveChecks || isPossiblyDangerousMemberName(key4)) ? eso : identity;\n\n  return function cspSafeGetter(scope, locals) {\n    var pathVal = (locals && locals.hasOwnProperty(key0)) ? locals : scope;\n\n    if (pathVal == null) return pathVal;\n    pathVal = eso0(pathVal[key0]);\n\n    if (!key1) return pathVal;\n    if (pathVal == null) return undefined;\n    pathVal = eso1(pathVal[key1]);\n\n    if (!key2) return pathVal;\n    if (pathVal == null) return undefined;\n    pathVal = eso2(pathVal[key2]);\n\n    if (!key3) return pathVal;\n    if (pathVal == null) return undefined;\n    pathVal = eso3(pathVal[key3]);\n\n    if (!key4) return pathVal;\n    if (pathVal == null) return undefined;\n    pathVal = eso4(pathVal[key4]);\n\n    return pathVal;\n  };\n}\n\nfunction getterFnWithEnsureSafeObject(fn, fullExpression) {\n  return function(s, l) {\n    return fn(s, l, ensureSafeObject, fullExpression);\n  };\n}\n\nfunction getterFn(path, options, fullExp) {\n  var expensiveChecks = options.expensiveChecks;\n  var getterFnCache = (expensiveChecks ? getterFnCacheExpensive : getterFnCacheDefault);\n  var fn = getterFnCache[path];\n  if (fn) return fn;\n\n\n  var pathKeys = path.split('.'),\n      pathKeysLength = pathKeys.length;\n\n  // http://jsperf.com/angularjs-parse-getter/6\n  if (options.csp) {\n    if (pathKeysLength < 6) {\n      fn = cspSafeGetterFn(pathKeys[0], pathKeys[1], pathKeys[2], pathKeys[3], pathKeys[4], fullExp, expensiveChecks);\n    } else {\n      fn = function cspSafeGetter(scope, locals) {\n        var i = 0, val;\n        do {\n          val = cspSafeGetterFn(pathKeys[i++], pathKeys[i++], pathKeys[i++], pathKeys[i++],\n                                pathKeys[i++], fullExp, expensiveChecks)(scope, locals);\n\n          locals = undefined; // clear after first iteration\n          scope = val;\n        } while (i < pathKeysLength);\n        return val;\n      };\n    }\n  } else {\n    var code = '';\n    if (expensiveChecks) {\n      code += 's = eso(s, fe);\\nl = eso(l, fe);\\n';\n    }\n    var needsEnsureSafeObject = expensiveChecks;\n    forEach(pathKeys, function(key, index) {\n      ensureSafeMemberName(key, fullExp);\n      var lookupJs = (index\n                      // we simply dereference 's' on any .dot notation\n                      ? 's'\n                      // but if we are first then we check locals first, and if so read it first\n                      : '((l&&l.hasOwnProperty(\"' + key + '\"))?l:s)') + '.' + key;\n      if (expensiveChecks || isPossiblyDangerousMemberName(key)) {\n        lookupJs = 'eso(' + lookupJs + ', fe)';\n        needsEnsureSafeObject = true;\n      }\n      code += 'if(s == null) return undefined;\\n' +\n              's=' + lookupJs + ';\\n';\n    });\n    code += 'return s;';\n\n    /* jshint -W054 */\n    var evaledFnGetter = new Function('s', 'l', 'eso', 'fe', code); // s=scope, l=locals, eso=ensureSafeObject\n    /* jshint +W054 */\n    evaledFnGetter.toString = valueFn(code);\n    if (needsEnsureSafeObject) {\n      evaledFnGetter = getterFnWithEnsureSafeObject(evaledFnGetter, fullExp);\n    }\n    fn = evaledFnGetter;\n  }\n\n  fn.sharedGetter = true;\n  fn.assign = function(self, value, locals) {\n    return setter(self, locals, path, value, path);\n  };\n  getterFnCache[path] = fn;\n  return fn;\n}\n\nvar objectValueOf = Object.prototype.valueOf;\n\nfunction getValueOf(value) {\n  return isFunction(value.valueOf) ? value.valueOf() : objectValueOf.call(value);\n}\n\n///////////////////////////////////\n\n/**\n * @ngdoc service\n * @name $parse\n * @kind function\n *\n * @description\n *\n * Converts Angular {@link guide/expression expression} into a function.\n *\n * ```js\n *   var getter = $parse('user.name');\n *   var setter = getter.assign;\n *   var context = {user:{name:'angular'}};\n *   var locals = {user:{name:'local'}};\n *\n *   expect(getter(context)).toEqual('angular');\n *   setter(context, 'newValue');\n *   expect(context.user.name).toEqual('newValue');\n *   expect(getter(context, locals)).toEqual('local');\n * ```\n *\n *\n * @param {string} expression String expression to compile.\n * @returns {function(context, locals)} a function which represents the compiled expression:\n *\n *    * `context` – `{object}` – an object against which any expressions embedded in the strings\n *      are evaluated against (typically a scope object).\n *    * `locals` – `{object=}` – local variables context object, useful for overriding values in\n *      `context`.\n *\n *    The returned function also has the following properties:\n *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript\n *        literal.\n *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript\n *        constant literals.\n *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be\n *        set to a function to change its value on the given context.\n *\n */\n\n\n/**\n * @ngdoc provider\n * @name $parseProvider\n *\n * @description\n * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}\n *  service.\n */\nfunction $ParseProvider() {\n  var cacheDefault = createMap();\n  var cacheExpensive = createMap();\n\n\n\n  this.$get = ['$filter', '$sniffer', function($filter, $sniffer) {\n    var $parseOptions = {\n          csp: $sniffer.csp,\n          expensiveChecks: false\n        },\n        $parseOptionsExpensive = {\n          csp: $sniffer.csp,\n          expensiveChecks: true\n        };\n\n    function wrapSharedExpression(exp) {\n      var wrapped = exp;\n\n      if (exp.sharedGetter) {\n        wrapped = function $parseWrapper(self, locals) {\n          return exp(self, locals);\n        };\n        wrapped.literal = exp.literal;\n        wrapped.constant = exp.constant;\n        wrapped.assign = exp.assign;\n      }\n\n      return wrapped;\n    }\n\n    return function $parse(exp, interceptorFn, expensiveChecks) {\n      var parsedExpression, oneTime, cacheKey;\n\n      switch (typeof exp) {\n        case 'string':\n          cacheKey = exp = exp.trim();\n\n          var cache = (expensiveChecks ? cacheExpensive : cacheDefault);\n          parsedExpression = cache[cacheKey];\n\n          if (!parsedExpression) {\n            if (exp.charAt(0) === ':' && exp.charAt(1) === ':') {\n              oneTime = true;\n              exp = exp.substring(2);\n            }\n\n            var parseOptions = expensiveChecks ? $parseOptionsExpensive : $parseOptions;\n            var lexer = new Lexer(parseOptions);\n            var parser = new Parser(lexer, $filter, parseOptions);\n            parsedExpression = parser.parse(exp);\n\n            if (parsedExpression.constant) {\n              parsedExpression.$$watchDelegate = constantWatchDelegate;\n            } else if (oneTime) {\n              //oneTime is not part of the exp passed to the Parser so we may have to\n              //wrap the parsedExpression before adding a $$watchDelegate\n              parsedExpression = wrapSharedExpression(parsedExpression);\n              parsedExpression.$$watchDelegate = parsedExpression.literal ?\n                oneTimeLiteralWatchDelegate : oneTimeWatchDelegate;\n            } else if (parsedExpression.inputs) {\n              parsedExpression.$$watchDelegate = inputsWatchDelegate;\n            }\n\n            cache[cacheKey] = parsedExpression;\n          }\n          return addInterceptor(parsedExpression, interceptorFn);\n\n        case 'function':\n          return addInterceptor(exp, interceptorFn);\n\n        default:\n          return addInterceptor(noop, interceptorFn);\n      }\n    };\n\n    function collectExpressionInputs(inputs, list) {\n      for (var i = 0, ii = inputs.length; i < ii; i++) {\n        var input = inputs[i];\n        if (!input.constant) {\n          if (input.inputs) {\n            collectExpressionInputs(input.inputs, list);\n          } else if (list.indexOf(input) === -1) { // TODO(perf) can we do better?\n            list.push(input);\n          }\n        }\n      }\n\n      return list;\n    }\n\n    function expressionInputDirtyCheck(newValue, oldValueOfValue) {\n\n      if (newValue == null || oldValueOfValue == null) { // null/undefined\n        return newValue === oldValueOfValue;\n      }\n\n      if (typeof newValue === 'object') {\n\n        // attempt to convert the value to a primitive type\n        // TODO(docs): add a note to docs that by implementing valueOf even objects and arrays can\n        //             be cheaply dirty-checked\n        newValue = getValueOf(newValue);\n\n        if (typeof newValue === 'object') {\n          // objects/arrays are not supported - deep-watching them would be too expensive\n          return false;\n        }\n\n        // fall-through to the primitive equality check\n      }\n\n      //Primitive or NaN\n      return newValue === oldValueOfValue || (newValue !== newValue && oldValueOfValue !== oldValueOfValue);\n    }\n\n    function inputsWatchDelegate(scope, listener, objectEquality, parsedExpression) {\n      var inputExpressions = parsedExpression.$$inputs ||\n                    (parsedExpression.$$inputs = collectExpressionInputs(parsedExpression.inputs, []));\n\n      var lastResult;\n\n      if (inputExpressions.length === 1) {\n        var oldInputValue = expressionInputDirtyCheck; // init to something unique so that equals check fails\n        inputExpressions = inputExpressions[0];\n        return scope.$watch(function expressionInputWatch(scope) {\n          var newInputValue = inputExpressions(scope);\n          if (!expressionInputDirtyCheck(newInputValue, oldInputValue)) {\n            lastResult = parsedExpression(scope);\n            oldInputValue = newInputValue && getValueOf(newInputValue);\n          }\n          return lastResult;\n        }, listener, objectEquality);\n      }\n\n      var oldInputValueOfValues = [];\n      for (var i = 0, ii = inputExpressions.length; i < ii; i++) {\n        oldInputValueOfValues[i] = expressionInputDirtyCheck; // init to something unique so that equals check fails\n      }\n\n      return scope.$watch(function expressionInputsWatch(scope) {\n        var changed = false;\n\n        for (var i = 0, ii = inputExpressions.length; i < ii; i++) {\n          var newInputValue = inputExpressions[i](scope);\n          if (changed || (changed = !expressionInputDirtyCheck(newInputValue, oldInputValueOfValues[i]))) {\n            oldInputValueOfValues[i] = newInputValue && getValueOf(newInputValue);\n          }\n        }\n\n        if (changed) {\n          lastResult = parsedExpression(scope);\n        }\n\n        return lastResult;\n      }, listener, objectEquality);\n    }\n\n    function oneTimeWatchDelegate(scope, listener, objectEquality, parsedExpression) {\n      var unwatch, lastValue;\n      return unwatch = scope.$watch(function oneTimeWatch(scope) {\n        return parsedExpression(scope);\n      }, function oneTimeListener(value, old, scope) {\n        lastValue = value;\n        if (isFunction(listener)) {\n          listener.apply(this, arguments);\n        }\n        if (isDefined(value)) {\n          scope.$$postDigest(function() {\n            if (isDefined(lastValue)) {\n              unwatch();\n            }\n          });\n        }\n      }, objectEquality);\n    }\n\n    function oneTimeLiteralWatchDelegate(scope, listener, objectEquality, parsedExpression) {\n      var unwatch, lastValue;\n      return unwatch = scope.$watch(function oneTimeWatch(scope) {\n        return parsedExpression(scope);\n      }, function oneTimeListener(value, old, scope) {\n        lastValue = value;\n        if (isFunction(listener)) {\n          listener.call(this, value, old, scope);\n        }\n        if (isAllDefined(value)) {\n          scope.$$postDigest(function() {\n            if (isAllDefined(lastValue)) unwatch();\n          });\n        }\n      }, objectEquality);\n\n      function isAllDefined(value) {\n        var allDefined = true;\n        forEach(value, function(val) {\n          if (!isDefined(val)) allDefined = false;\n        });\n        return allDefined;\n      }\n    }\n\n    function constantWatchDelegate(scope, listener, objectEquality, parsedExpression) {\n      var unwatch;\n      return unwatch = scope.$watch(function constantWatch(scope) {\n        return parsedExpression(scope);\n      }, function constantListener(value, old, scope) {\n        if (isFunction(listener)) {\n          listener.apply(this, arguments);\n        }\n        unwatch();\n      }, objectEquality);\n    }\n\n    function addInterceptor(parsedExpression, interceptorFn) {\n      if (!interceptorFn) return parsedExpression;\n      var watchDelegate = parsedExpression.$$watchDelegate;\n\n      var regularWatch =\n          watchDelegate !== oneTimeLiteralWatchDelegate &&\n          watchDelegate !== oneTimeWatchDelegate;\n\n      var fn = regularWatch ? function regularInterceptedExpression(scope, locals) {\n        var value = parsedExpression(scope, locals);\n        return interceptorFn(value, scope, locals);\n      } : function oneTimeInterceptedExpression(scope, locals) {\n        var value = parsedExpression(scope, locals);\n        var result = interceptorFn(value, scope, locals);\n        // we only return the interceptor's result if the\n        // initial value is defined (for bind-once)\n        return isDefined(value) ? result : value;\n      };\n\n      // Propagate $$watchDelegates other then inputsWatchDelegate\n      if (parsedExpression.$$watchDelegate &&\n          parsedExpression.$$watchDelegate !== inputsWatchDelegate) {\n        fn.$$watchDelegate = parsedExpression.$$watchDelegate;\n      } else if (!interceptorFn.$stateful) {\n        // If there is an interceptor, but no watchDelegate then treat the interceptor like\n        // we treat filters - it is assumed to be a pure function unless flagged with $stateful\n        fn.$$watchDelegate = inputsWatchDelegate;\n        fn.inputs = [parsedExpression];\n      }\n\n      return fn;\n    }\n  }];\n}\n\n/**\n * @ngdoc service\n * @name $q\n * @requires $rootScope\n *\n * @description\n * A service that helps you run functions asynchronously, and use their return values (or exceptions)\n * when they are done processing.\n *\n * This is an implementation of promises/deferred objects inspired by\n * [Kris Kowal's Q](https://github.com/kriskowal/q).\n *\n * $q can be used in two fashions --- one which is more similar to Kris Kowal's Q or jQuery's Deferred\n * implementations, and the other which resembles ES6 promises to some degree.\n *\n * # $q constructor\n *\n * The streamlined ES6 style promise is essentially just using $q as a constructor which takes a `resolver`\n * function as the first argument. This is similar to the native Promise implementation from ES6 Harmony,\n * see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n *\n * While the constructor-style use is supported, not all of the supporting methods from ES6 Harmony promises are\n * available yet.\n *\n * It can be used like so:\n *\n * ```js\n *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`\n *   // are available in the current lexical scope (they could have been injected or passed in).\n *\n *   function asyncGreet(name) {\n *     // perform some asynchronous operation, resolve or reject the promise when appropriate.\n *     return $q(function(resolve, reject) {\n *       setTimeout(function() {\n *         if (okToGreet(name)) {\n *           resolve('Hello, ' + name + '!');\n *         } else {\n *           reject('Greeting ' + name + ' is not allowed.');\n *         }\n *       }, 1000);\n *     });\n *   }\n *\n *   var promise = asyncGreet('Robin Hood');\n *   promise.then(function(greeting) {\n *     alert('Success: ' + greeting);\n *   }, function(reason) {\n *     alert('Failed: ' + reason);\n *   });\n * ```\n *\n * Note: progress/notify callbacks are not currently supported via the ES6-style interface.\n *\n * However, the more traditional CommonJS-style usage is still available, and documented below.\n *\n * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an\n * interface for interacting with an object that represents the result of an action that is\n * performed asynchronously, and may or may not be finished at any given point in time.\n *\n * From the perspective of dealing with error handling, deferred and promise APIs are to\n * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.\n *\n * ```js\n *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`\n *   // are available in the current lexical scope (they could have been injected or passed in).\n *\n *   function asyncGreet(name) {\n *     var deferred = $q.defer();\n *\n *     setTimeout(function() {\n *       deferred.notify('About to greet ' + name + '.');\n *\n *       if (okToGreet(name)) {\n *         deferred.resolve('Hello, ' + name + '!');\n *       } else {\n *         deferred.reject('Greeting ' + name + ' is not allowed.');\n *       }\n *     }, 1000);\n *\n *     return deferred.promise;\n *   }\n *\n *   var promise = asyncGreet('Robin Hood');\n *   promise.then(function(greeting) {\n *     alert('Success: ' + greeting);\n *   }, function(reason) {\n *     alert('Failed: ' + reason);\n *   }, function(update) {\n *     alert('Got notification: ' + update);\n *   });\n * ```\n *\n * At first it might not be obvious why this extra complexity is worth the trouble. The payoff\n * comes in the way of guarantees that promise and deferred APIs make, see\n * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.\n *\n * Additionally the promise api allows for composition that is very hard to do with the\n * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.\n * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the\n * section on serial or parallel joining of promises.\n *\n * # The Deferred API\n *\n * A new instance of deferred is constructed by calling `$q.defer()`.\n *\n * The purpose of the deferred object is to expose the associated Promise instance as well as APIs\n * that can be used for signaling the successful or unsuccessful completion, as well as the status\n * of the task.\n *\n * **Methods**\n *\n * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection\n *   constructed via `$q.reject`, the promise will be rejected instead.\n * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to\n *   resolving it with a rejection constructed via `$q.reject`.\n * - `notify(value)` - provides updates on the status of the promise's execution. This may be called\n *   multiple times before the promise is either resolved or rejected.\n *\n * **Properties**\n *\n * - promise – `{Promise}` – promise object associated with this deferred.\n *\n *\n * # The Promise API\n *\n * A new promise instance is created when a deferred instance is created and can be retrieved by\n * calling `deferred.promise`.\n *\n * The purpose of the promise object is to allow for interested parties to get access to the result\n * of the deferred task when it completes.\n *\n * **Methods**\n *\n * - `then(successCallback, errorCallback, notifyCallback)` – regardless of when the promise was or\n *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously\n *   as soon as the result is available. The callbacks are called with a single argument: the result\n *   or rejection reason. Additionally, the notify callback may be called zero or more times to\n *   provide a progress indication, before the promise is resolved or rejected.\n *\n *   This method *returns a new promise* which is resolved or rejected via the return value of the\n *   `successCallback`, `errorCallback`. It also notifies via the return value of the\n *   `notifyCallback` method. The promise cannot be resolved or rejected from the notifyCallback\n *   method.\n *\n * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`\n *\n * - `finally(callback, notifyCallback)` – allows you to observe either the fulfillment or rejection of a promise,\n *   but to do so without modifying the final value. This is useful to release resources or do some\n *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full\n *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for\n *   more information.\n *\n * # Chaining promises\n *\n * Because calling the `then` method of a promise returns a new derived promise, it is easily\n * possible to create a chain of promises:\n *\n * ```js\n *   promiseB = promiseA.then(function(result) {\n *     return result + 1;\n *   });\n *\n *   // promiseB will be resolved immediately after promiseA is resolved and its value\n *   // will be the result of promiseA incremented by 1\n * ```\n *\n * It is possible to create chains of any length and since a promise can be resolved with another\n * promise (which will defer its resolution further), it is possible to pause/defer resolution of\n * the promises at any point in the chain. This makes it possible to implement powerful APIs like\n * $http's response interceptors.\n *\n *\n * # Differences between Kris Kowal's Q and $q\n *\n *  There are two main differences:\n *\n * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation\n *   mechanism in angular, which means faster propagation of resolution or rejection into your\n *   models and avoiding unnecessary browser repaints, which would result in flickering UI.\n * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains\n *   all the important functionality needed for common async tasks.\n *\n *  # Testing\n *\n *  ```js\n *    it('should simulate promise', inject(function($q, $rootScope) {\n *      var deferred = $q.defer();\n *      var promise = deferred.promise;\n *      var resolvedValue;\n *\n *      promise.then(function(value) { resolvedValue = value; });\n *      expect(resolvedValue).toBeUndefined();\n *\n *      // Simulate resolving of promise\n *      deferred.resolve(123);\n *      // Note that the 'then' function does not get called synchronously.\n *      // This is because we want the promise API to always be async, whether or not\n *      // it got called synchronously or asynchronously.\n *      expect(resolvedValue).toBeUndefined();\n *\n *      // Propagate promise resolution to 'then' functions using $apply().\n *      $rootScope.$apply();\n *      expect(resolvedValue).toEqual(123);\n *    }));\n *  ```\n *\n * @param {function(function, function)} resolver Function which is responsible for resolving or\n *   rejecting the newly created promise. The first parameter is a function which resolves the\n *   promise, the second parameter is a function which rejects the promise.\n *\n * @returns {Promise} The newly created promise.\n */\nfunction $QProvider() {\n\n  this.$get = ['$rootScope', '$exceptionHandler', function($rootScope, $exceptionHandler) {\n    return qFactory(function(callback) {\n      $rootScope.$evalAsync(callback);\n    }, $exceptionHandler);\n  }];\n}\n\nfunction $$QProvider() {\n  this.$get = ['$browser', '$exceptionHandler', function($browser, $exceptionHandler) {\n    return qFactory(function(callback) {\n      $browser.defer(callback);\n    }, $exceptionHandler);\n  }];\n}\n\n/**\n * Constructs a promise manager.\n *\n * @param {function(function)} nextTick Function for executing functions in the next turn.\n * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for\n *     debugging purposes.\n * @returns {object} Promise manager.\n */\nfunction qFactory(nextTick, exceptionHandler) {\n  var $qMinErr = minErr('$q', TypeError);\n  function callOnce(self, resolveFn, rejectFn) {\n    var called = false;\n    function wrap(fn) {\n      return function(value) {\n        if (called) return;\n        called = true;\n        fn.call(self, value);\n      };\n    }\n\n    return [wrap(resolveFn), wrap(rejectFn)];\n  }\n\n  /**\n   * @ngdoc method\n   * @name ng.$q#defer\n   * @kind function\n   *\n   * @description\n   * Creates a `Deferred` object which represents a task which will finish in the future.\n   *\n   * @returns {Deferred} Returns a new instance of deferred.\n   */\n  var defer = function() {\n    return new Deferred();\n  };\n\n  function Promise() {\n    this.$$state = { status: 0 };\n  }\n\n  Promise.prototype = {\n    then: function(onFulfilled, onRejected, progressBack) {\n      var result = new Deferred();\n\n      this.$$state.pending = this.$$state.pending || [];\n      this.$$state.pending.push([result, onFulfilled, onRejected, progressBack]);\n      if (this.$$state.status > 0) scheduleProcessQueue(this.$$state);\n\n      return result.promise;\n    },\n\n    \"catch\": function(callback) {\n      return this.then(null, callback);\n    },\n\n    \"finally\": function(callback, progressBack) {\n      return this.then(function(value) {\n        return handleCallback(value, true, callback);\n      }, function(error) {\n        return handleCallback(error, false, callback);\n      }, progressBack);\n    }\n  };\n\n  //Faster, more basic than angular.bind http://jsperf.com/angular-bind-vs-custom-vs-native\n  function simpleBind(context, fn) {\n    return function(value) {\n      fn.call(context, value);\n    };\n  }\n\n  function processQueue(state) {\n    var fn, promise, pending;\n\n    pending = state.pending;\n    state.processScheduled = false;\n    state.pending = undefined;\n    for (var i = 0, ii = pending.length; i < ii; ++i) {\n      promise = pending[i][0];\n      fn = pending[i][state.status];\n      try {\n        if (isFunction(fn)) {\n          promise.resolve(fn(state.value));\n        } else if (state.status === 1) {\n          promise.resolve(state.value);\n        } else {\n          promise.reject(state.value);\n        }\n      } catch (e) {\n        promise.reject(e);\n        exceptionHandler(e);\n      }\n    }\n  }\n\n  function scheduleProcessQueue(state) {\n    if (state.processScheduled || !state.pending) return;\n    state.processScheduled = true;\n    nextTick(function() { processQueue(state); });\n  }\n\n  function Deferred() {\n    this.promise = new Promise();\n    //Necessary to support unbound execution :/\n    this.resolve = simpleBind(this, this.resolve);\n    this.reject = simpleBind(this, this.reject);\n    this.notify = simpleBind(this, this.notify);\n  }\n\n  Deferred.prototype = {\n    resolve: function(val) {\n      if (this.promise.$$state.status) return;\n      if (val === this.promise) {\n        this.$$reject($qMinErr(\n          'qcycle',\n          \"Expected promise to be resolved with value other than itself '{0}'\",\n          val));\n      } else {\n        this.$$resolve(val);\n      }\n\n    },\n\n    $$resolve: function(val) {\n      var then, fns;\n\n      fns = callOnce(this, this.$$resolve, this.$$reject);\n      try {\n        if ((isObject(val) || isFunction(val))) then = val && val.then;\n        if (isFunction(then)) {\n          this.promise.$$state.status = -1;\n          then.call(val, fns[0], fns[1], this.notify);\n        } else {\n          this.promise.$$state.value = val;\n          this.promise.$$state.status = 1;\n          scheduleProcessQueue(this.promise.$$state);\n        }\n      } catch (e) {\n        fns[1](e);\n        exceptionHandler(e);\n      }\n    },\n\n    reject: function(reason) {\n      if (this.promise.$$state.status) return;\n      this.$$reject(reason);\n    },\n\n    $$reject: function(reason) {\n      this.promise.$$state.value = reason;\n      this.promise.$$state.status = 2;\n      scheduleProcessQueue(this.promise.$$state);\n    },\n\n    notify: function(progress) {\n      var callbacks = this.promise.$$state.pending;\n\n      if ((this.promise.$$state.status <= 0) && callbacks && callbacks.length) {\n        nextTick(function() {\n          var callback, result;\n          for (var i = 0, ii = callbacks.length; i < ii; i++) {\n            result = callbacks[i][0];\n            callback = callbacks[i][3];\n            try {\n              result.notify(isFunction(callback) ? callback(progress) : progress);\n            } catch (e) {\n              exceptionHandler(e);\n            }\n          }\n        });\n      }\n    }\n  };\n\n  /**\n   * @ngdoc method\n   * @name $q#reject\n   * @kind function\n   *\n   * @description\n   * Creates a promise that is resolved as rejected with the specified `reason`. This api should be\n   * used to forward rejection in a chain of promises. If you are dealing with the last promise in\n   * a promise chain, you don't need to worry about it.\n   *\n   * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of\n   * `reject` as the `throw` keyword in JavaScript. This also means that if you \"catch\" an error via\n   * a promise error callback and you want to forward the error to the promise derived from the\n   * current promise, you have to \"rethrow\" the error by returning a rejection constructed via\n   * `reject`.\n   *\n   * ```js\n   *   promiseB = promiseA.then(function(result) {\n   *     // success: do something and resolve promiseB\n   *     //          with the old or a new result\n   *     return result;\n   *   }, function(reason) {\n   *     // error: handle the error if possible and\n   *     //        resolve promiseB with newPromiseOrValue,\n   *     //        otherwise forward the rejection to promiseB\n   *     if (canHandle(reason)) {\n   *      // handle the error and recover\n   *      return newPromiseOrValue;\n   *     }\n   *     return $q.reject(reason);\n   *   });\n   * ```\n   *\n   * @param {*} reason Constant, message, exception or an object representing the rejection reason.\n   * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.\n   */\n  var reject = function(reason) {\n    var result = new Deferred();\n    result.reject(reason);\n    return result.promise;\n  };\n\n  var makePromise = function makePromise(value, resolved) {\n    var result = new Deferred();\n    if (resolved) {\n      result.resolve(value);\n    } else {\n      result.reject(value);\n    }\n    return result.promise;\n  };\n\n  var handleCallback = function handleCallback(value, isResolved, callback) {\n    var callbackOutput = null;\n    try {\n      if (isFunction(callback)) callbackOutput = callback();\n    } catch (e) {\n      return makePromise(e, false);\n    }\n    if (isPromiseLike(callbackOutput)) {\n      return callbackOutput.then(function() {\n        return makePromise(value, isResolved);\n      }, function(error) {\n        return makePromise(error, false);\n      });\n    } else {\n      return makePromise(value, isResolved);\n    }\n  };\n\n  /**\n   * @ngdoc method\n   * @name $q#when\n   * @kind function\n   *\n   * @description\n   * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.\n   * This is useful when you are dealing with an object that might or might not be a promise, or if\n   * the promise comes from a source that can't be trusted.\n   *\n   * @param {*} value Value or a promise\n   * @returns {Promise} Returns a promise of the passed value or promise\n   */\n\n\n  var when = function(value, callback, errback, progressBack) {\n    var result = new Deferred();\n    result.resolve(value);\n    return result.promise.then(callback, errback, progressBack);\n  };\n\n  /**\n   * @ngdoc method\n   * @name $q#all\n   * @kind function\n   *\n   * @description\n   * Combines multiple promises into a single promise that is resolved when all of the input\n   * promises are resolved.\n   *\n   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.\n   * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,\n   *   each value corresponding to the promise at the same index/key in the `promises` array/hash.\n   *   If any of the promises is resolved with a rejection, this resulting promise will be rejected\n   *   with the same rejection value.\n   */\n\n  function all(promises) {\n    var deferred = new Deferred(),\n        counter = 0,\n        results = isArray(promises) ? [] : {};\n\n    forEach(promises, function(promise, key) {\n      counter++;\n      when(promise).then(function(value) {\n        if (results.hasOwnProperty(key)) return;\n        results[key] = value;\n        if (!(--counter)) deferred.resolve(results);\n      }, function(reason) {\n        if (results.hasOwnProperty(key)) return;\n        deferred.reject(reason);\n      });\n    });\n\n    if (counter === 0) {\n      deferred.resolve(results);\n    }\n\n    return deferred.promise;\n  }\n\n  var $Q = function Q(resolver) {\n    if (!isFunction(resolver)) {\n      throw $qMinErr('norslvr', \"Expected resolverFn, got '{0}'\", resolver);\n    }\n\n    if (!(this instanceof Q)) {\n      // More useful when $Q is the Promise itself.\n      return new Q(resolver);\n    }\n\n    var deferred = new Deferred();\n\n    function resolveFn(value) {\n      deferred.resolve(value);\n    }\n\n    function rejectFn(reason) {\n      deferred.reject(reason);\n    }\n\n    resolver(resolveFn, rejectFn);\n\n    return deferred.promise;\n  };\n\n  $Q.defer = defer;\n  $Q.reject = reject;\n  $Q.when = when;\n  $Q.all = all;\n\n  return $Q;\n}\n\nfunction $$RAFProvider() { //rAF\n  this.$get = ['$window', '$timeout', function($window, $timeout) {\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var rafFn = rafSupported\n      ? function(fn) {\n          var id = requestAnimationFrame(fn);\n          return function() {\n            cancelAnimationFrame(id);\n          };\n        }\n      : function(fn) {\n          var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n          return function() {\n            $timeout.cancel(timer);\n          };\n        };\n\n    queueFn.supported = rafSupported;\n\n    var cancelLastRAF;\n    var taskCount = 0;\n    var taskQueue = [];\n    return queueFn;\n\n    function flush() {\n      for (var i = 0; i < taskQueue.length; i++) {\n        var task = taskQueue[i];\n        if (task) {\n          taskQueue[i] = null;\n          task();\n        }\n      }\n      taskCount = taskQueue.length = 0;\n    }\n\n    function queueFn(asyncFn) {\n      var index = taskQueue.length;\n\n      taskCount++;\n      taskQueue.push(asyncFn);\n\n      if (index === 0) {\n        cancelLastRAF = rafFn(flush);\n      }\n\n      return function cancelQueueFn() {\n        if (index >= 0) {\n          taskQueue[index] = null;\n          index = null;\n\n          if (--taskCount === 0 && cancelLastRAF) {\n            cancelLastRAF();\n            cancelLastRAF = null;\n            taskQueue.length = 0;\n          }\n        }\n      };\n    }\n  }];\n}\n\n/**\n * DESIGN NOTES\n *\n * The design decisions behind the scope are heavily favored for speed and memory consumption.\n *\n * The typical use of scope is to watch the expressions, which most of the time return the same\n * value as last time so we optimize the operation.\n *\n * Closures construction is expensive in terms of speed as well as memory:\n *   - No closures, instead use prototypical inheritance for API\n *   - Internal state needs to be stored on scope directly, which means that private state is\n *     exposed as $$____ properties\n *\n * Loop operations are optimized by using while(count--) { ... }\n *   - this means that in order to keep the same order of execution as addition we have to add\n *     items to the array at the beginning (unshift) instead of at the end (push)\n *\n * Child scopes are created and removed often\n *   - Using an array would be slow since inserts in middle are expensive so we use linked list\n *\n * There are few watches then a lot of observers. This is why you don't want the observer to be\n * implemented in the same way as watch. Watch requires return of initialization function which\n * are expensive to construct.\n */\n\n\n/**\n * @ngdoc provider\n * @name $rootScopeProvider\n * @description\n *\n * Provider for the $rootScope service.\n */\n\n/**\n * @ngdoc method\n * @name $rootScopeProvider#digestTtl\n * @description\n *\n * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and\n * assuming that the model is unstable.\n *\n * The current default is 10 iterations.\n *\n * In complex applications it's possible that the dependencies between `$watch`s will result in\n * several digest iterations. However if an application needs more than the default 10 digest\n * iterations for its model to stabilize then you should investigate what is causing the model to\n * continuously change during the digest.\n *\n * Increasing the TTL could have performance implications, so you should not change it without\n * proper justification.\n *\n * @param {number} limit The number of digest iterations.\n */\n\n\n/**\n * @ngdoc service\n * @name $rootScope\n * @description\n *\n * Every application has a single root {@link ng.$rootScope.Scope scope}.\n * All other scopes are descendant scopes of the root scope. Scopes provide separation\n * between the model and the view, via a mechanism for watching the model for changes.\n * They also provide an event emission/broadcast and subscription facility. See the\n * {@link guide/scope developer guide on scopes}.\n */\nfunction $RootScopeProvider() {\n  var TTL = 10;\n  var $rootScopeMinErr = minErr('$rootScope');\n  var lastDirtyWatch = null;\n  var applyAsyncId = null;\n\n  this.digestTtl = function(value) {\n    if (arguments.length) {\n      TTL = value;\n    }\n    return TTL;\n  };\n\n  function createChildScopeClass(parent) {\n    function ChildScope() {\n      this.$$watchers = this.$$nextSibling =\n          this.$$childHead = this.$$childTail = null;\n      this.$$listeners = {};\n      this.$$listenerCount = {};\n      this.$id = nextUid();\n      this.$$ChildScope = null;\n    }\n    ChildScope.prototype = parent;\n    return ChildScope;\n  }\n\n  this.$get = ['$injector', '$exceptionHandler', '$parse', '$browser',\n      function($injector, $exceptionHandler, $parse, $browser) {\n\n    function destroyChildScope($event) {\n        $event.currentScope.$$destroyed = true;\n    }\n\n    /**\n     * @ngdoc type\n     * @name $rootScope.Scope\n     *\n     * @description\n     * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the\n     * {@link auto.$injector $injector}. Child scopes are created using the\n     * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when\n     * compiled HTML template is executed.) See also the {@link guide/scope Scopes guide} for\n     * an in-depth introduction and usage examples.\n     *\n     *\n     * # Inheritance\n     * A scope can inherit from a parent scope, as in this example:\n     * ```js\n         var parent = $rootScope;\n         var child = parent.$new();\n\n         parent.salutation = \"Hello\";\n         expect(child.salutation).toEqual('Hello');\n\n         child.salutation = \"Welcome\";\n         expect(child.salutation).toEqual('Welcome');\n         expect(parent.salutation).toEqual('Hello');\n     * ```\n     *\n     * When interacting with `Scope` in tests, additional helper methods are available on the\n     * instances of `Scope` type. See {@link ngMock.$rootScope.Scope ngMock Scope} for additional\n     * details.\n     *\n     *\n     * @param {Object.<string, function()>=} providers Map of service factory which need to be\n     *                                       provided for the current scope. Defaults to {@link ng}.\n     * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should\n     *                              append/override services provided by `providers`. This is handy\n     *                              when unit-testing and having the need to override a default\n     *                              service.\n     * @returns {Object} Newly created scope.\n     *\n     */\n    function Scope() {\n      this.$id = nextUid();\n      this.$$phase = this.$parent = this.$$watchers =\n                     this.$$nextSibling = this.$$prevSibling =\n                     this.$$childHead = this.$$childTail = null;\n      this.$root = this;\n      this.$$destroyed = false;\n      this.$$listeners = {};\n      this.$$listenerCount = {};\n      this.$$isolateBindings = null;\n    }\n\n    /**\n     * @ngdoc property\n     * @name $rootScope.Scope#$id\n     *\n     * @description\n     * Unique scope ID (monotonically increasing) useful for debugging.\n     */\n\n     /**\n      * @ngdoc property\n      * @name $rootScope.Scope#$parent\n      *\n      * @description\n      * Reference to the parent scope.\n      */\n\n      /**\n       * @ngdoc property\n       * @name $rootScope.Scope#$root\n       *\n       * @description\n       * Reference to the root scope.\n       */\n\n    Scope.prototype = {\n      constructor: Scope,\n      /**\n       * @ngdoc method\n       * @name $rootScope.Scope#$new\n       * @kind function\n       *\n       * @description\n       * Creates a new child {@link ng.$rootScope.Scope scope}.\n       *\n       * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} event.\n       * The scope can be removed from the scope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.\n       *\n       * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is\n       * desired for the scope and its child scopes to be permanently detached from the parent and\n       * thus stop participating in model change detection and listener notification by invoking.\n       *\n       * @param {boolean} isolate If true, then the scope does not prototypically inherit from the\n       *         parent scope. The scope is isolated, as it can not see parent scope properties.\n       *         When creating widgets, it is useful for the widget to not accidentally read parent\n       *         state.\n       *\n       * @param {Scope} [parent=this] The {@link ng.$rootScope.Scope `Scope`} that will be the `$parent`\n       *                              of the newly created scope. Defaults to `this` scope if not provided.\n       *                              This is used when creating a transclude scope to correctly place it\n       *                              in the scope hierarchy while maintaining the correct prototypical\n       *                              inheritance.\n       *\n       * @returns {Object} The newly created child scope.\n       *\n       */\n      $new: function(isolate, parent) {\n        var child;\n\n        parent = parent || this;\n\n        if (isolate) {\n          child = new Scope();\n          child.$root = this.$root;\n        } else {\n          // Only create a child scope class if somebody asks for one,\n          // but cache it to allow the VM to optimize lookups.\n          if (!this.$$ChildScope) {\n            this.$$ChildScope = createChildScopeClass(this);\n          }\n          child = new this.$$ChildScope();\n        }\n        child.$parent = parent;\n        child.$$prevSibling = parent.$$childTail;\n        if (parent.$$childHead) {\n          parent.$$childTail.$$nextSibling = child;\n          parent.$$childTail = child;\n        } else {\n          parent.$$childHead = parent.$$childTail = child;\n        }\n\n        // When the new scope is not isolated or we inherit from `this`, and\n        // the parent scope is destroyed, the property `$$destroyed` is inherited\n        // prototypically. In all other cases, this property needs to be set\n        // when the parent scope is destroyed.\n        // The listener needs to be added after the parent is set\n        if (isolate || parent != this) child.$on('$destroy', destroyChildScope);\n\n        return child;\n      },\n\n      /**\n       * @ngdoc method\n       * @name $rootScope.Scope#$watch\n       * @kind function\n       *\n       * @description\n       * Registers a `listener` callback to be executed whenever the `watchExpression` changes.\n       *\n       * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest\n       *   $digest()} and should return the value that will be watched. (Since\n       *   {@link ng.$rootScope.Scope#$digest $digest()} reruns when it detects changes the\n       *   `watchExpression` can execute multiple times per\n       *   {@link ng.$rootScope.Scope#$digest $digest()} and should be idempotent.)\n       * - The `listener` is called only when the value from the current `watchExpression` and the\n       *   previous call to `watchExpression` are not equal (with the exception of the initial run,\n       *   see below). Inequality is determined according to reference inequality,\n       *   [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)\n       *    via the `!==` Javascript operator, unless `objectEquality == true`\n       *   (see next point)\n       * - When `objectEquality == true`, inequality of the `watchExpression` is determined\n       *   according to the {@link angular.equals} function. To save the value of the object for\n       *   later comparison, the {@link angular.copy} function is used. This therefore means that\n       *   watching complex objects will have adverse memory and performance implications.\n       * - The watch `listener` may change the model, which may trigger other `listener`s to fire.\n       *   This is achieved by rerunning the watchers until no changes are detected. The rerun\n       *   iteration limit is 10 to prevent an infinite loop deadlock.\n       *\n       *\n       * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,\n       * you can register a `watchExpression` function with no `listener`. (Be prepared for\n       * multiple calls to your `watchExpression` because it will execute multiple times in a\n       * single {@link ng.$rootScope.Scope#$digest $digest} cycle if a change is detected.)\n       *\n       * After a watcher is registered with the scope, the `listener` fn is called asynchronously\n       * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the\n       * watcher. In rare cases, this is undesirable because the listener is called when the result\n       * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you\n       * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the\n       * listener was called due to initialization.\n       *\n       *\n       *\n       * # Example\n       * ```js\n           // let's assume that scope was dependency injected as the $rootScope\n           var scope = $rootScope;\n           scope.name = 'misko';\n           scope.counter = 0;\n\n           expect(scope.counter).toEqual(0);\n           scope.$watch('name', function(newValue, oldValue) {\n             scope.counter = scope.counter + 1;\n           });\n           expect(scope.counter).toEqual(0);\n\n           scope.$digest();\n           // the listener is always called during the first $digest loop after it was registered\n           expect(scope.counter).toEqual(1);\n\n           scope.$digest();\n           // but now it will not be called unless the value changes\n           expect(scope.counter).toEqual(1);\n\n           scope.name = 'adam';\n           scope.$digest();\n           expect(scope.counter).toEqual(2);\n\n\n\n           // Using a function as a watchExpression\n           var food;\n           scope.foodCounter = 0;\n           expect(scope.foodCounter).toEqual(0);\n           scope.$watch(\n             // This function returns the value being watched. It is called for each turn of the $digest loop\n             function() { return food; },\n             // This is the change listener, called when the value returned from the above function changes\n             function(newValue, oldValue) {\n               if ( newValue !== oldValue ) {\n                 // Only increment the counter if the value changed\n                 scope.foodCounter = scope.foodCounter + 1;\n               }\n             }\n           );\n           // No digest has been run so the counter will be zero\n           expect(scope.foodCounter).toEqual(0);\n\n           // Run the digest but since food has not changed count will still be zero\n           scope.$digest();\n           expect(scope.foodCounter).toEqual(0);\n\n           // Update food and run digest.  Now the counter will increment\n           food = 'cheeseburger';\n           scope.$digest();\n           expect(scope.foodCounter).toEqual(1);\n\n       * ```\n       *\n       *\n       *\n       * @param {(function()|string)} watchExpression Expression that is evaluated on each\n       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers\n       *    a call to the `listener`.\n       *\n       *    - `string`: Evaluated as {@link guide/expression expression}\n       *    - `function(scope)`: called with current `scope` as a parameter.\n       * @param {function(newVal, oldVal, scope)} listener Callback called whenever the value\n       *    of `watchExpression` changes.\n       *\n       *    - `newVal` contains the current value of the `watchExpression`\n       *    - `oldVal` contains the previous value of the `watchExpression`\n       *    - `scope` refers to the current scope\n       * @param {boolean=} objectEquality Compare for object equality using {@link angular.equals} instead of\n       *     comparing for reference equality.\n       * @returns {function()} Returns a deregistration function for this listener.\n       */\n      $watch: function(watchExp, listener, objectEquality) {\n        var get = $parse(watchExp);\n\n        if (get.$$watchDelegate) {\n          return get.$$watchDelegate(this, listener, objectEquality, get);\n        }\n        var scope = this,\n            array = scope.$$watchers,\n            watcher = {\n              fn: listener,\n              last: initWatchVal,\n              get: get,\n              exp: watchExp,\n              eq: !!objectEquality\n            };\n\n        lastDirtyWatch = null;\n\n        if (!isFunction(listener)) {\n          watcher.fn = noop;\n        }\n\n        if (!array) {\n          array = scope.$$watchers = [];\n        }\n        // we use unshift since we use a while loop in $digest for speed.\n        // the while loop reads in reverse order.\n        array.unshift(watcher);\n\n        return function deregisterWatch() {\n          arrayRemove(array, watcher);\n          lastDirtyWatch = null;\n        };\n      },\n\n      /**\n       * @ngdoc method\n       * @name $rootScope.Scope#$watchGroup\n       * @kind function\n       *\n       * @description\n       * A variant of {@link ng.$rootScope.Scope#$watch $watch()} where it watches an array of `watchExpressions`.\n       * If any one expression in the collection changes the `listener` is executed.\n       *\n       * - The items in the `watchExpressions` array are observed via standard $watch operation and are examined on every\n       *   call to $digest() to see if any items changes.\n       * - The `listener` is called whenever any expression in the `watchExpressions` array changes.\n       *\n       * @param {Array.<string|Function(scope)>} watchExpressions Array of expressions that will be individually\n       * watched using {@link ng.$rootScope.Scope#$watch $watch()}\n       *\n       * @param {function(newValues, oldValues, scope)} listener Callback called whenever the return value of any\n       *    expression in `watchExpressions` changes\n       *    The `newValues` array contains the current values of the `watchExpressions`, with the indexes matching\n       *    those of `watchExpression`\n       *    and the `oldValues` array contains the previous values of the `watchExpressions`, with the indexes matching\n       *    those of `watchExpression`\n       *    The `scope` refers to the current scope.\n       * @returns {function()} Returns a de-registration function for all listeners.\n       */\n      $watchGroup: function(watchExpressions, listener) {\n        var oldValues = new Array(watchExpressions.length);\n        var newValues = new Array(watchExpressions.length);\n        var deregisterFns = [];\n        var self = this;\n        var changeReactionScheduled = false;\n        var firstRun = true;\n\n        if (!watchExpressions.length) {\n          // No expressions means we call the listener ASAP\n          var shouldCall = true;\n          self.$evalAsync(function() {\n            if (shouldCall) listener(newValues, newValues, self);\n          });\n          return function deregisterWatchGroup() {\n            shouldCall = false;\n          };\n        }\n\n        if (watchExpressions.length === 1) {\n          // Special case size of one\n          return this.$watch(watchExpressions[0], function watchGroupAction(value, oldValue, scope) {\n            newValues[0] = value;\n            oldValues[0] = oldValue;\n            listener(newValues, (value === oldValue) ? newValues : oldValues, scope);\n          });\n        }\n\n        forEach(watchExpressions, function(expr, i) {\n          var unwatchFn = self.$watch(expr, function watchGroupSubAction(value, oldValue) {\n            newValues[i] = value;\n            oldValues[i] = oldValue;\n            if (!changeReactionScheduled) {\n              changeReactionScheduled = true;\n              self.$evalAsync(watchGroupAction);\n            }\n          });\n          deregisterFns.push(unwatchFn);\n        });\n\n        function watchGroupAction() {\n          changeReactionScheduled = false;\n\n          if (firstRun) {\n            firstRun = false;\n            listener(newValues, newValues, self);\n          } else {\n            listener(newValues, oldValues, self);\n          }\n        }\n\n        return function deregisterWatchGroup() {\n          while (deregisterFns.length) {\n            deregisterFns.shift()();\n          }\n        };\n      },\n\n\n      /**\n       * @ngdoc method\n       * @name $rootScope.Scope#$watchCollection\n       * @kind function\n       *\n       * @description\n       * Shallow watches the properties of an object and fires whenever any of the properties change\n       * (for arrays, this implies watching the array items; for object maps, this implies watching\n       * the properties). If a change is detected, the `listener` callback is fired.\n       *\n       * - The `obj` collection is observed via standard $watch operation and is examined on every\n       *   call to $digest() to see if any items have been added, removed, or moved.\n       * - The `listener` is called whenever anything within the `obj` has changed. Examples include\n       *   adding, removing, and moving items belonging to an object or array.\n       *\n       *\n       * # Example\n       * ```js\n          $scope.names = ['igor', 'matias', 'misko', 'james'];\n          $scope.dataCount = 4;\n\n          $scope.$watchCollection('names', function(newNames, oldNames) {\n            $scope.dataCount = newNames.length;\n          });\n\n          expect($scope.dataCount).toEqual(4);\n          $scope.$digest();\n\n          //still at 4 ... no changes\n          expect($scope.dataCount).toEqual(4);\n\n          $scope.names.pop();\n          $scope.$digest();\n\n          //now there's been a change\n          expect($scope.dataCount).toEqual(3);\n       * ```\n       *\n       *\n       * @param {string|function(scope)} obj Evaluated as {@link guide/expression expression}. The\n       *    expression value should evaluate to an object or an array which is observed on each\n       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the\n       *    collection will trigger a call to the `listener`.\n       *\n       * @param {function(newCollection, oldCollection, scope)} listener a callback function called\n       *    when a change is detected.\n       *    - The `newCollection` object is the newly modified data obtained from the `obj` expression\n       *    - The `oldCollection` object is a copy of the former collection data.\n       *      Due to performance considerations, the`oldCollection` value is computed only if the\n       *      `listener` function declares two or more arguments.\n       *    - The `scope` argument refers to the current scope.\n       *\n       * @returns {function()} Returns a de-registration function for this listener. When the\n       *    de-registration function is executed, the internal watch operation is terminated.\n       */\n      $watchCollection: function(obj, listener) {\n        $watchCollectionInterceptor.$stateful = true;\n\n        var self = this;\n        // the current value, updated on each dirty-check run\n        var newValue;\n        // a shallow copy of the newValue from the last dirty-check run,\n        // updated to match newValue during dirty-check run\n        var oldValue;\n        // a shallow copy of the newValue from when the last change happened\n        var veryOldValue;\n        // only track veryOldValue if the listener is asking for it\n        var trackVeryOldValue = (listener.length > 1);\n        var changeDetected = 0;\n        var changeDetector = $parse(obj, $watchCollectionInterceptor);\n        var internalArray = [];\n        var internalObject = {};\n        var initRun = true;\n        var oldLength = 0;\n\n        function $watchCollectionInterceptor(_value) {\n          newValue = _value;\n          var newLength, key, bothNaN, newItem, oldItem;\n\n          // If the new value is undefined, then return undefined as the watch may be a one-time watch\n          if (isUndefined(newValue)) return;\n\n          if (!isObject(newValue)) { // if primitive\n            if (oldValue !== newValue) {\n              oldValue = newValue;\n              changeDetected++;\n            }\n          } else if (isArrayLike(newValue)) {\n            if (oldValue !== internalArray) {\n              // we are transitioning from something which was not an array into array.\n              oldValue = internalArray;\n              oldLength = oldValue.length = 0;\n              changeDetected++;\n            }\n\n            newLength = newValue.length;\n\n            if (oldLength !== newLength) {\n              // if lengths do not match we need to trigger change notification\n              changeDetected++;\n              oldValue.length = oldLength = newLength;\n            }\n            // copy the items to oldValue and look for changes.\n            for (var i = 0; i < newLength; i++) {\n              oldItem = oldValue[i];\n              newItem = newValue[i];\n\n              bothNaN = (oldItem !== oldItem) && (newItem !== newItem);\n              if (!bothNaN && (oldItem !== newItem)) {\n                changeDetected++;\n                oldValue[i] = newItem;\n              }\n            }\n          } else {\n            if (oldValue !== internalObject) {\n              // we are transitioning from something which was not an object into object.\n              oldValue = internalObject = {};\n              oldLength = 0;\n              changeDetected++;\n            }\n            // copy the items to oldValue and look for changes.\n            newLength = 0;\n            for (key in newValue) {\n              if (newValue.hasOwnProperty(key)) {\n                newLength++;\n                newItem = newValue[key];\n                oldItem = oldValue[key];\n\n                if (key in oldValue) {\n                  bothNaN = (oldItem !== oldItem) && (newItem !== newItem);\n                  if (!bothNaN && (oldItem !== newItem)) {\n                    changeDetected++;\n                    oldValue[key] = newItem;\n                  }\n                } else {\n                  oldLength++;\n                  oldValue[key] = newItem;\n                  changeDetected++;\n                }\n              }\n            }\n            if (oldLength > newLength) {\n              // we used to have more keys, need to find them and destroy them.\n              changeDetected++;\n              for (key in oldValue) {\n                if (!newValue.hasOwnProperty(key)) {\n                  oldLength--;\n                  delete oldValue[key];\n                }\n              }\n            }\n          }\n          return changeDetected;\n        }\n\n        function $watchCollectionAction() {\n          if (initRun) {\n            initRun = false;\n            listener(newValue, newValue, self);\n          } else {\n            listener(newValue, veryOldValue, self);\n          }\n\n          // make a copy for the next time a collection is changed\n          if (trackVeryOldValue) {\n            if (!isObject(newValue)) {\n              //primitive\n              veryOldValue = newValue;\n            } else if (isArrayLike(newValue)) {\n              veryOldValue = new Array(newValue.length);\n              for (var i = 0; i < newValue.length; i++) {\n                veryOldValue[i] = newValue[i];\n              }\n            } else { // if object\n              veryOldValue = {};\n              for (var key in newValue) {\n                if (hasOwnProperty.call(newValue, key)) {\n                  veryOldValue[key] = newValue[key];\n                }\n              }\n            }\n          }\n        }\n\n        return this.$watch(changeDetector, $watchCollectionAction);\n      },\n\n      /**\n       * @ngdoc method\n       * @name $rootScope.Scope#$digest\n       * @kind function\n       *\n       * @description\n       * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and\n       * its children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change\n       * the model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}\n       * until no more listeners are firing. This means that it is possible to get into an infinite\n       * loop. This function will throw `'Maximum iteration limit exceeded.'` if the number of\n       * iterations exceeds 10.\n       *\n       * Usually, you don't call `$digest()` directly in\n       * {@link ng.directive:ngController controllers} or in\n       * {@link ng.$compileProvider#directive directives}.\n       * Instead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within\n       * a {@link ng.$compileProvider#directive directive}), which will force a `$digest()`.\n       *\n       * If you want to be notified whenever `$digest()` is called,\n       * you can register a `watchExpression` function with\n       * {@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.\n       *\n       * In unit tests, you may need to call `$digest()` to simulate the scope life cycle.\n       *\n       * # Example\n       * ```js\n           var scope = ...;\n           scope.name = 'misko';\n           scope.counter = 0;\n\n           expect(scope.counter).toEqual(0);\n           scope.$watch('name', function(newValue, oldValue) {\n             scope.counter = scope.counter + 1;\n           });\n           expect(scope.counter).toEqual(0);\n\n           scope.$digest();\n           // the listener is always called during the first $digest loop after it was registered\n           expect(scope.counter).toEqual(1);\n\n           scope.$digest();\n           // but now it will not be called unless the value changes\n           expect(scope.counter).toEqual(1);\n\n           scope.name = 'adam';\n           scope.$digest();\n           expect(scope.counter).toEqual(2);\n       * ```\n       *\n       */\n      $digest: function() {\n        var watch, value, last,\n            watchers,\n            length,\n            dirty, ttl = TTL,\n            next, current, target = this,\n            watchLog = [],\n            logIdx, logMsg, asyncTask;\n\n        beginPhase('$digest');\n        // Check for changes to browser url that happened in sync before the call to $digest\n        $browser.$$checkUrlChange();\n\n        if (this === $rootScope && applyAsyncId !== null) {\n          // If this is the root scope, and $applyAsync has scheduled a deferred $apply(), then\n          // cancel the scheduled $apply and flush the queue of expressions to be evaluated.\n          $browser.defer.cancel(applyAsyncId);\n          flushApplyAsync();\n        }\n\n        lastDirtyWatch = null;\n\n        do { // \"while dirty\" loop\n          dirty = false;\n          current = target;\n\n          while (asyncQueue.length) {\n            try {\n              asyncTask = asyncQueue.shift();\n              asyncTask.scope.$eval(asyncTask.expression, asyncTask.locals);\n            } catch (e) {\n              $exceptionHandler(e);\n            }\n            lastDirtyWatch = null;\n          }\n\n          traverseScopesLoop:\n          do { // \"traverse the scopes\" loop\n            if ((watchers = current.$$watchers)) {\n              // process our watches\n              length = watchers.length;\n              while (length--) {\n                try {\n                  watch = watchers[length];\n                  // Most common watches are on primitives, in which case we can short\n                  // circuit it with === operator, only when === fails do we use .equals\n                  if (watch) {\n                    if ((value = watch.get(current)) !== (last = watch.last) &&\n                        !(watch.eq\n                            ? equals(value, last)\n                            : (typeof value === 'number' && typeof last === 'number'\n                               && isNaN(value) && isNaN(last)))) {\n                      dirty = true;\n                      lastDirtyWatch = watch;\n                      watch.last = watch.eq ? copy(value, null) : value;\n                      watch.fn(value, ((last === initWatchVal) ? value : last), current);\n                      if (ttl < 5) {\n                        logIdx = 4 - ttl;\n                        if (!watchLog[logIdx]) watchLog[logIdx] = [];\n                        watchLog[logIdx].push({\n                          msg: isFunction(watch.exp) ? 'fn: ' + (watch.exp.name || watch.exp.toString()) : watch.exp,\n                          newVal: value,\n                          oldVal: last\n                        });\n                      }\n                    } else if (watch === lastDirtyWatch) {\n                      // If the most recently dirty watcher is now clean, short circuit since the remaining watchers\n                      // have already been tested.\n                      dirty = false;\n                      break traverseScopesLoop;\n                    }\n                  }\n                } catch (e) {\n                  $exceptionHandler(e);\n                }\n              }\n            }\n\n            // Insanity Warning: scope depth-first traversal\n            // yes, this code is a bit crazy, but it works and we have tests to prove it!\n            // this piece should be kept in sync with the traversal in $broadcast\n            if (!(next = (current.$$childHead ||\n                (current !== target && current.$$nextSibling)))) {\n              while (current !== target && !(next = current.$$nextSibling)) {\n                current = current.$parent;\n              }\n            }\n          } while ((current = next));\n\n          // `break traverseScopesLoop;` takes us to here\n\n          if ((dirty || asyncQueue.length) && !(ttl--)) {\n            clearPhase();\n            throw $rootScopeMinErr('infdig',\n                '{0} $digest() iterations reached. Aborting!\\n' +\n                'Watchers fired in the last 5 iterations: {1}',\n                TTL, watchLog);\n          }\n\n        } while (dirty || asyncQueue.length);\n\n        clearPhase();\n\n        while (postDigestQueue.length) {\n          try {\n            postDigestQueue.shift()();\n          } catch (e) {\n            $exceptionHandler(e);\n          }\n        }\n      },\n\n\n      /**\n       * @ngdoc event\n       * @name $rootScope.Scope#$destroy\n       * @eventType broadcast on scope being destroyed\n       *\n       * @description\n       * Broadcasted when a scope and its children are being destroyed.\n       *\n       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to\n       * clean up DOM bindings before an element is removed from the DOM.\n       */\n\n      /**\n       * @ngdoc method\n       * @name $rootScope.Scope#$destroy\n       * @kind function\n       *\n       * @description\n       * Removes the current scope (and all of its children) from the parent scope. Removal implies\n       * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer\n       * propagate to the current scope and its children. Removal also implies that the current\n       * scope is eligible for garbage collection.\n       *\n       * The `$destroy()` is usually used by directives such as\n       * {@link ng.directive:ngRepeat ngRepeat} for managing the\n       * unrolling of the loop.\n       *\n       * Just before a scope is destroyed, a `$destroy` event is broadcasted on this scope.\n       * Application code can register a `$destroy` event handler that will give it a chance to\n       * perform any necessary cleanup.\n       *\n       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to\n       * clean up DOM bindings before an element is removed from the DOM.\n       */\n      $destroy: function() {\n        // we can't destroy the root scope or a scope that has been already destroyed\n        if (this.$$destroyed) return;\n        var parent = this.$parent;\n\n        this.$broadcast('$destroy');\n        this.$$destroyed = true;\n        if (this === $rootScope) return;\n\n        for (var eventName in this.$$listenerCount) {\n          decrementListenerCount(this, this.$$listenerCount[eventName], eventName);\n        }\n\n        // sever all the references to parent scopes (after this cleanup, the current scope should\n        // not be retained by any of our references and should be eligible for garbage collection)\n        if (parent.$$childHead == this) parent.$$childHead = this.$$nextSibling;\n        if (parent.$$childTail == this) parent.$$childTail = this.$$prevSibling;\n        if (this.$$prevSibling) this.$$prevSibling.$$nextSibling = this.$$nextSibling;\n        if (this.$$nextSibling) this.$$nextSibling.$$prevSibling = this.$$prevSibling;\n\n        // Disable listeners, watchers and apply/digest methods\n        this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = noop;\n        this.$on = this.$watch = this.$watchGroup = function() { return noop; };\n        this.$$listeners = {};\n\n        // All of the code below is bogus code that works around V8's memory leak via optimized code\n        // and inline caches.\n        //\n        // see:\n        // - https://code.google.com/p/v8/issues/detail?id=2073#c26\n        // - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909\n        // - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451\n\n        this.$parent = this.$$nextSibling = this.$$prevSibling = this.$$childHead =\n            this.$$childTail = this.$root = this.$$watchers = null;\n      },\n\n      /**\n       * @ngdoc method\n       * @name $rootScope.Scope#$eval\n       * @kind function\n       *\n       * @description\n       * Executes the `expression` on the current scope and returns the result. Any exceptions in\n       * the expression are propagated (uncaught). This is useful when evaluating Angular\n       * expressions.\n       *\n       * # Example\n       * ```js\n           var scope = ng.$rootScope.Scope();\n           scope.a = 1;\n           scope.b = 2;\n\n           expect(scope.$eval('a+b')).toEqual(3);\n           expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);\n       * ```\n       *\n       * @param {(string|function())=} expression An angular expression to be executed.\n       *\n       *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.\n       *    - `function(scope)`: execute the function with the current `scope` parameter.\n       *\n       * @param {(object)=} locals Local variables object, useful for overriding values in scope.\n       * @returns {*} The result of evaluating the expression.\n       */\n      $eval: function(expr, locals) {\n        return $parse(expr)(this, locals);\n      },\n\n      /**\n       * @ngdoc method\n       * @name $rootScope.Scope#$evalAsync\n       * @kind function\n       *\n       * @description\n       * Executes the expression on the current scope at a later point in time.\n       *\n       * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only\n       * that:\n       *\n       *   - it will execute after the function that scheduled the evaluation (preferably before DOM\n       *     rendering).\n       *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after\n       *     `expression` execution.\n       *\n       * Any exceptions from the execution of the expression are forwarded to the\n       * {@link ng.$exceptionHandler $exceptionHandler} service.\n       *\n       * __Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle\n       * will be scheduled. However, it is encouraged to always call code that changes the model\n       * from within an `$apply` call. That includes code evaluated via `$evalAsync`.\n       *\n       * @param {(string|function())=} expression An angular expression to be executed.\n       *\n       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.\n       *    - `function(scope)`: execute the function with the current `scope` parameter.\n       *\n       * @param {(object)=} locals Local variables object, useful for overriding values in scope.\n       */\n      $evalAsync: function(expr, locals) {\n        // if we are outside of an $digest loop and this is the first time we are scheduling async\n        // task also schedule async auto-flush\n        if (!$rootScope.$$phase && !asyncQueue.length) {\n          $browser.defer(function() {\n            if (asyncQueue.length) {\n              $rootScope.$digest();\n            }\n          });\n        }\n\n        asyncQueue.push({scope: this, expression: expr, locals: locals});\n      },\n\n      $$postDigest: function(fn) {\n        postDigestQueue.push(fn);\n      },\n\n      /**\n       * @ngdoc method\n       * @name $rootScope.Scope#$apply\n       * @kind function\n       *\n       * @description\n       * `$apply()` is used to execute an expression in angular from outside of the angular\n       * framework. (For example from browser DOM events, setTimeout, XHR or third party libraries).\n       * Because we are calling into the angular framework we need to perform proper scope life\n       * cycle of {@link ng.$exceptionHandler exception handling},\n       * {@link ng.$rootScope.Scope#$digest executing watches}.\n       *\n       * ## Life cycle\n       *\n       * # Pseudo-Code of `$apply()`\n       * ```js\n           function $apply(expr) {\n             try {\n               return $eval(expr);\n             } catch (e) {\n               $exceptionHandler(e);\n             } finally {\n               $root.$digest();\n             }\n           }\n       * ```\n       *\n       *\n       * Scope's `$apply()` method transitions through the following stages:\n       *\n       * 1. The {@link guide/expression expression} is executed using the\n       *    {@link ng.$rootScope.Scope#$eval $eval()} method.\n       * 2. Any exceptions from the execution of the expression are forwarded to the\n       *    {@link ng.$exceptionHandler $exceptionHandler} service.\n       * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the\n       *    expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.\n       *\n       *\n       * @param {(string|function())=} exp An angular expression to be executed.\n       *\n       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.\n       *    - `function(scope)`: execute the function with current `scope` parameter.\n       *\n       * @returns {*} The result of evaluating the expression.\n       */\n      $apply: function(expr) {\n        try {\n          beginPhase('$apply');\n          return this.$eval(expr);\n        } catch (e) {\n          $exceptionHandler(e);\n        } finally {\n          clearPhase();\n          try {\n            $rootScope.$digest();\n          } catch (e) {\n            $exceptionHandler(e);\n            throw e;\n          }\n        }\n      },\n\n      /**\n       * @ngdoc method\n       * @name $rootScope.Scope#$applyAsync\n       * @kind function\n       *\n       * @description\n       * Schedule the invocation of $apply to occur at a later time. The actual time difference\n       * varies across browsers, but is typically around ~10 milliseconds.\n       *\n       * This can be used to queue up multiple expressions which need to be evaluated in the same\n       * digest.\n       *\n       * @param {(string|function())=} exp An angular expression to be executed.\n       *\n       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.\n       *    - `function(scope)`: execute the function with current `scope` parameter.\n       */\n      $applyAsync: function(expr) {\n        var scope = this;\n        expr && applyAsyncQueue.push($applyAsyncExpression);\n        scheduleApplyAsync();\n\n        function $applyAsyncExpression() {\n          scope.$eval(expr);\n        }\n      },\n\n      /**\n       * @ngdoc method\n       * @name $rootScope.Scope#$on\n       * @kind function\n       *\n       * @description\n       * Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for\n       * discussion of event life cycle.\n       *\n       * The event listener function format is: `function(event, args...)`. The `event` object\n       * passed into the listener has the following attributes:\n       *\n       *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or\n       *     `$broadcast`-ed.\n       *   - `currentScope` - `{Scope}`: the scope that is currently handling the event. Once the\n       *     event propagates through the scope hierarchy, this property is set to null.\n       *   - `name` - `{string}`: name of the event.\n       *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel\n       *     further event propagation (available only for events that were `$emit`-ed).\n       *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag\n       *     to true.\n       *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.\n       *\n       * @param {string} name Event name to listen on.\n       * @param {function(event, ...args)} listener Function to call when the event is emitted.\n       * @returns {function()} Returns a deregistration function for this listener.\n       */\n      $on: function(name, listener) {\n        var namedListeners = this.$$listeners[name];\n        if (!namedListeners) {\n          this.$$listeners[name] = namedListeners = [];\n        }\n        namedListeners.push(listener);\n\n        var current = this;\n        do {\n          if (!current.$$listenerCount[name]) {\n            current.$$listenerCount[name] = 0;\n          }\n          current.$$listenerCount[name]++;\n        } while ((current = current.$parent));\n\n        var self = this;\n        return function() {\n          var indexOfListener = namedListeners.indexOf(listener);\n          if (indexOfListener !== -1) {\n            namedListeners[indexOfListener] = null;\n            decrementListenerCount(self, 1, name);\n          }\n        };\n      },\n\n\n      /**\n       * @ngdoc method\n       * @name $rootScope.Scope#$emit\n       * @kind function\n       *\n       * @description\n       * Dispatches an event `name` upwards through the scope hierarchy notifying the\n       * registered {@link ng.$rootScope.Scope#$on} listeners.\n       *\n       * The event life cycle starts at the scope on which `$emit` was called. All\n       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get\n       * notified. Afterwards, the event traverses upwards toward the root scope and calls all\n       * registered listeners along the way. The event will stop propagating if one of the listeners\n       * cancels it.\n       *\n       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed\n       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.\n       *\n       * @param {string} name Event name to emit.\n       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.\n       * @return {Object} Event object (see {@link ng.$rootScope.Scope#$on}).\n       */\n      $emit: function(name, args) {\n        var empty = [],\n            namedListeners,\n            scope = this,\n            stopPropagation = false,\n            event = {\n              name: name,\n              targetScope: scope,\n              stopPropagation: function() {stopPropagation = true;},\n              preventDefault: function() {\n                event.defaultPrevented = true;\n              },\n              defaultPrevented: false\n            },\n            listenerArgs = concat([event], arguments, 1),\n            i, length;\n\n        do {\n          namedListeners = scope.$$listeners[name] || empty;\n          event.currentScope = scope;\n          for (i = 0, length = namedListeners.length; i < length; i++) {\n\n            // if listeners were deregistered, defragment the array\n            if (!namedListeners[i]) {\n              namedListeners.splice(i, 1);\n              i--;\n              length--;\n              continue;\n            }\n            try {\n              //allow all listeners attached to the current scope to run\n              namedListeners[i].apply(null, listenerArgs);\n            } catch (e) {\n              $exceptionHandler(e);\n            }\n          }\n          //if any listener on the current scope stops propagation, prevent bubbling\n          if (stopPropagation) {\n            event.currentScope = null;\n            return event;\n          }\n          //traverse upwards\n          scope = scope.$parent;\n        } while (scope);\n\n        event.currentScope = null;\n\n        return event;\n      },\n\n\n      /**\n       * @ngdoc method\n       * @name $rootScope.Scope#$broadcast\n       * @kind function\n       *\n       * @description\n       * Dispatches an event `name` downwards to all child scopes (and their children) notifying the\n       * registered {@link ng.$rootScope.Scope#$on} listeners.\n       *\n       * The event life cycle starts at the scope on which `$broadcast` was called. All\n       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get\n       * notified. Afterwards, the event propagates to all direct and indirect scopes of the current\n       * scope and calls all registered listeners along the way. The event cannot be canceled.\n       *\n       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed\n       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.\n       *\n       * @param {string} name Event name to broadcast.\n       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.\n       * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}\n       */\n      $broadcast: function(name, args) {\n        var target = this,\n            current = target,\n            next = target,\n            event = {\n              name: name,\n              targetScope: target,\n              preventDefault: function() {\n                event.defaultPrevented = true;\n              },\n              defaultPrevented: false\n            };\n\n        if (!target.$$listenerCount[name]) return event;\n\n        var listenerArgs = concat([event], arguments, 1),\n            listeners, i, length;\n\n        //down while you can, then up and next sibling or up and next sibling until back at root\n        while ((current = next)) {\n          event.currentScope = current;\n          listeners = current.$$listeners[name] || [];\n          for (i = 0, length = listeners.length; i < length; i++) {\n            // if listeners were deregistered, defragment the array\n            if (!listeners[i]) {\n              listeners.splice(i, 1);\n              i--;\n              length--;\n              continue;\n            }\n\n            try {\n              listeners[i].apply(null, listenerArgs);\n            } catch (e) {\n              $exceptionHandler(e);\n            }\n          }\n\n          // Insanity Warning: scope depth-first traversal\n          // yes, this code is a bit crazy, but it works and we have tests to prove it!\n          // this piece should be kept in sync with the traversal in $digest\n          // (though it differs due to having the extra check for $$listenerCount)\n          if (!(next = ((current.$$listenerCount[name] && current.$$childHead) ||\n              (current !== target && current.$$nextSibling)))) {\n            while (current !== target && !(next = current.$$nextSibling)) {\n              current = current.$parent;\n            }\n          }\n        }\n\n        event.currentScope = null;\n        return event;\n      }\n    };\n\n    var $rootScope = new Scope();\n\n    //The internal queues. Expose them on the $rootScope for debugging/testing purposes.\n    var asyncQueue = $rootScope.$$asyncQueue = [];\n    var postDigestQueue = $rootScope.$$postDigestQueue = [];\n    var applyAsyncQueue = $rootScope.$$applyAsyncQueue = [];\n\n    return $rootScope;\n\n\n    function beginPhase(phase) {\n      if ($rootScope.$$phase) {\n        throw $rootScopeMinErr('inprog', '{0} already in progress', $rootScope.$$phase);\n      }\n\n      $rootScope.$$phase = phase;\n    }\n\n    function clearPhase() {\n      $rootScope.$$phase = null;\n    }\n\n\n    function decrementListenerCount(current, count, name) {\n      do {\n        current.$$listenerCount[name] -= count;\n\n        if (current.$$listenerCount[name] === 0) {\n          delete current.$$listenerCount[name];\n        }\n      } while ((current = current.$parent));\n    }\n\n    /**\n     * function used as an initial value for watchers.\n     * because it's unique we can easily tell it apart from other values\n     */\n    function initWatchVal() {}\n\n    function flushApplyAsync() {\n      while (applyAsyncQueue.length) {\n        try {\n          applyAsyncQueue.shift()();\n        } catch (e) {\n          $exceptionHandler(e);\n        }\n      }\n      applyAsyncId = null;\n    }\n\n    function scheduleApplyAsync() {\n      if (applyAsyncId === null) {\n        applyAsyncId = $browser.defer(function() {\n          $rootScope.$apply(flushApplyAsync);\n        });\n      }\n    }\n  }];\n}\n\n/**\n * @description\n * Private service to sanitize uris for links and images. Used by $compile and $sanitize.\n */\nfunction $$SanitizeUriProvider() {\n  var aHrefSanitizationWhitelist = /^\\s*(https?|ftp|mailto|tel|file):/,\n    imgSrcSanitizationWhitelist = /^\\s*((https?|ftp|file|blob):|data:image\\/)/;\n\n  /**\n   * @description\n   * Retrieves or overrides the default regular expression that is used for whitelisting of safe\n   * urls during a[href] sanitization.\n   *\n   * The sanitization is a security measure aimed at prevent XSS attacks via html links.\n   *\n   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into\n   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`\n   * regular expression. If a match is found, the original url is written into the dom. Otherwise,\n   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.\n   *\n   * @param {RegExp=} regexp New regexp to whitelist urls with.\n   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for\n   *    chaining otherwise.\n   */\n  this.aHrefSanitizationWhitelist = function(regexp) {\n    if (isDefined(regexp)) {\n      aHrefSanitizationWhitelist = regexp;\n      return this;\n    }\n    return aHrefSanitizationWhitelist;\n  };\n\n\n  /**\n   * @description\n   * Retrieves or overrides the default regular expression that is used for whitelisting of safe\n   * urls during img[src] sanitization.\n   *\n   * The sanitization is a security measure aimed at prevent XSS attacks via html links.\n   *\n   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into\n   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`\n   * regular expression. If a match is found, the original url is written into the dom. Otherwise,\n   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.\n   *\n   * @param {RegExp=} regexp New regexp to whitelist urls with.\n   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for\n   *    chaining otherwise.\n   */\n  this.imgSrcSanitizationWhitelist = function(regexp) {\n    if (isDefined(regexp)) {\n      imgSrcSanitizationWhitelist = regexp;\n      return this;\n    }\n    return imgSrcSanitizationWhitelist;\n  };\n\n  this.$get = function() {\n    return function sanitizeUri(uri, isImage) {\n      var regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;\n      var normalizedVal;\n      normalizedVal = urlResolve(uri).href;\n      if (normalizedVal !== '' && !normalizedVal.match(regex)) {\n        return 'unsafe:' + normalizedVal;\n      }\n      return uri;\n    };\n  };\n}\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *     Any commits to this file should be reviewed with security in mind.  *\n *   Changes to this file can potentially create security vulnerabilities. *\n *          An approval from 2 Core members with history of modifying      *\n *                         this file is required.                          *\n *                                                                         *\n *  Does the change somehow allow for arbitrary javascript to be executed? *\n *    Or allows for someone to change the prototype of built-in objects?   *\n *     Or gives undesired access to variables likes document or window?    *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\nvar $sceMinErr = minErr('$sce');\n\nvar SCE_CONTEXTS = {\n  HTML: 'html',\n  CSS: 'css',\n  URL: 'url',\n  // RESOURCE_URL is a subtype of URL used in contexts where a privileged resource is sourced from a\n  // url.  (e.g. ng-include, script src, templateUrl)\n  RESOURCE_URL: 'resourceUrl',\n  JS: 'js'\n};\n\n// Helper functions follow.\n\nfunction adjustMatcher(matcher) {\n  if (matcher === 'self') {\n    return matcher;\n  } else if (isString(matcher)) {\n    // Strings match exactly except for 2 wildcards - '*' and '**'.\n    // '*' matches any character except those from the set ':/.?&'.\n    // '**' matches any character (like .* in a RegExp).\n    // More than 2 *'s raises an error as it's ill defined.\n    if (matcher.indexOf('***') > -1) {\n      throw $sceMinErr('iwcard',\n          'Illegal sequence *** in string matcher.  String: {0}', matcher);\n    }\n    matcher = escapeForRegexp(matcher).\n                  replace('\\\\*\\\\*', '.*').\n                  replace('\\\\*', '[^:/.?&;]*');\n    return new RegExp('^' + matcher + '$');\n  } else if (isRegExp(matcher)) {\n    // The only other type of matcher allowed is a Regexp.\n    // Match entire URL / disallow partial matches.\n    // Flags are reset (i.e. no global, ignoreCase or multiline)\n    return new RegExp('^' + matcher.source + '$');\n  } else {\n    throw $sceMinErr('imatcher',\n        'Matchers may only be \"self\", string patterns or RegExp objects');\n  }\n}\n\n\nfunction adjustMatchers(matchers) {\n  var adjustedMatchers = [];\n  if (isDefined(matchers)) {\n    forEach(matchers, function(matcher) {\n      adjustedMatchers.push(adjustMatcher(matcher));\n    });\n  }\n  return adjustedMatchers;\n}\n\n\n/**\n * @ngdoc service\n * @name $sceDelegate\n * @kind function\n *\n * @description\n *\n * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict\n * Contextual Escaping (SCE)} services to AngularJS.\n *\n * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of\n * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is\n * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to\n * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things\n * work because `$sce` delegates to `$sceDelegate` for these operations.\n *\n * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.\n *\n * The default instance of `$sceDelegate` should work out of the box with little pain.  While you\n * can override it completely to change the behavior of `$sce`, the common case would\n * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting\n * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as\n * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist\n * $sceDelegateProvider.resourceUrlWhitelist} and {@link\n * ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}\n */\n\n/**\n * @ngdoc provider\n * @name $sceDelegateProvider\n * @description\n *\n * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate\n * $sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure\n * that the URLs used for sourcing Angular templates are safe.  Refer {@link\n * ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and\n * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}\n *\n * For the general details about this service in Angular, read the main page for {@link ng.$sce\n * Strict Contextual Escaping (SCE)}.\n *\n * **Example**:  Consider the following case. <a name=\"example\"></a>\n *\n * - your app is hosted at url `http://myapp.example.com/`\n * - but some of your templates are hosted on other domains you control such as\n *   `http://srv01.assets.example.com/`,  `http://srv02.assets.example.com/`, etc.\n * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.\n *\n * Here is what a secure configuration for this scenario might look like:\n *\n * ```\n *  angular.module('myApp', []).config(function($sceDelegateProvider) {\n *    $sceDelegateProvider.resourceUrlWhitelist([\n *      // Allow same origin resource loads.\n *      'self',\n *      // Allow loading from our assets domain.  Notice the difference between * and **.\n *      'http://srv*.assets.example.com/**'\n *    ]);\n *\n *    // The blacklist overrides the whitelist so the open redirect here is blocked.\n *    $sceDelegateProvider.resourceUrlBlacklist([\n *      'http://myapp.example.com/clickThru**'\n *    ]);\n *  });\n * ```\n */\n\nfunction $SceDelegateProvider() {\n  this.SCE_CONTEXTS = SCE_CONTEXTS;\n\n  // Resource URLs can also be trusted by policy.\n  var resourceUrlWhitelist = ['self'],\n      resourceUrlBlacklist = [];\n\n  /**\n   * @ngdoc method\n   * @name $sceDelegateProvider#resourceUrlWhitelist\n   * @kind function\n   *\n   * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value\n   *     provided.  This must be an array or null.  A snapshot of this array is used so further\n   *     changes to the array are ignored.\n   *\n   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items\n   *     allowed in this array.\n   *\n   *     Note: **an empty whitelist array will block all URLs**!\n   *\n   * @return {Array} the currently set whitelist array.\n   *\n   * The **default value** when no whitelist has been explicitly set is `['self']` allowing only\n   * same origin resource requests.\n   *\n   * @description\n   * Sets/Gets the whitelist of trusted resource URLs.\n   */\n  this.resourceUrlWhitelist = function(value) {\n    if (arguments.length) {\n      resourceUrlWhitelist = adjustMatchers(value);\n    }\n    return resourceUrlWhitelist;\n  };\n\n  /**\n   * @ngdoc method\n   * @name $sceDelegateProvider#resourceUrlBlacklist\n   * @kind function\n   *\n   * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value\n   *     provided.  This must be an array or null.  A snapshot of this array is used so further\n   *     changes to the array are ignored.\n   *\n   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items\n   *     allowed in this array.\n   *\n   *     The typical usage for the blacklist is to **block\n   *     [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as\n   *     these would otherwise be trusted but actually return content from the redirected domain.\n   *\n   *     Finally, **the blacklist overrides the whitelist** and has the final say.\n   *\n   * @return {Array} the currently set blacklist array.\n   *\n   * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there\n   * is no blacklist.)\n   *\n   * @description\n   * Sets/Gets the blacklist of trusted resource URLs.\n   */\n\n  this.resourceUrlBlacklist = function(value) {\n    if (arguments.length) {\n      resourceUrlBlacklist = adjustMatchers(value);\n    }\n    return resourceUrlBlacklist;\n  };\n\n  this.$get = ['$injector', function($injector) {\n\n    var htmlSanitizer = function htmlSanitizer(html) {\n      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');\n    };\n\n    if ($injector.has('$sanitize')) {\n      htmlSanitizer = $injector.get('$sanitize');\n    }\n\n\n    function matchUrl(matcher, parsedUrl) {\n      if (matcher === 'self') {\n        return urlIsSameOrigin(parsedUrl);\n      } else {\n        // definitely a regex.  See adjustMatchers()\n        return !!matcher.exec(parsedUrl.href);\n      }\n    }\n\n    function isResourceUrlAllowedByPolicy(url) {\n      var parsedUrl = urlResolve(url.toString());\n      var i, n, allowed = false;\n      // Ensure that at least one item from the whitelist allows this url.\n      for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) {\n        if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {\n          allowed = true;\n          break;\n        }\n      }\n      if (allowed) {\n        // Ensure that no item from the blacklist blocked this url.\n        for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) {\n          if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {\n            allowed = false;\n            break;\n          }\n        }\n      }\n      return allowed;\n    }\n\n    function generateHolderType(Base) {\n      var holderType = function TrustedValueHolderType(trustedValue) {\n        this.$$unwrapTrustedValue = function() {\n          return trustedValue;\n        };\n      };\n      if (Base) {\n        holderType.prototype = new Base();\n      }\n      holderType.prototype.valueOf = function sceValueOf() {\n        return this.$$unwrapTrustedValue();\n      };\n      holderType.prototype.toString = function sceToString() {\n        return this.$$unwrapTrustedValue().toString();\n      };\n      return holderType;\n    }\n\n    var trustedValueHolderBase = generateHolderType(),\n        byType = {};\n\n    byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);\n    byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);\n    byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);\n    byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);\n    byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);\n\n    /**\n     * @ngdoc method\n     * @name $sceDelegate#trustAs\n     *\n     * @description\n     * Returns an object that is trusted by angular for use in specified strict\n     * contextual escaping contexts (such as ng-bind-html, ng-include, any src\n     * attribute interpolation, any dom event binding attribute interpolation\n     * such as for onclick,  etc.) that uses the provided value.\n     * See {@link ng.$sce $sce} for enabling strict contextual escaping.\n     *\n     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,\n     *   resourceUrl, html, js and css.\n     * @param {*} value The value that that should be considered trusted/safe.\n     * @returns {*} A value that can be used to stand in for the provided `value` in places\n     * where Angular expects a $sce.trustAs() return value.\n     */\n    function trustAs(type, trustedValue) {\n      var Constructor = (byType.hasOwnProperty(type) ? byType[type] : null);\n      if (!Constructor) {\n        throw $sceMinErr('icontext',\n            'Attempted to trust a value in invalid context. Context: {0}; Value: {1}',\n            type, trustedValue);\n      }\n      if (trustedValue === null || trustedValue === undefined || trustedValue === '') {\n        return trustedValue;\n      }\n      // All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting\n      // mutable objects, we ensure here that the value passed in is actually a string.\n      if (typeof trustedValue !== 'string') {\n        throw $sceMinErr('itype',\n            'Attempted to trust a non-string value in a content requiring a string: Context: {0}',\n            type);\n      }\n      return new Constructor(trustedValue);\n    }\n\n    /**\n     * @ngdoc method\n     * @name $sceDelegate#valueOf\n     *\n     * @description\n     * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs\n     * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link\n     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.\n     *\n     * If the passed parameter is not a value that had been returned by {@link\n     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.\n     *\n     * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}\n     *      call or anything else.\n     * @returns {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs\n     *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns\n     *     `value` unchanged.\n     */\n    function valueOf(maybeTrusted) {\n      if (maybeTrusted instanceof trustedValueHolderBase) {\n        return maybeTrusted.$$unwrapTrustedValue();\n      } else {\n        return maybeTrusted;\n      }\n    }\n\n    /**\n     * @ngdoc method\n     * @name $sceDelegate#getTrusted\n     *\n     * @description\n     * Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and\n     * returns the originally supplied value if the queried context type is a supertype of the\n     * created type.  If this condition isn't satisfied, throws an exception.\n     *\n     * @param {string} type The kind of context in which this value is to be used.\n     * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs\n     *     `$sceDelegate.trustAs`} call.\n     * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#trustAs\n     *     `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.\n     */\n    function getTrusted(type, maybeTrusted) {\n      if (maybeTrusted === null || maybeTrusted === undefined || maybeTrusted === '') {\n        return maybeTrusted;\n      }\n      var constructor = (byType.hasOwnProperty(type) ? byType[type] : null);\n      if (constructor && maybeTrusted instanceof constructor) {\n        return maybeTrusted.$$unwrapTrustedValue();\n      }\n      // If we get here, then we may only take one of two actions.\n      // 1. sanitize the value for the requested type, or\n      // 2. throw an exception.\n      if (type === SCE_CONTEXTS.RESOURCE_URL) {\n        if (isResourceUrlAllowedByPolicy(maybeTrusted)) {\n          return maybeTrusted;\n        } else {\n          throw $sceMinErr('insecurl',\n              'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}',\n              maybeTrusted.toString());\n        }\n      } else if (type === SCE_CONTEXTS.HTML) {\n        return htmlSanitizer(maybeTrusted);\n      }\n      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');\n    }\n\n    return { trustAs: trustAs,\n             getTrusted: getTrusted,\n             valueOf: valueOf };\n  }];\n}\n\n\n/**\n * @ngdoc provider\n * @name $sceProvider\n * @description\n *\n * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.\n * -   enable/disable Strict Contextual Escaping (SCE) in a module\n * -   override the default implementation with a custom delegate\n *\n * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.\n */\n\n/* jshint maxlen: false*/\n\n/**\n * @ngdoc service\n * @name $sce\n * @kind function\n *\n * @description\n *\n * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.\n *\n * # Strict Contextual Escaping\n *\n * Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain\n * contexts to result in a value that is marked as safe to use for that context.  One example of\n * such a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer\n * to these contexts as privileged or SCE contexts.\n *\n * As of version 1.2, Angular ships with SCE enabled by default.\n *\n * Note:  When enabled (the default), IE<11 in quirks mode is not supported.  In this mode, IE<11 allow\n * one to execute arbitrary javascript by the use of the expression() syntax.  Refer\n * <http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.\n * You can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`\n * to the top of your HTML document.\n *\n * SCE assists in writing code in way that (a) is secure by default and (b) makes auditing for\n * security vulnerabilities such as XSS, clickjacking, etc. a lot easier.\n *\n * Here's an example of a binding in a privileged context:\n *\n * ```\n * <input ng-model=\"userHtml\">\n * <div ng-bind-html=\"userHtml\"></div>\n * ```\n *\n * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE\n * disabled, this application allows the user to render arbitrary HTML into the DIV.\n * In a more realistic example, one may be rendering user comments, blog articles, etc. via\n * bindings.  (HTML is just one example of a context where rendering user controlled input creates\n * security vulnerabilities.)\n *\n * For the case of HTML, you might use a library, either on the client side, or on the server side,\n * to sanitize unsafe HTML before binding to the value and rendering it in the document.\n *\n * How would you ensure that every place that used these types of bindings was bound to a value that\n * was sanitized by your library (or returned as safe for rendering by your server?)  How can you\n * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some\n * properties/fields and forgot to update the binding to the sanitized value?\n *\n * To be secure by default, you want to ensure that any such bindings are disallowed unless you can\n * determine that something explicitly says it's safe to use a value for binding in that\n * context.  You can then audit your code (a simple grep would do) to ensure that this is only done\n * for those values that you can easily tell are safe - because they were received from your server,\n * sanitized by your library, etc.  You can organize your codebase to help with this - perhaps\n * allowing only the files in a specific directory to do this.  Ensuring that the internal API\n * exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.\n *\n * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}\n * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to\n * obtain values that will be accepted by SCE / privileged contexts.\n *\n *\n * ## How does it work?\n *\n * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted\n * $sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link\n * ng.$sce#parseAs $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the\n * {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.\n *\n * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link\n * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly\n * simplified):\n *\n * ```\n * var ngBindHtmlDirective = ['$sce', function($sce) {\n *   return function(scope, element, attr) {\n *     scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {\n *       element.html(value || '');\n *     });\n *   };\n * }];\n * ```\n *\n * ## Impact on loading templates\n *\n * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as\n * `templateUrl`'s specified by {@link guide/directive directives}.\n *\n * By default, Angular only loads templates from the same domain and protocol as the application\n * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl\n * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or\n * protocols, you may either either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist\n * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.\n *\n * *Please note*:\n * The browser's\n * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)\n * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)\n * policy apply in addition to this and may further restrict whether the template is successfully\n * loaded.  This means that without the right CORS policy, loading templates from a different domain\n * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some\n * browsers.\n *\n * ## This feels like too much overhead\n *\n * It's important to remember that SCE only applies to interpolation expressions.\n *\n * If your expressions are constant literals, they're automatically trusted and you don't need to\n * call `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.\n * `<div ng-bind-html=\"'<b>implicitly trusted</b>'\"></div>`) just works.\n *\n * Additionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them\n * through {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.\n *\n * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load\n * templates in `ng-include` from your application's domain without having to even know about SCE.\n * It blocks loading templates from other domains or loading templates over http from an https\n * served document.  You can change these by setting your own custom {@link\n * ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link\n * ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.\n *\n * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an\n * application that's secure and can be audited to verify that with much more ease than bolting\n * security onto an application later.\n *\n * <a name=\"contexts\"></a>\n * ## What trusted context types are supported?\n *\n * | Context             | Notes          |\n * |---------------------|----------------|\n * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |\n * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |\n * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |\n * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |\n * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |\n *\n * ## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name=\"resourceUrlPatternItem\"></a>\n *\n *  Each element in these arrays must be one of the following:\n *\n *  - **'self'**\n *    - The special **string**, `'self'`, can be used to match against all URLs of the **same\n *      domain** as the application document using the **same protocol**.\n *  - **String** (except the special value `'self'`)\n *    - The string is matched against the full *normalized / absolute URL* of the resource\n *      being tested (substring matches are not good enough.)\n *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters\n *      match themselves.\n *    - `*`: matches zero or more occurrences of any character other than one of the following 6\n *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and ';'.  It's a useful wildcard for use\n *      in a whitelist.\n *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not\n *      appropriate for use in a scheme, domain, etc. as it would match too much.  (e.g.\n *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might\n *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.\n *      http://foo.example.com/templates/**).\n *  - **RegExp** (*see caveat below*)\n *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax\n *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to\n *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should\n *      have good test coverage).  For instance, the use of `.` in the regex is correct only in a\n *      small number of cases.  A `.` character in the regex used when matching the scheme or a\n *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It\n *      is highly recommended to use the string patterns and only fall back to regular expressions\n *      as a last resort.\n *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is\n *      matched against the **entire** *normalized / absolute URL* of the resource being tested\n *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags\n *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.\n *    - If you are generating your JavaScript from some other templating engine (not\n *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),\n *      remember to escape your regular expression (and be aware that you might need more than\n *      one level of escaping depending on your templating engine and the way you interpolated\n *      the value.)  Do make use of your platform's escaping mechanism as it might be good\n *      enough before coding your own.  E.g. Ruby has\n *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)\n *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).\n *      Javascript lacks a similar built in function for escaping.  Take a look at Google\n *      Closure library's [goog.string.regExpEscape(s)](\n *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).\n *\n * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.\n *\n * ## Show me an example using SCE.\n *\n * <example module=\"mySceApp\" deps=\"angular-sanitize.js\">\n * <file name=\"index.html\">\n *   <div ng-controller=\"AppController as myCtrl\">\n *     <i ng-bind-html=\"myCtrl.explicitlyTrustedHtml\" id=\"explicitlyTrustedHtml\"></i><br><br>\n *     <b>User comments</b><br>\n *     By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when\n *     $sanitize is available.  If $sanitize isn't available, this results in an error instead of an\n *     exploit.\n *     <div class=\"well\">\n *       <div ng-repeat=\"userComment in myCtrl.userComments\">\n *         <b>{{userComment.name}}</b>:\n *         <span ng-bind-html=\"userComment.htmlComment\" class=\"htmlComment\"></span>\n *         <br>\n *       </div>\n *     </div>\n *   </div>\n * </file>\n *\n * <file name=\"script.js\">\n *   angular.module('mySceApp', ['ngSanitize'])\n *     .controller('AppController', ['$http', '$templateCache', '$sce',\n *       function($http, $templateCache, $sce) {\n *         var self = this;\n *         $http.get(\"test_data.json\", {cache: $templateCache}).success(function(userComments) {\n *           self.userComments = userComments;\n *         });\n *         self.explicitlyTrustedHtml = $sce.trustAsHtml(\n *             '<span onmouseover=\"this.textContent=&quot;Explicitly trusted HTML bypasses ' +\n *             'sanitization.&quot;\">Hover over this text.</span>');\n *       }]);\n * </file>\n *\n * <file name=\"test_data.json\">\n * [\n *   { \"name\": \"Alice\",\n *     \"htmlComment\":\n *         \"<span onmouseover='this.textContent=\\\"PWN3D!\\\"'>Is <i>anyone</i> reading this?</span>\"\n *   },\n *   { \"name\": \"Bob\",\n *     \"htmlComment\": \"<i>Yes!</i>  Am I the only other one?\"\n *   }\n * ]\n * </file>\n *\n * <file name=\"protractor.js\" type=\"protractor\">\n *   describe('SCE doc demo', function() {\n *     it('should sanitize untrusted values', function() {\n *       expect(element.all(by.css('.htmlComment')).first().getInnerHtml())\n *           .toBe('<span>Is <i>anyone</i> reading this?</span>');\n *     });\n *\n *     it('should NOT sanitize explicitly trusted values', function() {\n *       expect(element(by.id('explicitlyTrustedHtml')).getInnerHtml()).toBe(\n *           '<span onmouseover=\"this.textContent=&quot;Explicitly trusted HTML bypasses ' +\n *           'sanitization.&quot;\">Hover over this text.</span>');\n *     });\n *   });\n * </file>\n * </example>\n *\n *\n *\n * ## Can I disable SCE completely?\n *\n * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits\n * for little coding overhead.  It will be much harder to take an SCE disabled application and\n * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE\n * for cases where you have a lot of existing code that was written before SCE was introduced and\n * you're migrating them a module at a time.\n *\n * That said, here's how you can completely disable SCE:\n *\n * ```\n * angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {\n *   // Completely disable SCE.  For demonstration purposes only!\n *   // Do not use in new projects.\n *   $sceProvider.enabled(false);\n * });\n * ```\n *\n */\n/* jshint maxlen: 100 */\n\nfunction $SceProvider() {\n  var enabled = true;\n\n  /**\n   * @ngdoc method\n   * @name $sceProvider#enabled\n   * @kind function\n   *\n   * @param {boolean=} value If provided, then enables/disables SCE.\n   * @return {boolean} true if SCE is enabled, false otherwise.\n   *\n   * @description\n   * Enables/disables SCE and returns the current value.\n   */\n  this.enabled = function(value) {\n    if (arguments.length) {\n      enabled = !!value;\n    }\n    return enabled;\n  };\n\n\n  /* Design notes on the default implementation for SCE.\n   *\n   * The API contract for the SCE delegate\n   * -------------------------------------\n   * The SCE delegate object must provide the following 3 methods:\n   *\n   * - trustAs(contextEnum, value)\n   *     This method is used to tell the SCE service that the provided value is OK to use in the\n   *     contexts specified by contextEnum.  It must return an object that will be accepted by\n   *     getTrusted() for a compatible contextEnum and return this value.\n   *\n   * - valueOf(value)\n   *     For values that were not produced by trustAs(), return them as is.  For values that were\n   *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if\n   *     trustAs is wrapping the given values into some type, this operation unwraps it when given\n   *     such a value.\n   *\n   * - getTrusted(contextEnum, value)\n   *     This function should return the a value that is safe to use in the context specified by\n   *     contextEnum or throw and exception otherwise.\n   *\n   * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be\n   * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For\n   * instance, an implementation could maintain a registry of all trusted objects by context.  In\n   * such a case, trustAs() would return the same object that was passed in.  getTrusted() would\n   * return the same object passed in if it was found in the registry under a compatible context or\n   * throw an exception otherwise.  An implementation might only wrap values some of the time based\n   * on some criteria.  getTrusted() might return a value and not throw an exception for special\n   * constants or objects even if not wrapped.  All such implementations fulfill this contract.\n   *\n   *\n   * A note on the inheritance model for SCE contexts\n   * ------------------------------------------------\n   * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This\n   * is purely an implementation details.\n   *\n   * The contract is simply this:\n   *\n   *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)\n   *     will also succeed.\n   *\n   * Inheritance happens to capture this in a natural way.  In some future, we\n   * may not use inheritance anymore.  That is OK because no code outside of\n   * sce.js and sceSpecs.js would need to be aware of this detail.\n   */\n\n  this.$get = ['$parse', '$sceDelegate', function(\n                $parse,   $sceDelegate) {\n    // Prereq: Ensure that we're not running in IE<11 quirks mode.  In that mode, IE < 11 allow\n    // the \"expression(javascript expression)\" syntax which is insecure.\n    if (enabled && msie < 8) {\n      throw $sceMinErr('iequirks',\n        'Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks ' +\n        'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML ' +\n        'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');\n    }\n\n    var sce = shallowCopy(SCE_CONTEXTS);\n\n    /**\n     * @ngdoc method\n     * @name $sce#isEnabled\n     * @kind function\n     *\n     * @return {Boolean} true if SCE is enabled, false otherwise.  If you want to set the value, you\n     * have to do it at module config time on {@link ng.$sceProvider $sceProvider}.\n     *\n     * @description\n     * Returns a boolean indicating if SCE is enabled.\n     */\n    sce.isEnabled = function() {\n      return enabled;\n    };\n    sce.trustAs = $sceDelegate.trustAs;\n    sce.getTrusted = $sceDelegate.getTrusted;\n    sce.valueOf = $sceDelegate.valueOf;\n\n    if (!enabled) {\n      sce.trustAs = sce.getTrusted = function(type, value) { return value; };\n      sce.valueOf = identity;\n    }\n\n    /**\n     * @ngdoc method\n     * @name $sce#parseAs\n     *\n     * @description\n     * Converts Angular {@link guide/expression expression} into a function.  This is like {@link\n     * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it\n     * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,\n     * *result*)}\n     *\n     * @param {string} type The kind of SCE context in which this result will be used.\n     * @param {string} expression String expression to compile.\n     * @returns {function(context, locals)} a function which represents the compiled expression:\n     *\n     *    * `context` – `{object}` – an object against which any expressions embedded in the strings\n     *      are evaluated against (typically a scope object).\n     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in\n     *      `context`.\n     */\n    sce.parseAs = function sceParseAs(type, expr) {\n      var parsed = $parse(expr);\n      if (parsed.literal && parsed.constant) {\n        return parsed;\n      } else {\n        return $parse(expr, function(value) {\n          return sce.getTrusted(type, value);\n        });\n      }\n    };\n\n    /**\n     * @ngdoc method\n     * @name $sce#trustAs\n     *\n     * @description\n     * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,\n     * returns an object that is trusted by angular for use in specified strict contextual\n     * escaping contexts (such as ng-bind-html, ng-include, any src attribute\n     * interpolation, any dom event binding attribute interpolation such as for onclick,  etc.)\n     * that uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual\n     * escaping.\n     *\n     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,\n     *   resource_url, html, js and css.\n     * @param {*} value The value that that should be considered trusted/safe.\n     * @returns {*} A value that can be used to stand in for the provided `value` in places\n     * where Angular expects a $sce.trustAs() return value.\n     */\n\n    /**\n     * @ngdoc method\n     * @name $sce#trustAsHtml\n     *\n     * @description\n     * Shorthand method.  `$sce.trustAsHtml(value)` →\n     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}\n     *\n     * @param {*} value The value to trustAs.\n     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedHtml\n     *     $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives\n     *     only accept expressions that are either literal constants or are the\n     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)\n     */\n\n    /**\n     * @ngdoc method\n     * @name $sce#trustAsUrl\n     *\n     * @description\n     * Shorthand method.  `$sce.trustAsUrl(value)` →\n     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}\n     *\n     * @param {*} value The value to trustAs.\n     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedUrl\n     *     $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives\n     *     only accept expressions that are either literal constants or are the\n     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)\n     */\n\n    /**\n     * @ngdoc method\n     * @name $sce#trustAsResourceUrl\n     *\n     * @description\n     * Shorthand method.  `$sce.trustAsResourceUrl(value)` →\n     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}\n     *\n     * @param {*} value The value to trustAs.\n     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedResourceUrl\n     *     $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives\n     *     only accept expressions that are either literal constants or are the return\n     *     value of {@link ng.$sce#trustAs $sce.trustAs}.)\n     */\n\n    /**\n     * @ngdoc method\n     * @name $sce#trustAsJs\n     *\n     * @description\n     * Shorthand method.  `$sce.trustAsJs(value)` →\n     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}\n     *\n     * @param {*} value The value to trustAs.\n     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedJs\n     *     $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives\n     *     only accept expressions that are either literal constants or are the\n     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)\n     */\n\n    /**\n     * @ngdoc method\n     * @name $sce#getTrusted\n     *\n     * @description\n     * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,\n     * takes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the\n     * originally supplied value if the queried context type is a supertype of the created type.\n     * If this condition isn't satisfied, throws an exception.\n     *\n     * @param {string} type The kind of context in which this value is to be used.\n     * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`}\n     *                         call.\n     * @returns {*} The value the was originally provided to\n     *              {@link ng.$sce#trustAs `$sce.trustAs`} if valid in this context.\n     *              Otherwise, throws an exception.\n     */\n\n    /**\n     * @ngdoc method\n     * @name $sce#getTrustedHtml\n     *\n     * @description\n     * Shorthand method.  `$sce.getTrustedHtml(value)` →\n     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}\n     *\n     * @param {*} value The value to pass to `$sce.getTrusted`.\n     * @returns {*} The return value of `$sce.getTrusted($sce.HTML, value)`\n     */\n\n    /**\n     * @ngdoc method\n     * @name $sce#getTrustedCss\n     *\n     * @description\n     * Shorthand method.  `$sce.getTrustedCss(value)` →\n     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}\n     *\n     * @param {*} value The value to pass to `$sce.getTrusted`.\n     * @returns {*} The return value of `$sce.getTrusted($sce.CSS, value)`\n     */\n\n    /**\n     * @ngdoc method\n     * @name $sce#getTrustedUrl\n     *\n     * @description\n     * Shorthand method.  `$sce.getTrustedUrl(value)` →\n     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}\n     *\n     * @param {*} value The value to pass to `$sce.getTrusted`.\n     * @returns {*} The return value of `$sce.getTrusted($sce.URL, value)`\n     */\n\n    /**\n     * @ngdoc method\n     * @name $sce#getTrustedResourceUrl\n     *\n     * @description\n     * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →\n     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}\n     *\n     * @param {*} value The value to pass to `$sceDelegate.getTrusted`.\n     * @returns {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`\n     */\n\n    /**\n     * @ngdoc method\n     * @name $sce#getTrustedJs\n     *\n     * @description\n     * Shorthand method.  `$sce.getTrustedJs(value)` →\n     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}\n     *\n     * @param {*} value The value to pass to `$sce.getTrusted`.\n     * @returns {*} The return value of `$sce.getTrusted($sce.JS, value)`\n     */\n\n    /**\n     * @ngdoc method\n     * @name $sce#parseAsHtml\n     *\n     * @description\n     * Shorthand method.  `$sce.parseAsHtml(expression string)` →\n     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.HTML, value)`}\n     *\n     * @param {string} expression String expression to compile.\n     * @returns {function(context, locals)} a function which represents the compiled expression:\n     *\n     *    * `context` – `{object}` – an object against which any expressions embedded in the strings\n     *      are evaluated against (typically a scope object).\n     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in\n     *      `context`.\n     */\n\n    /**\n     * @ngdoc method\n     * @name $sce#parseAsCss\n     *\n     * @description\n     * Shorthand method.  `$sce.parseAsCss(value)` →\n     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.CSS, value)`}\n     *\n     * @param {string} expression String expression to compile.\n     * @returns {function(context, locals)} a function which represents the compiled expression:\n     *\n     *    * `context` – `{object}` – an object against which any expressions embedded in the strings\n     *      are evaluated against (typically a scope object).\n     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in\n     *      `context`.\n     */\n\n    /**\n     * @ngdoc method\n     * @name $sce#parseAsUrl\n     *\n     * @description\n     * Shorthand method.  `$sce.parseAsUrl(value)` →\n     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.URL, value)`}\n     *\n     * @param {string} expression String expression to compile.\n     * @returns {function(context, locals)} a function which represents the compiled expression:\n     *\n     *    * `context` – `{object}` – an object against which any expressions embedded in the strings\n     *      are evaluated against (typically a scope object).\n     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in\n     *      `context`.\n     */\n\n    /**\n     * @ngdoc method\n     * @name $sce#parseAsResourceUrl\n     *\n     * @description\n     * Shorthand method.  `$sce.parseAsResourceUrl(value)` →\n     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.RESOURCE_URL, value)`}\n     *\n     * @param {string} expression String expression to compile.\n     * @returns {function(context, locals)} a function which represents the compiled expression:\n     *\n     *    * `context` – `{object}` – an object against which any expressions embedded in the strings\n     *      are evaluated against (typically a scope object).\n     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in\n     *      `context`.\n     */\n\n    /**\n     * @ngdoc method\n     * @name $sce#parseAsJs\n     *\n     * @description\n     * Shorthand method.  `$sce.parseAsJs(value)` →\n     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.JS, value)`}\n     *\n     * @param {string} expression String expression to compile.\n     * @returns {function(context, locals)} a function which represents the compiled expression:\n     *\n     *    * `context` – `{object}` – an object against which any expressions embedded in the strings\n     *      are evaluated against (typically a scope object).\n     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in\n     *      `context`.\n     */\n\n    // Shorthand delegations.\n    var parse = sce.parseAs,\n        getTrusted = sce.getTrusted,\n        trustAs = sce.trustAs;\n\n    forEach(SCE_CONTEXTS, function(enumValue, name) {\n      var lName = lowercase(name);\n      sce[camelCase(\"parse_as_\" + lName)] = function(expr) {\n        return parse(enumValue, expr);\n      };\n      sce[camelCase(\"get_trusted_\" + lName)] = function(value) {\n        return getTrusted(enumValue, value);\n      };\n      sce[camelCase(\"trust_as_\" + lName)] = function(value) {\n        return trustAs(enumValue, value);\n      };\n    });\n\n    return sce;\n  }];\n}\n\n/**\n * !!! This is an undocumented \"private\" service !!!\n *\n * @name $sniffer\n * @requires $window\n * @requires $document\n *\n * @property {boolean} history Does the browser support html5 history api ?\n * @property {boolean} transitions Does the browser support CSS transition events ?\n * @property {boolean} animations Does the browser support CSS animation events ?\n *\n * @description\n * This is very simple implementation of testing browser's features.\n */\nfunction $SnifferProvider() {\n  this.$get = ['$window', '$document', function($window, $document) {\n    var eventSupport = {},\n        android =\n          int((/android (\\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]),\n        boxee = /Boxee/i.test(($window.navigator || {}).userAgent),\n        document = $document[0] || {},\n        vendorPrefix,\n        vendorRegex = /^(Moz|webkit|ms)(?=[A-Z])/,\n        bodyStyle = document.body && document.body.style,\n        transitions = false,\n        animations = false,\n        match;\n\n    if (bodyStyle) {\n      for (var prop in bodyStyle) {\n        if (match = vendorRegex.exec(prop)) {\n          vendorPrefix = match[0];\n          vendorPrefix = vendorPrefix.substr(0, 1).toUpperCase() + vendorPrefix.substr(1);\n          break;\n        }\n      }\n\n      if (!vendorPrefix) {\n        vendorPrefix = ('WebkitOpacity' in bodyStyle) && 'webkit';\n      }\n\n      transitions = !!(('transition' in bodyStyle) || (vendorPrefix + 'Transition' in bodyStyle));\n      animations  = !!(('animation' in bodyStyle) || (vendorPrefix + 'Animation' in bodyStyle));\n\n      if (android && (!transitions ||  !animations)) {\n        transitions = isString(document.body.style.webkitTransition);\n        animations = isString(document.body.style.webkitAnimation);\n      }\n    }\n\n\n    return {\n      // Android has history.pushState, but it does not update location correctly\n      // so let's not use the history API at all.\n      // http://code.google.com/p/android/issues/detail?id=17471\n      // https://github.com/angular/angular.js/issues/904\n\n      // older webkit browser (533.9) on Boxee box has exactly the same problem as Android has\n      // so let's not use the history API also\n      // We are purposefully using `!(android < 4)` to cover the case when `android` is undefined\n      // jshint -W018\n      history: !!($window.history && $window.history.pushState && !(android < 4) && !boxee),\n      // jshint +W018\n      hasEvent: function(event) {\n        // IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have\n        // it. In particular the event is not fired when backspace or delete key are pressed or\n        // when cut operation is performed.\n        // IE10+ implements 'input' event but it erroneously fires under various situations,\n        // e.g. when placeholder changes, or a form is focused.\n        if (event === 'input' && msie <= 11) return false;\n\n        if (isUndefined(eventSupport[event])) {\n          var divElm = document.createElement('div');\n          eventSupport[event] = 'on' + event in divElm;\n        }\n\n        return eventSupport[event];\n      },\n      csp: csp(),\n      vendorPrefix: vendorPrefix,\n      transitions: transitions,\n      animations: animations,\n      android: android\n    };\n  }];\n}\n\nvar $compileMinErr = minErr('$compile');\n\n/**\n * @ngdoc service\n * @name $templateRequest\n *\n * @description\n * The `$templateRequest` service runs security checks then downloads the provided template using\n * `$http` and, upon success, stores the contents inside of `$templateCache`. If the HTTP request\n * fails or the response data of the HTTP request is empty, a `$compile` error will be thrown (the\n * exception can be thwarted by setting the 2nd parameter of the function to true). Note that the\n * contents of `$templateCache` are trusted, so the call to `$sce.getTrustedUrl(tpl)` is omitted\n * when `tpl` is of type string and `$templateCache` has the matching entry.\n *\n * @param {string|TrustedResourceUrl} tpl The HTTP request template URL\n * @param {boolean=} ignoreRequestError Whether or not to ignore the exception when the request fails or the template is empty\n *\n * @return {Promise} the HTTP Promise for the given.\n *\n * @property {number} totalPendingRequests total amount of pending template requests being downloaded.\n */\nfunction $TemplateRequestProvider() {\n  this.$get = ['$templateCache', '$http', '$q', '$sce', function($templateCache, $http, $q, $sce) {\n    function handleRequestFn(tpl, ignoreRequestError) {\n      handleRequestFn.totalPendingRequests++;\n\n      // We consider the template cache holds only trusted templates, so\n      // there's no need to go through whitelisting again for keys that already\n      // are included in there. This also makes Angular accept any script\n      // directive, no matter its name. However, we still need to unwrap trusted\n      // types.\n      if (!isString(tpl) || !$templateCache.get(tpl)) {\n        tpl = $sce.getTrustedResourceUrl(tpl);\n      }\n\n      var transformResponse = $http.defaults && $http.defaults.transformResponse;\n\n      if (isArray(transformResponse)) {\n        transformResponse = transformResponse.filter(function(transformer) {\n          return transformer !== defaultHttpResponseTransform;\n        });\n      } else if (transformResponse === defaultHttpResponseTransform) {\n        transformResponse = null;\n      }\n\n      var httpOptions = {\n        cache: $templateCache,\n        transformResponse: transformResponse\n      };\n\n      return $http.get(tpl, httpOptions)\n        ['finally'](function() {\n          handleRequestFn.totalPendingRequests--;\n        })\n        .then(function(response) {\n          return response.data;\n        }, handleError);\n\n      function handleError(resp) {\n        if (!ignoreRequestError) {\n          throw $compileMinErr('tpload', 'Failed to load template: {0}', tpl);\n        }\n        return $q.reject(resp);\n      }\n    }\n\n    handleRequestFn.totalPendingRequests = 0;\n\n    return handleRequestFn;\n  }];\n}\n\nfunction $$TestabilityProvider() {\n  this.$get = ['$rootScope', '$browser', '$location',\n       function($rootScope,   $browser,   $location) {\n\n    /**\n     * @name $testability\n     *\n     * @description\n     * The private $$testability service provides a collection of methods for use when debugging\n     * or by automated test and debugging tools.\n     */\n    var testability = {};\n\n    /**\n     * @name $$testability#findBindings\n     *\n     * @description\n     * Returns an array of elements that are bound (via ng-bind or {{}})\n     * to expressions matching the input.\n     *\n     * @param {Element} element The element root to search from.\n     * @param {string} expression The binding expression to match.\n     * @param {boolean} opt_exactMatch If true, only returns exact matches\n     *     for the expression. Filters and whitespace are ignored.\n     */\n    testability.findBindings = function(element, expression, opt_exactMatch) {\n      var bindings = element.getElementsByClassName('ng-binding');\n      var matches = [];\n      forEach(bindings, function(binding) {\n        var dataBinding = angular.element(binding).data('$binding');\n        if (dataBinding) {\n          forEach(dataBinding, function(bindingName) {\n            if (opt_exactMatch) {\n              var matcher = new RegExp('(^|\\\\s)' + escapeForRegexp(expression) + '(\\\\s|\\\\||$)');\n              if (matcher.test(bindingName)) {\n                matches.push(binding);\n              }\n            } else {\n              if (bindingName.indexOf(expression) != -1) {\n                matches.push(binding);\n              }\n            }\n          });\n        }\n      });\n      return matches;\n    };\n\n    /**\n     * @name $$testability#findModels\n     *\n     * @description\n     * Returns an array of elements that are two-way found via ng-model to\n     * expressions matching the input.\n     *\n     * @param {Element} element The element root to search from.\n     * @param {string} expression The model expression to match.\n     * @param {boolean} opt_exactMatch If true, only returns exact matches\n     *     for the expression.\n     */\n    testability.findModels = function(element, expression, opt_exactMatch) {\n      var prefixes = ['ng-', 'data-ng-', 'ng\\\\:'];\n      for (var p = 0; p < prefixes.length; ++p) {\n        var attributeEquals = opt_exactMatch ? '=' : '*=';\n        var selector = '[' + prefixes[p] + 'model' + attributeEquals + '\"' + expression + '\"]';\n        var elements = element.querySelectorAll(selector);\n        if (elements.length) {\n          return elements;\n        }\n      }\n    };\n\n    /**\n     * @name $$testability#getLocation\n     *\n     * @description\n     * Shortcut for getting the location in a browser agnostic way. Returns\n     *     the path, search, and hash. (e.g. /path?a=b#hash)\n     */\n    testability.getLocation = function() {\n      return $location.url();\n    };\n\n    /**\n     * @name $$testability#setLocation\n     *\n     * @description\n     * Shortcut for navigating to a location without doing a full page reload.\n     *\n     * @param {string} url The location url (path, search and hash,\n     *     e.g. /path?a=b#hash) to go to.\n     */\n    testability.setLocation = function(url) {\n      if (url !== $location.url()) {\n        $location.url(url);\n        $rootScope.$digest();\n      }\n    };\n\n    /**\n     * @name $$testability#whenStable\n     *\n     * @description\n     * Calls the callback when $timeout and $http requests are completed.\n     *\n     * @param {function} callback\n     */\n    testability.whenStable = function(callback) {\n      $browser.notifyWhenNoOutstandingRequests(callback);\n    };\n\n    return testability;\n  }];\n}\n\nfunction $TimeoutProvider() {\n  this.$get = ['$rootScope', '$browser', '$q', '$$q', '$exceptionHandler',\n       function($rootScope,   $browser,   $q,   $$q,   $exceptionHandler) {\n    var deferreds = {};\n\n\n     /**\n      * @ngdoc service\n      * @name $timeout\n      *\n      * @description\n      * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch\n      * block and delegates any exceptions to\n      * {@link ng.$exceptionHandler $exceptionHandler} service.\n      *\n      * The return value of registering a timeout function is a promise, which will be resolved when\n      * the timeout is reached and the timeout function is executed.\n      *\n      * To cancel a timeout request, call `$timeout.cancel(promise)`.\n      *\n      * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to\n      * synchronously flush the queue of deferred functions.\n      *\n      * @param {function()} fn A function, whose execution should be delayed.\n      * @param {number=} [delay=0] Delay in milliseconds.\n      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise\n      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.\n      * @returns {Promise} Promise that will be resolved when the timeout is reached. The value this\n      *   promise will be resolved with is the return value of the `fn` function.\n      *\n      */\n    function timeout(fn, delay, invokeApply) {\n      var skipApply = (isDefined(invokeApply) && !invokeApply),\n          deferred = (skipApply ? $$q : $q).defer(),\n          promise = deferred.promise,\n          timeoutId;\n\n      timeoutId = $browser.defer(function() {\n        try {\n          deferred.resolve(fn());\n        } catch (e) {\n          deferred.reject(e);\n          $exceptionHandler(e);\n        }\n        finally {\n          delete deferreds[promise.$$timeoutId];\n        }\n\n        if (!skipApply) $rootScope.$apply();\n      }, delay);\n\n      promise.$$timeoutId = timeoutId;\n      deferreds[timeoutId] = deferred;\n\n      return promise;\n    }\n\n\n     /**\n      * @ngdoc method\n      * @name $timeout#cancel\n      *\n      * @description\n      * Cancels a task associated with the `promise`. As a result of this, the promise will be\n      * resolved with a rejection.\n      *\n      * @param {Promise=} promise Promise returned by the `$timeout` function.\n      * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully\n      *   canceled.\n      */\n    timeout.cancel = function(promise) {\n      if (promise && promise.$$timeoutId in deferreds) {\n        deferreds[promise.$$timeoutId].reject('canceled');\n        delete deferreds[promise.$$timeoutId];\n        return $browser.defer.cancel(promise.$$timeoutId);\n      }\n      return false;\n    };\n\n    return timeout;\n  }];\n}\n\n// NOTE:  The usage of window and document instead of $window and $document here is\n// deliberate.  This service depends on the specific behavior of anchor nodes created by the\n// browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and\n// cause us to break tests.  In addition, when the browser resolves a URL for XHR, it\n// doesn't know about mocked locations and resolves URLs to the real document - which is\n// exactly the behavior needed here.  There is little value is mocking these out for this\n// service.\nvar urlParsingNode = document.createElement(\"a\");\nvar originUrl = urlResolve(window.location.href);\n\n\n/**\n *\n * Implementation Notes for non-IE browsers\n * ----------------------------------------\n * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,\n * results both in the normalizing and parsing of the URL.  Normalizing means that a relative\n * URL will be resolved into an absolute URL in the context of the application document.\n * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related\n * properties are all populated to reflect the normalized URL.  This approach has wide\n * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See\n * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html\n *\n * Implementation Notes for IE\n * ---------------------------\n * IE <= 10 normalizes the URL when assigned to the anchor node similar to the other\n * browsers.  However, the parsed components will not be set if the URL assigned did not specify\n * them.  (e.g. if you assign a.href = \"foo\", then a.protocol, a.host, etc. will be empty.)  We\n * work around that by performing the parsing in a 2nd step by taking a previously normalized\n * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the\n * properties such as protocol, hostname, port, etc.\n *\n * References:\n *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement\n *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html\n *   http://url.spec.whatwg.org/#urlutils\n *   https://github.com/angular/angular.js/pull/2902\n *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/\n *\n * @kind function\n * @param {string} url The URL to be parsed.\n * @description Normalizes and parses a URL.\n * @returns {object} Returns the normalized URL as a dictionary.\n *\n *   | member name   | Description    |\n *   |---------------|----------------|\n *   | href          | A normalized version of the provided URL if it was not an absolute URL |\n *   | protocol      | The protocol including the trailing colon                              |\n *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |\n *   | search        | The search params, minus the question mark                             |\n *   | hash          | The hash string, minus the hash symbol\n *   | hostname      | The hostname\n *   | port          | The port, without \":\"\n *   | pathname      | The pathname, beginning with \"/\"\n *\n */\nfunction urlResolve(url) {\n  var href = url;\n\n  if (msie) {\n    // Normalize before parse.  Refer Implementation Notes on why this is\n    // done in two steps on IE.\n    urlParsingNode.setAttribute(\"href\", href);\n    href = urlParsingNode.href;\n  }\n\n  urlParsingNode.setAttribute('href', href);\n\n  // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n  return {\n    href: urlParsingNode.href,\n    protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n    host: urlParsingNode.host,\n    search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n    hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n    hostname: urlParsingNode.hostname,\n    port: urlParsingNode.port,\n    pathname: (urlParsingNode.pathname.charAt(0) === '/')\n      ? urlParsingNode.pathname\n      : '/' + urlParsingNode.pathname\n  };\n}\n\n/**\n * Parse a request URL and determine whether this is a same-origin request as the application document.\n *\n * @param {string|object} requestUrl The url of the request as a string that will be resolved\n * or a parsed URL object.\n * @returns {boolean} Whether the request is for the same origin as the application document.\n */\nfunction urlIsSameOrigin(requestUrl) {\n  var parsed = (isString(requestUrl)) ? urlResolve(requestUrl) : requestUrl;\n  return (parsed.protocol === originUrl.protocol &&\n          parsed.host === originUrl.host);\n}\n\n/**\n * @ngdoc service\n * @name $window\n *\n * @description\n * A reference to the browser's `window` object. While `window`\n * is globally available in JavaScript, it causes testability problems, because\n * it is a global variable. In angular we always refer to it through the\n * `$window` service, so it may be overridden, removed or mocked for testing.\n *\n * Expressions, like the one defined for the `ngClick` directive in the example\n * below, are evaluated with respect to the current scope.  Therefore, there is\n * no risk of inadvertently coding in a dependency on a global value in such an\n * expression.\n *\n * @example\n   <example module=\"windowExample\">\n     <file name=\"index.html\">\n       <script>\n         angular.module('windowExample', [])\n           .controller('ExampleController', ['$scope', '$window', function($scope, $window) {\n             $scope.greeting = 'Hello, World!';\n             $scope.doGreeting = function(greeting) {\n               $window.alert(greeting);\n             };\n           }]);\n       </script>\n       <div ng-controller=\"ExampleController\">\n         <input type=\"text\" ng-model=\"greeting\" />\n         <button ng-click=\"doGreeting(greeting)\">ALERT</button>\n       </div>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n      it('should display the greeting in the input box', function() {\n       element(by.model('greeting')).sendKeys('Hello, E2E Tests');\n       // If we click the button it will block the test runner\n       // element(':button').click();\n      });\n     </file>\n   </example>\n */\nfunction $WindowProvider() {\n  this.$get = valueFn(window);\n}\n\n/* global currencyFilter: true,\n dateFilter: true,\n filterFilter: true,\n jsonFilter: true,\n limitToFilter: true,\n lowercaseFilter: true,\n numberFilter: true,\n orderByFilter: true,\n uppercaseFilter: true,\n */\n\n/**\n * @ngdoc provider\n * @name $filterProvider\n * @description\n *\n * Filters are just functions which transform input to an output. However filters need to be\n * Dependency Injected. To achieve this a filter definition consists of a factory function which is\n * annotated with dependencies and is responsible for creating a filter function.\n *\n * <div class=\"alert alert-warning\">\n * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.\n * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace\n * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores\n * (`myapp_subsection_filterx`).\n * </div>\n *\n * ```js\n *   // Filter registration\n *   function MyModule($provide, $filterProvider) {\n *     // create a service to demonstrate injection (not always needed)\n *     $provide.value('greet', function(name){\n *       return 'Hello ' + name + '!';\n *     });\n *\n *     // register a filter factory which uses the\n *     // greet service to demonstrate DI.\n *     $filterProvider.register('greet', function(greet){\n *       // return the filter function which uses the greet service\n *       // to generate salutation\n *       return function(text) {\n *         // filters need to be forgiving so check input validity\n *         return text && greet(text) || text;\n *       };\n *     });\n *   }\n * ```\n *\n * The filter function is registered with the `$injector` under the filter name suffix with\n * `Filter`.\n *\n * ```js\n *   it('should be the same instance', inject(\n *     function($filterProvider) {\n *       $filterProvider.register('reverse', function(){\n *         return ...;\n *       });\n *     },\n *     function($filter, reverseFilter) {\n *       expect($filter('reverse')).toBe(reverseFilter);\n *     });\n * ```\n *\n *\n * For more information about how angular filters work, and how to create your own filters, see\n * {@link guide/filter Filters} in the Angular Developer Guide.\n */\n\n/**\n * @ngdoc service\n * @name $filter\n * @kind function\n * @description\n * Filters are used for formatting data displayed to the user.\n *\n * The general syntax in templates is as follows:\n *\n *         {{ expression [| filter_name[:parameter_value] ... ] }}\n *\n * @param {String} name Name of the filter function to retrieve\n * @return {Function} the filter function\n * @example\n   <example name=\"$filter\" module=\"filterExample\">\n     <file name=\"index.html\">\n       <div ng-controller=\"MainCtrl\">\n        <h3>{{ originalText }}</h3>\n        <h3>{{ filteredText }}</h3>\n       </div>\n     </file>\n\n     <file name=\"script.js\">\n      angular.module('filterExample', [])\n      .controller('MainCtrl', function($scope, $filter) {\n        $scope.originalText = 'hello';\n        $scope.filteredText = $filter('uppercase')($scope.originalText);\n      });\n     </file>\n   </example>\n  */\n$FilterProvider.$inject = ['$provide'];\nfunction $FilterProvider($provide) {\n  var suffix = 'Filter';\n\n  /**\n   * @ngdoc method\n   * @name $filterProvider#register\n   * @param {string|Object} name Name of the filter function, or an object map of filters where\n   *    the keys are the filter names and the values are the filter factories.\n   *\n   *    <div class=\"alert alert-warning\">\n   *    **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.\n   *    Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace\n   *    your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores\n   *    (`myapp_subsection_filterx`).\n   *    </div>\n   * @returns {Object} Registered filter instance, or if a map of filters was provided then a map\n   *    of the registered filter instances.\n   */\n  function register(name, factory) {\n    if (isObject(name)) {\n      var filters = {};\n      forEach(name, function(filter, key) {\n        filters[key] = register(key, filter);\n      });\n      return filters;\n    } else {\n      return $provide.factory(name + suffix, factory);\n    }\n  }\n  this.register = register;\n\n  this.$get = ['$injector', function($injector) {\n    return function(name) {\n      return $injector.get(name + suffix);\n    };\n  }];\n\n  ////////////////////////////////////////\n\n  /* global\n    currencyFilter: false,\n    dateFilter: false,\n    filterFilter: false,\n    jsonFilter: false,\n    limitToFilter: false,\n    lowercaseFilter: false,\n    numberFilter: false,\n    orderByFilter: false,\n    uppercaseFilter: false,\n  */\n\n  register('currency', currencyFilter);\n  register('date', dateFilter);\n  register('filter', filterFilter);\n  register('json', jsonFilter);\n  register('limitTo', limitToFilter);\n  register('lowercase', lowercaseFilter);\n  register('number', numberFilter);\n  register('orderBy', orderByFilter);\n  register('uppercase', uppercaseFilter);\n}\n\n/**\n * @ngdoc filter\n * @name filter\n * @kind function\n *\n * @description\n * Selects a subset of items from `array` and returns it as a new array.\n *\n * @param {Array} array The source array.\n * @param {string|Object|function()} expression The predicate to be used for selecting items from\n *   `array`.\n *\n *   Can be one of:\n *\n *   - `string`: The string is used for matching against the contents of the `array`. All strings or\n *     objects with string properties in `array` that match this string will be returned. This also\n *     applies to nested object properties.\n *     The predicate can be negated by prefixing the string with `!`.\n *\n *   - `Object`: A pattern object can be used to filter specific properties on objects contained\n *     by `array`. For example `{name:\"M\", phone:\"1\"}` predicate will return an array of items\n *     which have property `name` containing \"M\" and property `phone` containing \"1\". A special\n *     property name `$` can be used (as in `{$:\"text\"}`) to accept a match against any\n *     property of the object or its nested object properties. That's equivalent to the simple\n *     substring match with a `string` as described above. The predicate can be negated by prefixing\n *     the string with `!`.\n *     For example `{name: \"!M\"}` predicate will return an array of items which have property `name`\n *     not containing \"M\".\n *\n *     Note that a named property will match properties on the same level only, while the special\n *     `$` property will match properties on the same level or deeper. E.g. an array item like\n *     `{name: {first: 'John', last: 'Doe'}}` will **not** be matched by `{name: 'John'}`, but\n *     **will** be matched by `{$: 'John'}`.\n *\n *   - `function(value, index)`: A predicate function can be used to write arbitrary filters. The\n *     function is called for each element of `array`. The final result is an array of those\n *     elements that the predicate returned true for.\n *\n * @param {function(actual, expected)|true|undefined} comparator Comparator which is used in\n *     determining if the expected value (from the filter expression) and actual value (from\n *     the object in the array) should be considered a match.\n *\n *   Can be one of:\n *\n *   - `function(actual, expected)`:\n *     The function will be given the object value and the predicate value to compare and\n *     should return true if both values should be considered equal.\n *\n *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(actual, expected)}`.\n *     This is essentially strict comparison of expected and actual.\n *\n *   - `false|undefined`: A short hand for a function which will look for a substring match in case\n *     insensitive way.\n *\n * @example\n   <example>\n     <file name=\"index.html\">\n       <div ng-init=\"friends = [{name:'John', phone:'555-1276'},\n                                {name:'Mary', phone:'800-BIG-MARY'},\n                                {name:'Mike', phone:'555-4321'},\n                                {name:'Adam', phone:'555-5678'},\n                                {name:'Julie', phone:'555-8765'},\n                                {name:'Juliette', phone:'555-5678'}]\"></div>\n\n       Search: <input ng-model=\"searchText\">\n       <table id=\"searchTextResults\">\n         <tr><th>Name</th><th>Phone</th></tr>\n         <tr ng-repeat=\"friend in friends | filter:searchText\">\n           <td>{{friend.name}}</td>\n           <td>{{friend.phone}}</td>\n         </tr>\n       </table>\n       <hr>\n       Any: <input ng-model=\"search.$\"> <br>\n       Name only <input ng-model=\"search.name\"><br>\n       Phone only <input ng-model=\"search.phone\"><br>\n       Equality <input type=\"checkbox\" ng-model=\"strict\"><br>\n       <table id=\"searchObjResults\">\n         <tr><th>Name</th><th>Phone</th></tr>\n         <tr ng-repeat=\"friendObj in friends | filter:search:strict\">\n           <td>{{friendObj.name}}</td>\n           <td>{{friendObj.phone}}</td>\n         </tr>\n       </table>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       var expectFriendNames = function(expectedNames, key) {\n         element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {\n           arr.forEach(function(wd, i) {\n             expect(wd.getText()).toMatch(expectedNames[i]);\n           });\n         });\n       };\n\n       it('should search across all fields when filtering with a string', function() {\n         var searchText = element(by.model('searchText'));\n         searchText.clear();\n         searchText.sendKeys('m');\n         expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');\n\n         searchText.clear();\n         searchText.sendKeys('76');\n         expectFriendNames(['John', 'Julie'], 'friend');\n       });\n\n       it('should search in specific fields when filtering with a predicate object', function() {\n         var searchAny = element(by.model('search.$'));\n         searchAny.clear();\n         searchAny.sendKeys('i');\n         expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');\n       });\n       it('should use a equal comparison when comparator is true', function() {\n         var searchName = element(by.model('search.name'));\n         var strict = element(by.model('strict'));\n         searchName.clear();\n         searchName.sendKeys('Julie');\n         strict.click();\n         expectFriendNames(['Julie'], 'friendObj');\n       });\n     </file>\n   </example>\n */\nfunction filterFilter() {\n  return function(array, expression, comparator) {\n    if (!isArray(array)) return array;\n\n    var expressionType = (expression !== null) ? typeof expression : 'null';\n    var predicateFn;\n    var matchAgainstAnyProp;\n\n    switch (expressionType) {\n      case 'function':\n        predicateFn = expression;\n        break;\n      case 'boolean':\n      case 'null':\n      case 'number':\n      case 'string':\n        matchAgainstAnyProp = true;\n        //jshint -W086\n      case 'object':\n        //jshint +W086\n        predicateFn = createPredicateFn(expression, comparator, matchAgainstAnyProp);\n        break;\n      default:\n        return array;\n    }\n\n    return array.filter(predicateFn);\n  };\n}\n\n// Helper functions for `filterFilter`\nfunction createPredicateFn(expression, comparator, matchAgainstAnyProp) {\n  var shouldMatchPrimitives = isObject(expression) && ('$' in expression);\n  var predicateFn;\n\n  if (comparator === true) {\n    comparator = equals;\n  } else if (!isFunction(comparator)) {\n    comparator = function(actual, expected) {\n      if (isUndefined(actual)) {\n        // No substring matching against `undefined`\n        return false;\n      }\n      if ((actual === null) || (expected === null)) {\n        // No substring matching against `null`; only match against `null`\n        return actual === expected;\n      }\n      if (isObject(actual) || isObject(expected)) {\n        // Prevent an object to be considered equal to a string like `'[object'`\n        return false;\n      }\n\n      actual = lowercase('' + actual);\n      expected = lowercase('' + expected);\n      return actual.indexOf(expected) !== -1;\n    };\n  }\n\n  predicateFn = function(item) {\n    if (shouldMatchPrimitives && !isObject(item)) {\n      return deepCompare(item, expression.$, comparator, false);\n    }\n    return deepCompare(item, expression, comparator, matchAgainstAnyProp);\n  };\n\n  return predicateFn;\n}\n\nfunction deepCompare(actual, expected, comparator, matchAgainstAnyProp, dontMatchWholeObject) {\n  var actualType = (actual !== null) ? typeof actual : 'null';\n  var expectedType = (expected !== null) ? typeof expected : 'null';\n\n  if ((expectedType === 'string') && (expected.charAt(0) === '!')) {\n    return !deepCompare(actual, expected.substring(1), comparator, matchAgainstAnyProp);\n  } else if (isArray(actual)) {\n    // In case `actual` is an array, consider it a match\n    // if ANY of it's items matches `expected`\n    return actual.some(function(item) {\n      return deepCompare(item, expected, comparator, matchAgainstAnyProp);\n    });\n  }\n\n  switch (actualType) {\n    case 'object':\n      var key;\n      if (matchAgainstAnyProp) {\n        for (key in actual) {\n          if ((key.charAt(0) !== '$') && deepCompare(actual[key], expected, comparator, true)) {\n            return true;\n          }\n        }\n        return dontMatchWholeObject ? false : deepCompare(actual, expected, comparator, false);\n      } else if (expectedType === 'object') {\n        for (key in expected) {\n          var expectedVal = expected[key];\n          if (isFunction(expectedVal) || isUndefined(expectedVal)) {\n            continue;\n          }\n\n          var matchAnyProperty = key === '$';\n          var actualVal = matchAnyProperty ? actual : actual[key];\n          if (!deepCompare(actualVal, expectedVal, comparator, matchAnyProperty, matchAnyProperty)) {\n            return false;\n          }\n        }\n        return true;\n      } else {\n        return comparator(actual, expected);\n      }\n      break;\n    case 'function':\n      return false;\n    default:\n      return comparator(actual, expected);\n  }\n}\n\n/**\n * @ngdoc filter\n * @name currency\n * @kind function\n *\n * @description\n * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default\n * symbol for current locale is used.\n *\n * @param {number} amount Input to filter.\n * @param {string=} symbol Currency symbol or identifier to be displayed.\n * @param {number=} fractionSize Number of decimal places to round the amount to, defaults to default max fraction size for current locale\n * @returns {string} Formatted number.\n *\n *\n * @example\n   <example module=\"currencyExample\">\n     <file name=\"index.html\">\n       <script>\n         angular.module('currencyExample', [])\n           .controller('ExampleController', ['$scope', function($scope) {\n             $scope.amount = 1234.56;\n           }]);\n       </script>\n       <div ng-controller=\"ExampleController\">\n         <input type=\"number\" ng-model=\"amount\"> <br>\n         default currency symbol ($): <span id=\"currency-default\">{{amount | currency}}</span><br>\n         custom currency identifier (USD$): <span id=\"currency-custom\">{{amount | currency:\"USD$\"}}</span>\n         no fractions (0): <span id=\"currency-no-fractions\">{{amount | currency:\"USD$\":0}}</span>\n       </div>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should init with 1234.56', function() {\n         expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');\n         expect(element(by.id('currency-custom')).getText()).toBe('USD$1,234.56');\n         expect(element(by.id('currency-no-fractions')).getText()).toBe('USD$1,235');\n       });\n       it('should update', function() {\n         if (browser.params.browser == 'safari') {\n           // Safari does not understand the minus key. See\n           // https://github.com/angular/protractor/issues/481\n           return;\n         }\n         element(by.model('amount')).clear();\n         element(by.model('amount')).sendKeys('-1234');\n         expect(element(by.id('currency-default')).getText()).toBe('($1,234.00)');\n         expect(element(by.id('currency-custom')).getText()).toBe('(USD$1,234.00)');\n         expect(element(by.id('currency-no-fractions')).getText()).toBe('(USD$1,234)');\n       });\n     </file>\n   </example>\n */\ncurrencyFilter.$inject = ['$locale'];\nfunction currencyFilter($locale) {\n  var formats = $locale.NUMBER_FORMATS;\n  return function(amount, currencySymbol, fractionSize) {\n    if (isUndefined(currencySymbol)) {\n      currencySymbol = formats.CURRENCY_SYM;\n    }\n\n    if (isUndefined(fractionSize)) {\n      fractionSize = formats.PATTERNS[1].maxFrac;\n    }\n\n    // if null or undefined pass it through\n    return (amount == null)\n        ? amount\n        : formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize).\n            replace(/\\u00A4/g, currencySymbol);\n  };\n}\n\n/**\n * @ngdoc filter\n * @name number\n * @kind function\n *\n * @description\n * Formats a number as text.\n *\n * If the input is null or undefined, it will just be returned.\n * If the input is infinite (Infinity/-Infinity) the Infinity symbol '∞' is returned.\n * If the input is not a number an empty string is returned.\n *\n * @param {number|string} number Number to format.\n * @param {(number|string)=} fractionSize Number of decimal places to round the number to.\n * If this is not provided then the fraction size is computed from the current locale's number\n * formatting pattern. In the case of the default locale, it will be 3.\n * @returns {string} Number rounded to decimalPlaces and places a “,” after each third digit.\n *\n * @example\n   <example module=\"numberFilterExample\">\n     <file name=\"index.html\">\n       <script>\n         angular.module('numberFilterExample', [])\n           .controller('ExampleController', ['$scope', function($scope) {\n             $scope.val = 1234.56789;\n           }]);\n       </script>\n       <div ng-controller=\"ExampleController\">\n         Enter number: <input ng-model='val'><br>\n         Default formatting: <span id='number-default'>{{val | number}}</span><br>\n         No fractions: <span>{{val | number:0}}</span><br>\n         Negative number: <span>{{-val | number:4}}</span>\n       </div>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should format numbers', function() {\n         expect(element(by.id('number-default')).getText()).toBe('1,234.568');\n         expect(element(by.binding('val | number:0')).getText()).toBe('1,235');\n         expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');\n       });\n\n       it('should update', function() {\n         element(by.model('val')).clear();\n         element(by.model('val')).sendKeys('3374.333');\n         expect(element(by.id('number-default')).getText()).toBe('3,374.333');\n         expect(element(by.binding('val | number:0')).getText()).toBe('3,374');\n         expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');\n      });\n     </file>\n   </example>\n */\n\n\nnumberFilter.$inject = ['$locale'];\nfunction numberFilter($locale) {\n  var formats = $locale.NUMBER_FORMATS;\n  return function(number, fractionSize) {\n\n    // if null or undefined pass it through\n    return (number == null)\n        ? number\n        : formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP,\n                       fractionSize);\n  };\n}\n\nvar DECIMAL_SEP = '.';\nfunction formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {\n  if (!isFinite(number) || isObject(number)) return '';\n\n  var isNegative = number < 0;\n  number = Math.abs(number);\n  var numStr = number + '',\n      formatedText = '',\n      parts = [];\n\n  var hasExponent = false;\n  if (numStr.indexOf('e') !== -1) {\n    var match = numStr.match(/([\\d\\.]+)e(-?)(\\d+)/);\n    if (match && match[2] == '-' && match[3] > fractionSize + 1) {\n      number = 0;\n    } else {\n      formatedText = numStr;\n      hasExponent = true;\n    }\n  }\n\n  if (!hasExponent) {\n    var fractionLen = (numStr.split(DECIMAL_SEP)[1] || '').length;\n\n    // determine fractionSize if it is not specified\n    if (isUndefined(fractionSize)) {\n      fractionSize = Math.min(Math.max(pattern.minFrac, fractionLen), pattern.maxFrac);\n    }\n\n    // safely round numbers in JS without hitting imprecisions of floating-point arithmetics\n    // inspired by:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round\n    number = +(Math.round(+(number.toString() + 'e' + fractionSize)).toString() + 'e' + -fractionSize);\n\n    var fraction = ('' + number).split(DECIMAL_SEP);\n    var whole = fraction[0];\n    fraction = fraction[1] || '';\n\n    var i, pos = 0,\n        lgroup = pattern.lgSize,\n        group = pattern.gSize;\n\n    if (whole.length >= (lgroup + group)) {\n      pos = whole.length - lgroup;\n      for (i = 0; i < pos; i++) {\n        if ((pos - i) % group === 0 && i !== 0) {\n          formatedText += groupSep;\n        }\n        formatedText += whole.charAt(i);\n      }\n    }\n\n    for (i = pos; i < whole.length; i++) {\n      if ((whole.length - i) % lgroup === 0 && i !== 0) {\n        formatedText += groupSep;\n      }\n      formatedText += whole.charAt(i);\n    }\n\n    // format fraction part.\n    while (fraction.length < fractionSize) {\n      fraction += '0';\n    }\n\n    if (fractionSize && fractionSize !== \"0\") formatedText += decimalSep + fraction.substr(0, fractionSize);\n  } else {\n    if (fractionSize > 0 && number < 1) {\n      formatedText = number.toFixed(fractionSize);\n      number = parseFloat(formatedText);\n    }\n  }\n\n  if (number === 0) {\n    isNegative = false;\n  }\n\n  parts.push(isNegative ? pattern.negPre : pattern.posPre,\n             formatedText,\n             isNegative ? pattern.negSuf : pattern.posSuf);\n  return parts.join('');\n}\n\nfunction padNumber(num, digits, trim) {\n  var neg = '';\n  if (num < 0) {\n    neg =  '-';\n    num = -num;\n  }\n  num = '' + num;\n  while (num.length < digits) num = '0' + num;\n  if (trim)\n    num = num.substr(num.length - digits);\n  return neg + num;\n}\n\n\nfunction dateGetter(name, size, offset, trim) {\n  offset = offset || 0;\n  return function(date) {\n    var value = date['get' + name]();\n    if (offset > 0 || value > -offset)\n      value += offset;\n    if (value === 0 && offset == -12) value = 12;\n    return padNumber(value, size, trim);\n  };\n}\n\nfunction dateStrGetter(name, shortForm) {\n  return function(date, formats) {\n    var value = date['get' + name]();\n    var get = uppercase(shortForm ? ('SHORT' + name) : name);\n\n    return formats[get][value];\n  };\n}\n\nfunction timeZoneGetter(date) {\n  var zone = -1 * date.getTimezoneOffset();\n  var paddedZone = (zone >= 0) ? \"+\" : \"\";\n\n  paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) +\n                padNumber(Math.abs(zone % 60), 2);\n\n  return paddedZone;\n}\n\nfunction getFirstThursdayOfYear(year) {\n    // 0 = index of January\n    var dayOfWeekOnFirst = (new Date(year, 0, 1)).getDay();\n    // 4 = index of Thursday (+1 to account for 1st = 5)\n    // 11 = index of *next* Thursday (+1 account for 1st = 12)\n    return new Date(year, 0, ((dayOfWeekOnFirst <= 4) ? 5 : 12) - dayOfWeekOnFirst);\n}\n\nfunction getThursdayThisWeek(datetime) {\n    return new Date(datetime.getFullYear(), datetime.getMonth(),\n      // 4 = index of Thursday\n      datetime.getDate() + (4 - datetime.getDay()));\n}\n\nfunction weekGetter(size) {\n   return function(date) {\n      var firstThurs = getFirstThursdayOfYear(date.getFullYear()),\n         thisThurs = getThursdayThisWeek(date);\n\n      var diff = +thisThurs - +firstThurs,\n         result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week\n\n      return padNumber(result, size);\n   };\n}\n\nfunction ampmGetter(date, formats) {\n  return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];\n}\n\nfunction eraGetter(date, formats) {\n  return date.getFullYear() <= 0 ? formats.ERAS[0] : formats.ERAS[1];\n}\n\nfunction longEraGetter(date, formats) {\n  return date.getFullYear() <= 0 ? formats.ERANAMES[0] : formats.ERANAMES[1];\n}\n\nvar DATE_FORMATS = {\n  yyyy: dateGetter('FullYear', 4),\n    yy: dateGetter('FullYear', 2, 0, true),\n     y: dateGetter('FullYear', 1),\n  MMMM: dateStrGetter('Month'),\n   MMM: dateStrGetter('Month', true),\n    MM: dateGetter('Month', 2, 1),\n     M: dateGetter('Month', 1, 1),\n    dd: dateGetter('Date', 2),\n     d: dateGetter('Date', 1),\n    HH: dateGetter('Hours', 2),\n     H: dateGetter('Hours', 1),\n    hh: dateGetter('Hours', 2, -12),\n     h: dateGetter('Hours', 1, -12),\n    mm: dateGetter('Minutes', 2),\n     m: dateGetter('Minutes', 1),\n    ss: dateGetter('Seconds', 2),\n     s: dateGetter('Seconds', 1),\n     // while ISO 8601 requires fractions to be prefixed with `.` or `,`\n     // we can be just safely rely on using `sss` since we currently don't support single or two digit fractions\n   sss: dateGetter('Milliseconds', 3),\n  EEEE: dateStrGetter('Day'),\n   EEE: dateStrGetter('Day', true),\n     a: ampmGetter,\n     Z: timeZoneGetter,\n    ww: weekGetter(2),\n     w: weekGetter(1),\n     G: eraGetter,\n     GG: eraGetter,\n     GGG: eraGetter,\n     GGGG: longEraGetter\n};\n\nvar DATE_FORMATS_SPLIT = /((?:[^yMdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,\n    NUMBER_STRING = /^\\-?\\d+$/;\n\n/**\n * @ngdoc filter\n * @name date\n * @kind function\n *\n * @description\n *   Formats `date` to a string based on the requested `format`.\n *\n *   `format` string can be composed of the following elements:\n *\n *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)\n *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)\n *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)\n *   * `'MMMM'`: Month in year (January-December)\n *   * `'MMM'`: Month in year (Jan-Dec)\n *   * `'MM'`: Month in year, padded (01-12)\n *   * `'M'`: Month in year (1-12)\n *   * `'dd'`: Day in month, padded (01-31)\n *   * `'d'`: Day in month (1-31)\n *   * `'EEEE'`: Day in Week,(Sunday-Saturday)\n *   * `'EEE'`: Day in Week, (Sun-Sat)\n *   * `'HH'`: Hour in day, padded (00-23)\n *   * `'H'`: Hour in day (0-23)\n *   * `'hh'`: Hour in AM/PM, padded (01-12)\n *   * `'h'`: Hour in AM/PM, (1-12)\n *   * `'mm'`: Minute in hour, padded (00-59)\n *   * `'m'`: Minute in hour (0-59)\n *   * `'ss'`: Second in minute, padded (00-59)\n *   * `'s'`: Second in minute (0-59)\n *   * `'sss'`: Millisecond in second, padded (000-999)\n *   * `'a'`: AM/PM marker\n *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)\n *   * `'ww'`: Week of year, padded (00-53). Week 01 is the week with the first Thursday of the year\n *   * `'w'`: Week of year (0-53). Week 1 is the week with the first Thursday of the year\n *   * `'G'`, `'GG'`, `'GGG'`: The abbreviated form of the era string (e.g. 'AD')\n *   * `'GGGG'`: The long form of the era string (e.g. 'Anno Domini')\n *\n *   `format` string can also be one of the following predefined\n *   {@link guide/i18n localizable formats}:\n *\n *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale\n *     (e.g. Sep 3, 2010 12:05:08 PM)\n *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 PM)\n *   * `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` for en_US  locale\n *     (e.g. Friday, September 3, 2010)\n *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)\n *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)\n *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)\n *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 PM)\n *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 PM)\n *\n *   `format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.\n *   `\"h 'in the morning'\"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence\n *   (e.g. `\"h 'o''clock'\"`).\n *\n * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or\n *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its\n *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is\n *    specified in the string input, the time is considered to be in the local timezone.\n * @param {string=} format Formatting rules (see Description). If not specified,\n *    `mediumDate` is used.\n * @param {string=} timezone Timezone to be used for formatting. Right now, only `'UTC'` is supported.\n *    If not specified, the timezone of the browser will be used.\n * @returns {string} Formatted string or the input if input is not recognized as date/millis.\n *\n * @example\n   <example>\n     <file name=\"index.html\">\n       <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:\n           <span>{{1288323623006 | date:'medium'}}</span><br>\n       <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:\n          <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>\n       <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:\n          <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>\n       <span ng-non-bindable>{{1288323623006 | date:\"MM/dd/yyyy 'at' h:mma\"}}</span>:\n          <span>{{'1288323623006' | date:\"MM/dd/yyyy 'at' h:mma\"}}</span><br>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should format date', function() {\n         expect(element(by.binding(\"1288323623006 | date:'medium'\")).getText()).\n            toMatch(/Oct 2\\d, 2010 \\d{1,2}:\\d{2}:\\d{2} (AM|PM)/);\n         expect(element(by.binding(\"1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'\")).getText()).\n            toMatch(/2010\\-10\\-2\\d \\d{2}:\\d{2}:\\d{2} (\\-|\\+)?\\d{4}/);\n         expect(element(by.binding(\"'1288323623006' | date:'MM/dd/yyyy @ h:mma'\")).getText()).\n            toMatch(/10\\/2\\d\\/2010 @ \\d{1,2}:\\d{2}(AM|PM)/);\n         expect(element(by.binding(\"'1288323623006' | date:\\\"MM/dd/yyyy 'at' h:mma\\\"\")).getText()).\n            toMatch(/10\\/2\\d\\/2010 at \\d{1,2}:\\d{2}(AM|PM)/);\n       });\n     </file>\n   </example>\n */\ndateFilter.$inject = ['$locale'];\nfunction dateFilter($locale) {\n\n\n  var R_ISO8601_STR = /^(\\d{4})-?(\\d\\d)-?(\\d\\d)(?:T(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:\\.(\\d+))?)?)?(Z|([+-])(\\d\\d):?(\\d\\d))?)?$/;\n                     // 1        2       3         4          5          6          7          8  9     10      11\n  function jsonStringToDate(string) {\n    var match;\n    if (match = string.match(R_ISO8601_STR)) {\n      var date = new Date(0),\n          tzHour = 0,\n          tzMin  = 0,\n          dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear,\n          timeSetter = match[8] ? date.setUTCHours : date.setHours;\n\n      if (match[9]) {\n        tzHour = int(match[9] + match[10]);\n        tzMin = int(match[9] + match[11]);\n      }\n      dateSetter.call(date, int(match[1]), int(match[2]) - 1, int(match[3]));\n      var h = int(match[4] || 0) - tzHour;\n      var m = int(match[5] || 0) - tzMin;\n      var s = int(match[6] || 0);\n      var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);\n      timeSetter.call(date, h, m, s, ms);\n      return date;\n    }\n    return string;\n  }\n\n\n  return function(date, format, timezone) {\n    var text = '',\n        parts = [],\n        fn, match;\n\n    format = format || 'mediumDate';\n    format = $locale.DATETIME_FORMATS[format] || format;\n    if (isString(date)) {\n      date = NUMBER_STRING.test(date) ? int(date) : jsonStringToDate(date);\n    }\n\n    if (isNumber(date)) {\n      date = new Date(date);\n    }\n\n    if (!isDate(date)) {\n      return date;\n    }\n\n    while (format) {\n      match = DATE_FORMATS_SPLIT.exec(format);\n      if (match) {\n        parts = concat(parts, match, 1);\n        format = parts.pop();\n      } else {\n        parts.push(format);\n        format = null;\n      }\n    }\n\n    if (timezone && timezone === 'UTC') {\n      date = new Date(date.getTime());\n      date.setMinutes(date.getMinutes() + date.getTimezoneOffset());\n    }\n    forEach(parts, function(value) {\n      fn = DATE_FORMATS[value];\n      text += fn ? fn(date, $locale.DATETIME_FORMATS)\n                 : value.replace(/(^'|'$)/g, '').replace(/''/g, \"'\");\n    });\n\n    return text;\n  };\n}\n\n\n/**\n * @ngdoc filter\n * @name json\n * @kind function\n *\n * @description\n *   Allows you to convert a JavaScript object into JSON string.\n *\n *   This filter is mostly useful for debugging. When using the double curly {{value}} notation\n *   the binding is automatically converted to JSON.\n *\n * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.\n * @param {number=} spacing The number of spaces to use per indentation, defaults to 2.\n * @returns {string} JSON string.\n *\n *\n * @example\n   <example>\n     <file name=\"index.html\">\n       <pre id=\"default-spacing\">{{ {'name':'value'} | json }}</pre>\n       <pre id=\"custom-spacing\">{{ {'name':'value'} | json:4 }}</pre>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should jsonify filtered objects', function() {\n         expect(element(by.id('default-spacing')).getText()).toMatch(/\\{\\n  \"name\": ?\"value\"\\n}/);\n         expect(element(by.id('custom-spacing')).getText()).toMatch(/\\{\\n    \"name\": ?\"value\"\\n}/);\n       });\n     </file>\n   </example>\n *\n */\nfunction jsonFilter() {\n  return function(object, spacing) {\n    if (isUndefined(spacing)) {\n        spacing = 2;\n    }\n    return toJson(object, spacing);\n  };\n}\n\n\n/**\n * @ngdoc filter\n * @name lowercase\n * @kind function\n * @description\n * Converts string to lowercase.\n * @see angular.lowercase\n */\nvar lowercaseFilter = valueFn(lowercase);\n\n\n/**\n * @ngdoc filter\n * @name uppercase\n * @kind function\n * @description\n * Converts string to uppercase.\n * @see angular.uppercase\n */\nvar uppercaseFilter = valueFn(uppercase);\n\n/**\n * @ngdoc filter\n * @name limitTo\n * @kind function\n *\n * @description\n * Creates a new array or string containing only a specified number of elements. The elements\n * are taken from either the beginning or the end of the source array, string or number, as specified by\n * the value and sign (positive or negative) of `limit`. If a number is used as input, it is\n * converted to a string.\n *\n * @param {Array|string|number} input Source array, string or number to be limited.\n * @param {string|number} limit The length of the returned array or string. If the `limit` number\n *     is positive, `limit` number of items from the beginning of the source array/string are copied.\n *     If the number is negative, `limit` number  of items from the end of the source array/string\n *     are copied. The `limit` will be trimmed if it exceeds `array.length`\n * @returns {Array|string} A new sub-array or substring of length `limit` or less if input array\n *     had less than `limit` elements.\n *\n * @example\n   <example module=\"limitToExample\">\n     <file name=\"index.html\">\n       <script>\n         angular.module('limitToExample', [])\n           .controller('ExampleController', ['$scope', function($scope) {\n             $scope.numbers = [1,2,3,4,5,6,7,8,9];\n             $scope.letters = \"abcdefghi\";\n             $scope.longNumber = 2345432342;\n             $scope.numLimit = 3;\n             $scope.letterLimit = 3;\n             $scope.longNumberLimit = 3;\n           }]);\n       </script>\n       <div ng-controller=\"ExampleController\">\n         Limit {{numbers}} to: <input type=\"number\" step=\"1\" ng-model=\"numLimit\">\n         <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>\n         Limit {{letters}} to: <input type=\"number\" step=\"1\" ng-model=\"letterLimit\">\n         <p>Output letters: {{ letters | limitTo:letterLimit }}</p>\n         Limit {{longNumber}} to: <input type=\"number\" step=\"1\" ng-model=\"longNumberLimit\">\n         <p>Output long number: {{ longNumber | limitTo:longNumberLimit }}</p>\n       </div>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       var numLimitInput = element(by.model('numLimit'));\n       var letterLimitInput = element(by.model('letterLimit'));\n       var longNumberLimitInput = element(by.model('longNumberLimit'));\n       var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));\n       var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));\n       var limitedLongNumber = element(by.binding('longNumber | limitTo:longNumberLimit'));\n\n       it('should limit the number array to first three items', function() {\n         expect(numLimitInput.getAttribute('value')).toBe('3');\n         expect(letterLimitInput.getAttribute('value')).toBe('3');\n         expect(longNumberLimitInput.getAttribute('value')).toBe('3');\n         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');\n         expect(limitedLetters.getText()).toEqual('Output letters: abc');\n         expect(limitedLongNumber.getText()).toEqual('Output long number: 234');\n       });\n\n       // There is a bug in safari and protractor that doesn't like the minus key\n       // it('should update the output when -3 is entered', function() {\n       //   numLimitInput.clear();\n       //   numLimitInput.sendKeys('-3');\n       //   letterLimitInput.clear();\n       //   letterLimitInput.sendKeys('-3');\n       //   longNumberLimitInput.clear();\n       //   longNumberLimitInput.sendKeys('-3');\n       //   expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');\n       //   expect(limitedLetters.getText()).toEqual('Output letters: ghi');\n       //   expect(limitedLongNumber.getText()).toEqual('Output long number: 342');\n       // });\n\n       it('should not exceed the maximum size of input array', function() {\n         numLimitInput.clear();\n         numLimitInput.sendKeys('100');\n         letterLimitInput.clear();\n         letterLimitInput.sendKeys('100');\n         longNumberLimitInput.clear();\n         longNumberLimitInput.sendKeys('100');\n         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');\n         expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');\n         expect(limitedLongNumber.getText()).toEqual('Output long number: 2345432342');\n       });\n     </file>\n   </example>\n*/\nfunction limitToFilter() {\n  return function(input, limit) {\n    if (isNumber(input)) input = input.toString();\n    if (!isArray(input) && !isString(input)) return input;\n\n    if (Math.abs(Number(limit)) === Infinity) {\n      limit = Number(limit);\n    } else {\n      limit = int(limit);\n    }\n\n    //NaN check on limit\n    if (limit) {\n      return limit > 0 ? input.slice(0, limit) : input.slice(limit);\n    } else {\n      return isString(input) ? \"\" : [];\n    }\n  };\n}\n\n/**\n * @ngdoc filter\n * @name orderBy\n * @kind function\n *\n * @description\n * Orders a specified `array` by the `expression` predicate. It is ordered alphabetically\n * for strings and numerically for numbers. Note: if you notice numbers are not being sorted\n * correctly, make sure they are actually being saved as numbers and not strings.\n *\n * @param {Array} array The array to sort.\n * @param {function(*)|string|Array.<(function(*)|string)>=} expression A predicate to be\n *    used by the comparator to determine the order of elements.\n *\n *    Can be one of:\n *\n *    - `function`: Getter function. The result of this function will be sorted using the\n *      `<`, `===`, `>` operator.\n *    - `string`: An Angular expression. The result of this expression is used to compare elements\n *      (for example `name` to sort by a property called `name` or `name.substr(0, 3)` to sort by\n *      3 first characters of a property called `name`). The result of a constant expression\n *      is interpreted as a property name to be used in comparisons (for example `\"special name\"`\n *      to sort object by the value of their `special name` property). An expression can be\n *      optionally prefixed with `+` or `-` to control ascending or descending sort order\n *      (for example, `+name` or `-name`). If no property is provided, (e.g. `'+'`) then the array\n *      element itself is used to compare where sorting.\n *    - `Array`: An array of function or string predicates. The first predicate in the array\n *      is used for sorting, but when two items are equivalent, the next predicate is used.\n *\n *    If the predicate is missing or empty then it defaults to `'+'`.\n *\n * @param {boolean=} reverse Reverse the order of the array.\n * @returns {Array} Sorted copy of the source array.\n *\n *\n * @example\n * The example below demonstrates a simple ngRepeat, where the data is sorted\n * by age in descending order (predicate is set to `'-age'`).\n * `reverse` is not set, which means it defaults to `false`.\n   <example module=\"orderByExample\">\n     <file name=\"index.html\">\n       <script>\n         angular.module('orderByExample', [])\n           .controller('ExampleController', ['$scope', function($scope) {\n             $scope.friends =\n                 [{name:'John', phone:'555-1212', age:10},\n                  {name:'Mary', phone:'555-9876', age:19},\n                  {name:'Mike', phone:'555-4321', age:21},\n                  {name:'Adam', phone:'555-5678', age:35},\n                  {name:'Julie', phone:'555-8765', age:29}];\n           }]);\n       </script>\n       <div ng-controller=\"ExampleController\">\n         <table class=\"friend\">\n           <tr>\n             <th>Name</th>\n             <th>Phone Number</th>\n             <th>Age</th>\n           </tr>\n           <tr ng-repeat=\"friend in friends | orderBy:'-age'\">\n             <td>{{friend.name}}</td>\n             <td>{{friend.phone}}</td>\n             <td>{{friend.age}}</td>\n           </tr>\n         </table>\n       </div>\n     </file>\n   </example>\n *\n * The predicate and reverse parameters can be controlled dynamically through scope properties,\n * as shown in the next example.\n * @example\n   <example module=\"orderByExample\">\n     <file name=\"index.html\">\n       <script>\n         angular.module('orderByExample', [])\n           .controller('ExampleController', ['$scope', function($scope) {\n             $scope.friends =\n                 [{name:'John', phone:'555-1212', age:10},\n                  {name:'Mary', phone:'555-9876', age:19},\n                  {name:'Mike', phone:'555-4321', age:21},\n                  {name:'Adam', phone:'555-5678', age:35},\n                  {name:'Julie', phone:'555-8765', age:29}];\n             $scope.predicate = '-age';\n           }]);\n       </script>\n       <div ng-controller=\"ExampleController\">\n         <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>\n         <hr/>\n         [ <a href=\"\" ng-click=\"predicate=''\">unsorted</a> ]\n         <table class=\"friend\">\n           <tr>\n             <th><a href=\"\" ng-click=\"predicate = 'name'; reverse=false\">Name</a>\n                 (<a href=\"\" ng-click=\"predicate = '-name'; reverse=false\">^</a>)</th>\n             <th><a href=\"\" ng-click=\"predicate = 'phone'; reverse=!reverse\">Phone Number</a></th>\n             <th><a href=\"\" ng-click=\"predicate = 'age'; reverse=!reverse\">Age</a></th>\n           </tr>\n           <tr ng-repeat=\"friend in friends | orderBy:predicate:reverse\">\n             <td>{{friend.name}}</td>\n             <td>{{friend.phone}}</td>\n             <td>{{friend.age}}</td>\n           </tr>\n         </table>\n       </div>\n     </file>\n   </example>\n *\n * It's also possible to call the orderBy filter manually, by injecting `$filter`, retrieving the\n * filter routine with `$filter('orderBy')`, and calling the returned filter routine with the\n * desired parameters.\n *\n * Example:\n *\n * @example\n  <example module=\"orderByExample\">\n    <file name=\"index.html\">\n      <div ng-controller=\"ExampleController\">\n        <table class=\"friend\">\n          <tr>\n            <th><a href=\"\" ng-click=\"reverse=false;order('name', false)\">Name</a>\n              (<a href=\"\" ng-click=\"order('-name',false)\">^</a>)</th>\n            <th><a href=\"\" ng-click=\"reverse=!reverse;order('phone', reverse)\">Phone Number</a></th>\n            <th><a href=\"\" ng-click=\"reverse=!reverse;order('age',reverse)\">Age</a></th>\n          </tr>\n          <tr ng-repeat=\"friend in friends\">\n            <td>{{friend.name}}</td>\n            <td>{{friend.phone}}</td>\n            <td>{{friend.age}}</td>\n          </tr>\n        </table>\n      </div>\n    </file>\n\n    <file name=\"script.js\">\n      angular.module('orderByExample', [])\n        .controller('ExampleController', ['$scope', '$filter', function($scope, $filter) {\n          var orderBy = $filter('orderBy');\n          $scope.friends = [\n            { name: 'John',    phone: '555-1212',    age: 10 },\n            { name: 'Mary',    phone: '555-9876',    age: 19 },\n            { name: 'Mike',    phone: '555-4321',    age: 21 },\n            { name: 'Adam',    phone: '555-5678',    age: 35 },\n            { name: 'Julie',   phone: '555-8765',    age: 29 }\n          ];\n          $scope.order = function(predicate, reverse) {\n            $scope.friends = orderBy($scope.friends, predicate, reverse);\n          };\n          $scope.order('-age',false);\n        }]);\n    </file>\n</example>\n */\norderByFilter.$inject = ['$parse'];\nfunction orderByFilter($parse) {\n  return function(array, sortPredicate, reverseOrder) {\n    if (!(isArrayLike(array))) return array;\n    sortPredicate = isArray(sortPredicate) ? sortPredicate : [sortPredicate];\n    if (sortPredicate.length === 0) { sortPredicate = ['+']; }\n    sortPredicate = sortPredicate.map(function(predicate) {\n      var descending = false, get = predicate || identity;\n      if (isString(predicate)) {\n        if ((predicate.charAt(0) == '+' || predicate.charAt(0) == '-')) {\n          descending = predicate.charAt(0) == '-';\n          predicate = predicate.substring(1);\n        }\n        if (predicate === '') {\n          // Effectively no predicate was passed so we compare identity\n          return reverseComparator(compare, descending);\n        }\n        get = $parse(predicate);\n        if (get.constant) {\n          var key = get();\n          return reverseComparator(function(a, b) {\n            return compare(a[key], b[key]);\n          }, descending);\n        }\n      }\n      return reverseComparator(function(a, b) {\n        return compare(get(a),get(b));\n      }, descending);\n    });\n    return slice.call(array).sort(reverseComparator(comparator, reverseOrder));\n\n    function comparator(o1, o2) {\n      for (var i = 0; i < sortPredicate.length; i++) {\n        var comp = sortPredicate[i](o1, o2);\n        if (comp !== 0) return comp;\n      }\n      return 0;\n    }\n    function reverseComparator(comp, descending) {\n      return descending\n          ? function(a, b) {return comp(b,a);}\n          : comp;\n    }\n\n    function isPrimitive(value) {\n      switch (typeof value) {\n        case 'number': /* falls through */\n        case 'boolean': /* falls through */\n        case 'string':\n          return true;\n        default:\n          return false;\n      }\n    }\n\n    function objectToString(value) {\n      if (value === null) return 'null';\n      if (typeof value.valueOf === 'function') {\n        value = value.valueOf();\n        if (isPrimitive(value)) return value;\n      }\n      if (typeof value.toString === 'function') {\n        value = value.toString();\n        if (isPrimitive(value)) return value;\n      }\n      return '';\n    }\n\n    function compare(v1, v2) {\n      var t1 = typeof v1;\n      var t2 = typeof v2;\n      if (t1 === t2 && t1 === \"object\") {\n        v1 = objectToString(v1);\n        v2 = objectToString(v2);\n      }\n      if (t1 === t2) {\n        if (t1 === \"string\") {\n           v1 = v1.toLowerCase();\n           v2 = v2.toLowerCase();\n        }\n        if (v1 === v2) return 0;\n        return v1 < v2 ? -1 : 1;\n      } else {\n        return t1 < t2 ? -1 : 1;\n      }\n    }\n  };\n}\n\nfunction ngDirective(directive) {\n  if (isFunction(directive)) {\n    directive = {\n      link: directive\n    };\n  }\n  directive.restrict = directive.restrict || 'AC';\n  return valueFn(directive);\n}\n\n/**\n * @ngdoc directive\n * @name a\n * @restrict E\n *\n * @description\n * Modifies the default behavior of the html A tag so that the default action is prevented when\n * the href attribute is empty.\n *\n * This change permits the easy creation of action links with the `ngClick` directive\n * without changing the location or causing page reloads, e.g.:\n * `<a href=\"\" ng-click=\"list.addItem()\">Add Item</a>`\n */\nvar htmlAnchorDirective = valueFn({\n  restrict: 'E',\n  compile: function(element, attr) {\n    if (!attr.href && !attr.xlinkHref && !attr.name) {\n      return function(scope, element) {\n        // If the linked element is not an anchor tag anymore, do nothing\n        if (element[0].nodeName.toLowerCase() !== 'a') return;\n\n        // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.\n        var href = toString.call(element.prop('href')) === '[object SVGAnimatedString]' ?\n                   'xlink:href' : 'href';\n        element.on('click', function(event) {\n          // if we have no href url, then don't navigate anywhere.\n          if (!element.attr(href)) {\n            event.preventDefault();\n          }\n        });\n      };\n    }\n  }\n});\n\n/**\n * @ngdoc directive\n * @name ngHref\n * @restrict A\n * @priority 99\n *\n * @description\n * Using Angular markup like `{{hash}}` in an href attribute will\n * make the link go to the wrong URL if the user clicks it before\n * Angular has a chance to replace the `{{hash}}` markup with its\n * value. Until Angular replaces the markup the link will be broken\n * and will most likely return a 404 error. The `ngHref` directive\n * solves this problem.\n *\n * The wrong way to write it:\n * ```html\n * <a href=\"http://www.gravatar.com/avatar/{{hash}}\">link1</a>\n * ```\n *\n * The correct way to write it:\n * ```html\n * <a ng-href=\"http://www.gravatar.com/avatar/{{hash}}\">link1</a>\n * ```\n *\n * @element A\n * @param {template} ngHref any string which can contain `{{}}` markup.\n *\n * @example\n * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes\n * in links and their different behaviors:\n    <example>\n      <file name=\"index.html\">\n        <input ng-model=\"value\" /><br />\n        <a id=\"link-1\" href ng-click=\"value = 1\">link 1</a> (link, don't reload)<br />\n        <a id=\"link-2\" href=\"\" ng-click=\"value = 2\">link 2</a> (link, don't reload)<br />\n        <a id=\"link-3\" ng-href=\"/{{'123'}}\">link 3</a> (link, reload!)<br />\n        <a id=\"link-4\" href=\"\" name=\"xx\" ng-click=\"value = 4\">anchor</a> (link, don't reload)<br />\n        <a id=\"link-5\" name=\"xxx\" ng-click=\"value = 5\">anchor</a> (no link)<br />\n        <a id=\"link-6\" ng-href=\"{{value}}\">link</a> (link, change location)\n      </file>\n      <file name=\"protractor.js\" type=\"protractor\">\n        it('should execute ng-click but not reload when href without value', function() {\n          element(by.id('link-1')).click();\n          expect(element(by.model('value')).getAttribute('value')).toEqual('1');\n          expect(element(by.id('link-1')).getAttribute('href')).toBe('');\n        });\n\n        it('should execute ng-click but not reload when href empty string', function() {\n          element(by.id('link-2')).click();\n          expect(element(by.model('value')).getAttribute('value')).toEqual('2');\n          expect(element(by.id('link-2')).getAttribute('href')).toBe('');\n        });\n\n        it('should execute ng-click and change url when ng-href specified', function() {\n          expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\\/123$/);\n\n          element(by.id('link-3')).click();\n\n          // At this point, we navigate away from an Angular page, so we need\n          // to use browser.driver to get the base webdriver.\n\n          browser.wait(function() {\n            return browser.driver.getCurrentUrl().then(function(url) {\n              return url.match(/\\/123$/);\n            });\n          }, 5000, 'page should navigate to /123');\n        });\n\n        xit('should execute ng-click but not reload when href empty string and name specified', function() {\n          element(by.id('link-4')).click();\n          expect(element(by.model('value')).getAttribute('value')).toEqual('4');\n          expect(element(by.id('link-4')).getAttribute('href')).toBe('');\n        });\n\n        it('should execute ng-click but not reload when no href but name specified', function() {\n          element(by.id('link-5')).click();\n          expect(element(by.model('value')).getAttribute('value')).toEqual('5');\n          expect(element(by.id('link-5')).getAttribute('href')).toBe(null);\n        });\n\n        it('should only change url when only ng-href', function() {\n          element(by.model('value')).clear();\n          element(by.model('value')).sendKeys('6');\n          expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\\/6$/);\n\n          element(by.id('link-6')).click();\n\n          // At this point, we navigate away from an Angular page, so we need\n          // to use browser.driver to get the base webdriver.\n          browser.wait(function() {\n            return browser.driver.getCurrentUrl().then(function(url) {\n              return url.match(/\\/6$/);\n            });\n          }, 5000, 'page should navigate to /6');\n        });\n      </file>\n    </example>\n */\n\n/**\n * @ngdoc directive\n * @name ngSrc\n * @restrict A\n * @priority 99\n *\n * @description\n * Using Angular markup like `{{hash}}` in a `src` attribute doesn't\n * work right: The browser will fetch from the URL with the literal\n * text `{{hash}}` until Angular replaces the expression inside\n * `{{hash}}`. The `ngSrc` directive solves this problem.\n *\n * The buggy way to write it:\n * ```html\n * <img src=\"http://www.gravatar.com/avatar/{{hash}}\"/>\n * ```\n *\n * The correct way to write it:\n * ```html\n * <img ng-src=\"http://www.gravatar.com/avatar/{{hash}}\"/>\n * ```\n *\n * @element IMG\n * @param {template} ngSrc any string which can contain `{{}}` markup.\n */\n\n/**\n * @ngdoc directive\n * @name ngSrcset\n * @restrict A\n * @priority 99\n *\n * @description\n * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't\n * work right: The browser will fetch from the URL with the literal\n * text `{{hash}}` until Angular replaces the expression inside\n * `{{hash}}`. The `ngSrcset` directive solves this problem.\n *\n * The buggy way to write it:\n * ```html\n * <img srcset=\"http://www.gravatar.com/avatar/{{hash}} 2x\"/>\n * ```\n *\n * The correct way to write it:\n * ```html\n * <img ng-srcset=\"http://www.gravatar.com/avatar/{{hash}} 2x\"/>\n * ```\n *\n * @element IMG\n * @param {template} ngSrcset any string which can contain `{{}}` markup.\n */\n\n/**\n * @ngdoc directive\n * @name ngDisabled\n * @restrict A\n * @priority 100\n *\n * @description\n *\n * This directive sets the `disabled` attribute on the element if the\n * {@link guide/expression expression} inside `ngDisabled` evaluates to truthy.\n *\n * A special directive is necessary because we cannot use interpolation inside the `disabled`\n * attribute.  The following example would make the button enabled on Chrome/Firefox\n * but not on older IEs:\n *\n * ```html\n * <!-- See below for an example of ng-disabled being used correctly -->\n * <div ng-init=\"isDisabled = false\">\n *  <button disabled=\"{{isDisabled}}\">Disabled</button>\n * </div>\n * ```\n *\n * This is because the HTML specification does not require browsers to preserve the values of\n * boolean attributes such as `disabled` (Their presence means true and their absence means false.)\n * If we put an Angular interpolation expression into such an attribute then the\n * binding information would be lost when the browser removes the attribute.\n *\n * @example\n    <example>\n      <file name=\"index.html\">\n        Click me to toggle: <input type=\"checkbox\" ng-model=\"checked\"><br/>\n        <button ng-model=\"button\" ng-disabled=\"checked\">Button</button>\n      </file>\n      <file name=\"protractor.js\" type=\"protractor\">\n        it('should toggle button', function() {\n          expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();\n          element(by.model('checked')).click();\n          expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();\n        });\n      </file>\n    </example>\n *\n * @element INPUT\n * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy,\n *     then the `disabled` attribute will be set on the element\n */\n\n\n/**\n * @ngdoc directive\n * @name ngChecked\n * @restrict A\n * @priority 100\n *\n * @description\n * The HTML specification does not require browsers to preserve the values of boolean attributes\n * such as checked. (Their presence means true and their absence means false.)\n * If we put an Angular interpolation expression into such an attribute then the\n * binding information would be lost when the browser removes the attribute.\n * The `ngChecked` directive solves this problem for the `checked` attribute.\n * This complementary directive is not removed by the browser and so provides\n * a permanent reliable place to store the binding information.\n * @example\n    <example>\n      <file name=\"index.html\">\n        Check me to check both: <input type=\"checkbox\" ng-model=\"master\"><br/>\n        <input id=\"checkSlave\" type=\"checkbox\" ng-checked=\"master\">\n      </file>\n      <file name=\"protractor.js\" type=\"protractor\">\n        it('should check both checkBoxes', function() {\n          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();\n          element(by.model('master')).click();\n          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();\n        });\n      </file>\n    </example>\n *\n * @element INPUT\n * @param {expression} ngChecked If the {@link guide/expression expression} is truthy,\n *     then special attribute \"checked\" will be set on the element\n */\n\n\n/**\n * @ngdoc directive\n * @name ngReadonly\n * @restrict A\n * @priority 100\n *\n * @description\n * The HTML specification does not require browsers to preserve the values of boolean attributes\n * such as readonly. (Their presence means true and their absence means false.)\n * If we put an Angular interpolation expression into such an attribute then the\n * binding information would be lost when the browser removes the attribute.\n * The `ngReadonly` directive solves this problem for the `readonly` attribute.\n * This complementary directive is not removed by the browser and so provides\n * a permanent reliable place to store the binding information.\n * @example\n    <example>\n      <file name=\"index.html\">\n        Check me to make text readonly: <input type=\"checkbox\" ng-model=\"checked\"><br/>\n        <input type=\"text\" ng-readonly=\"checked\" value=\"I'm Angular\"/>\n      </file>\n      <file name=\"protractor.js\" type=\"protractor\">\n        it('should toggle readonly attr', function() {\n          expect(element(by.css('[type=\"text\"]')).getAttribute('readonly')).toBeFalsy();\n          element(by.model('checked')).click();\n          expect(element(by.css('[type=\"text\"]')).getAttribute('readonly')).toBeTruthy();\n        });\n      </file>\n    </example>\n *\n * @element INPUT\n * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy,\n *     then special attribute \"readonly\" will be set on the element\n */\n\n\n/**\n * @ngdoc directive\n * @name ngSelected\n * @restrict A\n * @priority 100\n *\n * @description\n * The HTML specification does not require browsers to preserve the values of boolean attributes\n * such as selected. (Their presence means true and their absence means false.)\n * If we put an Angular interpolation expression into such an attribute then the\n * binding information would be lost when the browser removes the attribute.\n * The `ngSelected` directive solves this problem for the `selected` attribute.\n * This complementary directive is not removed by the browser and so provides\n * a permanent reliable place to store the binding information.\n *\n * @example\n    <example>\n      <file name=\"index.html\">\n        Check me to select: <input type=\"checkbox\" ng-model=\"selected\"><br/>\n        <select>\n          <option>Hello!</option>\n          <option id=\"greet\" ng-selected=\"selected\">Greetings!</option>\n        </select>\n      </file>\n      <file name=\"protractor.js\" type=\"protractor\">\n        it('should select Greetings!', function() {\n          expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();\n          element(by.model('selected')).click();\n          expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();\n        });\n      </file>\n    </example>\n *\n * @element OPTION\n * @param {expression} ngSelected If the {@link guide/expression expression} is truthy,\n *     then special attribute \"selected\" will be set on the element\n */\n\n/**\n * @ngdoc directive\n * @name ngOpen\n * @restrict A\n * @priority 100\n *\n * @description\n * The HTML specification does not require browsers to preserve the values of boolean attributes\n * such as open. (Their presence means true and their absence means false.)\n * If we put an Angular interpolation expression into such an attribute then the\n * binding information would be lost when the browser removes the attribute.\n * The `ngOpen` directive solves this problem for the `open` attribute.\n * This complementary directive is not removed by the browser and so provides\n * a permanent reliable place to store the binding information.\n * @example\n     <example>\n       <file name=\"index.html\">\n         Check me check multiple: <input type=\"checkbox\" ng-model=\"open\"><br/>\n         <details id=\"details\" ng-open=\"open\">\n            <summary>Show/Hide me</summary>\n         </details>\n       </file>\n       <file name=\"protractor.js\" type=\"protractor\">\n         it('should toggle open', function() {\n           expect(element(by.id('details')).getAttribute('open')).toBeFalsy();\n           element(by.model('open')).click();\n           expect(element(by.id('details')).getAttribute('open')).toBeTruthy();\n         });\n       </file>\n     </example>\n *\n * @element DETAILS\n * @param {expression} ngOpen If the {@link guide/expression expression} is truthy,\n *     then special attribute \"open\" will be set on the element\n */\n\nvar ngAttributeAliasDirectives = {};\n\n\n// boolean attrs are evaluated\nforEach(BOOLEAN_ATTR, function(propName, attrName) {\n  // binding to multiple is not supported\n  if (propName == \"multiple\") return;\n\n  var normalized = directiveNormalize('ng-' + attrName);\n  ngAttributeAliasDirectives[normalized] = function() {\n    return {\n      restrict: 'A',\n      priority: 100,\n      link: function(scope, element, attr) {\n        scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {\n          attr.$set(attrName, !!value);\n        });\n      }\n    };\n  };\n});\n\n// aliased input attrs are evaluated\nforEach(ALIASED_ATTR, function(htmlAttr, ngAttr) {\n  ngAttributeAliasDirectives[ngAttr] = function() {\n    return {\n      priority: 100,\n      link: function(scope, element, attr) {\n        //special case ngPattern when a literal regular expression value\n        //is used as the expression (this way we don't have to watch anything).\n        if (ngAttr === \"ngPattern\" && attr.ngPattern.charAt(0) == \"/\") {\n          var match = attr.ngPattern.match(REGEX_STRING_REGEXP);\n          if (match) {\n            attr.$set(\"ngPattern\", new RegExp(match[1], match[2]));\n            return;\n          }\n        }\n\n        scope.$watch(attr[ngAttr], function ngAttrAliasWatchAction(value) {\n          attr.$set(ngAttr, value);\n        });\n      }\n    };\n  };\n});\n\n// ng-src, ng-srcset, ng-href are interpolated\nforEach(['src', 'srcset', 'href'], function(attrName) {\n  var normalized = directiveNormalize('ng-' + attrName);\n  ngAttributeAliasDirectives[normalized] = function() {\n    return {\n      priority: 99, // it needs to run after the attributes are interpolated\n      link: function(scope, element, attr) {\n        var propName = attrName,\n            name = attrName;\n\n        if (attrName === 'href' &&\n            toString.call(element.prop('href')) === '[object SVGAnimatedString]') {\n          name = 'xlinkHref';\n          attr.$attr[name] = 'xlink:href';\n          propName = null;\n        }\n\n        attr.$observe(normalized, function(value) {\n          if (!value) {\n            if (attrName === 'href') {\n              attr.$set(name, null);\n            }\n            return;\n          }\n\n          attr.$set(name, value);\n\n          // on IE, if \"ng:src\" directive declaration is used and \"src\" attribute doesn't exist\n          // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need\n          // to set the property as well to achieve the desired effect.\n          // we use attr[attrName] value since $set can sanitize the url.\n          if (msie && propName) element.prop(propName, attr[name]);\n        });\n      }\n    };\n  };\n});\n\n/* global -nullFormCtrl, -SUBMITTED_CLASS, addSetValidityMethod: true\n */\nvar nullFormCtrl = {\n  $addControl: noop,\n  $$renameControl: nullFormRenameControl,\n  $removeControl: noop,\n  $setValidity: noop,\n  $setDirty: noop,\n  $setPristine: noop,\n  $setSubmitted: noop\n},\nSUBMITTED_CLASS = 'ng-submitted';\n\nfunction nullFormRenameControl(control, name) {\n  control.$name = name;\n}\n\n/**\n * @ngdoc type\n * @name form.FormController\n *\n * @property {boolean} $pristine True if user has not interacted with the form yet.\n * @property {boolean} $dirty True if user has already interacted with the form.\n * @property {boolean} $valid True if all of the containing forms and controls are valid.\n * @property {boolean} $invalid True if at least one containing control or form is invalid.\n * @property {boolean} $submitted True if user has submitted the form even if its invalid.\n *\n * @property {Object} $error Is an object hash, containing references to controls or\n *  forms with failing validators, where:\n *\n *  - keys are validation tokens (error names),\n *  - values are arrays of controls or forms that have a failing validator for given error name.\n *\n *  Built-in validation tokens:\n *\n *  - `email`\n *  - `max`\n *  - `maxlength`\n *  - `min`\n *  - `minlength`\n *  - `number`\n *  - `pattern`\n *  - `required`\n *  - `url`\n *  - `date`\n *  - `datetimelocal`\n *  - `time`\n *  - `week`\n *  - `month`\n *\n * @description\n * `FormController` keeps track of all its controls and nested forms as well as the state of them,\n * such as being valid/invalid or dirty/pristine.\n *\n * Each {@link ng.directive:form form} directive creates an instance\n * of `FormController`.\n *\n */\n//asks for $scope to fool the BC controller module\nFormController.$inject = ['$element', '$attrs', '$scope', '$animate', '$interpolate'];\nfunction FormController(element, attrs, $scope, $animate, $interpolate) {\n  var form = this,\n      controls = [];\n\n  var parentForm = form.$$parentForm = element.parent().controller('form') || nullFormCtrl;\n\n  // init state\n  form.$error = {};\n  form.$$success = {};\n  form.$pending = undefined;\n  form.$name = $interpolate(attrs.name || attrs.ngForm || '')($scope);\n  form.$dirty = false;\n  form.$pristine = true;\n  form.$valid = true;\n  form.$invalid = false;\n  form.$submitted = false;\n\n  parentForm.$addControl(form);\n\n  /**\n   * @ngdoc method\n   * @name form.FormController#$rollbackViewValue\n   *\n   * @description\n   * Rollback all form controls pending updates to the `$modelValue`.\n   *\n   * Updates may be pending by a debounced event or because the input is waiting for a some future\n   * event defined in `ng-model-options`. This method is typically needed by the reset button of\n   * a form that uses `ng-model-options` to pend updates.\n   */\n  form.$rollbackViewValue = function() {\n    forEach(controls, function(control) {\n      control.$rollbackViewValue();\n    });\n  };\n\n  /**\n   * @ngdoc method\n   * @name form.FormController#$commitViewValue\n   *\n   * @description\n   * Commit all form controls pending updates to the `$modelValue`.\n   *\n   * Updates may be pending by a debounced event or because the input is waiting for a some future\n   * event defined in `ng-model-options`. This method is rarely needed as `NgModelController`\n   * usually handles calling this in response to input events.\n   */\n  form.$commitViewValue = function() {\n    forEach(controls, function(control) {\n      control.$commitViewValue();\n    });\n  };\n\n  /**\n   * @ngdoc method\n   * @name form.FormController#$addControl\n   *\n   * @description\n   * Register a control with the form.\n   *\n   * Input elements using ngModelController do this automatically when they are linked.\n   */\n  form.$addControl = function(control) {\n    // Breaking change - before, inputs whose name was \"hasOwnProperty\" were quietly ignored\n    // and not added to the scope.  Now we throw an error.\n    assertNotHasOwnProperty(control.$name, 'input');\n    controls.push(control);\n\n    if (control.$name) {\n      form[control.$name] = control;\n    }\n  };\n\n  // Private API: rename a form control\n  form.$$renameControl = function(control, newName) {\n    var oldName = control.$name;\n\n    if (form[oldName] === control) {\n      delete form[oldName];\n    }\n    form[newName] = control;\n    control.$name = newName;\n  };\n\n  /**\n   * @ngdoc method\n   * @name form.FormController#$removeControl\n   *\n   * @description\n   * Deregister a control from the form.\n   *\n   * Input elements using ngModelController do this automatically when they are destroyed.\n   */\n  form.$removeControl = function(control) {\n    if (control.$name && form[control.$name] === control) {\n      delete form[control.$name];\n    }\n    forEach(form.$pending, function(value, name) {\n      form.$setValidity(name, null, control);\n    });\n    forEach(form.$error, function(value, name) {\n      form.$setValidity(name, null, control);\n    });\n    forEach(form.$$success, function(value, name) {\n      form.$setValidity(name, null, control);\n    });\n\n    arrayRemove(controls, control);\n  };\n\n\n  /**\n   * @ngdoc method\n   * @name form.FormController#$setValidity\n   *\n   * @description\n   * Sets the validity of a form control.\n   *\n   * This method will also propagate to parent forms.\n   */\n  addSetValidityMethod({\n    ctrl: this,\n    $element: element,\n    set: function(object, property, controller) {\n      var list = object[property];\n      if (!list) {\n        object[property] = [controller];\n      } else {\n        var index = list.indexOf(controller);\n        if (index === -1) {\n          list.push(controller);\n        }\n      }\n    },\n    unset: function(object, property, controller) {\n      var list = object[property];\n      if (!list) {\n        return;\n      }\n      arrayRemove(list, controller);\n      if (list.length === 0) {\n        delete object[property];\n      }\n    },\n    parentForm: parentForm,\n    $animate: $animate\n  });\n\n  /**\n   * @ngdoc method\n   * @name form.FormController#$setDirty\n   *\n   * @description\n   * Sets the form to a dirty state.\n   *\n   * This method can be called to add the 'ng-dirty' class and set the form to a dirty\n   * state (ng-dirty class). This method will also propagate to parent forms.\n   */\n  form.$setDirty = function() {\n    $animate.removeClass(element, PRISTINE_CLASS);\n    $animate.addClass(element, DIRTY_CLASS);\n    form.$dirty = true;\n    form.$pristine = false;\n    parentForm.$setDirty();\n  };\n\n  /**\n   * @ngdoc method\n   * @name form.FormController#$setPristine\n   *\n   * @description\n   * Sets the form to its pristine state.\n   *\n   * This method can be called to remove the 'ng-dirty' class and set the form to its pristine\n   * state (ng-pristine class). This method will also propagate to all the controls contained\n   * in this form.\n   *\n   * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after\n   * saving or resetting it.\n   */\n  form.$setPristine = function() {\n    $animate.setClass(element, PRISTINE_CLASS, DIRTY_CLASS + ' ' + SUBMITTED_CLASS);\n    form.$dirty = false;\n    form.$pristine = true;\n    form.$submitted = false;\n    forEach(controls, function(control) {\n      control.$setPristine();\n    });\n  };\n\n  /**\n   * @ngdoc method\n   * @name form.FormController#$setUntouched\n   *\n   * @description\n   * Sets the form to its untouched state.\n   *\n   * This method can be called to remove the 'ng-touched' class and set the form controls to their\n   * untouched state (ng-untouched class).\n   *\n   * Setting a form controls back to their untouched state is often useful when setting the form\n   * back to its pristine state.\n   */\n  form.$setUntouched = function() {\n    forEach(controls, function(control) {\n      control.$setUntouched();\n    });\n  };\n\n  /**\n   * @ngdoc method\n   * @name form.FormController#$setSubmitted\n   *\n   * @description\n   * Sets the form to its submitted state.\n   */\n  form.$setSubmitted = function() {\n    $animate.addClass(element, SUBMITTED_CLASS);\n    form.$submitted = true;\n    parentForm.$setSubmitted();\n  };\n}\n\n/**\n * @ngdoc directive\n * @name ngForm\n * @restrict EAC\n *\n * @description\n * Nestable alias of {@link ng.directive:form `form`} directive. HTML\n * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a\n * sub-group of controls needs to be determined.\n *\n * Note: the purpose of `ngForm` is to group controls,\n * but not to be a replacement for the `<form>` tag with all of its capabilities\n * (e.g. posting to the server, ...).\n *\n * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into\n *                       related scope, under this name.\n *\n */\n\n /**\n * @ngdoc directive\n * @name form\n * @restrict E\n *\n * @description\n * Directive that instantiates\n * {@link form.FormController FormController}.\n *\n * If the `name` attribute is specified, the form controller is published onto the current scope under\n * this name.\n *\n * # Alias: {@link ng.directive:ngForm `ngForm`}\n *\n * In Angular, forms can be nested. This means that the outer form is valid when all of the child\n * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so\n * Angular provides the {@link ng.directive:ngForm `ngForm`} directive which behaves identically to\n * `<form>` but can be nested.  This allows you to have nested forms, which is very useful when\n * using Angular validation directives in forms that are dynamically generated using the\n * {@link ng.directive:ngRepeat `ngRepeat`} directive. Since you cannot dynamically generate the `name`\n * attribute of input elements using interpolation, you have to wrap each set of repeated inputs in an\n * `ngForm` directive and nest these in an outer `form` element.\n *\n *\n * # CSS classes\n *  - `ng-valid` is set if the form is valid.\n *  - `ng-invalid` is set if the form is invalid.\n *  - `ng-pristine` is set if the form is pristine.\n *  - `ng-dirty` is set if the form is dirty.\n *  - `ng-submitted` is set if the form was submitted.\n *\n * Keep in mind that ngAnimate can detect each of these classes when added and removed.\n *\n *\n * # Submitting a form and preventing the default action\n *\n * Since the role of forms in client-side Angular applications is different than in classical\n * roundtrip apps, it is desirable for the browser not to translate the form submission into a full\n * page reload that sends the data to the server. Instead some javascript logic should be triggered\n * to handle the form submission in an application-specific way.\n *\n * For this reason, Angular prevents the default action (form submission to the server) unless the\n * `<form>` element has an `action` attribute specified.\n *\n * You can use one of the following two ways to specify what javascript method should be called when\n * a form is submitted:\n *\n * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element\n * - {@link ng.directive:ngClick ngClick} directive on the first\n  *  button or input field of type submit (input[type=submit])\n *\n * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}\n * or {@link ng.directive:ngClick ngClick} directives.\n * This is because of the following form submission rules in the HTML specification:\n *\n * - If a form has only one input field then hitting enter in this field triggers form submit\n * (`ngSubmit`)\n * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter\n * doesn't trigger submit\n * - if a form has one or more input fields and one or more buttons or input[type=submit] then\n * hitting enter in any of the input fields will trigger the click handler on the *first* button or\n * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)\n *\n * Any pending `ngModelOptions` changes will take place immediately when an enclosing form is\n * submitted. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`\n * to have access to the updated model.\n *\n * ## Animation Hooks\n *\n * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.\n * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any\n * other validations that are performed within the form. Animations in ngForm are similar to how\n * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well\n * as JS animations.\n *\n * The following example shows a simple way to utilize CSS transitions to style a form element\n * that has been rendered as invalid after it has been validated:\n *\n * <pre>\n * //be sure to include ngAnimate as a module to hook into more\n * //advanced animations\n * .my-form {\n *   transition:0.5s linear all;\n *   background: white;\n * }\n * .my-form.ng-invalid {\n *   background: red;\n *   color:white;\n * }\n * </pre>\n *\n * @example\n    <example deps=\"angular-animate.js\" animations=\"true\" fixBase=\"true\" module=\"formExample\">\n      <file name=\"index.html\">\n       <script>\n         angular.module('formExample', [])\n           .controller('FormController', ['$scope', function($scope) {\n             $scope.userType = 'guest';\n           }]);\n       </script>\n       <style>\n        .my-form {\n          -webkit-transition:all linear 0.5s;\n          transition:all linear 0.5s;\n          background: transparent;\n        }\n        .my-form.ng-invalid {\n          background: red;\n        }\n       </style>\n       <form name=\"myForm\" ng-controller=\"FormController\" class=\"my-form\">\n         userType: <input name=\"input\" ng-model=\"userType\" required>\n         <span class=\"error\" ng-show=\"myForm.input.$error.required\">Required!</span><br>\n         <code>userType = {{userType}}</code><br>\n         <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br>\n         <code>myForm.input.$error = {{myForm.input.$error}}</code><br>\n         <code>myForm.$valid = {{myForm.$valid}}</code><br>\n         <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br>\n        </form>\n      </file>\n      <file name=\"protractor.js\" type=\"protractor\">\n        it('should initialize to model', function() {\n          var userType = element(by.binding('userType'));\n          var valid = element(by.binding('myForm.input.$valid'));\n\n          expect(userType.getText()).toContain('guest');\n          expect(valid.getText()).toContain('true');\n        });\n\n        it('should be invalid if empty', function() {\n          var userType = element(by.binding('userType'));\n          var valid = element(by.binding('myForm.input.$valid'));\n          var userInput = element(by.model('userType'));\n\n          userInput.clear();\n          userInput.sendKeys('');\n\n          expect(userType.getText()).toEqual('userType =');\n          expect(valid.getText()).toContain('false');\n        });\n      </file>\n    </example>\n *\n * @param {string=} name Name of the form. If specified, the form controller will be published into\n *                       related scope, under this name.\n */\nvar formDirectiveFactory = function(isNgForm) {\n  return ['$timeout', function($timeout) {\n    var formDirective = {\n      name: 'form',\n      restrict: isNgForm ? 'EAC' : 'E',\n      controller: FormController,\n      compile: function ngFormCompile(formElement, attr) {\n        // Setup initial state of the control\n        formElement.addClass(PRISTINE_CLASS).addClass(VALID_CLASS);\n\n        var nameAttr = attr.name ? 'name' : (isNgForm && attr.ngForm ? 'ngForm' : false);\n\n        return {\n          pre: function ngFormPreLink(scope, formElement, attr, controller) {\n            // if `action` attr is not present on the form, prevent the default action (submission)\n            if (!('action' in attr)) {\n              // we can't use jq events because if a form is destroyed during submission the default\n              // action is not prevented. see #1238\n              //\n              // IE 9 is not affected because it doesn't fire a submit event and try to do a full\n              // page reload if the form was destroyed by submission of the form via a click handler\n              // on a button in the form. Looks like an IE9 specific bug.\n              var handleFormSubmission = function(event) {\n                scope.$apply(function() {\n                  controller.$commitViewValue();\n                  controller.$setSubmitted();\n                });\n\n                event.preventDefault();\n              };\n\n              addEventListenerFn(formElement[0], 'submit', handleFormSubmission);\n\n              // unregister the preventDefault listener so that we don't not leak memory but in a\n              // way that will achieve the prevention of the default action.\n              formElement.on('$destroy', function() {\n                $timeout(function() {\n                  removeEventListenerFn(formElement[0], 'submit', handleFormSubmission);\n                }, 0, false);\n              });\n            }\n\n            var parentFormCtrl = controller.$$parentForm;\n\n            if (nameAttr) {\n              setter(scope, null, controller.$name, controller, controller.$name);\n              attr.$observe(nameAttr, function(newValue) {\n                if (controller.$name === newValue) return;\n                setter(scope, null, controller.$name, undefined, controller.$name);\n                parentFormCtrl.$$renameControl(controller, newValue);\n                setter(scope, null, controller.$name, controller, controller.$name);\n              });\n            }\n            formElement.on('$destroy', function() {\n              parentFormCtrl.$removeControl(controller);\n              if (nameAttr) {\n                setter(scope, null, attr[nameAttr], undefined, controller.$name);\n              }\n              extend(controller, nullFormCtrl); //stop propagating child destruction handlers upwards\n            });\n          }\n        };\n      }\n    };\n\n    return formDirective;\n  }];\n};\n\nvar formDirective = formDirectiveFactory();\nvar ngFormDirective = formDirectiveFactory(true);\n\n/* global VALID_CLASS: false,\n  INVALID_CLASS: false,\n  PRISTINE_CLASS: false,\n  DIRTY_CLASS: false,\n  UNTOUCHED_CLASS: false,\n  TOUCHED_CLASS: false,\n  ngModelMinErr: false,\n*/\n\n// Regex code is obtained from SO: https://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime#answer-3143231\nvar ISO_DATE_REGEXP = /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/;\nvar URL_REGEXP = /^(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?$/;\nvar EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;\nvar NUMBER_REGEXP = /^\\s*(\\-|\\+)?(\\d+|(\\d*(\\.\\d*)))\\s*$/;\nvar DATE_REGEXP = /^(\\d{4})-(\\d{2})-(\\d{2})$/;\nvar DATETIMELOCAL_REGEXP = /^(\\d{4})-(\\d\\d)-(\\d\\d)T(\\d\\d):(\\d\\d)(?::(\\d\\d)(\\.\\d{1,3})?)?$/;\nvar WEEK_REGEXP = /^(\\d{4})-W(\\d\\d)$/;\nvar MONTH_REGEXP = /^(\\d{4})-(\\d\\d)$/;\nvar TIME_REGEXP = /^(\\d\\d):(\\d\\d)(?::(\\d\\d)(\\.\\d{1,3})?)?$/;\n\nvar inputType = {\n\n  /**\n   * @ngdoc input\n   * @name input[text]\n   *\n   * @description\n   * Standard HTML text input with angular data binding, inherited by most of the `input` elements.\n   *\n   *\n   * @param {string} ngModel Assignable angular expression to data-bind to.\n   * @param {string=} name Property name of the form under which the control is published.\n   * @param {string=} required Adds `required` validation error key if the value is not entered.\n   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n   *    `required` when you want to data-bind to the `required` attribute.\n   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than\n   *    minlength.\n   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than\n   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of\n   *    any length.\n   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string\n   *    that contains the regular expression body that will be converted to a regular expression\n   *    as in the ngPattern directive.\n   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match\n   *    a RegExp found by evaluating the Angular expression given in the attribute value.\n   *    If the expression evaluates to a RegExp object then this is used directly.\n   *    If the expression is a string then it will be converted to a RegExp after wrapping it in `^` and `$`\n   *    characters. For instance, `\"abc\"` will be converted to `new RegExp('^abc$')`.\n   * @param {string=} ngChange Angular expression to be executed when input changes due to user\n   *    interaction with the input element.\n   * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.\n   *    This parameter is ignored for input[type=password] controls, which will never trim the\n   *    input.\n   *\n   * @example\n      <example name=\"text-input-directive\" module=\"textInputExample\">\n        <file name=\"index.html\">\n         <script>\n           angular.module('textInputExample', [])\n             .controller('ExampleController', ['$scope', function($scope) {\n               $scope.example = {\n                 text: 'guest',\n                 word: /^\\s*\\w*\\s*$/\n               };\n             }]);\n         </script>\n         <form name=\"myForm\" ng-controller=\"ExampleController\">\n           Single word: <input type=\"text\" name=\"input\" ng-model=\"example.text\"\n                               ng-pattern=\"example.word\" required ng-trim=\"false\">\n           <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n             Required!</span>\n           <span class=\"error\" ng-show=\"myForm.input.$error.pattern\">\n             Single word only!</span>\n\n           <tt>text = {{example.text}}</tt><br/>\n           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n          </form>\n        </file>\n        <file name=\"protractor.js\" type=\"protractor\">\n          var text = element(by.binding('example.text'));\n          var valid = element(by.binding('myForm.input.$valid'));\n          var input = element(by.model('example.text'));\n\n          it('should initialize to model', function() {\n            expect(text.getText()).toContain('guest');\n            expect(valid.getText()).toContain('true');\n          });\n\n          it('should be invalid if empty', function() {\n            input.clear();\n            input.sendKeys('');\n\n            expect(text.getText()).toEqual('text =');\n            expect(valid.getText()).toContain('false');\n          });\n\n          it('should be invalid if multi word', function() {\n            input.clear();\n            input.sendKeys('hello world');\n\n            expect(valid.getText()).toContain('false');\n          });\n        </file>\n      </example>\n   */\n  'text': textInputType,\n\n    /**\n     * @ngdoc input\n     * @name input[date]\n     *\n     * @description\n     * Input with date validation and transformation. In browsers that do not yet support\n     * the HTML5 date input, a text element will be used. In that case, text must be entered in a valid ISO-8601\n     * date format (yyyy-MM-dd), for example: `2009-01-06`. Since many\n     * modern browsers do not yet support this input type, it is important to provide cues to users on the\n     * expected input format via a placeholder or label.\n     *\n     * The model must always be a Date object, otherwise Angular will throw an error.\n     * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.\n     *\n     * The timezone to be used to read/write the `Date` instance in the model can be defined using\n     * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.\n     *\n     * @param {string} ngModel Assignable angular expression to data-bind to.\n     * @param {string=} name Property name of the form under which the control is published.\n     * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a\n     * valid ISO date string (yyyy-MM-dd).\n     * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be\n     * a valid ISO date string (yyyy-MM-dd).\n     * @param {string=} required Sets `required` validation error key if the value is not entered.\n     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n     *    `required` when you want to data-bind to the `required` attribute.\n     * @param {string=} ngChange Angular expression to be executed when input changes due to user\n     *    interaction with the input element.\n     *\n     * @example\n     <example name=\"date-input-directive\" module=\"dateInputExample\">\n     <file name=\"index.html\">\n       <script>\n          angular.module('dateInputExample', [])\n            .controller('DateController', ['$scope', function($scope) {\n              $scope.example = {\n                value: new Date(2013, 9, 22)\n              };\n            }]);\n       </script>\n       <form name=\"myForm\" ng-controller=\"DateController as dateCtrl\">\n          Pick a date in 2013:\n          <input type=\"date\" id=\"exampleInput\" name=\"input\" ng-model=\"example.value\"\n              placeholder=\"yyyy-MM-dd\" min=\"2013-01-01\" max=\"2013-12-31\" required />\n          <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n              Required!</span>\n          <span class=\"error\" ng-show=\"myForm.input.$error.date\">\n              Not a valid date!</span>\n           <tt>value = {{example.value | date: \"yyyy-MM-dd\"}}</tt><br/>\n           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n       </form>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n        var value = element(by.binding('example.value | date: \"yyyy-MM-dd\"'));\n        var valid = element(by.binding('myForm.input.$valid'));\n        var input = element(by.model('example.value'));\n\n        // currently protractor/webdriver does not support\n        // sending keys to all known HTML5 input controls\n        // for various browsers (see https://github.com/angular/protractor/issues/562).\n        function setInput(val) {\n          // set the value of the element and force validation.\n          var scr = \"var ipt = document.getElementById('exampleInput'); \" +\n          \"ipt.value = '\" + val + \"';\" +\n          \"angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('\" + val + \"'); });\";\n          browser.executeScript(scr);\n        }\n\n        it('should initialize to model', function() {\n          expect(value.getText()).toContain('2013-10-22');\n          expect(valid.getText()).toContain('myForm.input.$valid = true');\n        });\n\n        it('should be invalid if empty', function() {\n          setInput('');\n          expect(value.getText()).toEqual('value =');\n          expect(valid.getText()).toContain('myForm.input.$valid = false');\n        });\n\n        it('should be invalid if over max', function() {\n          setInput('2015-01-01');\n          expect(value.getText()).toContain('');\n          expect(valid.getText()).toContain('myForm.input.$valid = false');\n        });\n     </file>\n     </example>\n     */\n  'date': createDateInputType('date', DATE_REGEXP,\n         createDateParser(DATE_REGEXP, ['yyyy', 'MM', 'dd']),\n         'yyyy-MM-dd'),\n\n   /**\n    * @ngdoc input\n    * @name input[datetime-local]\n    *\n    * @description\n    * Input with datetime validation and transformation. In browsers that do not yet support\n    * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601\n    * local datetime format (yyyy-MM-ddTHH:mm:ss), for example: `2010-12-28T14:57:00`.\n    *\n    * The model must always be a Date object, otherwise Angular will throw an error.\n    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.\n    *\n    * The timezone to be used to read/write the `Date` instance in the model can be defined using\n    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.\n    *\n    * @param {string} ngModel Assignable angular expression to data-bind to.\n    * @param {string=} name Property name of the form under which the control is published.\n    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a\n    * valid ISO datetime format (yyyy-MM-ddTHH:mm:ss).\n    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be\n    * a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss).\n    * @param {string=} required Sets `required` validation error key if the value is not entered.\n    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n    *    `required` when you want to data-bind to the `required` attribute.\n    * @param {string=} ngChange Angular expression to be executed when input changes due to user\n    *    interaction with the input element.\n    *\n    * @example\n    <example name=\"datetimelocal-input-directive\" module=\"dateExample\">\n    <file name=\"index.html\">\n      <script>\n        angular.module('dateExample', [])\n          .controller('DateController', ['$scope', function($scope) {\n            $scope.example = {\n              value: new Date(2010, 11, 28, 14, 57)\n            };\n          }]);\n      </script>\n      <form name=\"myForm\" ng-controller=\"DateController as dateCtrl\">\n        Pick a date between in 2013:\n        <input type=\"datetime-local\" id=\"exampleInput\" name=\"input\" ng-model=\"example.value\"\n            placeholder=\"yyyy-MM-ddTHH:mm:ss\" min=\"2001-01-01T00:00:00\" max=\"2013-12-31T00:00:00\" required />\n        <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n            Required!</span>\n        <span class=\"error\" ng-show=\"myForm.input.$error.datetimelocal\">\n            Not a valid date!</span>\n        <tt>value = {{example.value | date: \"yyyy-MM-ddTHH:mm:ss\"}}</tt><br/>\n        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n      </form>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      var value = element(by.binding('example.value | date: \"yyyy-MM-ddTHH:mm:ss\"'));\n      var valid = element(by.binding('myForm.input.$valid'));\n      var input = element(by.model('example.value'));\n\n      // currently protractor/webdriver does not support\n      // sending keys to all known HTML5 input controls\n      // for various browsers (https://github.com/angular/protractor/issues/562).\n      function setInput(val) {\n        // set the value of the element and force validation.\n        var scr = \"var ipt = document.getElementById('exampleInput'); \" +\n        \"ipt.value = '\" + val + \"';\" +\n        \"angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('\" + val + \"'); });\";\n        browser.executeScript(scr);\n      }\n\n      it('should initialize to model', function() {\n        expect(value.getText()).toContain('2010-12-28T14:57:00');\n        expect(valid.getText()).toContain('myForm.input.$valid = true');\n      });\n\n      it('should be invalid if empty', function() {\n        setInput('');\n        expect(value.getText()).toEqual('value =');\n        expect(valid.getText()).toContain('myForm.input.$valid = false');\n      });\n\n      it('should be invalid if over max', function() {\n        setInput('2015-01-01T23:59:00');\n        expect(value.getText()).toContain('');\n        expect(valid.getText()).toContain('myForm.input.$valid = false');\n      });\n    </file>\n    </example>\n    */\n  'datetime-local': createDateInputType('datetimelocal', DATETIMELOCAL_REGEXP,\n      createDateParser(DATETIMELOCAL_REGEXP, ['yyyy', 'MM', 'dd', 'HH', 'mm', 'ss', 'sss']),\n      'yyyy-MM-ddTHH:mm:ss.sss'),\n\n  /**\n   * @ngdoc input\n   * @name input[time]\n   *\n   * @description\n   * Input with time validation and transformation. In browsers that do not yet support\n   * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601\n   * local time format (HH:mm:ss), for example: `14:57:00`. Model must be a Date object. This binding will always output a\n   * Date object to the model of January 1, 1970, or local date `new Date(1970, 0, 1, HH, mm, ss)`.\n   *\n   * The model must always be a Date object, otherwise Angular will throw an error.\n   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.\n   *\n   * The timezone to be used to read/write the `Date` instance in the model can be defined using\n   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.\n   *\n   * @param {string} ngModel Assignable angular expression to data-bind to.\n   * @param {string=} name Property name of the form under which the control is published.\n   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a\n   * valid ISO time format (HH:mm:ss).\n   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be a\n   * valid ISO time format (HH:mm:ss).\n   * @param {string=} required Sets `required` validation error key if the value is not entered.\n   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n   *    `required` when you want to data-bind to the `required` attribute.\n   * @param {string=} ngChange Angular expression to be executed when input changes due to user\n   *    interaction with the input element.\n   *\n   * @example\n   <example name=\"time-input-directive\" module=\"timeExample\">\n   <file name=\"index.html\">\n     <script>\n      angular.module('timeExample', [])\n        .controller('DateController', ['$scope', function($scope) {\n          $scope.example = {\n            value: new Date(1970, 0, 1, 14, 57, 0)\n          };\n        }]);\n     </script>\n     <form name=\"myForm\" ng-controller=\"DateController as dateCtrl\">\n        Pick a between 8am and 5pm:\n        <input type=\"time\" id=\"exampleInput\" name=\"input\" ng-model=\"example.value\"\n            placeholder=\"HH:mm:ss\" min=\"08:00:00\" max=\"17:00:00\" required />\n        <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n            Required!</span>\n        <span class=\"error\" ng-show=\"myForm.input.$error.time\">\n            Not a valid date!</span>\n        <tt>value = {{example.value | date: \"HH:mm:ss\"}}</tt><br/>\n        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n     </form>\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n      var value = element(by.binding('example.value | date: \"HH:mm:ss\"'));\n      var valid = element(by.binding('myForm.input.$valid'));\n      var input = element(by.model('example.value'));\n\n      // currently protractor/webdriver does not support\n      // sending keys to all known HTML5 input controls\n      // for various browsers (https://github.com/angular/protractor/issues/562).\n      function setInput(val) {\n        // set the value of the element and force validation.\n        var scr = \"var ipt = document.getElementById('exampleInput'); \" +\n        \"ipt.value = '\" + val + \"';\" +\n        \"angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('\" + val + \"'); });\";\n        browser.executeScript(scr);\n      }\n\n      it('should initialize to model', function() {\n        expect(value.getText()).toContain('14:57:00');\n        expect(valid.getText()).toContain('myForm.input.$valid = true');\n      });\n\n      it('should be invalid if empty', function() {\n        setInput('');\n        expect(value.getText()).toEqual('value =');\n        expect(valid.getText()).toContain('myForm.input.$valid = false');\n      });\n\n      it('should be invalid if over max', function() {\n        setInput('23:59:00');\n        expect(value.getText()).toContain('');\n        expect(valid.getText()).toContain('myForm.input.$valid = false');\n      });\n   </file>\n   </example>\n   */\n  'time': createDateInputType('time', TIME_REGEXP,\n      createDateParser(TIME_REGEXP, ['HH', 'mm', 'ss', 'sss']),\n     'HH:mm:ss.sss'),\n\n   /**\n    * @ngdoc input\n    * @name input[week]\n    *\n    * @description\n    * Input with week-of-the-year validation and transformation to Date. In browsers that do not yet support\n    * the HTML5 week input, a text element will be used. In that case, the text must be entered in a valid ISO-8601\n    * week format (yyyy-W##), for example: `2013-W02`.\n    *\n    * The model must always be a Date object, otherwise Angular will throw an error.\n    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.\n    *\n    * The timezone to be used to read/write the `Date` instance in the model can be defined using\n    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.\n    *\n    * @param {string} ngModel Assignable angular expression to data-bind to.\n    * @param {string=} name Property name of the form under which the control is published.\n    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a\n    * valid ISO week format (yyyy-W##).\n    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be\n    * a valid ISO week format (yyyy-W##).\n    * @param {string=} required Sets `required` validation error key if the value is not entered.\n    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n    *    `required` when you want to data-bind to the `required` attribute.\n    * @param {string=} ngChange Angular expression to be executed when input changes due to user\n    *    interaction with the input element.\n    *\n    * @example\n    <example name=\"week-input-directive\" module=\"weekExample\">\n    <file name=\"index.html\">\n      <script>\n      angular.module('weekExample', [])\n        .controller('DateController', ['$scope', function($scope) {\n          $scope.example = {\n            value: new Date(2013, 0, 3)\n          };\n        }]);\n      </script>\n      <form name=\"myForm\" ng-controller=\"DateController as dateCtrl\">\n        Pick a date between in 2013:\n        <input id=\"exampleInput\" type=\"week\" name=\"input\" ng-model=\"example.value\"\n            placeholder=\"YYYY-W##\" min=\"2012-W32\" max=\"2013-W52\" required />\n        <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n            Required!</span>\n        <span class=\"error\" ng-show=\"myForm.input.$error.week\">\n            Not a valid date!</span>\n        <tt>value = {{example.value | date: \"yyyy-Www\"}}</tt><br/>\n        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n      </form>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      var value = element(by.binding('example.value | date: \"yyyy-Www\"'));\n      var valid = element(by.binding('myForm.input.$valid'));\n      var input = element(by.model('example.value'));\n\n      // currently protractor/webdriver does not support\n      // sending keys to all known HTML5 input controls\n      // for various browsers (https://github.com/angular/protractor/issues/562).\n      function setInput(val) {\n        // set the value of the element and force validation.\n        var scr = \"var ipt = document.getElementById('exampleInput'); \" +\n        \"ipt.value = '\" + val + \"';\" +\n        \"angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('\" + val + \"'); });\";\n        browser.executeScript(scr);\n      }\n\n      it('should initialize to model', function() {\n        expect(value.getText()).toContain('2013-W01');\n        expect(valid.getText()).toContain('myForm.input.$valid = true');\n      });\n\n      it('should be invalid if empty', function() {\n        setInput('');\n        expect(value.getText()).toEqual('value =');\n        expect(valid.getText()).toContain('myForm.input.$valid = false');\n      });\n\n      it('should be invalid if over max', function() {\n        setInput('2015-W01');\n        expect(value.getText()).toContain('');\n        expect(valid.getText()).toContain('myForm.input.$valid = false');\n      });\n    </file>\n    </example>\n    */\n  'week': createDateInputType('week', WEEK_REGEXP, weekParser, 'yyyy-Www'),\n\n  /**\n   * @ngdoc input\n   * @name input[month]\n   *\n   * @description\n   * Input with month validation and transformation. In browsers that do not yet support\n   * the HTML5 month input, a text element will be used. In that case, the text must be entered in a valid ISO-8601\n   * month format (yyyy-MM), for example: `2009-01`.\n   *\n   * The model must always be a Date object, otherwise Angular will throw an error.\n   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.\n   * If the model is not set to the first of the month, the next view to model update will set it\n   * to the first of the month.\n   *\n   * The timezone to be used to read/write the `Date` instance in the model can be defined using\n   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.\n   *\n   * @param {string} ngModel Assignable angular expression to data-bind to.\n   * @param {string=} name Property name of the form under which the control is published.\n   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be\n   * a valid ISO month format (yyyy-MM).\n   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must\n   * be a valid ISO month format (yyyy-MM).\n   * @param {string=} required Sets `required` validation error key if the value is not entered.\n   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n   *    `required` when you want to data-bind to the `required` attribute.\n   * @param {string=} ngChange Angular expression to be executed when input changes due to user\n   *    interaction with the input element.\n   *\n   * @example\n   <example name=\"month-input-directive\" module=\"monthExample\">\n   <file name=\"index.html\">\n     <script>\n      angular.module('monthExample', [])\n        .controller('DateController', ['$scope', function($scope) {\n          $scope.example = {\n            value: new Date(2013, 9, 1)\n          };\n        }]);\n     </script>\n     <form name=\"myForm\" ng-controller=\"DateController as dateCtrl\">\n       Pick a month in 2013:\n       <input id=\"exampleInput\" type=\"month\" name=\"input\" ng-model=\"example.value\"\n          placeholder=\"yyyy-MM\" min=\"2013-01\" max=\"2013-12\" required />\n       <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n          Required!</span>\n       <span class=\"error\" ng-show=\"myForm.input.$error.month\">\n          Not a valid month!</span>\n       <tt>value = {{example.value | date: \"yyyy-MM\"}}</tt><br/>\n       <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n       <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n       <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n       <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n     </form>\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n      var value = element(by.binding('example.value | date: \"yyyy-MM\"'));\n      var valid = element(by.binding('myForm.input.$valid'));\n      var input = element(by.model('example.value'));\n\n      // currently protractor/webdriver does not support\n      // sending keys to all known HTML5 input controls\n      // for various browsers (https://github.com/angular/protractor/issues/562).\n      function setInput(val) {\n        // set the value of the element and force validation.\n        var scr = \"var ipt = document.getElementById('exampleInput'); \" +\n        \"ipt.value = '\" + val + \"';\" +\n        \"angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('\" + val + \"'); });\";\n        browser.executeScript(scr);\n      }\n\n      it('should initialize to model', function() {\n        expect(value.getText()).toContain('2013-10');\n        expect(valid.getText()).toContain('myForm.input.$valid = true');\n      });\n\n      it('should be invalid if empty', function() {\n        setInput('');\n        expect(value.getText()).toEqual('value =');\n        expect(valid.getText()).toContain('myForm.input.$valid = false');\n      });\n\n      it('should be invalid if over max', function() {\n        setInput('2015-01');\n        expect(value.getText()).toContain('');\n        expect(valid.getText()).toContain('myForm.input.$valid = false');\n      });\n   </file>\n   </example>\n   */\n  'month': createDateInputType('month', MONTH_REGEXP,\n     createDateParser(MONTH_REGEXP, ['yyyy', 'MM']),\n     'yyyy-MM'),\n\n  /**\n   * @ngdoc input\n   * @name input[number]\n   *\n   * @description\n   * Text input with number validation and transformation. Sets the `number` validation\n   * error if not a valid number.\n   *\n   * <div class=\"alert alert-warning\">\n   * The model must always be of type `number` otherwise Angular will throw an error.\n   * Be aware that a string containing a number is not enough. See the {@link ngModel:numfmt}\n   * error docs for more information and an example of how to convert your model if necessary.\n   * </div>\n   *\n   * @param {string} ngModel Assignable angular expression to data-bind to.\n   * @param {string=} name Property name of the form under which the control is published.\n   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.\n   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.\n   * @param {string=} required Sets `required` validation error key if the value is not entered.\n   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n   *    `required` when you want to data-bind to the `required` attribute.\n   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than\n   *    minlength.\n   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than\n   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of\n   *    any length.\n   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string\n   *    that contains the regular expression body that will be converted to a regular expression\n   *    as in the ngPattern directive.\n   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match\n   *    a RegExp found by evaluating the Angular expression given in the attribute value.\n   *    If the expression evaluates to a RegExp object then this is used directly.\n   *    If the expression is a string then it will be converted to a RegExp after wrapping it in `^` and `$`\n   *    characters. For instance, `\"abc\"` will be converted to `new RegExp('^abc$')`.\n   * @param {string=} ngChange Angular expression to be executed when input changes due to user\n   *    interaction with the input element.\n   *\n   * @example\n      <example name=\"number-input-directive\" module=\"numberExample\">\n        <file name=\"index.html\">\n         <script>\n           angular.module('numberExample', [])\n             .controller('ExampleController', ['$scope', function($scope) {\n               $scope.example = {\n                 value: 12\n               };\n             }]);\n         </script>\n         <form name=\"myForm\" ng-controller=\"ExampleController\">\n           Number: <input type=\"number\" name=\"input\" ng-model=\"example.value\"\n                          min=\"0\" max=\"99\" required>\n           <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n             Required!</span>\n           <span class=\"error\" ng-show=\"myForm.input.$error.number\">\n             Not valid number!</span>\n           <tt>value = {{example.value}}</tt><br/>\n           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n          </form>\n        </file>\n        <file name=\"protractor.js\" type=\"protractor\">\n          var value = element(by.binding('example.value'));\n          var valid = element(by.binding('myForm.input.$valid'));\n          var input = element(by.model('example.value'));\n\n          it('should initialize to model', function() {\n            expect(value.getText()).toContain('12');\n            expect(valid.getText()).toContain('true');\n          });\n\n          it('should be invalid if empty', function() {\n            input.clear();\n            input.sendKeys('');\n            expect(value.getText()).toEqual('value =');\n            expect(valid.getText()).toContain('false');\n          });\n\n          it('should be invalid if over max', function() {\n            input.clear();\n            input.sendKeys('123');\n            expect(value.getText()).toEqual('value =');\n            expect(valid.getText()).toContain('false');\n          });\n        </file>\n      </example>\n   */\n  'number': numberInputType,\n\n\n  /**\n   * @ngdoc input\n   * @name input[url]\n   *\n   * @description\n   * Text input with URL validation. Sets the `url` validation error key if the content is not a\n   * valid URL.\n   *\n   * <div class=\"alert alert-warning\">\n   * **Note:** `input[url]` uses a regex to validate urls that is derived from the regex\n   * used in Chromium. If you need stricter validation, you can use `ng-pattern` or modify\n   * the built-in validators (see the {@link guide/forms Forms guide})\n   * </div>\n   *\n   * @param {string} ngModel Assignable angular expression to data-bind to.\n   * @param {string=} name Property name of the form under which the control is published.\n   * @param {string=} required Sets `required` validation error key if the value is not entered.\n   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n   *    `required` when you want to data-bind to the `required` attribute.\n   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than\n   *    minlength.\n   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than\n   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of\n   *    any length.\n   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string\n   *    that contains the regular expression body that will be converted to a regular expression\n   *    as in the ngPattern directive.\n   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match\n   *    a RegExp found by evaluating the Angular expression given in the attribute value.\n   *    If the expression evaluates to a RegExp object then this is used directly.\n   *    If the expression is a string then it will be converted to a RegExp after wrapping it in `^` and `$`\n   *    characters. For instance, `\"abc\"` will be converted to `new RegExp('^abc$')`.\n   * @param {string=} ngChange Angular expression to be executed when input changes due to user\n   *    interaction with the input element.\n   *\n   * @example\n      <example name=\"url-input-directive\" module=\"urlExample\">\n        <file name=\"index.html\">\n         <script>\n           angular.module('urlExample', [])\n             .controller('ExampleController', ['$scope', function($scope) {\n               $scope.url = {\n                 text: 'http://google.com'\n               };\n             }]);\n         </script>\n         <form name=\"myForm\" ng-controller=\"ExampleController\">\n           URL: <input type=\"url\" name=\"input\" ng-model=\"url.text\" required>\n           <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n             Required!</span>\n           <span class=\"error\" ng-show=\"myForm.input.$error.url\">\n             Not valid url!</span>\n           <tt>text = {{url.text}}</tt><br/>\n           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n           <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>\n          </form>\n        </file>\n        <file name=\"protractor.js\" type=\"protractor\">\n          var text = element(by.binding('url.text'));\n          var valid = element(by.binding('myForm.input.$valid'));\n          var input = element(by.model('url.text'));\n\n          it('should initialize to model', function() {\n            expect(text.getText()).toContain('http://google.com');\n            expect(valid.getText()).toContain('true');\n          });\n\n          it('should be invalid if empty', function() {\n            input.clear();\n            input.sendKeys('');\n\n            expect(text.getText()).toEqual('text =');\n            expect(valid.getText()).toContain('false');\n          });\n\n          it('should be invalid if not url', function() {\n            input.clear();\n            input.sendKeys('box');\n\n            expect(valid.getText()).toContain('false');\n          });\n        </file>\n      </example>\n   */\n  'url': urlInputType,\n\n\n  /**\n   * @ngdoc input\n   * @name input[email]\n   *\n   * @description\n   * Text input with email validation. Sets the `email` validation error key if not a valid email\n   * address.\n   *\n   * <div class=\"alert alert-warning\">\n   * **Note:** `input[email]` uses a regex to validate email addresses that is derived from the regex\n   * used in Chromium. If you need stricter validation (e.g. requiring a top-level domain), you can\n   * use `ng-pattern` or modify the built-in validators (see the {@link guide/forms Forms guide})\n   * </div>\n   *\n   * @param {string} ngModel Assignable angular expression to data-bind to.\n   * @param {string=} name Property name of the form under which the control is published.\n   * @param {string=} required Sets `required` validation error key if the value is not entered.\n   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n   *    `required` when you want to data-bind to the `required` attribute.\n   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than\n   *    minlength.\n   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than\n   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of\n   *    any length.\n   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string\n   *    that contains the regular expression body that will be converted to a regular expression\n   *    as in the ngPattern directive.\n   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match\n   *    a RegExp found by evaluating the Angular expression given in the attribute value.\n   *    If the expression evaluates to a RegExp object then this is used directly.\n   *    If the expression is a string then it will be converted to a RegExp after wrapping it in `^` and `$`\n   *    characters. For instance, `\"abc\"` will be converted to `new RegExp('^abc$')`.\n   * @param {string=} ngChange Angular expression to be executed when input changes due to user\n   *    interaction with the input element.\n   *\n   * @example\n      <example name=\"email-input-directive\" module=\"emailExample\">\n        <file name=\"index.html\">\n         <script>\n           angular.module('emailExample', [])\n             .controller('ExampleController', ['$scope', function($scope) {\n               $scope.email = {\n                 text: 'me@example.com'\n               };\n             }]);\n         </script>\n           <form name=\"myForm\" ng-controller=\"ExampleController\">\n             Email: <input type=\"email\" name=\"input\" ng-model=\"email.text\" required>\n             <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n               Required!</span>\n             <span class=\"error\" ng-show=\"myForm.input.$error.email\">\n               Not valid email!</span>\n             <tt>text = {{email.text}}</tt><br/>\n             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n             <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>\n           </form>\n         </file>\n        <file name=\"protractor.js\" type=\"protractor\">\n          var text = element(by.binding('email.text'));\n          var valid = element(by.binding('myForm.input.$valid'));\n          var input = element(by.model('email.text'));\n\n          it('should initialize to model', function() {\n            expect(text.getText()).toContain('me@example.com');\n            expect(valid.getText()).toContain('true');\n          });\n\n          it('should be invalid if empty', function() {\n            input.clear();\n            input.sendKeys('');\n            expect(text.getText()).toEqual('text =');\n            expect(valid.getText()).toContain('false');\n          });\n\n          it('should be invalid if not email', function() {\n            input.clear();\n            input.sendKeys('xxx');\n\n            expect(valid.getText()).toContain('false');\n          });\n        </file>\n      </example>\n   */\n  'email': emailInputType,\n\n\n  /**\n   * @ngdoc input\n   * @name input[radio]\n   *\n   * @description\n   * HTML radio button.\n   *\n   * @param {string} ngModel Assignable angular expression to data-bind to.\n   * @param {string} value The value to which the expression should be set when selected.\n   * @param {string=} name Property name of the form under which the control is published.\n   * @param {string=} ngChange Angular expression to be executed when input changes due to user\n   *    interaction with the input element.\n   * @param {string} ngValue Angular expression which sets the value to which the expression should\n   *    be set when selected.\n   *\n   * @example\n      <example name=\"radio-input-directive\" module=\"radioExample\">\n        <file name=\"index.html\">\n         <script>\n           angular.module('radioExample', [])\n             .controller('ExampleController', ['$scope', function($scope) {\n               $scope.color = {\n                 name: 'blue'\n               };\n               $scope.specialValue = {\n                 \"id\": \"12345\",\n                 \"value\": \"green\"\n               };\n             }]);\n         </script>\n         <form name=\"myForm\" ng-controller=\"ExampleController\">\n           <input type=\"radio\" ng-model=\"color.name\" value=\"red\">  Red <br/>\n           <input type=\"radio\" ng-model=\"color.name\" ng-value=\"specialValue\"> Green <br/>\n           <input type=\"radio\" ng-model=\"color.name\" value=\"blue\"> Blue <br/>\n           <tt>color = {{color.name | json}}</tt><br/>\n          </form>\n          Note that `ng-value=\"specialValue\"` sets radio item's value to be the value of `$scope.specialValue`.\n        </file>\n        <file name=\"protractor.js\" type=\"protractor\">\n          it('should change state', function() {\n            var color = element(by.binding('color.name'));\n\n            expect(color.getText()).toContain('blue');\n\n            element.all(by.model('color.name')).get(0).click();\n\n            expect(color.getText()).toContain('red');\n          });\n        </file>\n      </example>\n   */\n  'radio': radioInputType,\n\n\n  /**\n   * @ngdoc input\n   * @name input[checkbox]\n   *\n   * @description\n   * HTML checkbox.\n   *\n   * @param {string} ngModel Assignable angular expression to data-bind to.\n   * @param {string=} name Property name of the form under which the control is published.\n   * @param {expression=} ngTrueValue The value to which the expression should be set when selected.\n   * @param {expression=} ngFalseValue The value to which the expression should be set when not selected.\n   * @param {string=} ngChange Angular expression to be executed when input changes due to user\n   *    interaction with the input element.\n   *\n   * @example\n      <example name=\"checkbox-input-directive\" module=\"checkboxExample\">\n        <file name=\"index.html\">\n         <script>\n           angular.module('checkboxExample', [])\n             .controller('ExampleController', ['$scope', function($scope) {\n               $scope.checkboxModel = {\n                value1 : true,\n                value2 : 'YES'\n              };\n             }]);\n         </script>\n         <form name=\"myForm\" ng-controller=\"ExampleController\">\n           Value1: <input type=\"checkbox\" ng-model=\"checkboxModel.value1\"> <br/>\n           Value2: <input type=\"checkbox\" ng-model=\"checkboxModel.value2\"\n                          ng-true-value=\"'YES'\" ng-false-value=\"'NO'\"> <br/>\n           <tt>value1 = {{checkboxModel.value1}}</tt><br/>\n           <tt>value2 = {{checkboxModel.value2}}</tt><br/>\n          </form>\n        </file>\n        <file name=\"protractor.js\" type=\"protractor\">\n          it('should change state', function() {\n            var value1 = element(by.binding('checkboxModel.value1'));\n            var value2 = element(by.binding('checkboxModel.value2'));\n\n            expect(value1.getText()).toContain('true');\n            expect(value2.getText()).toContain('YES');\n\n            element(by.model('checkboxModel.value1')).click();\n            element(by.model('checkboxModel.value2')).click();\n\n            expect(value1.getText()).toContain('false');\n            expect(value2.getText()).toContain('NO');\n          });\n        </file>\n      </example>\n   */\n  'checkbox': checkboxInputType,\n\n  'hidden': noop,\n  'button': noop,\n  'submit': noop,\n  'reset': noop,\n  'file': noop\n};\n\nfunction stringBasedInputType(ctrl) {\n  ctrl.$formatters.push(function(value) {\n    return ctrl.$isEmpty(value) ? value : value.toString();\n  });\n}\n\nfunction textInputType(scope, element, attr, ctrl, $sniffer, $browser) {\n  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);\n  stringBasedInputType(ctrl);\n}\n\nfunction baseInputType(scope, element, attr, ctrl, $sniffer, $browser) {\n  var type = lowercase(element[0].type);\n\n  // In composition mode, users are still inputing intermediate text buffer,\n  // hold the listener until composition is done.\n  // More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent\n  if (!$sniffer.android) {\n    var composing = false;\n\n    element.on('compositionstart', function(data) {\n      composing = true;\n    });\n\n    element.on('compositionend', function() {\n      composing = false;\n      listener();\n    });\n  }\n\n  var listener = function(ev) {\n    if (timeout) {\n      $browser.defer.cancel(timeout);\n      timeout = null;\n    }\n    if (composing) return;\n    var value = element.val(),\n        event = ev && ev.type;\n\n    // By default we will trim the value\n    // If the attribute ng-trim exists we will avoid trimming\n    // If input type is 'password', the value is never trimmed\n    if (type !== 'password' && (!attr.ngTrim || attr.ngTrim !== 'false')) {\n      value = trim(value);\n    }\n\n    // If a control is suffering from bad input (due to native validators), browsers discard its\n    // value, so it may be necessary to revalidate (by calling $setViewValue again) even if the\n    // control's value is the same empty value twice in a row.\n    if (ctrl.$viewValue !== value || (value === '' && ctrl.$$hasNativeValidators)) {\n      ctrl.$setViewValue(value, event);\n    }\n  };\n\n  // if the browser does support \"input\" event, we are fine - except on IE9 which doesn't fire the\n  // input event on backspace, delete or cut\n  if ($sniffer.hasEvent('input')) {\n    element.on('input', listener);\n  } else {\n    var timeout;\n\n    var deferListener = function(ev, input, origValue) {\n      if (!timeout) {\n        timeout = $browser.defer(function() {\n          timeout = null;\n          if (!input || input.value !== origValue) {\n            listener(ev);\n          }\n        });\n      }\n    };\n\n    element.on('keydown', function(event) {\n      var key = event.keyCode;\n\n      // ignore\n      //    command            modifiers                   arrows\n      if (key === 91 || (15 < key && key < 19) || (37 <= key && key <= 40)) return;\n\n      deferListener(event, this, this.value);\n    });\n\n    // if user modifies input value using context menu in IE, we need \"paste\" and \"cut\" events to catch it\n    if ($sniffer.hasEvent('paste')) {\n      element.on('paste cut', deferListener);\n    }\n  }\n\n  // if user paste into input using mouse on older browser\n  // or form autocomplete on newer browser, we need \"change\" event to catch it\n  element.on('change', listener);\n\n  ctrl.$render = function() {\n    element.val(ctrl.$isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue);\n  };\n}\n\nfunction weekParser(isoWeek, existingDate) {\n  if (isDate(isoWeek)) {\n    return isoWeek;\n  }\n\n  if (isString(isoWeek)) {\n    WEEK_REGEXP.lastIndex = 0;\n    var parts = WEEK_REGEXP.exec(isoWeek);\n    if (parts) {\n      var year = +parts[1],\n          week = +parts[2],\n          hours = 0,\n          minutes = 0,\n          seconds = 0,\n          milliseconds = 0,\n          firstThurs = getFirstThursdayOfYear(year),\n          addDays = (week - 1) * 7;\n\n      if (existingDate) {\n        hours = existingDate.getHours();\n        minutes = existingDate.getMinutes();\n        seconds = existingDate.getSeconds();\n        milliseconds = existingDate.getMilliseconds();\n      }\n\n      return new Date(year, 0, firstThurs.getDate() + addDays, hours, minutes, seconds, milliseconds);\n    }\n  }\n\n  return NaN;\n}\n\nfunction createDateParser(regexp, mapping) {\n  return function(iso, date) {\n    var parts, map;\n\n    if (isDate(iso)) {\n      return iso;\n    }\n\n    if (isString(iso)) {\n      // When a date is JSON'ified to wraps itself inside of an extra\n      // set of double quotes. This makes the date parsing code unable\n      // to match the date string and parse it as a date.\n      if (iso.charAt(0) == '\"' && iso.charAt(iso.length - 1) == '\"') {\n        iso = iso.substring(1, iso.length - 1);\n      }\n      if (ISO_DATE_REGEXP.test(iso)) {\n        return new Date(iso);\n      }\n      regexp.lastIndex = 0;\n      parts = regexp.exec(iso);\n\n      if (parts) {\n        parts.shift();\n        if (date) {\n          map = {\n            yyyy: date.getFullYear(),\n            MM: date.getMonth() + 1,\n            dd: date.getDate(),\n            HH: date.getHours(),\n            mm: date.getMinutes(),\n            ss: date.getSeconds(),\n            sss: date.getMilliseconds() / 1000\n          };\n        } else {\n          map = { yyyy: 1970, MM: 1, dd: 1, HH: 0, mm: 0, ss: 0, sss: 0 };\n        }\n\n        forEach(parts, function(part, index) {\n          if (index < mapping.length) {\n            map[mapping[index]] = +part;\n          }\n        });\n        return new Date(map.yyyy, map.MM - 1, map.dd, map.HH, map.mm, map.ss || 0, map.sss * 1000 || 0);\n      }\n    }\n\n    return NaN;\n  };\n}\n\nfunction createDateInputType(type, regexp, parseDate, format) {\n  return function dynamicDateInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter) {\n    badInputChecker(scope, element, attr, ctrl);\n    baseInputType(scope, element, attr, ctrl, $sniffer, $browser);\n    var timezone = ctrl && ctrl.$options && ctrl.$options.timezone;\n    var previousDate;\n\n    ctrl.$$parserName = type;\n    ctrl.$parsers.push(function(value) {\n      if (ctrl.$isEmpty(value)) return null;\n      if (regexp.test(value)) {\n        // Note: We cannot read ctrl.$modelValue, as there might be a different\n        // parser/formatter in the processing chain so that the model\n        // contains some different data format!\n        var parsedDate = parseDate(value, previousDate);\n        if (timezone === 'UTC') {\n          parsedDate.setMinutes(parsedDate.getMinutes() - parsedDate.getTimezoneOffset());\n        }\n        return parsedDate;\n      }\n      return undefined;\n    });\n\n    ctrl.$formatters.push(function(value) {\n      if (value && !isDate(value)) {\n        throw ngModelMinErr('datefmt', 'Expected `{0}` to be a date', value);\n      }\n      if (isValidDate(value)) {\n        previousDate = value;\n        if (previousDate && timezone === 'UTC') {\n          var timezoneOffset = 60000 * previousDate.getTimezoneOffset();\n          previousDate = new Date(previousDate.getTime() + timezoneOffset);\n        }\n        return $filter('date')(value, format, timezone);\n      } else {\n        previousDate = null;\n        return '';\n      }\n    });\n\n    if (isDefined(attr.min) || attr.ngMin) {\n      var minVal;\n      ctrl.$validators.min = function(value) {\n        return !isValidDate(value) || isUndefined(minVal) || parseDate(value) >= minVal;\n      };\n      attr.$observe('min', function(val) {\n        minVal = parseObservedDateValue(val);\n        ctrl.$validate();\n      });\n    }\n\n    if (isDefined(attr.max) || attr.ngMax) {\n      var maxVal;\n      ctrl.$validators.max = function(value) {\n        return !isValidDate(value) || isUndefined(maxVal) || parseDate(value) <= maxVal;\n      };\n      attr.$observe('max', function(val) {\n        maxVal = parseObservedDateValue(val);\n        ctrl.$validate();\n      });\n    }\n\n    function isValidDate(value) {\n      // Invalid Date: getTime() returns NaN\n      return value && !(value.getTime && value.getTime() !== value.getTime());\n    }\n\n    function parseObservedDateValue(val) {\n      return isDefined(val) ? (isDate(val) ? val : parseDate(val)) : undefined;\n    }\n  };\n}\n\nfunction badInputChecker(scope, element, attr, ctrl) {\n  var node = element[0];\n  var nativeValidation = ctrl.$$hasNativeValidators = isObject(node.validity);\n  if (nativeValidation) {\n    ctrl.$parsers.push(function(value) {\n      var validity = element.prop(VALIDITY_STATE_PROPERTY) || {};\n      // Detect bug in FF35 for input[email] (https://bugzilla.mozilla.org/show_bug.cgi?id=1064430):\n      // - also sets validity.badInput (should only be validity.typeMismatch).\n      // - see http://www.whatwg.org/specs/web-apps/current-work/multipage/forms.html#e-mail-state-(type=email)\n      // - can ignore this case as we can still read out the erroneous email...\n      return validity.badInput && !validity.typeMismatch ? undefined : value;\n    });\n  }\n}\n\nfunction numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {\n  badInputChecker(scope, element, attr, ctrl);\n  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);\n\n  ctrl.$$parserName = 'number';\n  ctrl.$parsers.push(function(value) {\n    if (ctrl.$isEmpty(value))      return null;\n    if (NUMBER_REGEXP.test(value)) return parseFloat(value);\n    return undefined;\n  });\n\n  ctrl.$formatters.push(function(value) {\n    if (!ctrl.$isEmpty(value)) {\n      if (!isNumber(value)) {\n        throw ngModelMinErr('numfmt', 'Expected `{0}` to be a number', value);\n      }\n      value = value.toString();\n    }\n    return value;\n  });\n\n  if (isDefined(attr.min) || attr.ngMin) {\n    var minVal;\n    ctrl.$validators.min = function(value) {\n      return ctrl.$isEmpty(value) || isUndefined(minVal) || value >= minVal;\n    };\n\n    attr.$observe('min', function(val) {\n      if (isDefined(val) && !isNumber(val)) {\n        val = parseFloat(val, 10);\n      }\n      minVal = isNumber(val) && !isNaN(val) ? val : undefined;\n      // TODO(matsko): implement validateLater to reduce number of validations\n      ctrl.$validate();\n    });\n  }\n\n  if (isDefined(attr.max) || attr.ngMax) {\n    var maxVal;\n    ctrl.$validators.max = function(value) {\n      return ctrl.$isEmpty(value) || isUndefined(maxVal) || value <= maxVal;\n    };\n\n    attr.$observe('max', function(val) {\n      if (isDefined(val) && !isNumber(val)) {\n        val = parseFloat(val, 10);\n      }\n      maxVal = isNumber(val) && !isNaN(val) ? val : undefined;\n      // TODO(matsko): implement validateLater to reduce number of validations\n      ctrl.$validate();\n    });\n  }\n}\n\nfunction urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {\n  // Note: no badInputChecker here by purpose as `url` is only a validation\n  // in browsers, i.e. we can always read out input.value even if it is not valid!\n  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);\n  stringBasedInputType(ctrl);\n\n  ctrl.$$parserName = 'url';\n  ctrl.$validators.url = function(modelValue, viewValue) {\n    var value = modelValue || viewValue;\n    return ctrl.$isEmpty(value) || URL_REGEXP.test(value);\n  };\n}\n\nfunction emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {\n  // Note: no badInputChecker here by purpose as `url` is only a validation\n  // in browsers, i.e. we can always read out input.value even if it is not valid!\n  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);\n  stringBasedInputType(ctrl);\n\n  ctrl.$$parserName = 'email';\n  ctrl.$validators.email = function(modelValue, viewValue) {\n    var value = modelValue || viewValue;\n    return ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value);\n  };\n}\n\nfunction radioInputType(scope, element, attr, ctrl) {\n  // make the name unique, if not defined\n  if (isUndefined(attr.name)) {\n    element.attr('name', nextUid());\n  }\n\n  var listener = function(ev) {\n    if (element[0].checked) {\n      ctrl.$setViewValue(attr.value, ev && ev.type);\n    }\n  };\n\n  element.on('click', listener);\n\n  ctrl.$render = function() {\n    var value = attr.value;\n    element[0].checked = (value == ctrl.$viewValue);\n  };\n\n  attr.$observe('value', ctrl.$render);\n}\n\nfunction parseConstantExpr($parse, context, name, expression, fallback) {\n  var parseFn;\n  if (isDefined(expression)) {\n    parseFn = $parse(expression);\n    if (!parseFn.constant) {\n      throw ngModelMinErr('constexpr', 'Expected constant expression for `{0}`, but saw ' +\n                                   '`{1}`.', name, expression);\n    }\n    return parseFn(context);\n  }\n  return fallback;\n}\n\nfunction checkboxInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter, $parse) {\n  var trueValue = parseConstantExpr($parse, scope, 'ngTrueValue', attr.ngTrueValue, true);\n  var falseValue = parseConstantExpr($parse, scope, 'ngFalseValue', attr.ngFalseValue, false);\n\n  var listener = function(ev) {\n    ctrl.$setViewValue(element[0].checked, ev && ev.type);\n  };\n\n  element.on('click', listener);\n\n  ctrl.$render = function() {\n    element[0].checked = ctrl.$viewValue;\n  };\n\n  // Override the standard `$isEmpty` because the $viewValue of an empty checkbox is always set to `false`\n  // This is because of the parser below, which compares the `$modelValue` with `trueValue` to convert\n  // it to a boolean.\n  ctrl.$isEmpty = function(value) {\n    return value === false;\n  };\n\n  ctrl.$formatters.push(function(value) {\n    return equals(value, trueValue);\n  });\n\n  ctrl.$parsers.push(function(value) {\n    return value ? trueValue : falseValue;\n  });\n}\n\n\n/**\n * @ngdoc directive\n * @name textarea\n * @restrict E\n *\n * @description\n * HTML textarea element control with angular data-binding. The data-binding and validation\n * properties of this element are exactly the same as those of the\n * {@link ng.directive:input input element}.\n *\n * @param {string} ngModel Assignable angular expression to data-bind to.\n * @param {string=} name Property name of the form under which the control is published.\n * @param {string=} required Sets `required` validation error key if the value is not entered.\n * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n *    `required` when you want to data-bind to the `required` attribute.\n * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than\n *    minlength.\n * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than\n *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any\n *    length.\n * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the\n *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for\n *    patterns defined as scope expressions.\n * @param {string=} ngChange Angular expression to be executed when input changes due to user\n *    interaction with the input element.\n * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.\n */\n\n\n/**\n * @ngdoc directive\n * @name input\n * @restrict E\n *\n * @description\n * HTML input element control. When used together with {@link ngModel `ngModel`}, it provides data-binding,\n * input state control, and validation.\n * Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.\n *\n * <div class=\"alert alert-warning\">\n * **Note:** Not every feature offered is available for all input types.\n * Specifically, data binding and event handling via `ng-model` is unsupported for `input[file]`.\n * </div>\n *\n * @param {string} ngModel Assignable angular expression to data-bind to.\n * @param {string=} name Property name of the form under which the control is published.\n * @param {string=} required Sets `required` validation error key if the value is not entered.\n * @param {boolean=} ngRequired Sets `required` attribute if set to true\n * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than\n *    minlength.\n * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than\n *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any\n *    length.\n * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the\n *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for\n *    patterns defined as scope expressions.\n * @param {string=} ngChange Angular expression to be executed when input changes due to user\n *    interaction with the input element.\n * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.\n *    This parameter is ignored for input[type=password] controls, which will never trim the\n *    input.\n *\n * @example\n    <example name=\"input-directive\" module=\"inputExample\">\n      <file name=\"index.html\">\n       <script>\n          angular.module('inputExample', [])\n            .controller('ExampleController', ['$scope', function($scope) {\n              $scope.user = {name: 'guest', last: 'visitor'};\n            }]);\n       </script>\n       <div ng-controller=\"ExampleController\">\n         <form name=\"myForm\">\n           User name: <input type=\"text\" name=\"userName\" ng-model=\"user.name\" required>\n           <span class=\"error\" ng-show=\"myForm.userName.$error.required\">\n             Required!</span><br>\n           Last name: <input type=\"text\" name=\"lastName\" ng-model=\"user.last\"\n             ng-minlength=\"3\" ng-maxlength=\"10\">\n           <span class=\"error\" ng-show=\"myForm.lastName.$error.minlength\">\n             Too short!</span>\n           <span class=\"error\" ng-show=\"myForm.lastName.$error.maxlength\">\n             Too long!</span><br>\n         </form>\n         <hr>\n         <tt>user = {{user}}</tt><br/>\n         <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br>\n         <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br>\n         <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br>\n         <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br>\n         <tt>myForm.$valid = {{myForm.$valid}}</tt><br>\n         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br>\n         <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br>\n         <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br>\n       </div>\n      </file>\n      <file name=\"protractor.js\" type=\"protractor\">\n        var user = element(by.exactBinding('user'));\n        var userNameValid = element(by.binding('myForm.userName.$valid'));\n        var lastNameValid = element(by.binding('myForm.lastName.$valid'));\n        var lastNameError = element(by.binding('myForm.lastName.$error'));\n        var formValid = element(by.binding('myForm.$valid'));\n        var userNameInput = element(by.model('user.name'));\n        var userLastInput = element(by.model('user.last'));\n\n        it('should initialize to model', function() {\n          expect(user.getText()).toContain('{\"name\":\"guest\",\"last\":\"visitor\"}');\n          expect(userNameValid.getText()).toContain('true');\n          expect(formValid.getText()).toContain('true');\n        });\n\n        it('should be invalid if empty when required', function() {\n          userNameInput.clear();\n          userNameInput.sendKeys('');\n\n          expect(user.getText()).toContain('{\"last\":\"visitor\"}');\n          expect(userNameValid.getText()).toContain('false');\n          expect(formValid.getText()).toContain('false');\n        });\n\n        it('should be valid if empty when min length is set', function() {\n          userLastInput.clear();\n          userLastInput.sendKeys('');\n\n          expect(user.getText()).toContain('{\"name\":\"guest\",\"last\":\"\"}');\n          expect(lastNameValid.getText()).toContain('true');\n          expect(formValid.getText()).toContain('true');\n        });\n\n        it('should be invalid if less than required min length', function() {\n          userLastInput.clear();\n          userLastInput.sendKeys('xx');\n\n          expect(user.getText()).toContain('{\"name\":\"guest\"}');\n          expect(lastNameValid.getText()).toContain('false');\n          expect(lastNameError.getText()).toContain('minlength');\n          expect(formValid.getText()).toContain('false');\n        });\n\n        it('should be invalid if longer than max length', function() {\n          userLastInput.clear();\n          userLastInput.sendKeys('some ridiculously long name');\n\n          expect(user.getText()).toContain('{\"name\":\"guest\"}');\n          expect(lastNameValid.getText()).toContain('false');\n          expect(lastNameError.getText()).toContain('maxlength');\n          expect(formValid.getText()).toContain('false');\n        });\n      </file>\n    </example>\n */\nvar inputDirective = ['$browser', '$sniffer', '$filter', '$parse',\n    function($browser, $sniffer, $filter, $parse) {\n  return {\n    restrict: 'E',\n    require: ['?ngModel'],\n    link: {\n      pre: function(scope, element, attr, ctrls) {\n        if (ctrls[0]) {\n          (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrls[0], $sniffer,\n                                                              $browser, $filter, $parse);\n        }\n      }\n    }\n  };\n}];\n\n\n\nvar CONSTANT_VALUE_REGEXP = /^(true|false|\\d+)$/;\n/**\n * @ngdoc directive\n * @name ngValue\n *\n * @description\n * Binds the given expression to the value of `<option>` or {@link input[radio] `input[radio]`},\n * so that when the element is selected, the {@link ngModel `ngModel`} of that element is set to\n * the bound value.\n *\n * `ngValue` is useful when dynamically generating lists of radio buttons using\n * {@link ngRepeat `ngRepeat`}, as shown below.\n *\n * Likewise, `ngValue` can be used to generate `<option>` elements for\n * the {@link select `select`} element. In that case however, only strings are supported\n * for the `value `attribute, so the resulting `ngModel` will always be a string.\n * Support for `select` models with non-string values is available via `ngOptions`.\n *\n * @element input\n * @param {string=} ngValue angular expression, whose value will be bound to the `value` attribute\n *   of the `input` element\n *\n * @example\n    <example name=\"ngValue-directive\" module=\"valueExample\">\n      <file name=\"index.html\">\n       <script>\n          angular.module('valueExample', [])\n            .controller('ExampleController', ['$scope', function($scope) {\n              $scope.names = ['pizza', 'unicorns', 'robots'];\n              $scope.my = { favorite: 'unicorns' };\n            }]);\n       </script>\n        <form ng-controller=\"ExampleController\">\n          <h2>Which is your favorite?</h2>\n            <label ng-repeat=\"name in names\" for=\"{{name}}\">\n              {{name}}\n              <input type=\"radio\"\n                     ng-model=\"my.favorite\"\n                     ng-value=\"name\"\n                     id=\"{{name}}\"\n                     name=\"favorite\">\n            </label>\n          <div>You chose {{my.favorite}}</div>\n        </form>\n      </file>\n      <file name=\"protractor.js\" type=\"protractor\">\n        var favorite = element(by.binding('my.favorite'));\n\n        it('should initialize to model', function() {\n          expect(favorite.getText()).toContain('unicorns');\n        });\n        it('should bind the values to the inputs', function() {\n          element.all(by.model('my.favorite')).get(0).click();\n          expect(favorite.getText()).toContain('pizza');\n        });\n      </file>\n    </example>\n */\nvar ngValueDirective = function() {\n  return {\n    restrict: 'A',\n    priority: 100,\n    compile: function(tpl, tplAttr) {\n      if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {\n        return function ngValueConstantLink(scope, elm, attr) {\n          attr.$set('value', scope.$eval(attr.ngValue));\n        };\n      } else {\n        return function ngValueLink(scope, elm, attr) {\n          scope.$watch(attr.ngValue, function valueWatchAction(value) {\n            attr.$set('value', value);\n          });\n        };\n      }\n    }\n  };\n};\n\n/**\n * @ngdoc directive\n * @name ngBind\n * @restrict AC\n *\n * @description\n * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element\n * with the value of a given expression, and to update the text content when the value of that\n * expression changes.\n *\n * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like\n * `{{ expression }}` which is similar but less verbose.\n *\n * It is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily\n * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an\n * element attribute, it makes the bindings invisible to the user while the page is loading.\n *\n * An alternative solution to this problem would be using the\n * {@link ng.directive:ngCloak ngCloak} directive.\n *\n *\n * @element ANY\n * @param {expression} ngBind {@link guide/expression Expression} to evaluate.\n *\n * @example\n * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.\n   <example module=\"bindExample\">\n     <file name=\"index.html\">\n       <script>\n         angular.module('bindExample', [])\n           .controller('ExampleController', ['$scope', function($scope) {\n             $scope.name = 'Whirled';\n           }]);\n       </script>\n       <div ng-controller=\"ExampleController\">\n         Enter name: <input type=\"text\" ng-model=\"name\"><br>\n         Hello <span ng-bind=\"name\"></span>!\n       </div>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should check ng-bind', function() {\n         var nameInput = element(by.model('name'));\n\n         expect(element(by.binding('name')).getText()).toBe('Whirled');\n         nameInput.clear();\n         nameInput.sendKeys('world');\n         expect(element(by.binding('name')).getText()).toBe('world');\n       });\n     </file>\n   </example>\n */\nvar ngBindDirective = ['$compile', function($compile) {\n  return {\n    restrict: 'AC',\n    compile: function ngBindCompile(templateElement) {\n      $compile.$$addBindingClass(templateElement);\n      return function ngBindLink(scope, element, attr) {\n        $compile.$$addBindingInfo(element, attr.ngBind);\n        element = element[0];\n        scope.$watch(attr.ngBind, function ngBindWatchAction(value) {\n          element.textContent = value === undefined ? '' : value;\n        });\n      };\n    }\n  };\n}];\n\n\n/**\n * @ngdoc directive\n * @name ngBindTemplate\n *\n * @description\n * The `ngBindTemplate` directive specifies that the element\n * text content should be replaced with the interpolation of the template\n * in the `ngBindTemplate` attribute.\n * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`\n * expressions. This directive is needed since some HTML elements\n * (such as TITLE and OPTION) cannot contain SPAN elements.\n *\n * @element ANY\n * @param {string} ngBindTemplate template of form\n *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.\n *\n * @example\n * Try it here: enter text in text box and watch the greeting change.\n   <example module=\"bindExample\">\n     <file name=\"index.html\">\n       <script>\n         angular.module('bindExample', [])\n           .controller('ExampleController', ['$scope', function($scope) {\n             $scope.salutation = 'Hello';\n             $scope.name = 'World';\n           }]);\n       </script>\n       <div ng-controller=\"ExampleController\">\n        Salutation: <input type=\"text\" ng-model=\"salutation\"><br>\n        Name: <input type=\"text\" ng-model=\"name\"><br>\n        <pre ng-bind-template=\"{{salutation}} {{name}}!\"></pre>\n       </div>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should check ng-bind', function() {\n         var salutationElem = element(by.binding('salutation'));\n         var salutationInput = element(by.model('salutation'));\n         var nameInput = element(by.model('name'));\n\n         expect(salutationElem.getText()).toBe('Hello World!');\n\n         salutationInput.clear();\n         salutationInput.sendKeys('Greetings');\n         nameInput.clear();\n         nameInput.sendKeys('user');\n\n         expect(salutationElem.getText()).toBe('Greetings user!');\n       });\n     </file>\n   </example>\n */\nvar ngBindTemplateDirective = ['$interpolate', '$compile', function($interpolate, $compile) {\n  return {\n    compile: function ngBindTemplateCompile(templateElement) {\n      $compile.$$addBindingClass(templateElement);\n      return function ngBindTemplateLink(scope, element, attr) {\n        var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));\n        $compile.$$addBindingInfo(element, interpolateFn.expressions);\n        element = element[0];\n        attr.$observe('ngBindTemplate', function(value) {\n          element.textContent = value === undefined ? '' : value;\n        });\n      };\n    }\n  };\n}];\n\n\n/**\n * @ngdoc directive\n * @name ngBindHtml\n *\n * @description\n * Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default,\n * the resulting HTML content will be sanitized using the {@link ngSanitize.$sanitize $sanitize} service.\n * To utilize this functionality, ensure that `$sanitize` is available, for example, by including {@link\n * ngSanitize} in your module's dependencies (not in core Angular). In order to use {@link ngSanitize}\n * in your module's dependencies, you need to include \"angular-sanitize.js\" in your application.\n *\n * You may also bypass sanitization for values you know are safe. To do so, bind to\n * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example\n * under {@link ng.$sce#show-me-an-example-using-sce- Strict Contextual Escaping (SCE)}.\n *\n * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you\n * will have an exception (instead of an exploit.)\n *\n * @element ANY\n * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.\n *\n * @example\n\n   <example module=\"bindHtmlExample\" deps=\"angular-sanitize.js\">\n     <file name=\"index.html\">\n       <div ng-controller=\"ExampleController\">\n        <p ng-bind-html=\"myHTML\"></p>\n       </div>\n     </file>\n\n     <file name=\"script.js\">\n       angular.module('bindHtmlExample', ['ngSanitize'])\n         .controller('ExampleController', ['$scope', function($scope) {\n           $scope.myHTML =\n              'I am an <code>HTML</code>string with ' +\n              '<a href=\"#\">links!</a> and other <em>stuff</em>';\n         }]);\n     </file>\n\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should check ng-bind-html', function() {\n         expect(element(by.binding('myHTML')).getText()).toBe(\n             'I am an HTMLstring with links! and other stuff');\n       });\n     </file>\n   </example>\n */\nvar ngBindHtmlDirective = ['$sce', '$parse', '$compile', function($sce, $parse, $compile) {\n  return {\n    restrict: 'A',\n    compile: function ngBindHtmlCompile(tElement, tAttrs) {\n      var ngBindHtmlGetter = $parse(tAttrs.ngBindHtml);\n      var ngBindHtmlWatch = $parse(tAttrs.ngBindHtml, function getStringValue(value) {\n        return (value || '').toString();\n      });\n      $compile.$$addBindingClass(tElement);\n\n      return function ngBindHtmlLink(scope, element, attr) {\n        $compile.$$addBindingInfo(element, attr.ngBindHtml);\n\n        scope.$watch(ngBindHtmlWatch, function ngBindHtmlWatchAction() {\n          // we re-evaluate the expr because we want a TrustedValueHolderType\n          // for $sce, not a string\n          element.html($sce.getTrustedHtml(ngBindHtmlGetter(scope)) || '');\n        });\n      };\n    }\n  };\n}];\n\n/**\n * @ngdoc directive\n * @name ngChange\n *\n * @description\n * Evaluate the given expression when the user changes the input.\n * The expression is evaluated immediately, unlike the JavaScript onchange event\n * which only triggers at the end of a change (usually, when the user leaves the\n * form element or presses the return key).\n *\n * The `ngChange` expression is only evaluated when a change in the input value causes\n * a new value to be committed to the model.\n *\n * It will not be evaluated:\n * * if the value returned from the `$parsers` transformation pipeline has not changed\n * * if the input has continued to be invalid since the model will stay `null`\n * * if the model is changed programmatically and not by a change to the input value\n *\n *\n * Note, this directive requires `ngModel` to be present.\n *\n * @element input\n * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change\n * in input value.\n *\n * @example\n * <example name=\"ngChange-directive\" module=\"changeExample\">\n *   <file name=\"index.html\">\n *     <script>\n *       angular.module('changeExample', [])\n *         .controller('ExampleController', ['$scope', function($scope) {\n *           $scope.counter = 0;\n *           $scope.change = function() {\n *             $scope.counter++;\n *           };\n *         }]);\n *     </script>\n *     <div ng-controller=\"ExampleController\">\n *       <input type=\"checkbox\" ng-model=\"confirmed\" ng-change=\"change()\" id=\"ng-change-example1\" />\n *       <input type=\"checkbox\" ng-model=\"confirmed\" id=\"ng-change-example2\" />\n *       <label for=\"ng-change-example2\">Confirmed</label><br />\n *       <tt>debug = {{confirmed}}</tt><br/>\n *       <tt>counter = {{counter}}</tt><br/>\n *     </div>\n *   </file>\n *   <file name=\"protractor.js\" type=\"protractor\">\n *     var counter = element(by.binding('counter'));\n *     var debug = element(by.binding('confirmed'));\n *\n *     it('should evaluate the expression if changing from view', function() {\n *       expect(counter.getText()).toContain('0');\n *\n *       element(by.id('ng-change-example1')).click();\n *\n *       expect(counter.getText()).toContain('1');\n *       expect(debug.getText()).toContain('true');\n *     });\n *\n *     it('should not evaluate the expression if changing from model', function() {\n *       element(by.id('ng-change-example2')).click();\n\n *       expect(counter.getText()).toContain('0');\n *       expect(debug.getText()).toContain('true');\n *     });\n *   </file>\n * </example>\n */\nvar ngChangeDirective = valueFn({\n  restrict: 'A',\n  require: 'ngModel',\n  link: function(scope, element, attr, ctrl) {\n    ctrl.$viewChangeListeners.push(function() {\n      scope.$eval(attr.ngChange);\n    });\n  }\n});\n\nfunction classDirective(name, selector) {\n  name = 'ngClass' + name;\n  return ['$animate', function($animate) {\n    return {\n      restrict: 'AC',\n      link: function(scope, element, attr) {\n        var oldVal;\n\n        scope.$watch(attr[name], ngClassWatchAction, true);\n\n        attr.$observe('class', function(value) {\n          ngClassWatchAction(scope.$eval(attr[name]));\n        });\n\n\n        if (name !== 'ngClass') {\n          scope.$watch('$index', function($index, old$index) {\n            // jshint bitwise: false\n            var mod = $index & 1;\n            if (mod !== (old$index & 1)) {\n              var classes = arrayClasses(scope.$eval(attr[name]));\n              mod === selector ?\n                addClasses(classes) :\n                removeClasses(classes);\n            }\n          });\n        }\n\n        function addClasses(classes) {\n          var newClasses = digestClassCounts(classes, 1);\n          attr.$addClass(newClasses);\n        }\n\n        function removeClasses(classes) {\n          var newClasses = digestClassCounts(classes, -1);\n          attr.$removeClass(newClasses);\n        }\n\n        function digestClassCounts(classes, count) {\n          var classCounts = element.data('$classCounts') || {};\n          var classesToUpdate = [];\n          forEach(classes, function(className) {\n            if (count > 0 || classCounts[className]) {\n              classCounts[className] = (classCounts[className] || 0) + count;\n              if (classCounts[className] === +(count > 0)) {\n                classesToUpdate.push(className);\n              }\n            }\n          });\n          element.data('$classCounts', classCounts);\n          return classesToUpdate.join(' ');\n        }\n\n        function updateClasses(oldClasses, newClasses) {\n          var toAdd = arrayDifference(newClasses, oldClasses);\n          var toRemove = arrayDifference(oldClasses, newClasses);\n          toAdd = digestClassCounts(toAdd, 1);\n          toRemove = digestClassCounts(toRemove, -1);\n          if (toAdd && toAdd.length) {\n            $animate.addClass(element, toAdd);\n          }\n          if (toRemove && toRemove.length) {\n            $animate.removeClass(element, toRemove);\n          }\n        }\n\n        function ngClassWatchAction(newVal) {\n          if (selector === true || scope.$index % 2 === selector) {\n            var newClasses = arrayClasses(newVal || []);\n            if (!oldVal) {\n              addClasses(newClasses);\n            } else if (!equals(newVal,oldVal)) {\n              var oldClasses = arrayClasses(oldVal);\n              updateClasses(oldClasses, newClasses);\n            }\n          }\n          oldVal = shallowCopy(newVal);\n        }\n      }\n    };\n\n    function arrayDifference(tokens1, tokens2) {\n      var values = [];\n\n      outer:\n      for (var i = 0; i < tokens1.length; i++) {\n        var token = tokens1[i];\n        for (var j = 0; j < tokens2.length; j++) {\n          if (token == tokens2[j]) continue outer;\n        }\n        values.push(token);\n      }\n      return values;\n    }\n\n    function arrayClasses(classVal) {\n      if (isArray(classVal)) {\n        return classVal;\n      } else if (isString(classVal)) {\n        return classVal.split(' ');\n      } else if (isObject(classVal)) {\n        var classes = [];\n        forEach(classVal, function(v, k) {\n          if (v) {\n            classes = classes.concat(k.split(' '));\n          }\n        });\n        return classes;\n      }\n      return classVal;\n    }\n  }];\n}\n\n/**\n * @ngdoc directive\n * @name ngClass\n * @restrict AC\n *\n * @description\n * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding\n * an expression that represents all classes to be added.\n *\n * The directive operates in three different ways, depending on which of three types the expression\n * evaluates to:\n *\n * 1. If the expression evaluates to a string, the string should be one or more space-delimited class\n * names.\n *\n * 2. If the expression evaluates to an array, each element of the array should be a string that is\n * one or more space-delimited class names.\n *\n * 3. If the expression evaluates to an object, then for each key-value pair of the\n * object with a truthy value the corresponding key is used as a class name.\n *\n * The directive won't add duplicate classes if a particular class was already set.\n *\n * When the expression changes, the previously added classes are removed and only then the\n * new classes are added.\n *\n * @animations\n * **add** - happens just before the class is applied to the elements\n *\n * **remove** - happens just before the class is removed from the element\n *\n * @element ANY\n * @param {expression} ngClass {@link guide/expression Expression} to eval. The result\n *   of the evaluation can be a string representing space delimited class\n *   names, an array, or a map of class names to boolean values. In the case of a map, the\n *   names of the properties whose values are truthy will be added as css classes to the\n *   element.\n *\n * @example Example that demonstrates basic bindings via ngClass directive.\n   <example>\n     <file name=\"index.html\">\n       <p ng-class=\"{strike: deleted, bold: important, red: error}\">Map Syntax Example</p>\n       <input type=\"checkbox\" ng-model=\"deleted\"> deleted (apply \"strike\" class)<br>\n       <input type=\"checkbox\" ng-model=\"important\"> important (apply \"bold\" class)<br>\n       <input type=\"checkbox\" ng-model=\"error\"> error (apply \"red\" class)\n       <hr>\n       <p ng-class=\"style\">Using String Syntax</p>\n       <input type=\"text\" ng-model=\"style\" placeholder=\"Type: bold strike red\">\n       <hr>\n       <p ng-class=\"[style1, style2, style3]\">Using Array Syntax</p>\n       <input ng-model=\"style1\" placeholder=\"Type: bold, strike or red\"><br>\n       <input ng-model=\"style2\" placeholder=\"Type: bold, strike or red\"><br>\n       <input ng-model=\"style3\" placeholder=\"Type: bold, strike or red\"><br>\n     </file>\n     <file name=\"style.css\">\n       .strike {\n         text-decoration: line-through;\n       }\n       .bold {\n           font-weight: bold;\n       }\n       .red {\n           color: red;\n       }\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       var ps = element.all(by.css('p'));\n\n       it('should let you toggle the class', function() {\n\n         expect(ps.first().getAttribute('class')).not.toMatch(/bold/);\n         expect(ps.first().getAttribute('class')).not.toMatch(/red/);\n\n         element(by.model('important')).click();\n         expect(ps.first().getAttribute('class')).toMatch(/bold/);\n\n         element(by.model('error')).click();\n         expect(ps.first().getAttribute('class')).toMatch(/red/);\n       });\n\n       it('should let you toggle string example', function() {\n         expect(ps.get(1).getAttribute('class')).toBe('');\n         element(by.model('style')).clear();\n         element(by.model('style')).sendKeys('red');\n         expect(ps.get(1).getAttribute('class')).toBe('red');\n       });\n\n       it('array example should have 3 classes', function() {\n         expect(ps.last().getAttribute('class')).toBe('');\n         element(by.model('style1')).sendKeys('bold');\n         element(by.model('style2')).sendKeys('strike');\n         element(by.model('style3')).sendKeys('red');\n         expect(ps.last().getAttribute('class')).toBe('bold strike red');\n       });\n     </file>\n   </example>\n\n   ## Animations\n\n   The example below demonstrates how to perform animations using ngClass.\n\n   <example module=\"ngAnimate\" deps=\"angular-animate.js\" animations=\"true\">\n     <file name=\"index.html\">\n      <input id=\"setbtn\" type=\"button\" value=\"set\" ng-click=\"myVar='my-class'\">\n      <input id=\"clearbtn\" type=\"button\" value=\"clear\" ng-click=\"myVar=''\">\n      <br>\n      <span class=\"base-class\" ng-class=\"myVar\">Sample Text</span>\n     </file>\n     <file name=\"style.css\">\n       .base-class {\n         -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n       }\n\n       .base-class.my-class {\n         color: red;\n         font-size:3em;\n       }\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should check ng-class', function() {\n         expect(element(by.css('.base-class')).getAttribute('class')).not.\n           toMatch(/my-class/);\n\n         element(by.id('setbtn')).click();\n\n         expect(element(by.css('.base-class')).getAttribute('class')).\n           toMatch(/my-class/);\n\n         element(by.id('clearbtn')).click();\n\n         expect(element(by.css('.base-class')).getAttribute('class')).not.\n           toMatch(/my-class/);\n       });\n     </file>\n   </example>\n\n\n   ## ngClass and pre-existing CSS3 Transitions/Animations\n   The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.\n   Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder\n   any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure\n   to view the step by step details of {@link ng.$animate#addClass $animate.addClass} and\n   {@link ng.$animate#removeClass $animate.removeClass}.\n */\nvar ngClassDirective = classDirective('', true);\n\n/**\n * @ngdoc directive\n * @name ngClassOdd\n * @restrict AC\n *\n * @description\n * The `ngClassOdd` and `ngClassEven` directives work exactly as\n * {@link ng.directive:ngClass ngClass}, except they work in\n * conjunction with `ngRepeat` and take effect only on odd (even) rows.\n *\n * This directive can be applied only within the scope of an\n * {@link ng.directive:ngRepeat ngRepeat}.\n *\n * @element ANY\n * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result\n *   of the evaluation can be a string representing space delimited class names or an array.\n *\n * @example\n   <example>\n     <file name=\"index.html\">\n        <ol ng-init=\"names=['John', 'Mary', 'Cate', 'Suz']\">\n          <li ng-repeat=\"name in names\">\n           <span ng-class-odd=\"'odd'\" ng-class-even=\"'even'\">\n             {{name}}\n           </span>\n          </li>\n        </ol>\n     </file>\n     <file name=\"style.css\">\n       .odd {\n         color: red;\n       }\n       .even {\n         color: blue;\n       }\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should check ng-class-odd and ng-class-even', function() {\n         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).\n           toMatch(/odd/);\n         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).\n           toMatch(/even/);\n       });\n     </file>\n   </example>\n */\nvar ngClassOddDirective = classDirective('Odd', 0);\n\n/**\n * @ngdoc directive\n * @name ngClassEven\n * @restrict AC\n *\n * @description\n * The `ngClassOdd` and `ngClassEven` directives work exactly as\n * {@link ng.directive:ngClass ngClass}, except they work in\n * conjunction with `ngRepeat` and take effect only on odd (even) rows.\n *\n * This directive can be applied only within the scope of an\n * {@link ng.directive:ngRepeat ngRepeat}.\n *\n * @element ANY\n * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The\n *   result of the evaluation can be a string representing space delimited class names or an array.\n *\n * @example\n   <example>\n     <file name=\"index.html\">\n        <ol ng-init=\"names=['John', 'Mary', 'Cate', 'Suz']\">\n          <li ng-repeat=\"name in names\">\n           <span ng-class-odd=\"'odd'\" ng-class-even=\"'even'\">\n             {{name}} &nbsp; &nbsp; &nbsp;\n           </span>\n          </li>\n        </ol>\n     </file>\n     <file name=\"style.css\">\n       .odd {\n         color: red;\n       }\n       .even {\n         color: blue;\n       }\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should check ng-class-odd and ng-class-even', function() {\n         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).\n           toMatch(/odd/);\n         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).\n           toMatch(/even/);\n       });\n     </file>\n   </example>\n */\nvar ngClassEvenDirective = classDirective('Even', 1);\n\n/**\n * @ngdoc directive\n * @name ngCloak\n * @restrict AC\n *\n * @description\n * The `ngCloak` directive is used to prevent the Angular html template from being briefly\n * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this\n * directive to avoid the undesirable flicker effect caused by the html template display.\n *\n * The directive can be applied to the `<body>` element, but the preferred usage is to apply\n * multiple `ngCloak` directives to small portions of the page to permit progressive rendering\n * of the browser view.\n *\n * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and\n * `angular.min.js`.\n * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).\n *\n * ```css\n * [ng\\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {\n *   display: none !important;\n * }\n * ```\n *\n * When this css rule is loaded by the browser, all html elements (including their children) that\n * are tagged with the `ngCloak` directive are hidden. When Angular encounters this directive\n * during the compilation of the template it deletes the `ngCloak` element attribute, making\n * the compiled element visible.\n *\n * For the best result, the `angular.js` script must be loaded in the head section of the html\n * document; alternatively, the css rule above must be included in the external stylesheet of the\n * application.\n *\n * @element ANY\n *\n * @example\n   <example>\n     <file name=\"index.html\">\n        <div id=\"template1\" ng-cloak>{{ 'hello' }}</div>\n        <div id=\"template2\" class=\"ng-cloak\">{{ 'world' }}</div>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should remove the template directive and css class', function() {\n         expect($('#template1').getAttribute('ng-cloak')).\n           toBeNull();\n         expect($('#template2').getAttribute('ng-cloak')).\n           toBeNull();\n       });\n     </file>\n   </example>\n *\n */\nvar ngCloakDirective = ngDirective({\n  compile: function(element, attr) {\n    attr.$set('ngCloak', undefined);\n    element.removeClass('ng-cloak');\n  }\n});\n\n/**\n * @ngdoc directive\n * @name ngController\n *\n * @description\n * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular\n * supports the principles behind the Model-View-Controller design pattern.\n *\n * MVC components in angular:\n *\n * * Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties\n *   are accessed through bindings.\n * * View — The template (HTML with data bindings) that is rendered into the View.\n * * Controller — The `ngController` directive specifies a Controller class; the class contains business\n *   logic behind the application to decorate the scope with functions and values\n *\n * Note that you can also attach controllers to the DOM by declaring it in a route definition\n * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller\n * again using `ng-controller` in the template itself.  This will cause the controller to be attached\n * and executed twice.\n *\n * @element ANY\n * @scope\n * @priority 500\n * @param {expression} ngController Name of a constructor function registered with the current\n * {@link ng.$controllerProvider $controllerProvider} or an {@link guide/expression expression}\n * that on the current scope evaluates to a constructor function.\n *\n * The controller instance can be published into a scope property by specifying\n * `ng-controller=\"as propertyName\"`.\n *\n * If the current `$controllerProvider` is configured to use globals (via\n * {@link ng.$controllerProvider#allowGlobals `$controllerProvider.allowGlobals()` }), this may\n * also be the name of a globally accessible constructor function (not recommended).\n *\n * @example\n * Here is a simple form for editing user contact information. Adding, removing, clearing, and\n * greeting are methods declared on the controller (see source tab). These methods can\n * easily be called from the angular markup. Any changes to the data are automatically reflected\n * in the View without the need for a manual update.\n *\n * Two different declaration styles are included below:\n *\n * * one binds methods and properties directly onto the controller using `this`:\n * `ng-controller=\"SettingsController1 as settings\"`\n * * one injects `$scope` into the controller:\n * `ng-controller=\"SettingsController2\"`\n *\n * The second option is more common in the Angular community, and is generally used in boilerplates\n * and in this guide. However, there are advantages to binding properties directly to the controller\n * and avoiding scope.\n *\n * * Using `controller as` makes it obvious which controller you are accessing in the template when\n * multiple controllers apply to an element.\n * * If you are writing your controllers as classes you have easier access to the properties and\n * methods, which will appear on the scope, from inside the controller code.\n * * Since there is always a `.` in the bindings, you don't have to worry about prototypal\n * inheritance masking primitives.\n *\n * This example demonstrates the `controller as` syntax.\n *\n * <example name=\"ngControllerAs\" module=\"controllerAsExample\">\n *   <file name=\"index.html\">\n *    <div id=\"ctrl-as-exmpl\" ng-controller=\"SettingsController1 as settings\">\n *      Name: <input type=\"text\" ng-model=\"settings.name\"/>\n *      [ <a href=\"\" ng-click=\"settings.greet()\">greet</a> ]<br/>\n *      Contact:\n *      <ul>\n *        <li ng-repeat=\"contact in settings.contacts\">\n *          <select ng-model=\"contact.type\">\n *             <option>phone</option>\n *             <option>email</option>\n *          </select>\n *          <input type=\"text\" ng-model=\"contact.value\"/>\n *          [ <a href=\"\" ng-click=\"settings.clearContact(contact)\">clear</a>\n *          | <a href=\"\" ng-click=\"settings.removeContact(contact)\">X</a> ]\n *        </li>\n *        <li>[ <a href=\"\" ng-click=\"settings.addContact()\">add</a> ]</li>\n *     </ul>\n *    </div>\n *   </file>\n *   <file name=\"app.js\">\n *    angular.module('controllerAsExample', [])\n *      .controller('SettingsController1', SettingsController1);\n *\n *    function SettingsController1() {\n *      this.name = \"John Smith\";\n *      this.contacts = [\n *        {type: 'phone', value: '408 555 1212'},\n *        {type: 'email', value: 'john.smith@example.org'} ];\n *    }\n *\n *    SettingsController1.prototype.greet = function() {\n *      alert(this.name);\n *    };\n *\n *    SettingsController1.prototype.addContact = function() {\n *      this.contacts.push({type: 'email', value: 'yourname@example.org'});\n *    };\n *\n *    SettingsController1.prototype.removeContact = function(contactToRemove) {\n *     var index = this.contacts.indexOf(contactToRemove);\n *      this.contacts.splice(index, 1);\n *    };\n *\n *    SettingsController1.prototype.clearContact = function(contact) {\n *      contact.type = 'phone';\n *      contact.value = '';\n *    };\n *   </file>\n *   <file name=\"protractor.js\" type=\"protractor\">\n *     it('should check controller as', function() {\n *       var container = element(by.id('ctrl-as-exmpl'));\n *         expect(container.element(by.model('settings.name'))\n *           .getAttribute('value')).toBe('John Smith');\n *\n *       var firstRepeat =\n *           container.element(by.repeater('contact in settings.contacts').row(0));\n *       var secondRepeat =\n *           container.element(by.repeater('contact in settings.contacts').row(1));\n *\n *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))\n *           .toBe('408 555 1212');\n *\n *       expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))\n *           .toBe('john.smith@example.org');\n *\n *       firstRepeat.element(by.linkText('clear')).click();\n *\n *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))\n *           .toBe('');\n *\n *       container.element(by.linkText('add')).click();\n *\n *       expect(container.element(by.repeater('contact in settings.contacts').row(2))\n *           .element(by.model('contact.value'))\n *           .getAttribute('value'))\n *           .toBe('yourname@example.org');\n *     });\n *   </file>\n * </example>\n *\n * This example demonstrates the \"attach to `$scope`\" style of controller.\n *\n * <example name=\"ngController\" module=\"controllerExample\">\n *  <file name=\"index.html\">\n *   <div id=\"ctrl-exmpl\" ng-controller=\"SettingsController2\">\n *     Name: <input type=\"text\" ng-model=\"name\"/>\n *     [ <a href=\"\" ng-click=\"greet()\">greet</a> ]<br/>\n *     Contact:\n *     <ul>\n *       <li ng-repeat=\"contact in contacts\">\n *         <select ng-model=\"contact.type\">\n *            <option>phone</option>\n *            <option>email</option>\n *         </select>\n *         <input type=\"text\" ng-model=\"contact.value\"/>\n *         [ <a href=\"\" ng-click=\"clearContact(contact)\">clear</a>\n *         | <a href=\"\" ng-click=\"removeContact(contact)\">X</a> ]\n *       </li>\n *       <li>[ <a href=\"\" ng-click=\"addContact()\">add</a> ]</li>\n *    </ul>\n *   </div>\n *  </file>\n *  <file name=\"app.js\">\n *   angular.module('controllerExample', [])\n *     .controller('SettingsController2', ['$scope', SettingsController2]);\n *\n *   function SettingsController2($scope) {\n *     $scope.name = \"John Smith\";\n *     $scope.contacts = [\n *       {type:'phone', value:'408 555 1212'},\n *       {type:'email', value:'john.smith@example.org'} ];\n *\n *     $scope.greet = function() {\n *       alert($scope.name);\n *     };\n *\n *     $scope.addContact = function() {\n *       $scope.contacts.push({type:'email', value:'yourname@example.org'});\n *     };\n *\n *     $scope.removeContact = function(contactToRemove) {\n *       var index = $scope.contacts.indexOf(contactToRemove);\n *       $scope.contacts.splice(index, 1);\n *     };\n *\n *     $scope.clearContact = function(contact) {\n *       contact.type = 'phone';\n *       contact.value = '';\n *     };\n *   }\n *  </file>\n *  <file name=\"protractor.js\" type=\"protractor\">\n *    it('should check controller', function() {\n *      var container = element(by.id('ctrl-exmpl'));\n *\n *      expect(container.element(by.model('name'))\n *          .getAttribute('value')).toBe('John Smith');\n *\n *      var firstRepeat =\n *          container.element(by.repeater('contact in contacts').row(0));\n *      var secondRepeat =\n *          container.element(by.repeater('contact in contacts').row(1));\n *\n *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))\n *          .toBe('408 555 1212');\n *      expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))\n *          .toBe('john.smith@example.org');\n *\n *      firstRepeat.element(by.linkText('clear')).click();\n *\n *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))\n *          .toBe('');\n *\n *      container.element(by.linkText('add')).click();\n *\n *      expect(container.element(by.repeater('contact in contacts').row(2))\n *          .element(by.model('contact.value'))\n *          .getAttribute('value'))\n *          .toBe('yourname@example.org');\n *    });\n *  </file>\n *</example>\n\n */\nvar ngControllerDirective = [function() {\n  return {\n    restrict: 'A',\n    scope: true,\n    controller: '@',\n    priority: 500\n  };\n}];\n\n/**\n * @ngdoc directive\n * @name ngCsp\n *\n * @element html\n * @description\n * Enables [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) support.\n *\n * This is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.\n *\n * CSP forbids apps to use `eval` or `Function(string)` generated functions (among other things).\n * For Angular to be CSP compatible there are only two things that we need to do differently:\n *\n * - don't use `Function` constructor to generate optimized value getters\n * - don't inject custom stylesheet into the document\n *\n * AngularJS uses `Function(string)` generated functions as a speed optimization. Applying the `ngCsp`\n * directive will cause Angular to use CSP compatibility mode. When this mode is on AngularJS will\n * evaluate all expressions up to 30% slower than in non-CSP mode, but no security violations will\n * be raised.\n *\n * CSP forbids JavaScript to inline stylesheet rules. In non CSP mode Angular automatically\n * includes some CSS rules (e.g. {@link ng.directive:ngCloak ngCloak}).\n * To make those directives work in CSP mode, include the `angular-csp.css` manually.\n *\n * Angular tries to autodetect if CSP is active and automatically turn on the CSP-safe mode. This\n * autodetection however triggers a CSP error to be logged in the console:\n *\n * ```\n * Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of\n * script in the following Content Security Policy directive: \"default-src 'self'\". Note that\n * 'script-src' was not explicitly set, so 'default-src' is used as a fallback.\n * ```\n *\n * This error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`\n * directive on the root element of the application or on the `angular.js` script tag, whichever\n * appears first in the html document.\n *\n * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*\n *\n * @example\n * This example shows how to apply the `ngCsp` directive to the `html` tag.\n   ```html\n     <!doctype html>\n     <html ng-app ng-csp>\n     ...\n     ...\n     </html>\n   ```\n  * @example\n      // Note: the suffix `.csp` in the example name triggers\n      // csp mode in our http server!\n      <example name=\"example.csp\" module=\"cspExample\" ng-csp=\"true\">\n        <file name=\"index.html\">\n          <div ng-controller=\"MainController as ctrl\">\n            <div>\n              <button ng-click=\"ctrl.inc()\" id=\"inc\">Increment</button>\n              <span id=\"counter\">\n                {{ctrl.counter}}\n              </span>\n            </div>\n\n            <div>\n              <button ng-click=\"ctrl.evil()\" id=\"evil\">Evil</button>\n              <span id=\"evilError\">\n                {{ctrl.evilError}}\n              </span>\n            </div>\n          </div>\n        </file>\n        <file name=\"script.js\">\n           angular.module('cspExample', [])\n             .controller('MainController', function() {\n                this.counter = 0;\n                this.inc = function() {\n                  this.counter++;\n                };\n                this.evil = function() {\n                  // jshint evil:true\n                  try {\n                    eval('1+2');\n                  } catch (e) {\n                    this.evilError = e.message;\n                  }\n                };\n              });\n        </file>\n        <file name=\"protractor.js\" type=\"protractor\">\n          var util, webdriver;\n\n          var incBtn = element(by.id('inc'));\n          var counter = element(by.id('counter'));\n          var evilBtn = element(by.id('evil'));\n          var evilError = element(by.id('evilError'));\n\n          function getAndClearSevereErrors() {\n            return browser.manage().logs().get('browser').then(function(browserLog) {\n              return browserLog.filter(function(logEntry) {\n                return logEntry.level.value > webdriver.logging.Level.WARNING.value;\n              });\n            });\n          }\n\n          function clearErrors() {\n            getAndClearSevereErrors();\n          }\n\n          function expectNoErrors() {\n            getAndClearSevereErrors().then(function(filteredLog) {\n              expect(filteredLog.length).toEqual(0);\n              if (filteredLog.length) {\n                console.log('browser console errors: ' + util.inspect(filteredLog));\n              }\n            });\n          }\n\n          function expectError(regex) {\n            getAndClearSevereErrors().then(function(filteredLog) {\n              var found = false;\n              filteredLog.forEach(function(log) {\n                if (log.message.match(regex)) {\n                  found = true;\n                }\n              });\n              if (!found) {\n                throw new Error('expected an error that matches ' + regex);\n              }\n            });\n          }\n\n          beforeEach(function() {\n            util = require('util');\n            webdriver = require('protractor/node_modules/selenium-webdriver');\n          });\n\n          // For now, we only test on Chrome,\n          // as Safari does not load the page with Protractor's injected scripts,\n          // and Firefox webdriver always disables content security policy (#6358)\n          if (browser.params.browser !== 'chrome') {\n            return;\n          }\n\n          it('should not report errors when the page is loaded', function() {\n            // clear errors so we are not dependent on previous tests\n            clearErrors();\n            // Need to reload the page as the page is already loaded when\n            // we come here\n            browser.driver.getCurrentUrl().then(function(url) {\n              browser.get(url);\n            });\n            expectNoErrors();\n          });\n\n          it('should evaluate expressions', function() {\n            expect(counter.getText()).toEqual('0');\n            incBtn.click();\n            expect(counter.getText()).toEqual('1');\n            expectNoErrors();\n          });\n\n          it('should throw and report an error when using \"eval\"', function() {\n            evilBtn.click();\n            expect(evilError.getText()).toMatch(/Content Security Policy/);\n            expectError(/Content Security Policy/);\n          });\n        </file>\n      </example>\n  */\n\n// ngCsp is not implemented as a proper directive any more, because we need it be processed while we\n// bootstrap the system (before $parse is instantiated), for this reason we just have\n// the csp.isActive() fn that looks for ng-csp attribute anywhere in the current doc\n\n/**\n * @ngdoc directive\n * @name ngClick\n *\n * @description\n * The ngClick directive allows you to specify custom behavior when\n * an element is clicked.\n *\n * @element ANY\n * @priority 0\n * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon\n * click. ({@link guide/expression#-event- Event object is available as `$event`})\n *\n * @example\n   <example>\n     <file name=\"index.html\">\n      <button ng-click=\"count = count + 1\" ng-init=\"count=0\">\n        Increment\n      </button>\n      <span>\n        count: {{count}}\n      </span>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should check ng-click', function() {\n         expect(element(by.binding('count')).getText()).toMatch('0');\n         element(by.css('button')).click();\n         expect(element(by.binding('count')).getText()).toMatch('1');\n       });\n     </file>\n   </example>\n */\n/*\n * A collection of directives that allows creation of custom event handlers that are defined as\n * angular expressions and are compiled and executed within the current scope.\n */\nvar ngEventDirectives = {};\n\n// For events that might fire synchronously during DOM manipulation\n// we need to execute their event handlers asynchronously using $evalAsync,\n// so that they are not executed in an inconsistent state.\nvar forceAsyncEvents = {\n  'blur': true,\n  'focus': true\n};\nforEach(\n  'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '),\n  function(eventName) {\n    var directiveName = directiveNormalize('ng-' + eventName);\n    ngEventDirectives[directiveName] = ['$parse', '$rootScope', function($parse, $rootScope) {\n      return {\n        restrict: 'A',\n        compile: function($element, attr) {\n          // We expose the powerful $event object on the scope that provides access to the Window,\n          // etc. that isn't protected by the fast paths in $parse.  We explicitly request better\n          // checks at the cost of speed since event handler expressions are not executed as\n          // frequently as regular change detection.\n          var fn = $parse(attr[directiveName], /* interceptorFn */ null, /* expensiveChecks */ true);\n          return function ngEventHandler(scope, element) {\n            element.on(eventName, function(event) {\n              var callback = function() {\n                fn(scope, {$event:event});\n              };\n              if (forceAsyncEvents[eventName] && $rootScope.$$phase) {\n                scope.$evalAsync(callback);\n              } else {\n                scope.$apply(callback);\n              }\n            });\n          };\n        }\n      };\n    }];\n  }\n);\n\n/**\n * @ngdoc directive\n * @name ngDblclick\n *\n * @description\n * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.\n *\n * @element ANY\n * @priority 0\n * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon\n * a dblclick. (The Event object is available as `$event`)\n *\n * @example\n   <example>\n     <file name=\"index.html\">\n      <button ng-dblclick=\"count = count + 1\" ng-init=\"count=0\">\n        Increment (on double click)\n      </button>\n      count: {{count}}\n     </file>\n   </example>\n */\n\n\n/**\n * @ngdoc directive\n * @name ngMousedown\n *\n * @description\n * The ngMousedown directive allows you to specify custom behavior on mousedown event.\n *\n * @element ANY\n * @priority 0\n * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon\n * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})\n *\n * @example\n   <example>\n     <file name=\"index.html\">\n      <button ng-mousedown=\"count = count + 1\" ng-init=\"count=0\">\n        Increment (on mouse down)\n      </button>\n      count: {{count}}\n     </file>\n   </example>\n */\n\n\n/**\n * @ngdoc directive\n * @name ngMouseup\n *\n * @description\n * Specify custom behavior on mouseup event.\n *\n * @element ANY\n * @priority 0\n * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon\n * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})\n *\n * @example\n   <example>\n     <file name=\"index.html\">\n      <button ng-mouseup=\"count = count + 1\" ng-init=\"count=0\">\n        Increment (on mouse up)\n      </button>\n      count: {{count}}\n     </file>\n   </example>\n */\n\n/**\n * @ngdoc directive\n * @name ngMouseover\n *\n * @description\n * Specify custom behavior on mouseover event.\n *\n * @element ANY\n * @priority 0\n * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon\n * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})\n *\n * @example\n   <example>\n     <file name=\"index.html\">\n      <button ng-mouseover=\"count = count + 1\" ng-init=\"count=0\">\n        Increment (when mouse is over)\n      </button>\n      count: {{count}}\n     </file>\n   </example>\n */\n\n\n/**\n * @ngdoc directive\n * @name ngMouseenter\n *\n * @description\n * Specify custom behavior on mouseenter event.\n *\n * @element ANY\n * @priority 0\n * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon\n * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})\n *\n * @example\n   <example>\n     <file name=\"index.html\">\n      <button ng-mouseenter=\"count = count + 1\" ng-init=\"count=0\">\n        Increment (when mouse enters)\n      </button>\n      count: {{count}}\n     </file>\n   </example>\n */\n\n\n/**\n * @ngdoc directive\n * @name ngMouseleave\n *\n * @description\n * Specify custom behavior on mouseleave event.\n *\n * @element ANY\n * @priority 0\n * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon\n * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})\n *\n * @example\n   <example>\n     <file name=\"index.html\">\n      <button ng-mouseleave=\"count = count + 1\" ng-init=\"count=0\">\n        Increment (when mouse leaves)\n      </button>\n      count: {{count}}\n     </file>\n   </example>\n */\n\n\n/**\n * @ngdoc directive\n * @name ngMousemove\n *\n * @description\n * Specify custom behavior on mousemove event.\n *\n * @element ANY\n * @priority 0\n * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon\n * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})\n *\n * @example\n   <example>\n     <file name=\"index.html\">\n      <button ng-mousemove=\"count = count + 1\" ng-init=\"count=0\">\n        Increment (when mouse moves)\n      </button>\n      count: {{count}}\n     </file>\n   </example>\n */\n\n\n/**\n * @ngdoc directive\n * @name ngKeydown\n *\n * @description\n * Specify custom behavior on keydown event.\n *\n * @element ANY\n * @priority 0\n * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon\n * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)\n *\n * @example\n   <example>\n     <file name=\"index.html\">\n      <input ng-keydown=\"count = count + 1\" ng-init=\"count=0\">\n      key down count: {{count}}\n     </file>\n   </example>\n */\n\n\n/**\n * @ngdoc directive\n * @name ngKeyup\n *\n * @description\n * Specify custom behavior on keyup event.\n *\n * @element ANY\n * @priority 0\n * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon\n * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)\n *\n * @example\n   <example>\n     <file name=\"index.html\">\n       <p>Typing in the input box below updates the key count</p>\n       <input ng-keyup=\"count = count + 1\" ng-init=\"count=0\"> key up count: {{count}}\n\n       <p>Typing in the input box below updates the keycode</p>\n       <input ng-keyup=\"event=$event\">\n       <p>event keyCode: {{ event.keyCode }}</p>\n       <p>event altKey: {{ event.altKey }}</p>\n     </file>\n   </example>\n */\n\n\n/**\n * @ngdoc directive\n * @name ngKeypress\n *\n * @description\n * Specify custom behavior on keypress event.\n *\n * @element ANY\n * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon\n * keypress. ({@link guide/expression#-event- Event object is available as `$event`}\n * and can be interrogated for keyCode, altKey, etc.)\n *\n * @example\n   <example>\n     <file name=\"index.html\">\n      <input ng-keypress=\"count = count + 1\" ng-init=\"count=0\">\n      key press count: {{count}}\n     </file>\n   </example>\n */\n\n\n/**\n * @ngdoc directive\n * @name ngSubmit\n *\n * @description\n * Enables binding angular expressions to onsubmit events.\n *\n * Additionally it prevents the default action (which for form means sending the request to the\n * server and reloading the current page), but only if the form does not contain `action`,\n * `data-action`, or `x-action` attributes.\n *\n * <div class=\"alert alert-warning\">\n * **Warning:** Be careful not to cause \"double-submission\" by using both the `ngClick` and\n * `ngSubmit` handlers together. See the\n * {@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}\n * for a detailed discussion of when `ngSubmit` may be triggered.\n * </div>\n *\n * @element form\n * @priority 0\n * @param {expression} ngSubmit {@link guide/expression Expression} to eval.\n * ({@link guide/expression#-event- Event object is available as `$event`})\n *\n * @example\n   <example module=\"submitExample\">\n     <file name=\"index.html\">\n      <script>\n        angular.module('submitExample', [])\n          .controller('ExampleController', ['$scope', function($scope) {\n            $scope.list = [];\n            $scope.text = 'hello';\n            $scope.submit = function() {\n              if ($scope.text) {\n                $scope.list.push(this.text);\n                $scope.text = '';\n              }\n            };\n          }]);\n      </script>\n      <form ng-submit=\"submit()\" ng-controller=\"ExampleController\">\n        Enter text and hit enter:\n        <input type=\"text\" ng-model=\"text\" name=\"text\" />\n        <input type=\"submit\" id=\"submit\" value=\"Submit\" />\n        <pre>list={{list}}</pre>\n      </form>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should check ng-submit', function() {\n         expect(element(by.binding('list')).getText()).toBe('list=[]');\n         element(by.css('#submit')).click();\n         expect(element(by.binding('list')).getText()).toContain('hello');\n         expect(element(by.model('text')).getAttribute('value')).toBe('');\n       });\n       it('should ignore empty strings', function() {\n         expect(element(by.binding('list')).getText()).toBe('list=[]');\n         element(by.css('#submit')).click();\n         element(by.css('#submit')).click();\n         expect(element(by.binding('list')).getText()).toContain('hello');\n        });\n     </file>\n   </example>\n */\n\n/**\n * @ngdoc directive\n * @name ngFocus\n *\n * @description\n * Specify custom behavior on focus event.\n *\n * Note: As the `focus` event is executed synchronously when calling `input.focus()`\n * AngularJS executes the expression using `scope.$evalAsync` if the event is fired\n * during an `$apply` to ensure a consistent state.\n *\n * @element window, input, select, textarea, a\n * @priority 0\n * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon\n * focus. ({@link guide/expression#-event- Event object is available as `$event`})\n *\n * @example\n * See {@link ng.directive:ngClick ngClick}\n */\n\n/**\n * @ngdoc directive\n * @name ngBlur\n *\n * @description\n * Specify custom behavior on blur event.\n *\n * A [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when\n * an element has lost focus.\n *\n * Note: As the `blur` event is executed synchronously also during DOM manipulations\n * (e.g. removing a focussed input),\n * AngularJS executes the expression using `scope.$evalAsync` if the event is fired\n * during an `$apply` to ensure a consistent state.\n *\n * @element window, input, select, textarea, a\n * @priority 0\n * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon\n * blur. ({@link guide/expression#-event- Event object is available as `$event`})\n *\n * @example\n * See {@link ng.directive:ngClick ngClick}\n */\n\n/**\n * @ngdoc directive\n * @name ngCopy\n *\n * @description\n * Specify custom behavior on copy event.\n *\n * @element window, input, select, textarea, a\n * @priority 0\n * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon\n * copy. ({@link guide/expression#-event- Event object is available as `$event`})\n *\n * @example\n   <example>\n     <file name=\"index.html\">\n      <input ng-copy=\"copied=true\" ng-init=\"copied=false; value='copy me'\" ng-model=\"value\">\n      copied: {{copied}}\n     </file>\n   </example>\n */\n\n/**\n * @ngdoc directive\n * @name ngCut\n *\n * @description\n * Specify custom behavior on cut event.\n *\n * @element window, input, select, textarea, a\n * @priority 0\n * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon\n * cut. ({@link guide/expression#-event- Event object is available as `$event`})\n *\n * @example\n   <example>\n     <file name=\"index.html\">\n      <input ng-cut=\"cut=true\" ng-init=\"cut=false; value='cut me'\" ng-model=\"value\">\n      cut: {{cut}}\n     </file>\n   </example>\n */\n\n/**\n * @ngdoc directive\n * @name ngPaste\n *\n * @description\n * Specify custom behavior on paste event.\n *\n * @element window, input, select, textarea, a\n * @priority 0\n * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon\n * paste. ({@link guide/expression#-event- Event object is available as `$event`})\n *\n * @example\n   <example>\n     <file name=\"index.html\">\n      <input ng-paste=\"paste=true\" ng-init=\"paste=false\" placeholder='paste here'>\n      pasted: {{paste}}\n     </file>\n   </example>\n */\n\n/**\n * @ngdoc directive\n * @name ngIf\n * @restrict A\n *\n * @description\n * The `ngIf` directive removes or recreates a portion of the DOM tree based on an\n * {expression}. If the expression assigned to `ngIf` evaluates to a false\n * value then the element is removed from the DOM, otherwise a clone of the\n * element is reinserted into the DOM.\n *\n * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the\n * element in the DOM rather than changing its visibility via the `display` css property.  A common\n * case when this difference is significant is when using css selectors that rely on an element's\n * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.\n *\n * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope\n * is created when the element is restored.  The scope created within `ngIf` inherits from\n * its parent scope using\n * [prototypal inheritance](https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance).\n * An important implication of this is if `ngModel` is used within `ngIf` to bind to\n * a javascript primitive defined in the parent scope. In this case any modifications made to the\n * variable within the child scope will override (hide) the value in the parent scope.\n *\n * Also, `ngIf` recreates elements using their compiled state. An example of this behavior\n * is if an element's class attribute is directly modified after it's compiled, using something like\n * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element\n * the added class will be lost because the original compiled state is used to regenerate the element.\n *\n * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`\n * and `leave` effects.\n *\n * @animations\n * enter - happens just after the `ngIf` contents change and a new DOM element is created and injected into the `ngIf` container\n * leave - happens just before the `ngIf` contents are removed from the DOM\n *\n * @element ANY\n * @scope\n * @priority 600\n * @param {expression} ngIf If the {@link guide/expression expression} is falsy then\n *     the element is removed from the DOM tree. If it is truthy a copy of the compiled\n *     element is added to the DOM tree.\n *\n * @example\n  <example module=\"ngAnimate\" deps=\"angular-animate.js\" animations=\"true\">\n    <file name=\"index.html\">\n      Click me: <input type=\"checkbox\" ng-model=\"checked\" ng-init=\"checked=true\" /><br/>\n      Show when checked:\n      <span ng-if=\"checked\" class=\"animate-if\">\n        This is removed when the checkbox is unchecked.\n      </span>\n    </file>\n    <file name=\"animations.css\">\n      .animate-if {\n        background:white;\n        border:1px solid black;\n        padding:10px;\n      }\n\n      .animate-if.ng-enter, .animate-if.ng-leave {\n        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n      }\n\n      .animate-if.ng-enter,\n      .animate-if.ng-leave.ng-leave-active {\n        opacity:0;\n      }\n\n      .animate-if.ng-leave,\n      .animate-if.ng-enter.ng-enter-active {\n        opacity:1;\n      }\n    </file>\n  </example>\n */\nvar ngIfDirective = ['$animate', function($animate) {\n  return {\n    multiElement: true,\n    transclude: 'element',\n    priority: 600,\n    terminal: true,\n    restrict: 'A',\n    $$tlb: true,\n    link: function($scope, $element, $attr, ctrl, $transclude) {\n        var block, childScope, previousElements;\n        $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {\n\n          if (value) {\n            if (!childScope) {\n              $transclude(function(clone, newScope) {\n                childScope = newScope;\n                clone[clone.length++] = document.createComment(' end ngIf: ' + $attr.ngIf + ' ');\n                // Note: We only need the first/last node of the cloned nodes.\n                // However, we need to keep the reference to the jqlite wrapper as it might be changed later\n                // by a directive with templateUrl when its template arrives.\n                block = {\n                  clone: clone\n                };\n                $animate.enter(clone, $element.parent(), $element);\n              });\n            }\n          } else {\n            if (previousElements) {\n              previousElements.remove();\n              previousElements = null;\n            }\n            if (childScope) {\n              childScope.$destroy();\n              childScope = null;\n            }\n            if (block) {\n              previousElements = getBlockNodes(block.clone);\n              $animate.leave(previousElements).then(function() {\n                previousElements = null;\n              });\n              block = null;\n            }\n          }\n        });\n    }\n  };\n}];\n\n/**\n * @ngdoc directive\n * @name ngInclude\n * @restrict ECA\n *\n * @description\n * Fetches, compiles and includes an external HTML fragment.\n *\n * By default, the template URL is restricted to the same domain and protocol as the\n * application document. This is done by calling {@link $sce#getTrustedResourceUrl\n * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols\n * you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or\n * {@link $sce#trustAsResourceUrl wrap them} as trusted values. Refer to Angular's {@link\n * ng.$sce Strict Contextual Escaping}.\n *\n * In addition, the browser's\n * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)\n * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)\n * policy may further restrict whether the template is successfully loaded.\n * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`\n * access on some browsers.\n *\n * @animations\n * enter - animation is used to bring new content into the browser.\n * leave - animation is used to animate existing content away.\n *\n * The enter and leave animation occur concurrently.\n *\n * @scope\n * @priority 400\n *\n * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,\n *                 make sure you wrap it in **single** quotes, e.g. `src=\"'myPartialTemplate.html'\"`.\n * @param {string=} onload Expression to evaluate when a new partial is loaded.\n *\n * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll\n *                  $anchorScroll} to scroll the viewport after the content is loaded.\n *\n *                  - If the attribute is not set, disable scrolling.\n *                  - If the attribute is set without value, enable scrolling.\n *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.\n *\n * @example\n  <example module=\"includeExample\" deps=\"angular-animate.js\" animations=\"true\">\n    <file name=\"index.html\">\n     <div ng-controller=\"ExampleController\">\n       <select ng-model=\"template\" ng-options=\"t.name for t in templates\">\n        <option value=\"\">(blank)</option>\n       </select>\n       url of the template: <code>{{template.url}}</code>\n       <hr/>\n       <div class=\"slide-animate-container\">\n         <div class=\"slide-animate\" ng-include=\"template.url\"></div>\n       </div>\n     </div>\n    </file>\n    <file name=\"script.js\">\n      angular.module('includeExample', ['ngAnimate'])\n        .controller('ExampleController', ['$scope', function($scope) {\n          $scope.templates =\n            [ { name: 'template1.html', url: 'template1.html'},\n              { name: 'template2.html', url: 'template2.html'} ];\n          $scope.template = $scope.templates[0];\n        }]);\n     </file>\n    <file name=\"template1.html\">\n      Content of template1.html\n    </file>\n    <file name=\"template2.html\">\n      Content of template2.html\n    </file>\n    <file name=\"animations.css\">\n      .slide-animate-container {\n        position:relative;\n        background:white;\n        border:1px solid black;\n        height:40px;\n        overflow:hidden;\n      }\n\n      .slide-animate {\n        padding:10px;\n      }\n\n      .slide-animate.ng-enter, .slide-animate.ng-leave {\n        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n\n        position:absolute;\n        top:0;\n        left:0;\n        right:0;\n        bottom:0;\n        display:block;\n        padding:10px;\n      }\n\n      .slide-animate.ng-enter {\n        top:-50px;\n      }\n      .slide-animate.ng-enter.ng-enter-active {\n        top:0;\n      }\n\n      .slide-animate.ng-leave {\n        top:0;\n      }\n      .slide-animate.ng-leave.ng-leave-active {\n        top:50px;\n      }\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      var templateSelect = element(by.model('template'));\n      var includeElem = element(by.css('[ng-include]'));\n\n      it('should load template1.html', function() {\n        expect(includeElem.getText()).toMatch(/Content of template1.html/);\n      });\n\n      it('should load template2.html', function() {\n        if (browser.params.browser == 'firefox') {\n          // Firefox can't handle using selects\n          // See https://github.com/angular/protractor/issues/480\n          return;\n        }\n        templateSelect.click();\n        templateSelect.all(by.css('option')).get(2).click();\n        expect(includeElem.getText()).toMatch(/Content of template2.html/);\n      });\n\n      it('should change to blank', function() {\n        if (browser.params.browser == 'firefox') {\n          // Firefox can't handle using selects\n          return;\n        }\n        templateSelect.click();\n        templateSelect.all(by.css('option')).get(0).click();\n        expect(includeElem.isPresent()).toBe(false);\n      });\n    </file>\n  </example>\n */\n\n\n/**\n * @ngdoc event\n * @name ngInclude#$includeContentRequested\n * @eventType emit on the scope ngInclude was declared in\n * @description\n * Emitted every time the ngInclude content is requested.\n *\n * @param {Object} angularEvent Synthetic event object.\n * @param {String} src URL of content to load.\n */\n\n\n/**\n * @ngdoc event\n * @name ngInclude#$includeContentLoaded\n * @eventType emit on the current ngInclude scope\n * @description\n * Emitted every time the ngInclude content is reloaded.\n *\n * @param {Object} angularEvent Synthetic event object.\n * @param {String} src URL of content to load.\n */\n\n\n/**\n * @ngdoc event\n * @name ngInclude#$includeContentError\n * @eventType emit on the scope ngInclude was declared in\n * @description\n * Emitted when a template HTTP request yields an erroneous response (status < 200 || status > 299)\n *\n * @param {Object} angularEvent Synthetic event object.\n * @param {String} src URL of content to load.\n */\nvar ngIncludeDirective = ['$templateRequest', '$anchorScroll', '$animate',\n                  function($templateRequest,   $anchorScroll,   $animate) {\n  return {\n    restrict: 'ECA',\n    priority: 400,\n    terminal: true,\n    transclude: 'element',\n    controller: angular.noop,\n    compile: function(element, attr) {\n      var srcExp = attr.ngInclude || attr.src,\n          onloadExp = attr.onload || '',\n          autoScrollExp = attr.autoscroll;\n\n      return function(scope, $element, $attr, ctrl, $transclude) {\n        var changeCounter = 0,\n            currentScope,\n            previousElement,\n            currentElement;\n\n        var cleanupLastIncludeContent = function() {\n          if (previousElement) {\n            previousElement.remove();\n            previousElement = null;\n          }\n          if (currentScope) {\n            currentScope.$destroy();\n            currentScope = null;\n          }\n          if (currentElement) {\n            $animate.leave(currentElement).then(function() {\n              previousElement = null;\n            });\n            previousElement = currentElement;\n            currentElement = null;\n          }\n        };\n\n        scope.$watch(srcExp, function ngIncludeWatchAction(src) {\n          var afterAnimation = function() {\n            if (isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {\n              $anchorScroll();\n            }\n          };\n          var thisChangeId = ++changeCounter;\n\n          if (src) {\n            //set the 2nd param to true to ignore the template request error so that the inner\n            //contents and scope can be cleaned up.\n            $templateRequest(src, true).then(function(response) {\n              if (thisChangeId !== changeCounter) return;\n              var newScope = scope.$new();\n              ctrl.template = response;\n\n              // Note: This will also link all children of ng-include that were contained in the original\n              // html. If that content contains controllers, ... they could pollute/change the scope.\n              // However, using ng-include on an element with additional content does not make sense...\n              // Note: We can't remove them in the cloneAttchFn of $transclude as that\n              // function is called before linking the content, which would apply child\n              // directives to non existing elements.\n              var clone = $transclude(newScope, function(clone) {\n                cleanupLastIncludeContent();\n                $animate.enter(clone, null, $element).then(afterAnimation);\n              });\n\n              currentScope = newScope;\n              currentElement = clone;\n\n              currentScope.$emit('$includeContentLoaded', src);\n              scope.$eval(onloadExp);\n            }, function() {\n              if (thisChangeId === changeCounter) {\n                cleanupLastIncludeContent();\n                scope.$emit('$includeContentError', src);\n              }\n            });\n            scope.$emit('$includeContentRequested', src);\n          } else {\n            cleanupLastIncludeContent();\n            ctrl.template = null;\n          }\n        });\n      };\n    }\n  };\n}];\n\n// This directive is called during the $transclude call of the first `ngInclude` directive.\n// It will replace and compile the content of the element with the loaded template.\n// We need this directive so that the element content is already filled when\n// the link function of another directive on the same element as ngInclude\n// is called.\nvar ngIncludeFillContentDirective = ['$compile',\n  function($compile) {\n    return {\n      restrict: 'ECA',\n      priority: -400,\n      require: 'ngInclude',\n      link: function(scope, $element, $attr, ctrl) {\n        if (/SVG/.test($element[0].toString())) {\n          // WebKit: https://bugs.webkit.org/show_bug.cgi?id=135698 --- SVG elements do not\n          // support innerHTML, so detect this here and try to generate the contents\n          // specially.\n          $element.empty();\n          $compile(jqLiteBuildFragment(ctrl.template, document).childNodes)(scope,\n              function namespaceAdaptedClone(clone) {\n            $element.append(clone);\n          }, {futureParentElement: $element});\n          return;\n        }\n\n        $element.html(ctrl.template);\n        $compile($element.contents())(scope);\n      }\n    };\n  }];\n\n/**\n * @ngdoc directive\n * @name ngInit\n * @restrict AC\n *\n * @description\n * The `ngInit` directive allows you to evaluate an expression in the\n * current scope.\n *\n * <div class=\"alert alert-error\">\n * The only appropriate use of `ngInit` is for aliasing special properties of\n * {@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below. Besides this case, you\n * should use {@link guide/controller controllers} rather than `ngInit`\n * to initialize values on a scope.\n * </div>\n * <div class=\"alert alert-warning\">\n * **Note**: If you have assignment in `ngInit` along with {@link ng.$filter `$filter`}, make\n * sure you have parenthesis for correct precedence:\n * <pre class=\"prettyprint\">\n * `<div ng-init=\"test1 = (data | orderBy:'name')\"></div>`\n * </pre>\n * </div>\n *\n * @priority 450\n *\n * @element ANY\n * @param {expression} ngInit {@link guide/expression Expression} to eval.\n *\n * @example\n   <example module=\"initExample\">\n     <file name=\"index.html\">\n   <script>\n     angular.module('initExample', [])\n       .controller('ExampleController', ['$scope', function($scope) {\n         $scope.list = [['a', 'b'], ['c', 'd']];\n       }]);\n   </script>\n   <div ng-controller=\"ExampleController\">\n     <div ng-repeat=\"innerList in list\" ng-init=\"outerIndex = $index\">\n       <div ng-repeat=\"value in innerList\" ng-init=\"innerIndex = $index\">\n          <span class=\"example-init\">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>\n       </div>\n     </div>\n   </div>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should alias index positions', function() {\n         var elements = element.all(by.css('.example-init'));\n         expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');\n         expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');\n         expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');\n         expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');\n       });\n     </file>\n   </example>\n */\nvar ngInitDirective = ngDirective({\n  priority: 450,\n  compile: function() {\n    return {\n      pre: function(scope, element, attrs) {\n        scope.$eval(attrs.ngInit);\n      }\n    };\n  }\n});\n\n/**\n * @ngdoc directive\n * @name ngList\n *\n * @description\n * Text input that converts between a delimited string and an array of strings. The default\n * delimiter is a comma followed by a space - equivalent to `ng-list=\", \"`. You can specify a custom\n * delimiter as the value of the `ngList` attribute - for example, `ng-list=\" | \"`.\n *\n * The behaviour of the directive is affected by the use of the `ngTrim` attribute.\n * * If `ngTrim` is set to `\"false\"` then whitespace around both the separator and each\n *   list item is respected. This implies that the user of the directive is responsible for\n *   dealing with whitespace but also allows you to use whitespace as a delimiter, such as a\n *   tab or newline character.\n * * Otherwise whitespace around the delimiter is ignored when splitting (although it is respected\n *   when joining the list items back together) and whitespace around each list item is stripped\n *   before it is added to the model.\n *\n * ### Example with Validation\n *\n * <example name=\"ngList-directive\" module=\"listExample\">\n *   <file name=\"app.js\">\n *      angular.module('listExample', [])\n *        .controller('ExampleController', ['$scope', function($scope) {\n *          $scope.names = ['morpheus', 'neo', 'trinity'];\n *        }]);\n *   </file>\n *   <file name=\"index.html\">\n *    <form name=\"myForm\" ng-controller=\"ExampleController\">\n *      List: <input name=\"namesInput\" ng-model=\"names\" ng-list required>\n *      <span class=\"error\" ng-show=\"myForm.namesInput.$error.required\">\n *        Required!</span>\n *      <br>\n *      <tt>names = {{names}}</tt><br/>\n *      <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>\n *      <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>\n *      <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n *      <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n *     </form>\n *   </file>\n *   <file name=\"protractor.js\" type=\"protractor\">\n *     var listInput = element(by.model('names'));\n *     var names = element(by.exactBinding('names'));\n *     var valid = element(by.binding('myForm.namesInput.$valid'));\n *     var error = element(by.css('span.error'));\n *\n *     it('should initialize to model', function() {\n *       expect(names.getText()).toContain('[\"morpheus\",\"neo\",\"trinity\"]');\n *       expect(valid.getText()).toContain('true');\n *       expect(error.getCssValue('display')).toBe('none');\n *     });\n *\n *     it('should be invalid if empty', function() {\n *       listInput.clear();\n *       listInput.sendKeys('');\n *\n *       expect(names.getText()).toContain('');\n *       expect(valid.getText()).toContain('false');\n *       expect(error.getCssValue('display')).not.toBe('none');\n *     });\n *   </file>\n * </example>\n *\n * ### Example - splitting on whitespace\n * <example name=\"ngList-directive-newlines\">\n *   <file name=\"index.html\">\n *    <textarea ng-model=\"list\" ng-list=\"&#10;\" ng-trim=\"false\"></textarea>\n *    <pre>{{ list | json }}</pre>\n *   </file>\n *   <file name=\"protractor.js\" type=\"protractor\">\n *     it(\"should split the text by newlines\", function() {\n *       var listInput = element(by.model('list'));\n *       var output = element(by.binding('list | json'));\n *       listInput.sendKeys('abc\\ndef\\nghi');\n *       expect(output.getText()).toContain('[\\n  \"abc\",\\n  \"def\",\\n  \"ghi\"\\n]');\n *     });\n *   </file>\n * </example>\n *\n * @element input\n * @param {string=} ngList optional delimiter that should be used to split the value.\n */\nvar ngListDirective = function() {\n  return {\n    restrict: 'A',\n    priority: 100,\n    require: 'ngModel',\n    link: function(scope, element, attr, ctrl) {\n      // We want to control whitespace trimming so we use this convoluted approach\n      // to access the ngList attribute, which doesn't pre-trim the attribute\n      var ngList = element.attr(attr.$attr.ngList) || ', ';\n      var trimValues = attr.ngTrim !== 'false';\n      var separator = trimValues ? trim(ngList) : ngList;\n\n      var parse = function(viewValue) {\n        // If the viewValue is invalid (say required but empty) it will be `undefined`\n        if (isUndefined(viewValue)) return;\n\n        var list = [];\n\n        if (viewValue) {\n          forEach(viewValue.split(separator), function(value) {\n            if (value) list.push(trimValues ? trim(value) : value);\n          });\n        }\n\n        return list;\n      };\n\n      ctrl.$parsers.push(parse);\n      ctrl.$formatters.push(function(value) {\n        if (isArray(value)) {\n          return value.join(ngList);\n        }\n\n        return undefined;\n      });\n\n      // Override the standard $isEmpty because an empty array means the input is empty.\n      ctrl.$isEmpty = function(value) {\n        return !value || !value.length;\n      };\n    }\n  };\n};\n\n/* global VALID_CLASS: true,\n  INVALID_CLASS: true,\n  PRISTINE_CLASS: true,\n  DIRTY_CLASS: true,\n  UNTOUCHED_CLASS: true,\n  TOUCHED_CLASS: true,\n*/\n\nvar VALID_CLASS = 'ng-valid',\n    INVALID_CLASS = 'ng-invalid',\n    PRISTINE_CLASS = 'ng-pristine',\n    DIRTY_CLASS = 'ng-dirty',\n    UNTOUCHED_CLASS = 'ng-untouched',\n    TOUCHED_CLASS = 'ng-touched',\n    PENDING_CLASS = 'ng-pending';\n\nvar ngModelMinErr = minErr('ngModel');\n\n/**\n * @ngdoc type\n * @name ngModel.NgModelController\n *\n * @property {string} $viewValue Actual string value in the view.\n * @property {*} $modelValue The value in the model that the control is bound to.\n * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever\n       the control reads value from the DOM. The functions are called in array order, each passing\n       its return value through to the next. The last return value is forwarded to the\n       {@link ngModel.NgModelController#$validators `$validators`} collection.\n\nParsers are used to sanitize / convert the {@link ngModel.NgModelController#$viewValue\n`$viewValue`}.\n\nReturning `undefined` from a parser means a parse error occurred. In that case,\nno {@link ngModel.NgModelController#$validators `$validators`} will run and the `ngModel`\nwill be set to `undefined` unless {@link ngModelOptions `ngModelOptions.allowInvalid`}\nis set to `true`. The parse error is stored in `ngModel.$error.parse`.\n\n *\n * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever\n       the model value changes. The functions are called in reverse array order, each passing the value through to the\n       next. The last return value is used as the actual DOM value.\n       Used to format / convert values for display in the control.\n * ```js\n * function formatter(value) {\n *   if (value) {\n *     return value.toUpperCase();\n *   }\n * }\n * ngModel.$formatters.push(formatter);\n * ```\n *\n * @property {Object.<string, function>} $validators A collection of validators that are applied\n *      whenever the model value changes. The key value within the object refers to the name of the\n *      validator while the function refers to the validation operation. The validation operation is\n *      provided with the model value as an argument and must return a true or false value depending\n *      on the response of that validation.\n *\n * ```js\n * ngModel.$validators.validCharacters = function(modelValue, viewValue) {\n *   var value = modelValue || viewValue;\n *   return /[0-9]+/.test(value) &&\n *          /[a-z]+/.test(value) &&\n *          /[A-Z]+/.test(value) &&\n *          /\\W+/.test(value);\n * };\n * ```\n *\n * @property {Object.<string, function>} $asyncValidators A collection of validations that are expected to\n *      perform an asynchronous validation (e.g. a HTTP request). The validation function that is provided\n *      is expected to return a promise when it is run during the model validation process. Once the promise\n *      is delivered then the validation status will be set to true when fulfilled and false when rejected.\n *      When the asynchronous validators are triggered, each of the validators will run in parallel and the model\n *      value will only be updated once all validators have been fulfilled. As long as an asynchronous validator\n *      is unfulfilled, its key will be added to the controllers `$pending` property. Also, all asynchronous validators\n *      will only run once all synchronous validators have passed.\n *\n * Please note that if $http is used then it is important that the server returns a success HTTP response code\n * in order to fulfill the validation and a status level of `4xx` in order to reject the validation.\n *\n * ```js\n * ngModel.$asyncValidators.uniqueUsername = function(modelValue, viewValue) {\n *   var value = modelValue || viewValue;\n *\n *   // Lookup user by username\n *   return $http.get('/api/users/' + value).\n *      then(function resolved() {\n *        //username exists, this means validation fails\n *        return $q.reject('exists');\n *      }, function rejected() {\n *        //username does not exist, therefore this validation passes\n *        return true;\n *      });\n * };\n * ```\n *\n * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever the\n *     view value has changed. It is called with no arguments, and its return value is ignored.\n *     This can be used in place of additional $watches against the model value.\n *\n * @property {Object} $error An object hash with all failing validator ids as keys.\n * @property {Object} $pending An object hash with all pending validator ids as keys.\n *\n * @property {boolean} $untouched True if control has not lost focus yet.\n * @property {boolean} $touched True if control has lost focus.\n * @property {boolean} $pristine True if user has not interacted with the control yet.\n * @property {boolean} $dirty True if user has already interacted with the control.\n * @property {boolean} $valid True if there is no error.\n * @property {boolean} $invalid True if at least one error on the control.\n * @property {string} $name The name attribute of the control.\n *\n * @description\n *\n * `NgModelController` provides API for the {@link ngModel `ngModel`} directive.\n * The controller contains services for data-binding, validation, CSS updates, and value formatting\n * and parsing. It purposefully does not contain any logic which deals with DOM rendering or\n * listening to DOM events.\n * Such DOM related logic should be provided by other directives which make use of\n * `NgModelController` for data-binding to control elements.\n * Angular provides this DOM logic for most {@link input `input`} elements.\n * At the end of this page you can find a {@link ngModel.NgModelController#custom-control-example\n * custom control example} that uses `ngModelController` to bind to `contenteditable` elements.\n *\n * @example\n * ### Custom Control Example\n * This example shows how to use `NgModelController` with a custom control to achieve\n * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)\n * collaborate together to achieve the desired result.\n *\n * `contenteditable` is an HTML5 attribute, which tells the browser to let the element\n * contents be edited in place by the user.\n *\n * We are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}\n * module to automatically remove \"bad\" content like inline event listener (e.g. `<span onclick=\"...\">`).\n * However, as we are using `$sce` the model can still decide to provide unsafe content if it marks\n * that content using the `$sce` service.\n *\n * <example name=\"NgModelController\" module=\"customControl\" deps=\"angular-sanitize.js\">\n    <file name=\"style.css\">\n      [contenteditable] {\n        border: 1px solid black;\n        background-color: white;\n        min-height: 20px;\n      }\n\n      .ng-invalid {\n        border: 1px solid red;\n      }\n\n    </file>\n    <file name=\"script.js\">\n      angular.module('customControl', ['ngSanitize']).\n        directive('contenteditable', ['$sce', function($sce) {\n          return {\n            restrict: 'A', // only activate on element attribute\n            require: '?ngModel', // get a hold of NgModelController\n            link: function(scope, element, attrs, ngModel) {\n              if (!ngModel) return; // do nothing if no ng-model\n\n              // Specify how UI should be updated\n              ngModel.$render = function() {\n                element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));\n              };\n\n              // Listen for change events to enable binding\n              element.on('blur keyup change', function() {\n                scope.$evalAsync(read);\n              });\n              read(); // initialize\n\n              // Write data to the model\n              function read() {\n                var html = element.html();\n                // When we clear the content editable the browser leaves a <br> behind\n                // If strip-br attribute is provided then we strip this out\n                if ( attrs.stripBr && html == '<br>' ) {\n                  html = '';\n                }\n                ngModel.$setViewValue(html);\n              }\n            }\n          };\n        }]);\n    </file>\n    <file name=\"index.html\">\n      <form name=\"myForm\">\n       <div contenteditable\n            name=\"myWidget\" ng-model=\"userContent\"\n            strip-br=\"true\"\n            required>Change me!</div>\n        <span ng-show=\"myForm.myWidget.$error.required\">Required!</span>\n       <hr>\n       <textarea ng-model=\"userContent\"></textarea>\n      </form>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n    it('should data-bind and become invalid', function() {\n      if (browser.params.browser == 'safari' || browser.params.browser == 'firefox') {\n        // SafariDriver can't handle contenteditable\n        // and Firefox driver can't clear contenteditables very well\n        return;\n      }\n      var contentEditable = element(by.css('[contenteditable]'));\n      var content = 'Change me!';\n\n      expect(contentEditable.getText()).toEqual(content);\n\n      contentEditable.clear();\n      contentEditable.sendKeys(protractor.Key.BACK_SPACE);\n      expect(contentEditable.getText()).toEqual('');\n      expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);\n    });\n    </file>\n * </example>\n *\n *\n */\nvar NgModelController = ['$scope', '$exceptionHandler', '$attrs', '$element', '$parse', '$animate', '$timeout', '$rootScope', '$q', '$interpolate',\n    function($scope, $exceptionHandler, $attr, $element, $parse, $animate, $timeout, $rootScope, $q, $interpolate) {\n  this.$viewValue = Number.NaN;\n  this.$modelValue = Number.NaN;\n  this.$$rawModelValue = undefined; // stores the parsed modelValue / model set from scope regardless of validity.\n  this.$validators = {};\n  this.$asyncValidators = {};\n  this.$parsers = [];\n  this.$formatters = [];\n  this.$viewChangeListeners = [];\n  this.$untouched = true;\n  this.$touched = false;\n  this.$pristine = true;\n  this.$dirty = false;\n  this.$valid = true;\n  this.$invalid = false;\n  this.$error = {}; // keep invalid keys here\n  this.$$success = {}; // keep valid keys here\n  this.$pending = undefined; // keep pending keys here\n  this.$name = $interpolate($attr.name || '', false)($scope);\n\n\n  var parsedNgModel = $parse($attr.ngModel),\n      parsedNgModelAssign = parsedNgModel.assign,\n      ngModelGet = parsedNgModel,\n      ngModelSet = parsedNgModelAssign,\n      pendingDebounce = null,\n      parserValid,\n      ctrl = this;\n\n  this.$$setOptions = function(options) {\n    ctrl.$options = options;\n    if (options && options.getterSetter) {\n      var invokeModelGetter = $parse($attr.ngModel + '()'),\n          invokeModelSetter = $parse($attr.ngModel + '($$$p)');\n\n      ngModelGet = function($scope) {\n        var modelValue = parsedNgModel($scope);\n        if (isFunction(modelValue)) {\n          modelValue = invokeModelGetter($scope);\n        }\n        return modelValue;\n      };\n      ngModelSet = function($scope, newValue) {\n        if (isFunction(parsedNgModel($scope))) {\n          invokeModelSetter($scope, {$$$p: ctrl.$modelValue});\n        } else {\n          parsedNgModelAssign($scope, ctrl.$modelValue);\n        }\n      };\n    } else if (!parsedNgModel.assign) {\n      throw ngModelMinErr('nonassign', \"Expression '{0}' is non-assignable. Element: {1}\",\n          $attr.ngModel, startingTag($element));\n    }\n  };\n\n  /**\n   * @ngdoc method\n   * @name ngModel.NgModelController#$render\n   *\n   * @description\n   * Called when the view needs to be updated. It is expected that the user of the ng-model\n   * directive will implement this method.\n   *\n   * The `$render()` method is invoked in the following situations:\n   *\n   * * `$rollbackViewValue()` is called.  If we are rolling back the view value to the last\n   *   committed value then `$render()` is called to update the input control.\n   * * The value referenced by `ng-model` is changed programmatically and both the `$modelValue` and\n   *   the `$viewValue` are different to last time.\n   *\n   * Since `ng-model` does not do a deep watch, `$render()` is only invoked if the values of\n   * `$modelValue` and `$viewValue` are actually different to their previous value. If `$modelValue`\n   * or `$viewValue` are objects (rather than a string or number) then `$render()` will not be\n   * invoked if you only change a property on the objects.\n   */\n  this.$render = noop;\n\n  /**\n   * @ngdoc method\n   * @name ngModel.NgModelController#$isEmpty\n   *\n   * @description\n   * This is called when we need to determine if the value of an input is empty.\n   *\n   * For instance, the required directive does this to work out if the input has data or not.\n   *\n   * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.\n   *\n   * You can override this for input directives whose concept of being empty is different to the\n   * default. The `checkboxInputType` directive does this because in its case a value of `false`\n   * implies empty.\n   *\n   * @param {*} value The value of the input to check for emptiness.\n   * @returns {boolean} True if `value` is \"empty\".\n   */\n  this.$isEmpty = function(value) {\n    return isUndefined(value) || value === '' || value === null || value !== value;\n  };\n\n  var parentForm = $element.inheritedData('$formController') || nullFormCtrl,\n      currentValidationRunId = 0;\n\n  /**\n   * @ngdoc method\n   * @name ngModel.NgModelController#$setValidity\n   *\n   * @description\n   * Change the validity state, and notify the form.\n   *\n   * This method can be called within $parsers/$formatters or a custom validation implementation.\n   * However, in most cases it should be sufficient to use the `ngModel.$validators` and\n   * `ngModel.$asyncValidators` collections which will call `$setValidity` automatically.\n   *\n   * @param {string} validationErrorKey Name of the validator. The `validationErrorKey` will be assigned\n   *        to either `$error[validationErrorKey]` or `$pending[validationErrorKey]`\n   *        (for unfulfilled `$asyncValidators`), so that it is available for data-binding.\n   *        The `validationErrorKey` should be in camelCase and will get converted into dash-case\n   *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`\n   *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .\n   * @param {boolean} isValid Whether the current state is valid (true), invalid (false), pending (undefined),\n   *                          or skipped (null). Pending is used for unfulfilled `$asyncValidators`.\n   *                          Skipped is used by Angular when validators do not run because of parse errors and\n   *                          when `$asyncValidators` do not run because any of the `$validators` failed.\n   */\n  addSetValidityMethod({\n    ctrl: this,\n    $element: $element,\n    set: function(object, property) {\n      object[property] = true;\n    },\n    unset: function(object, property) {\n      delete object[property];\n    },\n    parentForm: parentForm,\n    $animate: $animate\n  });\n\n  /**\n   * @ngdoc method\n   * @name ngModel.NgModelController#$setPristine\n   *\n   * @description\n   * Sets the control to its pristine state.\n   *\n   * This method can be called to remove the `ng-dirty` class and set the control to its pristine\n   * state (`ng-pristine` class). A model is considered to be pristine when the control\n   * has not been changed from when first compiled.\n   */\n  this.$setPristine = function() {\n    ctrl.$dirty = false;\n    ctrl.$pristine = true;\n    $animate.removeClass($element, DIRTY_CLASS);\n    $animate.addClass($element, PRISTINE_CLASS);\n  };\n\n  /**\n   * @ngdoc method\n   * @name ngModel.NgModelController#$setDirty\n   *\n   * @description\n   * Sets the control to its dirty state.\n   *\n   * This method can be called to remove the `ng-pristine` class and set the control to its dirty\n   * state (`ng-dirty` class). A model is considered to be dirty when the control has been changed\n   * from when first compiled.\n   */\n  this.$setDirty = function() {\n    ctrl.$dirty = true;\n    ctrl.$pristine = false;\n    $animate.removeClass($element, PRISTINE_CLASS);\n    $animate.addClass($element, DIRTY_CLASS);\n    parentForm.$setDirty();\n  };\n\n  /**\n   * @ngdoc method\n   * @name ngModel.NgModelController#$setUntouched\n   *\n   * @description\n   * Sets the control to its untouched state.\n   *\n   * This method can be called to remove the `ng-touched` class and set the control to its\n   * untouched state (`ng-untouched` class). Upon compilation, a model is set as untouched\n   * by default, however this function can be used to restore that state if the model has\n   * already been touched by the user.\n   */\n  this.$setUntouched = function() {\n    ctrl.$touched = false;\n    ctrl.$untouched = true;\n    $animate.setClass($element, UNTOUCHED_CLASS, TOUCHED_CLASS);\n  };\n\n  /**\n   * @ngdoc method\n   * @name ngModel.NgModelController#$setTouched\n   *\n   * @description\n   * Sets the control to its touched state.\n   *\n   * This method can be called to remove the `ng-untouched` class and set the control to its\n   * touched state (`ng-touched` class). A model is considered to be touched when the user has\n   * first focused the control element and then shifted focus away from the control (blur event).\n   */\n  this.$setTouched = function() {\n    ctrl.$touched = true;\n    ctrl.$untouched = false;\n    $animate.setClass($element, TOUCHED_CLASS, UNTOUCHED_CLASS);\n  };\n\n  /**\n   * @ngdoc method\n   * @name ngModel.NgModelController#$rollbackViewValue\n   *\n   * @description\n   * Cancel an update and reset the input element's value to prevent an update to the `$modelValue`,\n   * which may be caused by a pending debounced event or because the input is waiting for a some\n   * future event.\n   *\n   * If you have an input that uses `ng-model-options` to set up debounced events or events such\n   * as blur you can have a situation where there is a period when the `$viewValue`\n   * is out of synch with the ngModel's `$modelValue`.\n   *\n   * In this case, you can run into difficulties if you try to update the ngModel's `$modelValue`\n   * programmatically before these debounced/future events have resolved/occurred, because Angular's\n   * dirty checking mechanism is not able to tell whether the model has actually changed or not.\n   *\n   * The `$rollbackViewValue()` method should be called before programmatically changing the model of an\n   * input which may have such events pending. This is important in order to make sure that the\n   * input field will be updated with the new model value and any pending operations are cancelled.\n   *\n   * <example name=\"ng-model-cancel-update\" module=\"cancel-update-example\">\n   *   <file name=\"app.js\">\n   *     angular.module('cancel-update-example', [])\n   *\n   *     .controller('CancelUpdateController', ['$scope', function($scope) {\n   *       $scope.resetWithCancel = function(e) {\n   *         if (e.keyCode == 27) {\n   *           $scope.myForm.myInput1.$rollbackViewValue();\n   *           $scope.myValue = '';\n   *         }\n   *       };\n   *       $scope.resetWithoutCancel = function(e) {\n   *         if (e.keyCode == 27) {\n   *           $scope.myValue = '';\n   *         }\n   *       };\n   *     }]);\n   *   </file>\n   *   <file name=\"index.html\">\n   *     <div ng-controller=\"CancelUpdateController\">\n   *       <p>Try typing something in each input.  See that the model only updates when you\n   *          blur off the input.\n   *        </p>\n   *        <p>Now see what happens if you start typing then press the Escape key</p>\n   *\n   *       <form name=\"myForm\" ng-model-options=\"{ updateOn: 'blur' }\">\n   *         <p>With $rollbackViewValue()</p>\n   *         <input name=\"myInput1\" ng-model=\"myValue\" ng-keydown=\"resetWithCancel($event)\"><br/>\n   *         myValue: \"{{ myValue }}\"\n   *\n   *         <p>Without $rollbackViewValue()</p>\n   *         <input name=\"myInput2\" ng-model=\"myValue\" ng-keydown=\"resetWithoutCancel($event)\"><br/>\n   *         myValue: \"{{ myValue }}\"\n   *       </form>\n   *     </div>\n   *   </file>\n   * </example>\n   */\n  this.$rollbackViewValue = function() {\n    $timeout.cancel(pendingDebounce);\n    ctrl.$viewValue = ctrl.$$lastCommittedViewValue;\n    ctrl.$render();\n  };\n\n  /**\n   * @ngdoc method\n   * @name ngModel.NgModelController#$validate\n   *\n   * @description\n   * Runs each of the registered validators (first synchronous validators and then\n   * asynchronous validators).\n   * If the validity changes to invalid, the model will be set to `undefined`,\n   * unless {@link ngModelOptions `ngModelOptions.allowInvalid`} is `true`.\n   * If the validity changes to valid, it will set the model to the last available valid\n   * `$modelValue`, i.e. either the last parsed value or the last value set from the scope.\n   */\n  this.$validate = function() {\n    // ignore $validate before model is initialized\n    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {\n      return;\n    }\n\n    var viewValue = ctrl.$$lastCommittedViewValue;\n    // Note: we use the $$rawModelValue as $modelValue might have been\n    // set to undefined during a view -> model update that found validation\n    // errors. We can't parse the view here, since that could change\n    // the model although neither viewValue nor the model on the scope changed\n    var modelValue = ctrl.$$rawModelValue;\n\n    var prevValid = ctrl.$valid;\n    var prevModelValue = ctrl.$modelValue;\n\n    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;\n\n    ctrl.$$runValidators(modelValue, viewValue, function(allValid) {\n      // If there was no change in validity, don't update the model\n      // This prevents changing an invalid modelValue to undefined\n      if (!allowInvalid && prevValid !== allValid) {\n        // Note: Don't check ctrl.$valid here, as we could have\n        // external validators (e.g. calculated on the server),\n        // that just call $setValidity and need the model value\n        // to calculate their validity.\n        ctrl.$modelValue = allValid ? modelValue : undefined;\n\n        if (ctrl.$modelValue !== prevModelValue) {\n          ctrl.$$writeModelToScope();\n        }\n      }\n    });\n\n  };\n\n  this.$$runValidators = function(modelValue, viewValue, doneCallback) {\n    currentValidationRunId++;\n    var localValidationRunId = currentValidationRunId;\n\n    // check parser error\n    if (!processParseErrors()) {\n      validationDone(false);\n      return;\n    }\n    if (!processSyncValidators()) {\n      validationDone(false);\n      return;\n    }\n    processAsyncValidators();\n\n    function processParseErrors() {\n      var errorKey = ctrl.$$parserName || 'parse';\n      if (parserValid === undefined) {\n        setValidity(errorKey, null);\n      } else {\n        if (!parserValid) {\n          forEach(ctrl.$validators, function(v, name) {\n            setValidity(name, null);\n          });\n          forEach(ctrl.$asyncValidators, function(v, name) {\n            setValidity(name, null);\n          });\n        }\n        // Set the parse error last, to prevent unsetting it, should a $validators key == parserName\n        setValidity(errorKey, parserValid);\n        return parserValid;\n      }\n      return true;\n    }\n\n    function processSyncValidators() {\n      var syncValidatorsValid = true;\n      forEach(ctrl.$validators, function(validator, name) {\n        var result = validator(modelValue, viewValue);\n        syncValidatorsValid = syncValidatorsValid && result;\n        setValidity(name, result);\n      });\n      if (!syncValidatorsValid) {\n        forEach(ctrl.$asyncValidators, function(v, name) {\n          setValidity(name, null);\n        });\n        return false;\n      }\n      return true;\n    }\n\n    function processAsyncValidators() {\n      var validatorPromises = [];\n      var allValid = true;\n      forEach(ctrl.$asyncValidators, function(validator, name) {\n        var promise = validator(modelValue, viewValue);\n        if (!isPromiseLike(promise)) {\n          throw ngModelMinErr(\"$asyncValidators\",\n            \"Expected asynchronous validator to return a promise but got '{0}' instead.\", promise);\n        }\n        setValidity(name, undefined);\n        validatorPromises.push(promise.then(function() {\n          setValidity(name, true);\n        }, function(error) {\n          allValid = false;\n          setValidity(name, false);\n        }));\n      });\n      if (!validatorPromises.length) {\n        validationDone(true);\n      } else {\n        $q.all(validatorPromises).then(function() {\n          validationDone(allValid);\n        }, noop);\n      }\n    }\n\n    function setValidity(name, isValid) {\n      if (localValidationRunId === currentValidationRunId) {\n        ctrl.$setValidity(name, isValid);\n      }\n    }\n\n    function validationDone(allValid) {\n      if (localValidationRunId === currentValidationRunId) {\n\n        doneCallback(allValid);\n      }\n    }\n  };\n\n  /**\n   * @ngdoc method\n   * @name ngModel.NgModelController#$commitViewValue\n   *\n   * @description\n   * Commit a pending update to the `$modelValue`.\n   *\n   * Updates may be pending by a debounced event or because the input is waiting for a some future\n   * event defined in `ng-model-options`. this method is rarely needed as `NgModelController`\n   * usually handles calling this in response to input events.\n   */\n  this.$commitViewValue = function() {\n    var viewValue = ctrl.$viewValue;\n\n    $timeout.cancel(pendingDebounce);\n\n    // If the view value has not changed then we should just exit, except in the case where there is\n    // a native validator on the element. In this case the validation state may have changed even though\n    // the viewValue has stayed empty.\n    if (ctrl.$$lastCommittedViewValue === viewValue && (viewValue !== '' || !ctrl.$$hasNativeValidators)) {\n      return;\n    }\n    ctrl.$$lastCommittedViewValue = viewValue;\n\n    // change to dirty\n    if (ctrl.$pristine) {\n      this.$setDirty();\n    }\n    this.$$parseAndValidate();\n  };\n\n  this.$$parseAndValidate = function() {\n    var viewValue = ctrl.$$lastCommittedViewValue;\n    var modelValue = viewValue;\n    parserValid = isUndefined(modelValue) ? undefined : true;\n\n    if (parserValid) {\n      for (var i = 0; i < ctrl.$parsers.length; i++) {\n        modelValue = ctrl.$parsers[i](modelValue);\n        if (isUndefined(modelValue)) {\n          parserValid = false;\n          break;\n        }\n      }\n    }\n    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {\n      // ctrl.$modelValue has not been touched yet...\n      ctrl.$modelValue = ngModelGet($scope);\n    }\n    var prevModelValue = ctrl.$modelValue;\n    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;\n    ctrl.$$rawModelValue = modelValue;\n\n    if (allowInvalid) {\n      ctrl.$modelValue = modelValue;\n      writeToModelIfNeeded();\n    }\n\n    // Pass the $$lastCommittedViewValue here, because the cached viewValue might be out of date.\n    // This can happen if e.g. $setViewValue is called from inside a parser\n    ctrl.$$runValidators(modelValue, ctrl.$$lastCommittedViewValue, function(allValid) {\n      if (!allowInvalid) {\n        // Note: Don't check ctrl.$valid here, as we could have\n        // external validators (e.g. calculated on the server),\n        // that just call $setValidity and need the model value\n        // to calculate their validity.\n        ctrl.$modelValue = allValid ? modelValue : undefined;\n        writeToModelIfNeeded();\n      }\n    });\n\n    function writeToModelIfNeeded() {\n      if (ctrl.$modelValue !== prevModelValue) {\n        ctrl.$$writeModelToScope();\n      }\n    }\n  };\n\n  this.$$writeModelToScope = function() {\n    ngModelSet($scope, ctrl.$modelValue);\n    forEach(ctrl.$viewChangeListeners, function(listener) {\n      try {\n        listener();\n      } catch (e) {\n        $exceptionHandler(e);\n      }\n    });\n  };\n\n  /**\n   * @ngdoc method\n   * @name ngModel.NgModelController#$setViewValue\n   *\n   * @description\n   * Update the view value.\n   *\n   * This method should be called when an input directive want to change the view value; typically,\n   * this is done from within a DOM event handler.\n   *\n   * For example {@link ng.directive:input input} calls it when the value of the input changes and\n   * {@link ng.directive:select select} calls it when an option is selected.\n   *\n   * If the new `value` is an object (rather than a string or a number), we should make a copy of the\n   * object before passing it to `$setViewValue`.  This is because `ngModel` does not perform a deep\n   * watch of objects, it only looks for a change of identity. If you only change the property of\n   * the object then ngModel will not realise that the object has changed and will not invoke the\n   * `$parsers` and `$validators` pipelines.\n   *\n   * For this reason, you should not change properties of the copy once it has been passed to\n   * `$setViewValue`. Otherwise you may cause the model value on the scope to change incorrectly.\n   *\n   * When this method is called, the new `value` will be staged for committing through the `$parsers`\n   * and `$validators` pipelines. If there are no special {@link ngModelOptions} specified then the staged\n   * value sent directly for processing, finally to be applied to `$modelValue` and then the\n   * **expression** specified in the `ng-model` attribute.\n   *\n   * Lastly, all the registered change listeners, in the `$viewChangeListeners` list, are called.\n   *\n   * In case the {@link ng.directive:ngModelOptions ngModelOptions} directive is used with `updateOn`\n   * and the `default` trigger is not listed, all those actions will remain pending until one of the\n   * `updateOn` events is triggered on the DOM element.\n   * All these actions will be debounced if the {@link ng.directive:ngModelOptions ngModelOptions}\n   * directive is used with a custom debounce for this particular event.\n   *\n   * Note that calling this function does not trigger a `$digest`.\n   *\n   * @param {string} value Value from the view.\n   * @param {string} trigger Event that triggered the update.\n   */\n  this.$setViewValue = function(value, trigger) {\n    ctrl.$viewValue = value;\n    if (!ctrl.$options || ctrl.$options.updateOnDefault) {\n      ctrl.$$debounceViewValueCommit(trigger);\n    }\n  };\n\n  this.$$debounceViewValueCommit = function(trigger) {\n    var debounceDelay = 0,\n        options = ctrl.$options,\n        debounce;\n\n    if (options && isDefined(options.debounce)) {\n      debounce = options.debounce;\n      if (isNumber(debounce)) {\n        debounceDelay = debounce;\n      } else if (isNumber(debounce[trigger])) {\n        debounceDelay = debounce[trigger];\n      } else if (isNumber(debounce['default'])) {\n        debounceDelay = debounce['default'];\n      }\n    }\n\n    $timeout.cancel(pendingDebounce);\n    if (debounceDelay) {\n      pendingDebounce = $timeout(function() {\n        ctrl.$commitViewValue();\n      }, debounceDelay);\n    } else if ($rootScope.$$phase) {\n      ctrl.$commitViewValue();\n    } else {\n      $scope.$apply(function() {\n        ctrl.$commitViewValue();\n      });\n    }\n  };\n\n  // model -> value\n  // Note: we cannot use a normal scope.$watch as we want to detect the following:\n  // 1. scope value is 'a'\n  // 2. user enters 'b'\n  // 3. ng-change kicks in and reverts scope value to 'a'\n  //    -> scope value did not change since the last digest as\n  //       ng-change executes in apply phase\n  // 4. view should be changed back to 'a'\n  $scope.$watch(function ngModelWatch() {\n    var modelValue = ngModelGet($scope);\n\n    // if scope model value and ngModel value are out of sync\n    // TODO(perf): why not move this to the action fn?\n    if (modelValue !== ctrl.$modelValue &&\n       // checks for NaN is needed to allow setting the model to NaN when there's an asyncValidator\n       (ctrl.$modelValue === ctrl.$modelValue || modelValue === modelValue)\n    ) {\n      ctrl.$modelValue = ctrl.$$rawModelValue = modelValue;\n      parserValid = undefined;\n\n      var formatters = ctrl.$formatters,\n          idx = formatters.length;\n\n      var viewValue = modelValue;\n      while (idx--) {\n        viewValue = formatters[idx](viewValue);\n      }\n      if (ctrl.$viewValue !== viewValue) {\n        ctrl.$viewValue = ctrl.$$lastCommittedViewValue = viewValue;\n        ctrl.$render();\n\n        ctrl.$$runValidators(modelValue, viewValue, noop);\n      }\n    }\n\n    return modelValue;\n  });\n}];\n\n\n/**\n * @ngdoc directive\n * @name ngModel\n *\n * @element input\n * @priority 1\n *\n * @description\n * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a\n * property on the scope using {@link ngModel.NgModelController NgModelController},\n * which is created and exposed by this directive.\n *\n * `ngModel` is responsible for:\n *\n * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`\n *   require.\n * - Providing validation behavior (i.e. required, number, email, url).\n * - Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).\n * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`, `ng-touched`, `ng-untouched`) including animations.\n * - Registering the control with its parent {@link ng.directive:form form}.\n *\n * Note: `ngModel` will try to bind to the property given by evaluating the expression on the\n * current scope. If the property doesn't already exist on this scope, it will be created\n * implicitly and added to the scope.\n *\n * For best practices on using `ngModel`, see:\n *\n *  - [Understanding Scopes](https://github.com/angular/angular.js/wiki/Understanding-Scopes)\n *\n * For basic examples, how to use `ngModel`, see:\n *\n *  - {@link ng.directive:input input}\n *    - {@link input[text] text}\n *    - {@link input[checkbox] checkbox}\n *    - {@link input[radio] radio}\n *    - {@link input[number] number}\n *    - {@link input[email] email}\n *    - {@link input[url] url}\n *    - {@link input[date] date}\n *    - {@link input[datetime-local] datetime-local}\n *    - {@link input[time] time}\n *    - {@link input[month] month}\n *    - {@link input[week] week}\n *  - {@link ng.directive:select select}\n *  - {@link ng.directive:textarea textarea}\n *\n * # CSS classes\n * The following CSS classes are added and removed on the associated input/select/textarea element\n * depending on the validity of the model.\n *\n *  - `ng-valid`: the model is valid\n *  - `ng-invalid`: the model is invalid\n *  - `ng-valid-[key]`: for each valid key added by `$setValidity`\n *  - `ng-invalid-[key]`: for each invalid key added by `$setValidity`\n *  - `ng-pristine`: the control hasn't been interacted with yet\n *  - `ng-dirty`: the control has been interacted with\n *  - `ng-touched`: the control has been blurred\n *  - `ng-untouched`: the control hasn't been blurred\n *  - `ng-pending`: any `$asyncValidators` are unfulfilled\n *\n * Keep in mind that ngAnimate can detect each of these classes when added and removed.\n *\n * ## Animation Hooks\n *\n * Animations within models are triggered when any of the associated CSS classes are added and removed\n * on the input element which is attached to the model. These classes are: `.ng-pristine`, `.ng-dirty`,\n * `.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.\n * The animations that are triggered within ngModel are similar to how they work in ngClass and\n * animations can be hooked into using CSS transitions, keyframes as well as JS animations.\n *\n * The following example shows a simple way to utilize CSS transitions to style an input element\n * that has been rendered as invalid after it has been validated:\n *\n * <pre>\n * //be sure to include ngAnimate as a module to hook into more\n * //advanced animations\n * .my-input {\n *   transition:0.5s linear all;\n *   background: white;\n * }\n * .my-input.ng-invalid {\n *   background: red;\n *   color:white;\n * }\n * </pre>\n *\n * @example\n * <example deps=\"angular-animate.js\" animations=\"true\" fixBase=\"true\" module=\"inputExample\">\n     <file name=\"index.html\">\n       <script>\n        angular.module('inputExample', [])\n          .controller('ExampleController', ['$scope', function($scope) {\n            $scope.val = '1';\n          }]);\n       </script>\n       <style>\n         .my-input {\n           -webkit-transition:all linear 0.5s;\n           transition:all linear 0.5s;\n           background: transparent;\n         }\n         .my-input.ng-invalid {\n           color:white;\n           background: red;\n         }\n       </style>\n       Update input to see transitions when valid/invalid.\n       Integer is a valid value.\n       <form name=\"testForm\" ng-controller=\"ExampleController\">\n         <input ng-model=\"val\" ng-pattern=\"/^\\d+$/\" name=\"anim\" class=\"my-input\" />\n       </form>\n     </file>\n * </example>\n *\n * ## Binding to a getter/setter\n *\n * Sometimes it's helpful to bind `ngModel` to a getter/setter function.  A getter/setter is a\n * function that returns a representation of the model when called with zero arguments, and sets\n * the internal state of a model when called with an argument. It's sometimes useful to use this\n * for models that have an internal representation that's different than what the model exposes\n * to the view.\n *\n * <div class=\"alert alert-success\">\n * **Best Practice:** It's best to keep getters fast because Angular is likely to call them more\n * frequently than other parts of your code.\n * </div>\n *\n * You use this behavior by adding `ng-model-options=\"{ getterSetter: true }\"` to an element that\n * has `ng-model` attached to it. You can also add `ng-model-options=\"{ getterSetter: true }\"` to\n * a `<form>`, which will enable this behavior for all `<input>`s within it. See\n * {@link ng.directive:ngModelOptions `ngModelOptions`} for more.\n *\n * The following example shows how to use `ngModel` with a getter/setter:\n *\n * @example\n * <example name=\"ngModel-getter-setter\" module=\"getterSetterExample\">\n     <file name=\"index.html\">\n       <div ng-controller=\"ExampleController\">\n         <form name=\"userForm\">\n           Name:\n           <input type=\"text\" name=\"userName\"\n                  ng-model=\"user.name\"\n                  ng-model-options=\"{ getterSetter: true }\" />\n         </form>\n         <pre>user.name = <span ng-bind=\"user.name()\"></span></pre>\n       </div>\n     </file>\n     <file name=\"app.js\">\n       angular.module('getterSetterExample', [])\n         .controller('ExampleController', ['$scope', function($scope) {\n           var _name = 'Brian';\n           $scope.user = {\n             name: function(newName) {\n              // Note that newName can be undefined for two reasons:\n              // 1. Because it is called as a getter and thus called with no arguments\n              // 2. Because the property should actually be set to undefined. This happens e.g. if the\n              //    input is invalid\n              return arguments.length ? (_name = newName) : _name;\n             }\n           };\n         }]);\n     </file>\n * </example>\n */\nvar ngModelDirective = ['$rootScope', function($rootScope) {\n  return {\n    restrict: 'A',\n    require: ['ngModel', '^?form', '^?ngModelOptions'],\n    controller: NgModelController,\n    // Prelink needs to run before any input directive\n    // so that we can set the NgModelOptions in NgModelController\n    // before anyone else uses it.\n    priority: 1,\n    compile: function ngModelCompile(element) {\n      // Setup initial state of the control\n      element.addClass(PRISTINE_CLASS).addClass(UNTOUCHED_CLASS).addClass(VALID_CLASS);\n\n      return {\n        pre: function ngModelPreLink(scope, element, attr, ctrls) {\n          var modelCtrl = ctrls[0],\n              formCtrl = ctrls[1] || nullFormCtrl;\n\n          modelCtrl.$$setOptions(ctrls[2] && ctrls[2].$options);\n\n          // notify others, especially parent forms\n          formCtrl.$addControl(modelCtrl);\n\n          attr.$observe('name', function(newValue) {\n            if (modelCtrl.$name !== newValue) {\n              formCtrl.$$renameControl(modelCtrl, newValue);\n            }\n          });\n\n          scope.$on('$destroy', function() {\n            formCtrl.$removeControl(modelCtrl);\n          });\n        },\n        post: function ngModelPostLink(scope, element, attr, ctrls) {\n          var modelCtrl = ctrls[0];\n          if (modelCtrl.$options && modelCtrl.$options.updateOn) {\n            element.on(modelCtrl.$options.updateOn, function(ev) {\n              modelCtrl.$$debounceViewValueCommit(ev && ev.type);\n            });\n          }\n\n          element.on('blur', function(ev) {\n            if (modelCtrl.$touched) return;\n\n            if ($rootScope.$$phase) {\n              scope.$evalAsync(modelCtrl.$setTouched);\n            } else {\n              scope.$apply(modelCtrl.$setTouched);\n            }\n          });\n        }\n      };\n    }\n  };\n}];\n\nvar DEFAULT_REGEXP = /(\\s+|^)default(\\s+|$)/;\n\n/**\n * @ngdoc directive\n * @name ngModelOptions\n *\n * @description\n * Allows tuning how model updates are done. Using `ngModelOptions` you can specify a custom list of\n * events that will trigger a model update and/or a debouncing delay so that the actual update only\n * takes place when a timer expires; this timer will be reset after another change takes place.\n *\n * Given the nature of `ngModelOptions`, the value displayed inside input fields in the view might\n * be different than the value in the actual model. This means that if you update the model you\n * should also invoke {@link ngModel.NgModelController `$rollbackViewValue`} on the relevant input field in\n * order to make sure it is synchronized with the model and that any debounced action is canceled.\n *\n * The easiest way to reference the control's {@link ngModel.NgModelController `$rollbackViewValue`}\n * method is by making sure the input is placed inside a form that has a `name` attribute. This is\n * important because `form` controllers are published to the related scope under the name in their\n * `name` attribute.\n *\n * Any pending changes will take place immediately when an enclosing form is submitted via the\n * `submit` event. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`\n * to have access to the updated model.\n *\n * `ngModelOptions` has an effect on the element it's declared on and its descendants.\n *\n * @param {Object} ngModelOptions options to apply to the current model. Valid keys are:\n *   - `updateOn`: string specifying which event should the input be bound to. You can set several\n *     events using an space delimited list. There is a special event called `default` that\n *     matches the default events belonging of the control.\n *   - `debounce`: integer value which contains the debounce model update value in milliseconds. A\n *     value of 0 triggers an immediate update. If an object is supplied instead, you can specify a\n *     custom value for each event. For example:\n *     `ng-model-options=\"{ updateOn: 'default blur', debounce: {'default': 500, 'blur': 0} }\"`\n *   - `allowInvalid`: boolean value which indicates that the model can be set with values that did\n *     not validate correctly instead of the default behavior of setting the model to undefined.\n *   - `getterSetter`: boolean value which determines whether or not to treat functions bound to\n       `ngModel` as getters/setters.\n *   - `timezone`: Defines the timezone to be used to read/write the `Date` instance in the model for\n *     `<input type=\"date\">`, `<input type=\"time\">`, ... . Right now, the only supported value is `'UTC'`,\n *     otherwise the default timezone of the browser will be used.\n *\n * @example\n\n  The following example shows how to override immediate updates. Changes on the inputs within the\n  form will update the model only when the control loses focus (blur event). If `escape` key is\n  pressed while the input field is focused, the value is reset to the value in the current model.\n\n  <example name=\"ngModelOptions-directive-blur\" module=\"optionsExample\">\n    <file name=\"index.html\">\n      <div ng-controller=\"ExampleController\">\n        <form name=\"userForm\">\n          Name:\n          <input type=\"text\" name=\"userName\"\n                 ng-model=\"user.name\"\n                 ng-model-options=\"{ updateOn: 'blur' }\"\n                 ng-keyup=\"cancel($event)\" /><br />\n\n          Other data:\n          <input type=\"text\" ng-model=\"user.data\" /><br />\n        </form>\n        <pre>user.name = <span ng-bind=\"user.name\"></span></pre>\n      </div>\n    </file>\n    <file name=\"app.js\">\n      angular.module('optionsExample', [])\n        .controller('ExampleController', ['$scope', function($scope) {\n          $scope.user = { name: 'say', data: '' };\n\n          $scope.cancel = function(e) {\n            if (e.keyCode == 27) {\n              $scope.userForm.userName.$rollbackViewValue();\n            }\n          };\n        }]);\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      var model = element(by.binding('user.name'));\n      var input = element(by.model('user.name'));\n      var other = element(by.model('user.data'));\n\n      it('should allow custom events', function() {\n        input.sendKeys(' hello');\n        input.click();\n        expect(model.getText()).toEqual('say');\n        other.click();\n        expect(model.getText()).toEqual('say hello');\n      });\n\n      it('should $rollbackViewValue when model changes', function() {\n        input.sendKeys(' hello');\n        expect(input.getAttribute('value')).toEqual('say hello');\n        input.sendKeys(protractor.Key.ESCAPE);\n        expect(input.getAttribute('value')).toEqual('say');\n        other.click();\n        expect(model.getText()).toEqual('say');\n      });\n    </file>\n  </example>\n\n  This one shows how to debounce model changes. Model will be updated only 1 sec after last change.\n  If the `Clear` button is pressed, any debounced action is canceled and the value becomes empty.\n\n  <example name=\"ngModelOptions-directive-debounce\" module=\"optionsExample\">\n    <file name=\"index.html\">\n      <div ng-controller=\"ExampleController\">\n        <form name=\"userForm\">\n          Name:\n          <input type=\"text\" name=\"userName\"\n                 ng-model=\"user.name\"\n                 ng-model-options=\"{ debounce: 1000 }\" />\n          <button ng-click=\"userForm.userName.$rollbackViewValue(); user.name=''\">Clear</button><br />\n        </form>\n        <pre>user.name = <span ng-bind=\"user.name\"></span></pre>\n      </div>\n    </file>\n    <file name=\"app.js\">\n      angular.module('optionsExample', [])\n        .controller('ExampleController', ['$scope', function($scope) {\n          $scope.user = { name: 'say' };\n        }]);\n    </file>\n  </example>\n\n  This one shows how to bind to getter/setters:\n\n  <example name=\"ngModelOptions-directive-getter-setter\" module=\"getterSetterExample\">\n    <file name=\"index.html\">\n      <div ng-controller=\"ExampleController\">\n        <form name=\"userForm\">\n          Name:\n          <input type=\"text\" name=\"userName\"\n                 ng-model=\"user.name\"\n                 ng-model-options=\"{ getterSetter: true }\" />\n        </form>\n        <pre>user.name = <span ng-bind=\"user.name()\"></span></pre>\n      </div>\n    </file>\n    <file name=\"app.js\">\n      angular.module('getterSetterExample', [])\n        .controller('ExampleController', ['$scope', function($scope) {\n          var _name = 'Brian';\n          $scope.user = {\n            name: function(newName) {\n              // Note that newName can be undefined for two reasons:\n              // 1. Because it is called as a getter and thus called with no arguments\n              // 2. Because the property should actually be set to undefined. This happens e.g. if the\n              //    input is invalid\n              return arguments.length ? (_name = newName) : _name;\n            }\n          };\n        }]);\n    </file>\n  </example>\n */\nvar ngModelOptionsDirective = function() {\n  return {\n    restrict: 'A',\n    controller: ['$scope', '$attrs', function($scope, $attrs) {\n      var that = this;\n      this.$options = $scope.$eval($attrs.ngModelOptions);\n      // Allow adding/overriding bound events\n      if (this.$options.updateOn !== undefined) {\n        this.$options.updateOnDefault = false;\n        // extract \"default\" pseudo-event from list of events that can trigger a model update\n        this.$options.updateOn = trim(this.$options.updateOn.replace(DEFAULT_REGEXP, function() {\n          that.$options.updateOnDefault = true;\n          return ' ';\n        }));\n      } else {\n        this.$options.updateOnDefault = true;\n      }\n    }]\n  };\n};\n\n\n\n// helper methods\nfunction addSetValidityMethod(context) {\n  var ctrl = context.ctrl,\n      $element = context.$element,\n      classCache = {},\n      set = context.set,\n      unset = context.unset,\n      parentForm = context.parentForm,\n      $animate = context.$animate;\n\n  classCache[INVALID_CLASS] = !(classCache[VALID_CLASS] = $element.hasClass(VALID_CLASS));\n\n  ctrl.$setValidity = setValidity;\n\n  function setValidity(validationErrorKey, state, controller) {\n    if (state === undefined) {\n      createAndSet('$pending', validationErrorKey, controller);\n    } else {\n      unsetAndCleanup('$pending', validationErrorKey, controller);\n    }\n    if (!isBoolean(state)) {\n      unset(ctrl.$error, validationErrorKey, controller);\n      unset(ctrl.$$success, validationErrorKey, controller);\n    } else {\n      if (state) {\n        unset(ctrl.$error, validationErrorKey, controller);\n        set(ctrl.$$success, validationErrorKey, controller);\n      } else {\n        set(ctrl.$error, validationErrorKey, controller);\n        unset(ctrl.$$success, validationErrorKey, controller);\n      }\n    }\n    if (ctrl.$pending) {\n      cachedToggleClass(PENDING_CLASS, true);\n      ctrl.$valid = ctrl.$invalid = undefined;\n      toggleValidationCss('', null);\n    } else {\n      cachedToggleClass(PENDING_CLASS, false);\n      ctrl.$valid = isObjectEmpty(ctrl.$error);\n      ctrl.$invalid = !ctrl.$valid;\n      toggleValidationCss('', ctrl.$valid);\n    }\n\n    // re-read the state as the set/unset methods could have\n    // combined state in ctrl.$error[validationError] (used for forms),\n    // where setting/unsetting only increments/decrements the value,\n    // and does not replace it.\n    var combinedState;\n    if (ctrl.$pending && ctrl.$pending[validationErrorKey]) {\n      combinedState = undefined;\n    } else if (ctrl.$error[validationErrorKey]) {\n      combinedState = false;\n    } else if (ctrl.$$success[validationErrorKey]) {\n      combinedState = true;\n    } else {\n      combinedState = null;\n    }\n\n    toggleValidationCss(validationErrorKey, combinedState);\n    parentForm.$setValidity(validationErrorKey, combinedState, ctrl);\n  }\n\n  function createAndSet(name, value, controller) {\n    if (!ctrl[name]) {\n      ctrl[name] = {};\n    }\n    set(ctrl[name], value, controller);\n  }\n\n  function unsetAndCleanup(name, value, controller) {\n    if (ctrl[name]) {\n      unset(ctrl[name], value, controller);\n    }\n    if (isObjectEmpty(ctrl[name])) {\n      ctrl[name] = undefined;\n    }\n  }\n\n  function cachedToggleClass(className, switchValue) {\n    if (switchValue && !classCache[className]) {\n      $animate.addClass($element, className);\n      classCache[className] = true;\n    } else if (!switchValue && classCache[className]) {\n      $animate.removeClass($element, className);\n      classCache[className] = false;\n    }\n  }\n\n  function toggleValidationCss(validationErrorKey, isValid) {\n    validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';\n\n    cachedToggleClass(VALID_CLASS + validationErrorKey, isValid === true);\n    cachedToggleClass(INVALID_CLASS + validationErrorKey, isValid === false);\n  }\n}\n\nfunction isObjectEmpty(obj) {\n  if (obj) {\n    for (var prop in obj) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * @ngdoc directive\n * @name ngNonBindable\n * @restrict AC\n * @priority 1000\n *\n * @description\n * The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current\n * DOM element. This is useful if the element contains what appears to be Angular directives and\n * bindings but which should be ignored by Angular. This could be the case if you have a site that\n * displays snippets of code, for instance.\n *\n * @element ANY\n *\n * @example\n * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,\n * but the one wrapped in `ngNonBindable` is left alone.\n *\n * @example\n    <example>\n      <file name=\"index.html\">\n        <div>Normal: {{1 + 2}}</div>\n        <div ng-non-bindable>Ignored: {{1 + 2}}</div>\n      </file>\n      <file name=\"protractor.js\" type=\"protractor\">\n       it('should check ng-non-bindable', function() {\n         expect(element(by.binding('1 + 2')).getText()).toContain('3');\n         expect(element.all(by.css('div')).last().getText()).toMatch(/1 \\+ 2/);\n       });\n      </file>\n    </example>\n */\nvar ngNonBindableDirective = ngDirective({ terminal: true, priority: 1000 });\n\n/**\n * @ngdoc directive\n * @name ngPluralize\n * @restrict EA\n *\n * @description\n * `ngPluralize` is a directive that displays messages according to en-US localization rules.\n * These rules are bundled with angular.js, but can be overridden\n * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive\n * by specifying the mappings between\n * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)\n * and the strings to be displayed.\n *\n * # Plural categories and explicit number rules\n * There are two\n * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)\n * in Angular's default en-US locale: \"one\" and \"other\".\n *\n * While a plural category may match many numbers (for example, in en-US locale, \"other\" can match\n * any number that is not 1), an explicit number rule can only match one number. For example, the\n * explicit number rule for \"3\" matches the number 3. There are examples of plural categories\n * and explicit number rules throughout the rest of this documentation.\n *\n * # Configuring ngPluralize\n * You configure ngPluralize by providing 2 attributes: `count` and `when`.\n * You can also provide an optional attribute, `offset`.\n *\n * The value of the `count` attribute can be either a string or an {@link guide/expression\n * Angular expression}; these are evaluated on the current scope for its bound value.\n *\n * The `when` attribute specifies the mappings between plural categories and the actual\n * string to be displayed. The value of the attribute should be a JSON object.\n *\n * The following example shows how to configure ngPluralize:\n *\n * ```html\n * <ng-pluralize count=\"personCount\"\n                 when=\"{'0': 'Nobody is viewing.',\n *                      'one': '1 person is viewing.',\n *                      'other': '{} people are viewing.'}\">\n * </ng-pluralize>\n *```\n *\n * In the example, `\"0: Nobody is viewing.\"` is an explicit number rule. If you did not\n * specify this rule, 0 would be matched to the \"other\" category and \"0 people are viewing\"\n * would be shown instead of \"Nobody is viewing\". You can specify an explicit number rule for\n * other numbers, for example 12, so that instead of showing \"12 people are viewing\", you can\n * show \"a dozen people are viewing\".\n *\n * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted\n * into pluralized strings. In the previous example, Angular will replace `{}` with\n * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder\n * for <span ng-non-bindable>{{numberExpression}}</span>.\n *\n * # Configuring ngPluralize with offset\n * The `offset` attribute allows further customization of pluralized text, which can result in\n * a better user experience. For example, instead of the message \"4 people are viewing this document\",\n * you might display \"John, Kate and 2 others are viewing this document\".\n * The offset attribute allows you to offset a number by any desired value.\n * Let's take a look at an example:\n *\n * ```html\n * <ng-pluralize count=\"personCount\" offset=2\n *               when=\"{'0': 'Nobody is viewing.',\n *                      '1': '{{person1}} is viewing.',\n *                      '2': '{{person1}} and {{person2}} are viewing.',\n *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',\n *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}\">\n * </ng-pluralize>\n * ```\n *\n * Notice that we are still using two plural categories(one, other), but we added\n * three explicit number rules 0, 1 and 2.\n * When one person, perhaps John, views the document, \"John is viewing\" will be shown.\n * When three people view the document, no explicit number rule is found, so\n * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.\n * In this case, plural category 'one' is matched and \"John, Mary and one other person are viewing\"\n * is shown.\n *\n * Note that when you specify offsets, you must provide explicit number rules for\n * numbers from 0 up to and including the offset. If you use an offset of 3, for example,\n * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for\n * plural categories \"one\" and \"other\".\n *\n * @param {string|expression} count The variable to be bound to.\n * @param {string} when The mapping between plural category to its corresponding strings.\n * @param {number=} offset Offset to deduct from the total number.\n *\n * @example\n    <example module=\"pluralizeExample\">\n      <file name=\"index.html\">\n        <script>\n          angular.module('pluralizeExample', [])\n            .controller('ExampleController', ['$scope', function($scope) {\n              $scope.person1 = 'Igor';\n              $scope.person2 = 'Misko';\n              $scope.personCount = 1;\n            }]);\n        </script>\n        <div ng-controller=\"ExampleController\">\n          Person 1:<input type=\"text\" ng-model=\"person1\" value=\"Igor\" /><br/>\n          Person 2:<input type=\"text\" ng-model=\"person2\" value=\"Misko\" /><br/>\n          Number of People:<input type=\"text\" ng-model=\"personCount\" value=\"1\" /><br/>\n\n          <!--- Example with simple pluralization rules for en locale --->\n          Without Offset:\n          <ng-pluralize count=\"personCount\"\n                        when=\"{'0': 'Nobody is viewing.',\n                               'one': '1 person is viewing.',\n                               'other': '{} people are viewing.'}\">\n          </ng-pluralize><br>\n\n          <!--- Example with offset --->\n          With Offset(2):\n          <ng-pluralize count=\"personCount\" offset=2\n                        when=\"{'0': 'Nobody is viewing.',\n                               '1': '{{person1}} is viewing.',\n                               '2': '{{person1}} and {{person2}} are viewing.',\n                               'one': '{{person1}}, {{person2}} and one other person are viewing.',\n                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}\">\n          </ng-pluralize>\n        </div>\n      </file>\n      <file name=\"protractor.js\" type=\"protractor\">\n        it('should show correct pluralized string', function() {\n          var withoutOffset = element.all(by.css('ng-pluralize')).get(0);\n          var withOffset = element.all(by.css('ng-pluralize')).get(1);\n          var countInput = element(by.model('personCount'));\n\n          expect(withoutOffset.getText()).toEqual('1 person is viewing.');\n          expect(withOffset.getText()).toEqual('Igor is viewing.');\n\n          countInput.clear();\n          countInput.sendKeys('0');\n\n          expect(withoutOffset.getText()).toEqual('Nobody is viewing.');\n          expect(withOffset.getText()).toEqual('Nobody is viewing.');\n\n          countInput.clear();\n          countInput.sendKeys('2');\n\n          expect(withoutOffset.getText()).toEqual('2 people are viewing.');\n          expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');\n\n          countInput.clear();\n          countInput.sendKeys('3');\n\n          expect(withoutOffset.getText()).toEqual('3 people are viewing.');\n          expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');\n\n          countInput.clear();\n          countInput.sendKeys('4');\n\n          expect(withoutOffset.getText()).toEqual('4 people are viewing.');\n          expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');\n        });\n        it('should show data-bound names', function() {\n          var withOffset = element.all(by.css('ng-pluralize')).get(1);\n          var personCount = element(by.model('personCount'));\n          var person1 = element(by.model('person1'));\n          var person2 = element(by.model('person2'));\n          personCount.clear();\n          personCount.sendKeys('4');\n          person1.clear();\n          person1.sendKeys('Di');\n          person2.clear();\n          person2.sendKeys('Vojta');\n          expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');\n        });\n      </file>\n    </example>\n */\nvar ngPluralizeDirective = ['$locale', '$interpolate', function($locale, $interpolate) {\n  var BRACE = /{}/g,\n      IS_WHEN = /^when(Minus)?(.+)$/;\n\n  return {\n    restrict: 'EA',\n    link: function(scope, element, attr) {\n      var numberExp = attr.count,\n          whenExp = attr.$attr.when && element.attr(attr.$attr.when), // we have {{}} in attrs\n          offset = attr.offset || 0,\n          whens = scope.$eval(whenExp) || {},\n          whensExpFns = {},\n          startSymbol = $interpolate.startSymbol(),\n          endSymbol = $interpolate.endSymbol(),\n          braceReplacement = startSymbol + numberExp + '-' + offset + endSymbol,\n          watchRemover = angular.noop,\n          lastCount;\n\n      forEach(attr, function(expression, attributeName) {\n        var tmpMatch = IS_WHEN.exec(attributeName);\n        if (tmpMatch) {\n          var whenKey = (tmpMatch[1] ? '-' : '') + lowercase(tmpMatch[2]);\n          whens[whenKey] = element.attr(attr.$attr[attributeName]);\n        }\n      });\n      forEach(whens, function(expression, key) {\n        whensExpFns[key] = $interpolate(expression.replace(BRACE, braceReplacement));\n\n      });\n\n      scope.$watch(numberExp, function ngPluralizeWatchAction(newVal) {\n        var count = parseFloat(newVal);\n        var countIsNaN = isNaN(count);\n\n        if (!countIsNaN && !(count in whens)) {\n          // If an explicit number rule such as 1, 2, 3... is defined, just use it.\n          // Otherwise, check it against pluralization rules in $locale service.\n          count = $locale.pluralCat(count - offset);\n        }\n\n        // If both `count` and `lastCount` are NaN, we don't need to re-register a watch.\n        // In JS `NaN !== NaN`, so we have to exlicitly check.\n        if ((count !== lastCount) && !(countIsNaN && isNaN(lastCount))) {\n          watchRemover();\n          watchRemover = scope.$watch(whensExpFns[count], updateElementText);\n          lastCount = count;\n        }\n      });\n\n      function updateElementText(newText) {\n        element.text(newText || '');\n      }\n    }\n  };\n}];\n\n/**\n * @ngdoc directive\n * @name ngRepeat\n *\n * @description\n * The `ngRepeat` directive instantiates a template once per item from a collection. Each template\n * instance gets its own scope, where the given loop variable is set to the current collection item,\n * and `$index` is set to the item index or key.\n *\n * Special properties are exposed on the local scope of each template instance, including:\n *\n * | Variable  | Type            | Details                                                                     |\n * |-----------|-----------------|-----------------------------------------------------------------------------|\n * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |\n * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |\n * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |\n * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |\n * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |\n * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |\n *\n * Creating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.\n * This may be useful when, for instance, nesting ngRepeats.\n *\n * # Iterating over object properties\n *\n * It is possible to get `ngRepeat` to iterate over the properties of an object using the following\n * syntax:\n *\n * ```js\n * <div ng-repeat=\"(key, value) in myObj\"> ... </div>\n * ```\n *\n * You need to be aware that the JavaScript specification does not define what order\n * it will return the keys for an object. In order to have a guaranteed deterministic order\n * for the keys, Angular versions up to and including 1.3 **sort the keys alphabetically**.\n *\n * If this is not desired, the recommended workaround is to convert your object into an array\n * that is sorted into the order that you prefer before providing it to `ngRepeat`.  You could\n * do this with a filter such as [toArrayFilter](http://ngmodules.org/modules/angular-toArrayFilter)\n * or implement a `$watch` on the object yourself.\n *\n * In version 1.4 we will remove the sorting, since it seems that browsers generally follow the\n * strategy of providing keys in the order in which they were defined, although there are exceptions\n * when keys are deleted and reinstated.\n *\n *\n * # Tracking and Duplicates\n *\n * When the contents of the collection change, `ngRepeat` makes the corresponding changes to the DOM:\n *\n * * When an item is added, a new instance of the template is added to the DOM.\n * * When an item is removed, its template instance is removed from the DOM.\n * * When items are reordered, their respective templates are reordered in the DOM.\n *\n * By default, `ngRepeat` does not allow duplicate items in arrays. This is because when\n * there are duplicates, it is not possible to maintain a one-to-one mapping between collection\n * items and DOM elements.\n *\n * If you do need to repeat duplicate items, you can substitute the default tracking behavior\n * with your own using the `track by` expression.\n *\n * For example, you may track items by the index of each item in the collection, using the\n * special scope property `$index`:\n * ```html\n *    <div ng-repeat=\"n in [42, 42, 43, 43] track by $index\">\n *      {{n}}\n *    </div>\n * ```\n *\n * You may use arbitrary expressions in `track by`, including references to custom functions\n * on the scope:\n * ```html\n *    <div ng-repeat=\"n in [42, 42, 43, 43] track by myTrackingFunction(n)\">\n *      {{n}}\n *    </div>\n * ```\n *\n * If you are working with objects that have an identifier property, you can track\n * by the identifier instead of the whole object. Should you reload your data later, `ngRepeat`\n * will not have to rebuild the DOM elements for items it has already rendered, even if the\n * JavaScript objects in the collection have been substituted for new ones:\n * ```html\n *    <div ng-repeat=\"model in collection track by model.id\">\n *      {{model.name}}\n *    </div>\n * ```\n *\n * When no `track by` expression is provided, it is equivalent to tracking by the built-in\n * `$id` function, which tracks items by their identity:\n * ```html\n *    <div ng-repeat=\"obj in collection track by $id(obj)\">\n *      {{obj.prop}}\n *    </div>\n * ```\n *\n * # Special repeat start and end points\n * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending\n * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.\n * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)\n * up to and including the ending HTML tag where **ng-repeat-end** is placed.\n *\n * The example below makes use of this feature:\n * ```html\n *   <header ng-repeat-start=\"item in items\">\n *     Header {{ item }}\n *   </header>\n *   <div class=\"body\">\n *     Body {{ item }}\n *   </div>\n *   <footer ng-repeat-end>\n *     Footer {{ item }}\n *   </footer>\n * ```\n *\n * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:\n * ```html\n *   <header>\n *     Header A\n *   </header>\n *   <div class=\"body\">\n *     Body A\n *   </div>\n *   <footer>\n *     Footer A\n *   </footer>\n *   <header>\n *     Header B\n *   </header>\n *   <div class=\"body\">\n *     Body B\n *   </div>\n *   <footer>\n *     Footer B\n *   </footer>\n * ```\n *\n * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such\n * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).\n *\n * @animations\n * **.enter** - when a new item is added to the list or when an item is revealed after a filter\n *\n * **.leave** - when an item is removed from the list or when an item is filtered out\n *\n * **.move** - when an adjacent item is filtered out causing a reorder or when the item contents are reordered\n *\n * @element ANY\n * @scope\n * @priority 1000\n * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These\n *   formats are currently supported:\n *\n *   * `variable in expression` – where variable is the user defined loop variable and `expression`\n *     is a scope expression giving the collection to enumerate.\n *\n *     For example: `album in artist.albums`.\n *\n *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,\n *     and `expression` is the scope expression giving the collection to enumerate.\n *\n *     For example: `(name, age) in {'adam':10, 'amalie':12}`.\n *\n *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking expression\n *     which can be used to associate the objects in the collection with the DOM elements. If no tracking expression\n *     is specified, ng-repeat associates elements by identity. It is an error to have\n *     more than one tracking expression value resolve to the same key. (This would mean that two distinct objects are\n *     mapped to the same DOM element, which is not possible.)  If filters are used in the expression, they should be\n *     applied before the tracking expression.\n *\n *     For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements\n *     will be associated by item identity in the array.\n *\n *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique\n *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements\n *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM\n *     element in the same way in the DOM.\n *\n *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this\n *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`\n *     property is same.\n *\n *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter\n *     to items in conjunction with a tracking expression.\n *\n *   * `variable in expression as alias_expression` – You can also provide an optional alias expression which will then store the\n *     intermediate results of the repeater after the filters have been applied. Typically this is used to render a special message\n *     when a filter is active on the repeater, but the filtered result set is empty.\n *\n *     For example: `item in items | filter:x as results` will store the fragment of the repeated items as `results`, but only after\n *     the items have been processed through the filter.\n *\n * @example\n * This example initializes the scope to a list of names and\n * then uses `ngRepeat` to display every person:\n  <example module=\"ngAnimate\" deps=\"angular-animate.js\" animations=\"true\">\n    <file name=\"index.html\">\n      <div ng-init=\"friends = [\n        {name:'John', age:25, gender:'boy'},\n        {name:'Jessie', age:30, gender:'girl'},\n        {name:'Johanna', age:28, gender:'girl'},\n        {name:'Joy', age:15, gender:'girl'},\n        {name:'Mary', age:28, gender:'girl'},\n        {name:'Peter', age:95, gender:'boy'},\n        {name:'Sebastian', age:50, gender:'boy'},\n        {name:'Erika', age:27, gender:'girl'},\n        {name:'Patrick', age:40, gender:'boy'},\n        {name:'Samantha', age:60, gender:'girl'}\n      ]\">\n        I have {{friends.length}} friends. They are:\n        <input type=\"search\" ng-model=\"q\" placeholder=\"filter friends...\" />\n        <ul class=\"example-animate-container\">\n          <li class=\"animate-repeat\" ng-repeat=\"friend in friends | filter:q as results\">\n            [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.\n          </li>\n          <li class=\"animate-repeat\" ng-if=\"results.length == 0\">\n            <strong>No results found...</strong>\n          </li>\n        </ul>\n      </div>\n    </file>\n    <file name=\"animations.css\">\n      .example-animate-container {\n        background:white;\n        border:1px solid black;\n        list-style:none;\n        margin:0;\n        padding:0 10px;\n      }\n\n      .animate-repeat {\n        line-height:40px;\n        list-style:none;\n        box-sizing:border-box;\n      }\n\n      .animate-repeat.ng-move,\n      .animate-repeat.ng-enter,\n      .animate-repeat.ng-leave {\n        -webkit-transition:all linear 0.5s;\n        transition:all linear 0.5s;\n      }\n\n      .animate-repeat.ng-leave.ng-leave-active,\n      .animate-repeat.ng-move,\n      .animate-repeat.ng-enter {\n        opacity:0;\n        max-height:0;\n      }\n\n      .animate-repeat.ng-leave,\n      .animate-repeat.ng-move.ng-move-active,\n      .animate-repeat.ng-enter.ng-enter-active {\n        opacity:1;\n        max-height:40px;\n      }\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      var friends = element.all(by.repeater('friend in friends'));\n\n      it('should render initial data set', function() {\n        expect(friends.count()).toBe(10);\n        expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');\n        expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');\n        expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');\n        expect(element(by.binding('friends.length')).getText())\n            .toMatch(\"I have 10 friends. They are:\");\n      });\n\n       it('should update repeater when filter predicate changes', function() {\n         expect(friends.count()).toBe(10);\n\n         element(by.model('q')).sendKeys('ma');\n\n         expect(friends.count()).toBe(2);\n         expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');\n         expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');\n       });\n      </file>\n    </example>\n */\nvar ngRepeatDirective = ['$parse', '$animate', function($parse, $animate) {\n  var NG_REMOVED = '$$NG_REMOVED';\n  var ngRepeatMinErr = minErr('ngRepeat');\n\n  var updateScope = function(scope, index, valueIdentifier, value, keyIdentifier, key, arrayLength) {\n    // TODO(perf): generate setters to shave off ~40ms or 1-1.5%\n    scope[valueIdentifier] = value;\n    if (keyIdentifier) scope[keyIdentifier] = key;\n    scope.$index = index;\n    scope.$first = (index === 0);\n    scope.$last = (index === (arrayLength - 1));\n    scope.$middle = !(scope.$first || scope.$last);\n    // jshint bitwise: false\n    scope.$odd = !(scope.$even = (index&1) === 0);\n    // jshint bitwise: true\n  };\n\n  var getBlockStart = function(block) {\n    return block.clone[0];\n  };\n\n  var getBlockEnd = function(block) {\n    return block.clone[block.clone.length - 1];\n  };\n\n\n  return {\n    restrict: 'A',\n    multiElement: true,\n    transclude: 'element',\n    priority: 1000,\n    terminal: true,\n    $$tlb: true,\n    compile: function ngRepeatCompile($element, $attr) {\n      var expression = $attr.ngRepeat;\n      var ngRepeatEndComment = document.createComment(' end ngRepeat: ' + expression + ' ');\n\n      var match = expression.match(/^\\s*([\\s\\S]+?)\\s+in\\s+([\\s\\S]+?)(?:\\s+as\\s+([\\s\\S]+?))?(?:\\s+track\\s+by\\s+([\\s\\S]+?))?\\s*$/);\n\n      if (!match) {\n        throw ngRepeatMinErr('iexp', \"Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.\",\n            expression);\n      }\n\n      var lhs = match[1];\n      var rhs = match[2];\n      var aliasAs = match[3];\n      var trackByExp = match[4];\n\n      match = lhs.match(/^(?:(\\s*[\\$\\w]+)|\\(\\s*([\\$\\w]+)\\s*,\\s*([\\$\\w]+)\\s*\\))$/);\n\n      if (!match) {\n        throw ngRepeatMinErr('iidexp', \"'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.\",\n            lhs);\n      }\n      var valueIdentifier = match[3] || match[1];\n      var keyIdentifier = match[2];\n\n      if (aliasAs && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(aliasAs) ||\n          /^(null|undefined|this|\\$index|\\$first|\\$middle|\\$last|\\$even|\\$odd|\\$parent|\\$root|\\$id)$/.test(aliasAs))) {\n        throw ngRepeatMinErr('badident', \"alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.\",\n          aliasAs);\n      }\n\n      var trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn;\n      var hashFnLocals = {$id: hashKey};\n\n      if (trackByExp) {\n        trackByExpGetter = $parse(trackByExp);\n      } else {\n        trackByIdArrayFn = function(key, value) {\n          return hashKey(value);\n        };\n        trackByIdObjFn = function(key) {\n          return key;\n        };\n      }\n\n      return function ngRepeatLink($scope, $element, $attr, ctrl, $transclude) {\n\n        if (trackByExpGetter) {\n          trackByIdExpFn = function(key, value, index) {\n            // assign key, value, and $index to the locals so that they can be used in hash functions\n            if (keyIdentifier) hashFnLocals[keyIdentifier] = key;\n            hashFnLocals[valueIdentifier] = value;\n            hashFnLocals.$index = index;\n            return trackByExpGetter($scope, hashFnLocals);\n          };\n        }\n\n        // Store a list of elements from previous run. This is a hash where key is the item from the\n        // iterator, and the value is objects with following properties.\n        //   - scope: bound scope\n        //   - element: previous element.\n        //   - index: position\n        //\n        // We are using no-proto object so that we don't need to guard against inherited props via\n        // hasOwnProperty.\n        var lastBlockMap = createMap();\n\n        //watch props\n        $scope.$watchCollection(rhs, function ngRepeatAction(collection) {\n          var index, length,\n              previousNode = $element[0],     // node that cloned nodes should be inserted after\n                                              // initialized to the comment node anchor\n              nextNode,\n              // Same as lastBlockMap but it has the current state. It will become the\n              // lastBlockMap on the next iteration.\n              nextBlockMap = createMap(),\n              collectionLength,\n              key, value, // key/value of iteration\n              trackById,\n              trackByIdFn,\n              collectionKeys,\n              block,       // last object information {scope, element, id}\n              nextBlockOrder,\n              elementsToRemove;\n\n          if (aliasAs) {\n            $scope[aliasAs] = collection;\n          }\n\n          if (isArrayLike(collection)) {\n            collectionKeys = collection;\n            trackByIdFn = trackByIdExpFn || trackByIdArrayFn;\n          } else {\n            trackByIdFn = trackByIdExpFn || trackByIdObjFn;\n            // if object, extract keys, sort them and use to determine order of iteration over obj props\n            collectionKeys = [];\n            for (var itemKey in collection) {\n              if (collection.hasOwnProperty(itemKey) && itemKey.charAt(0) != '$') {\n                collectionKeys.push(itemKey);\n              }\n            }\n            collectionKeys.sort();\n          }\n\n          collectionLength = collectionKeys.length;\n          nextBlockOrder = new Array(collectionLength);\n\n          // locate existing items\n          for (index = 0; index < collectionLength; index++) {\n            key = (collection === collectionKeys) ? index : collectionKeys[index];\n            value = collection[key];\n            trackById = trackByIdFn(key, value, index);\n            if (lastBlockMap[trackById]) {\n              // found previously seen block\n              block = lastBlockMap[trackById];\n              delete lastBlockMap[trackById];\n              nextBlockMap[trackById] = block;\n              nextBlockOrder[index] = block;\n            } else if (nextBlockMap[trackById]) {\n              // if collision detected. restore lastBlockMap and throw an error\n              forEach(nextBlockOrder, function(block) {\n                if (block && block.scope) lastBlockMap[block.id] = block;\n              });\n              throw ngRepeatMinErr('dupes',\n                  \"Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}\",\n                  expression, trackById, value);\n            } else {\n              // new never before seen block\n              nextBlockOrder[index] = {id: trackById, scope: undefined, clone: undefined};\n              nextBlockMap[trackById] = true;\n            }\n          }\n\n          // remove leftover items\n          for (var blockKey in lastBlockMap) {\n            block = lastBlockMap[blockKey];\n            elementsToRemove = getBlockNodes(block.clone);\n            $animate.leave(elementsToRemove);\n            if (elementsToRemove[0].parentNode) {\n              // if the element was not removed yet because of pending animation, mark it as deleted\n              // so that we can ignore it later\n              for (index = 0, length = elementsToRemove.length; index < length; index++) {\n                elementsToRemove[index][NG_REMOVED] = true;\n              }\n            }\n            block.scope.$destroy();\n          }\n\n          // we are not using forEach for perf reasons (trying to avoid #call)\n          for (index = 0; index < collectionLength; index++) {\n            key = (collection === collectionKeys) ? index : collectionKeys[index];\n            value = collection[key];\n            block = nextBlockOrder[index];\n\n            if (block.scope) {\n              // if we have already seen this object, then we need to reuse the\n              // associated scope/element\n\n              nextNode = previousNode;\n\n              // skip nodes that are already pending removal via leave animation\n              do {\n                nextNode = nextNode.nextSibling;\n              } while (nextNode && nextNode[NG_REMOVED]);\n\n              if (getBlockStart(block) != nextNode) {\n                // existing item which got moved\n                $animate.move(getBlockNodes(block.clone), null, jqLite(previousNode));\n              }\n              previousNode = getBlockEnd(block);\n              updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);\n            } else {\n              // new item which we don't know about\n              $transclude(function ngRepeatTransclude(clone, scope) {\n                block.scope = scope;\n                // http://jsperf.com/clone-vs-createcomment\n                var endNode = ngRepeatEndComment.cloneNode(false);\n                clone[clone.length++] = endNode;\n\n                // TODO(perf): support naked previousNode in `enter` to avoid creation of jqLite wrapper?\n                $animate.enter(clone, null, jqLite(previousNode));\n                previousNode = endNode;\n                // Note: We only need the first/last node of the cloned nodes.\n                // However, we need to keep the reference to the jqlite wrapper as it might be changed later\n                // by a directive with templateUrl when its template arrives.\n                block.clone = clone;\n                nextBlockMap[block.id] = block;\n                updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);\n              });\n            }\n          }\n          lastBlockMap = nextBlockMap;\n        });\n      };\n    }\n  };\n}];\n\nvar NG_HIDE_CLASS = 'ng-hide';\nvar NG_HIDE_IN_PROGRESS_CLASS = 'ng-hide-animate';\n/**\n * @ngdoc directive\n * @name ngShow\n *\n * @description\n * The `ngShow` directive shows or hides the given HTML element based on the expression\n * provided to the `ngShow` attribute. The element is shown or hidden by removing or adding\n * the `.ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined\n * in AngularJS and sets the display style to none (using an !important flag).\n * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).\n *\n * ```html\n * <!-- when $scope.myValue is truthy (element is visible) -->\n * <div ng-show=\"myValue\"></div>\n *\n * <!-- when $scope.myValue is falsy (element is hidden) -->\n * <div ng-show=\"myValue\" class=\"ng-hide\"></div>\n * ```\n *\n * When the `ngShow` expression evaluates to a falsy value then the `.ng-hide` CSS class is added to the class\n * attribute on the element causing it to become hidden. When truthy, the `.ng-hide` CSS class is removed\n * from the element causing the element not to appear hidden.\n *\n * ## Why is !important used?\n *\n * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector\n * can be easily overridden by heavier selectors. For example, something as simple\n * as changing the display style on a HTML list item would make hidden elements appear visible.\n * This also becomes a bigger issue when dealing with CSS frameworks.\n *\n * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector\n * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the\n * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.\n *\n * ### Overriding `.ng-hide`\n *\n * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change\n * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`\n * class CSS. Note that the selector that needs to be used is actually `.ng-hide:not(.ng-hide-animate)` to cope\n * with extra animation classes that can be added.\n *\n * ```css\n * .ng-hide:not(.ng-hide-animate) {\n *   /&#42; this is just another form of hiding an element &#42;/\n *   display: block!important;\n *   position: absolute;\n *   top: -9999px;\n *   left: -9999px;\n * }\n * ```\n *\n * By default you don't need to override in CSS anything and the animations will work around the display style.\n *\n * ## A note about animations with `ngShow`\n *\n * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression\n * is true and false. This system works like the animation system present with ngClass except that\n * you must also include the !important flag to override the display property\n * so that you can perform an animation when the element is hidden during the time of the animation.\n *\n * ```css\n * //\n * //a working example can be found at the bottom of this page\n * //\n * .my-element.ng-hide-add, .my-element.ng-hide-remove {\n *   /&#42; this is required as of 1.3x to properly\n *      apply all styling in a show/hide animation &#42;/\n *   transition: 0s linear all;\n * }\n *\n * .my-element.ng-hide-add-active,\n * .my-element.ng-hide-remove-active {\n *   /&#42; the transition is defined in the active class &#42;/\n *   transition: 1s linear all;\n * }\n *\n * .my-element.ng-hide-add { ... }\n * .my-element.ng-hide-add.ng-hide-add-active { ... }\n * .my-element.ng-hide-remove { ... }\n * .my-element.ng-hide-remove.ng-hide-remove-active { ... }\n * ```\n *\n * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display\n * property to block during animation states--ngAnimate will handle the style toggling automatically for you.\n *\n * @animations\n * addClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a truthy value and the just before contents are set to visible\n * removeClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a non truthy value and just before the contents are set to hidden\n *\n * @element ANY\n * @param {expression} ngShow If the {@link guide/expression expression} is truthy\n *     then the element is shown or hidden respectively.\n *\n * @example\n  <example module=\"ngAnimate\" deps=\"angular-animate.js\" animations=\"true\">\n    <file name=\"index.html\">\n      Click me: <input type=\"checkbox\" ng-model=\"checked\"><br/>\n      <div>\n        Show:\n        <div class=\"check-element animate-show\" ng-show=\"checked\">\n          <span class=\"glyphicon glyphicon-thumbs-up\"></span> I show up when your checkbox is checked.\n        </div>\n      </div>\n      <div>\n        Hide:\n        <div class=\"check-element animate-show\" ng-hide=\"checked\">\n          <span class=\"glyphicon glyphicon-thumbs-down\"></span> I hide when your checkbox is checked.\n        </div>\n      </div>\n    </file>\n    <file name=\"glyphicons.css\">\n      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);\n    </file>\n    <file name=\"animations.css\">\n      .animate-show {\n        line-height: 20px;\n        opacity: 1;\n        padding: 10px;\n        border: 1px solid black;\n        background: white;\n      }\n\n      .animate-show.ng-hide-add.ng-hide-add-active,\n      .animate-show.ng-hide-remove.ng-hide-remove-active {\n        -webkit-transition: all linear 0.5s;\n        transition: all linear 0.5s;\n      }\n\n      .animate-show.ng-hide {\n        line-height: 0;\n        opacity: 0;\n        padding: 0 10px;\n      }\n\n      .check-element {\n        padding: 10px;\n        border: 1px solid black;\n        background: white;\n      }\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));\n      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));\n\n      it('should check ng-show / ng-hide', function() {\n        expect(thumbsUp.isDisplayed()).toBeFalsy();\n        expect(thumbsDown.isDisplayed()).toBeTruthy();\n\n        element(by.model('checked')).click();\n\n        expect(thumbsUp.isDisplayed()).toBeTruthy();\n        expect(thumbsDown.isDisplayed()).toBeFalsy();\n      });\n    </file>\n  </example>\n */\nvar ngShowDirective = ['$animate', function($animate) {\n  return {\n    restrict: 'A',\n    multiElement: true,\n    link: function(scope, element, attr) {\n      scope.$watch(attr.ngShow, function ngShowWatchAction(value) {\n        // we're adding a temporary, animation-specific class for ng-hide since this way\n        // we can control when the element is actually displayed on screen without having\n        // to have a global/greedy CSS selector that breaks when other animations are run.\n        // Read: https://github.com/angular/angular.js/issues/9103#issuecomment-58335845\n        $animate[value ? 'removeClass' : 'addClass'](element, NG_HIDE_CLASS, {\n          tempClasses: NG_HIDE_IN_PROGRESS_CLASS\n        });\n      });\n    }\n  };\n}];\n\n\n/**\n * @ngdoc directive\n * @name ngHide\n *\n * @description\n * The `ngHide` directive shows or hides the given HTML element based on the expression\n * provided to the `ngHide` attribute. The element is shown or hidden by removing or adding\n * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined\n * in AngularJS and sets the display style to none (using an !important flag).\n * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).\n *\n * ```html\n * <!-- when $scope.myValue is truthy (element is hidden) -->\n * <div ng-hide=\"myValue\" class=\"ng-hide\"></div>\n *\n * <!-- when $scope.myValue is falsy (element is visible) -->\n * <div ng-hide=\"myValue\"></div>\n * ```\n *\n * When the `ngHide` expression evaluates to a truthy value then the `.ng-hide` CSS class is added to the class\n * attribute on the element causing it to become hidden. When falsy, the `.ng-hide` CSS class is removed\n * from the element causing the element not to appear hidden.\n *\n * ## Why is !important used?\n *\n * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector\n * can be easily overridden by heavier selectors. For example, something as simple\n * as changing the display style on a HTML list item would make hidden elements appear visible.\n * This also becomes a bigger issue when dealing with CSS frameworks.\n *\n * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector\n * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the\n * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.\n *\n * ### Overriding `.ng-hide`\n *\n * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change\n * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`\n * class in CSS:\n *\n * ```css\n * .ng-hide {\n *   /&#42; this is just another form of hiding an element &#42;/\n *   display: block!important;\n *   position: absolute;\n *   top: -9999px;\n *   left: -9999px;\n * }\n * ```\n *\n * By default you don't need to override in CSS anything and the animations will work around the display style.\n *\n * ## A note about animations with `ngHide`\n *\n * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression\n * is true and false. This system works like the animation system present with ngClass, except that the `.ng-hide`\n * CSS class is added and removed for you instead of your own CSS class.\n *\n * ```css\n * //\n * //a working example can be found at the bottom of this page\n * //\n * .my-element.ng-hide-add, .my-element.ng-hide-remove {\n *   transition: 0.5s linear all;\n * }\n *\n * .my-element.ng-hide-add { ... }\n * .my-element.ng-hide-add.ng-hide-add-active { ... }\n * .my-element.ng-hide-remove { ... }\n * .my-element.ng-hide-remove.ng-hide-remove-active { ... }\n * ```\n *\n * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display\n * property to block during animation states--ngAnimate will handle the style toggling automatically for you.\n *\n * @animations\n * removeClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a truthy value and just before the contents are set to hidden\n * addClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a non truthy value and just before the contents are set to visible\n *\n * @element ANY\n * @param {expression} ngHide If the {@link guide/expression expression} is truthy then\n *     the element is shown or hidden respectively.\n *\n * @example\n  <example module=\"ngAnimate\" deps=\"angular-animate.js\" animations=\"true\">\n    <file name=\"index.html\">\n      Click me: <input type=\"checkbox\" ng-model=\"checked\"><br/>\n      <div>\n        Show:\n        <div class=\"check-element animate-hide\" ng-show=\"checked\">\n          <span class=\"glyphicon glyphicon-thumbs-up\"></span> I show up when your checkbox is checked.\n        </div>\n      </div>\n      <div>\n        Hide:\n        <div class=\"check-element animate-hide\" ng-hide=\"checked\">\n          <span class=\"glyphicon glyphicon-thumbs-down\"></span> I hide when your checkbox is checked.\n        </div>\n      </div>\n    </file>\n    <file name=\"glyphicons.css\">\n      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);\n    </file>\n    <file name=\"animations.css\">\n      .animate-hide {\n        -webkit-transition: all linear 0.5s;\n        transition: all linear 0.5s;\n        line-height: 20px;\n        opacity: 1;\n        padding: 10px;\n        border: 1px solid black;\n        background: white;\n      }\n\n      .animate-hide.ng-hide {\n        line-height: 0;\n        opacity: 0;\n        padding: 0 10px;\n      }\n\n      .check-element {\n        padding: 10px;\n        border: 1px solid black;\n        background: white;\n      }\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));\n      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));\n\n      it('should check ng-show / ng-hide', function() {\n        expect(thumbsUp.isDisplayed()).toBeFalsy();\n        expect(thumbsDown.isDisplayed()).toBeTruthy();\n\n        element(by.model('checked')).click();\n\n        expect(thumbsUp.isDisplayed()).toBeTruthy();\n        expect(thumbsDown.isDisplayed()).toBeFalsy();\n      });\n    </file>\n  </example>\n */\nvar ngHideDirective = ['$animate', function($animate) {\n  return {\n    restrict: 'A',\n    multiElement: true,\n    link: function(scope, element, attr) {\n      scope.$watch(attr.ngHide, function ngHideWatchAction(value) {\n        // The comment inside of the ngShowDirective explains why we add and\n        // remove a temporary class for the show/hide animation\n        $animate[value ? 'addClass' : 'removeClass'](element,NG_HIDE_CLASS, {\n          tempClasses: NG_HIDE_IN_PROGRESS_CLASS\n        });\n      });\n    }\n  };\n}];\n\n/**\n * @ngdoc directive\n * @name ngStyle\n * @restrict AC\n *\n * @description\n * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.\n *\n * @element ANY\n * @param {expression} ngStyle\n *\n * {@link guide/expression Expression} which evals to an\n * object whose keys are CSS style names and values are corresponding values for those CSS\n * keys.\n *\n * Since some CSS style names are not valid keys for an object, they must be quoted.\n * See the 'background-color' style in the example below.\n *\n * @example\n   <example>\n     <file name=\"index.html\">\n        <input type=\"button\" value=\"set color\" ng-click=\"myStyle={color:'red'}\">\n        <input type=\"button\" value=\"set background\" ng-click=\"myStyle={'background-color':'blue'}\">\n        <input type=\"button\" value=\"clear\" ng-click=\"myStyle={}\">\n        <br/>\n        <span ng-style=\"myStyle\">Sample Text</span>\n        <pre>myStyle={{myStyle}}</pre>\n     </file>\n     <file name=\"style.css\">\n       span {\n         color: black;\n       }\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       var colorSpan = element(by.css('span'));\n\n       it('should check ng-style', function() {\n         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');\n         element(by.css('input[value=\\'set color\\']')).click();\n         expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');\n         element(by.css('input[value=clear]')).click();\n         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');\n       });\n     </file>\n   </example>\n */\nvar ngStyleDirective = ngDirective(function(scope, element, attr) {\n  scope.$watch(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {\n    if (oldStyles && (newStyles !== oldStyles)) {\n      forEach(oldStyles, function(val, style) { element.css(style, '');});\n    }\n    if (newStyles) element.css(newStyles);\n  }, true);\n});\n\n/**\n * @ngdoc directive\n * @name ngSwitch\n * @restrict EA\n *\n * @description\n * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.\n * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location\n * as specified in the template.\n *\n * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it\n * from the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element\n * matches the value obtained from the evaluated expression. In other words, you define a container element\n * (where you place the directive), place an expression on the **`on=\"...\"` attribute**\n * (or the **`ng-switch=\"...\"` attribute**), define any inner elements inside of the directive and place\n * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on\n * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default\n * attribute is displayed.\n *\n * <div class=\"alert alert-info\">\n * Be aware that the attribute values to match against cannot be expressions. They are interpreted\n * as literal string values to match against.\n * For example, **`ng-switch-when=\"someVal\"`** will match against the string `\"someVal\"` not against the\n * value of the expression `$scope.someVal`.\n * </div>\n\n * @animations\n * enter - happens after the ngSwitch contents change and the matched child element is placed inside the container\n * leave - happens just after the ngSwitch contents change and just before the former contents are removed from the DOM\n *\n * @usage\n *\n * ```\n * <ANY ng-switch=\"expression\">\n *   <ANY ng-switch-when=\"matchValue1\">...</ANY>\n *   <ANY ng-switch-when=\"matchValue2\">...</ANY>\n *   <ANY ng-switch-default>...</ANY>\n * </ANY>\n * ```\n *\n *\n * @scope\n * @priority 1200\n * @param {*} ngSwitch|on expression to match against <code>ng-switch-when</code>.\n * On child elements add:\n *\n * * `ngSwitchWhen`: the case statement to match against. If match then this\n *   case will be displayed. If the same match appears multiple times, all the\n *   elements will be displayed.\n * * `ngSwitchDefault`: the default case when no other case match. If there\n *   are multiple default cases, all of them will be displayed when no other\n *   case match.\n *\n *\n * @example\n  <example module=\"switchExample\" deps=\"angular-animate.js\" animations=\"true\">\n    <file name=\"index.html\">\n      <div ng-controller=\"ExampleController\">\n        <select ng-model=\"selection\" ng-options=\"item for item in items\">\n        </select>\n        <code>selection={{selection}}</code>\n        <hr/>\n        <div class=\"animate-switch-container\"\n          ng-switch on=\"selection\">\n            <div class=\"animate-switch\" ng-switch-when=\"settings\">Settings Div</div>\n            <div class=\"animate-switch\" ng-switch-when=\"home\">Home Span</div>\n            <div class=\"animate-switch\" ng-switch-default>default</div>\n        </div>\n      </div>\n    </file>\n    <file name=\"script.js\">\n      angular.module('switchExample', ['ngAnimate'])\n        .controller('ExampleController', ['$scope', function($scope) {\n          $scope.items = ['settings', 'home', 'other'];\n          $scope.selection = $scope.items[0];\n        }]);\n    </file>\n    <file name=\"animations.css\">\n      .animate-switch-container {\n        position:relative;\n        background:white;\n        border:1px solid black;\n        height:40px;\n        overflow:hidden;\n      }\n\n      .animate-switch {\n        padding:10px;\n      }\n\n      .animate-switch.ng-animate {\n        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n\n        position:absolute;\n        top:0;\n        left:0;\n        right:0;\n        bottom:0;\n      }\n\n      .animate-switch.ng-leave.ng-leave-active,\n      .animate-switch.ng-enter {\n        top:-50px;\n      }\n      .animate-switch.ng-leave,\n      .animate-switch.ng-enter.ng-enter-active {\n        top:0;\n      }\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      var switchElem = element(by.css('[ng-switch]'));\n      var select = element(by.model('selection'));\n\n      it('should start in settings', function() {\n        expect(switchElem.getText()).toMatch(/Settings Div/);\n      });\n      it('should change to home', function() {\n        select.all(by.css('option')).get(1).click();\n        expect(switchElem.getText()).toMatch(/Home Span/);\n      });\n      it('should select default', function() {\n        select.all(by.css('option')).get(2).click();\n        expect(switchElem.getText()).toMatch(/default/);\n      });\n    </file>\n  </example>\n */\nvar ngSwitchDirective = ['$animate', function($animate) {\n  return {\n    restrict: 'EA',\n    require: 'ngSwitch',\n\n    // asks for $scope to fool the BC controller module\n    controller: ['$scope', function ngSwitchController() {\n     this.cases = {};\n    }],\n    link: function(scope, element, attr, ngSwitchController) {\n      var watchExpr = attr.ngSwitch || attr.on,\n          selectedTranscludes = [],\n          selectedElements = [],\n          previousLeaveAnimations = [],\n          selectedScopes = [];\n\n      var spliceFactory = function(array, index) {\n          return function() { array.splice(index, 1); };\n      };\n\n      scope.$watch(watchExpr, function ngSwitchWatchAction(value) {\n        var i, ii;\n        for (i = 0, ii = previousLeaveAnimations.length; i < ii; ++i) {\n          $animate.cancel(previousLeaveAnimations[i]);\n        }\n        previousLeaveAnimations.length = 0;\n\n        for (i = 0, ii = selectedScopes.length; i < ii; ++i) {\n          var selected = getBlockNodes(selectedElements[i].clone);\n          selectedScopes[i].$destroy();\n          var promise = previousLeaveAnimations[i] = $animate.leave(selected);\n          promise.then(spliceFactory(previousLeaveAnimations, i));\n        }\n\n        selectedElements.length = 0;\n        selectedScopes.length = 0;\n\n        if ((selectedTranscludes = ngSwitchController.cases['!' + value] || ngSwitchController.cases['?'])) {\n          forEach(selectedTranscludes, function(selectedTransclude) {\n            selectedTransclude.transclude(function(caseElement, selectedScope) {\n              selectedScopes.push(selectedScope);\n              var anchor = selectedTransclude.element;\n              caseElement[caseElement.length++] = document.createComment(' end ngSwitchWhen: ');\n              var block = { clone: caseElement };\n\n              selectedElements.push(block);\n              $animate.enter(caseElement, anchor.parent(), anchor);\n            });\n          });\n        }\n      });\n    }\n  };\n}];\n\nvar ngSwitchWhenDirective = ngDirective({\n  transclude: 'element',\n  priority: 1200,\n  require: '^ngSwitch',\n  multiElement: true,\n  link: function(scope, element, attrs, ctrl, $transclude) {\n    ctrl.cases['!' + attrs.ngSwitchWhen] = (ctrl.cases['!' + attrs.ngSwitchWhen] || []);\n    ctrl.cases['!' + attrs.ngSwitchWhen].push({ transclude: $transclude, element: element });\n  }\n});\n\nvar ngSwitchDefaultDirective = ngDirective({\n  transclude: 'element',\n  priority: 1200,\n  require: '^ngSwitch',\n  multiElement: true,\n  link: function(scope, element, attr, ctrl, $transclude) {\n    ctrl.cases['?'] = (ctrl.cases['?'] || []);\n    ctrl.cases['?'].push({ transclude: $transclude, element: element });\n   }\n});\n\n/**\n * @ngdoc directive\n * @name ngTransclude\n * @restrict EAC\n *\n * @description\n * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.\n *\n * Any existing content of the element that this directive is placed on will be removed before the transcluded content is inserted.\n *\n * @element ANY\n *\n * @example\n   <example module=\"transcludeExample\">\n     <file name=\"index.html\">\n       <script>\n         angular.module('transcludeExample', [])\n          .directive('pane', function(){\n             return {\n               restrict: 'E',\n               transclude: true,\n               scope: { title:'@' },\n               template: '<div style=\"border: 1px solid black;\">' +\n                           '<div style=\"background-color: gray\">{{title}}</div>' +\n                           '<ng-transclude></ng-transclude>' +\n                         '</div>'\n             };\n         })\n         .controller('ExampleController', ['$scope', function($scope) {\n           $scope.title = 'Lorem Ipsum';\n           $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';\n         }]);\n       </script>\n       <div ng-controller=\"ExampleController\">\n         <input ng-model=\"title\"> <br/>\n         <textarea ng-model=\"text\"></textarea> <br/>\n         <pane title=\"{{title}}\">{{text}}</pane>\n       </div>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n        it('should have transcluded', function() {\n          var titleElement = element(by.model('title'));\n          titleElement.clear();\n          titleElement.sendKeys('TITLE');\n          var textElement = element(by.model('text'));\n          textElement.clear();\n          textElement.sendKeys('TEXT');\n          expect(element(by.binding('title')).getText()).toEqual('TITLE');\n          expect(element(by.binding('text')).getText()).toEqual('TEXT');\n        });\n     </file>\n   </example>\n *\n */\nvar ngTranscludeDirective = ngDirective({\n  restrict: 'EAC',\n  link: function($scope, $element, $attrs, controller, $transclude) {\n    if (!$transclude) {\n      throw minErr('ngTransclude')('orphan',\n       'Illegal use of ngTransclude directive in the template! ' +\n       'No parent directive that requires a transclusion found. ' +\n       'Element: {0}',\n       startingTag($element));\n    }\n\n    $transclude(function(clone) {\n      $element.empty();\n      $element.append(clone);\n    });\n  }\n});\n\n/**\n * @ngdoc directive\n * @name script\n * @restrict E\n *\n * @description\n * Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the\n * template can be used by {@link ng.directive:ngInclude `ngInclude`},\n * {@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the\n * `<script>` element must be specified as `text/ng-template`, and a cache name for the template must be\n * assigned through the element's `id`, which can then be used as a directive's `templateUrl`.\n *\n * @param {string} type Must be set to `'text/ng-template'`.\n * @param {string} id Cache name of the template.\n *\n * @example\n  <example>\n    <file name=\"index.html\">\n      <script type=\"text/ng-template\" id=\"/tpl.html\">\n        Content of the template.\n      </script>\n\n      <a ng-click=\"currentTpl='/tpl.html'\" id=\"tpl-link\">Load inlined template</a>\n      <div id=\"tpl-content\" ng-include src=\"currentTpl\"></div>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      it('should load template defined inside script tag', function() {\n        element(by.css('#tpl-link')).click();\n        expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);\n      });\n    </file>\n  </example>\n */\nvar scriptDirective = ['$templateCache', function($templateCache) {\n  return {\n    restrict: 'E',\n    terminal: true,\n    compile: function(element, attr) {\n      if (attr.type == 'text/ng-template') {\n        var templateUrl = attr.id,\n            text = element[0].text;\n\n        $templateCache.put(templateUrl, text);\n      }\n    }\n  };\n}];\n\nvar ngOptionsMinErr = minErr('ngOptions');\n/**\n * @ngdoc directive\n * @name select\n * @restrict E\n *\n * @description\n * HTML `SELECT` element with angular data-binding.\n *\n * # `ngOptions`\n *\n * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`\n * elements for the `<select>` element using the array or object obtained by evaluating the\n * `ngOptions` comprehension expression.\n *\n * In many cases, `ngRepeat` can be used on `<option>` elements instead of `ngOptions` to achieve a\n * similar result. However, `ngOptions` provides some benefits such as reducing memory and\n * increasing speed by not creating a new scope for each repeated instance, as well as providing\n * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the\n * comprehension expression. `ngOptions` should be used when the `<select>` model needs to be bound\n *  to a non-string value. This is because an option element can only be bound to string values at\n * present.\n *\n * When an item in the `<select>` menu is selected, the array element or object property\n * represented by the selected option will be bound to the model identified by the `ngModel`\n * directive.\n *\n * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can\n * be nested into the `<select>` element. This element will then represent the `null` or \"not selected\"\n * option. See example below for demonstration.\n *\n * <div class=\"alert alert-warning\">\n * **Note:** `ngModel` compares by reference, not value. This is important when binding to an\n * array of objects. See an example [in this jsfiddle](http://jsfiddle.net/qWzTb/).\n * </div>\n *\n * ## `select` **`as`**\n *\n * Using `select` **`as`** will bind the result of the `select` expression to the model, but\n * the value of the `<select>` and `<option>` html elements will be either the index (for array data sources)\n * or property name (for object data sources) of the value within the collection. If a **`track by`** expression\n * is used, the result of that expression will be set as the value of the `option` and `select` elements.\n *\n *\n * ### `select` **`as`** and **`track by`**\n *\n * <div class=\"alert alert-warning\">\n * Do not use `select` **`as`** and **`track by`** in the same expression. They are not designed to work together.\n * </div>\n *\n * Consider the following example:\n *\n * ```html\n * <select ng-options=\"item.subItem as item.label for item in values track by item.id\" ng-model=\"selected\">\n * ```\n *\n * ```js\n * $scope.values = [{\n *   id: 1,\n *   label: 'aLabel',\n *   subItem: { name: 'aSubItem' }\n * }, {\n *   id: 2,\n *   label: 'bLabel',\n *   subItem: { name: 'bSubItem' }\n * }];\n *\n * $scope.selected = { name: 'aSubItem' };\n * ```\n *\n * With the purpose of preserving the selection, the **`track by`** expression is always applied to the element\n * of the data source (to `item` in this example). To calculate whether an element is selected, we do the\n * following:\n *\n * 1. Apply **`track by`** to the elements in the array. In the example: `[1, 2]`\n * 2. Apply **`track by`** to the already selected value in `ngModel`.\n *    In the example: this is not possible as **`track by`** refers to `item.id`, but the selected\n *    value from `ngModel` is `{name: 'aSubItem'}`, so the **`track by`** expression is applied to\n *    a wrong object, the selected element can't be found, `<select>` is always reset to the \"not\n *    selected\" option.\n *\n *\n * @param {string} ngModel Assignable angular expression to data-bind to.\n * @param {string=} name Property name of the form under which the control is published.\n * @param {string=} required The control is considered valid only if value is entered.\n * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n *    `required` when you want to data-bind to the `required` attribute.\n * @param {comprehension_expression=} ngOptions in one of the following forms:\n *\n *   * for array data sources:\n *     * `label` **`for`** `value` **`in`** `array`\n *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`\n *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array`\n *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`\n *     * `label` **`for`** `value` **`in`** `array` | orderBy:`orderexpr` **`track by`** `trackexpr`\n *        (for including a filter with `track by`)\n *   * for object data sources:\n *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`\n *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`\n *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`\n *     * `select` **`as`** `label` **`group by`** `group`\n *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`\n *\n * Where:\n *\n *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.\n *   * `value`: local variable which will refer to each item in the `array` or each property value\n *      of `object` during iteration.\n *   * `key`: local variable which will refer to a property name in `object` during iteration.\n *   * `label`: The result of this expression will be the label for `<option>` element. The\n *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).\n *   * `select`: The result of this expression will be bound to the model of the parent `<select>`\n *      element. If not specified, `select` expression will default to `value`.\n *   * `group`: The result of this expression will be used to group options using the `<optgroup>`\n *      DOM element.\n *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be\n *      used to identify the objects in the array. The `trackexpr` will most likely refer to the\n *     `value` variable (e.g. `value.propertyName`). With this the selection is preserved\n *      even when the options are recreated (e.g. reloaded from the server).\n *\n * @example\n    <example module=\"selectExample\">\n      <file name=\"index.html\">\n        <script>\n        angular.module('selectExample', [])\n          .controller('ExampleController', ['$scope', function($scope) {\n            $scope.colors = [\n              {name:'black', shade:'dark'},\n              {name:'white', shade:'light'},\n              {name:'red', shade:'dark'},\n              {name:'blue', shade:'dark'},\n              {name:'yellow', shade:'light'}\n            ];\n            $scope.myColor = $scope.colors[2]; // red\n          }]);\n        </script>\n        <div ng-controller=\"ExampleController\">\n          <ul>\n            <li ng-repeat=\"color in colors\">\n              Name: <input ng-model=\"color.name\">\n              [<a href ng-click=\"colors.splice($index, 1)\">X</a>]\n            </li>\n            <li>\n              [<a href ng-click=\"colors.push({})\">add</a>]\n            </li>\n          </ul>\n          <hr/>\n          Color (null not allowed):\n          <select ng-model=\"myColor\" ng-options=\"color.name for color in colors\"></select><br>\n\n          Color (null allowed):\n          <span  class=\"nullable\">\n            <select ng-model=\"myColor\" ng-options=\"color.name for color in colors\">\n              <option value=\"\">-- choose color --</option>\n            </select>\n          </span><br/>\n\n          Color grouped by shade:\n          <select ng-model=\"myColor\" ng-options=\"color.name group by color.shade for color in colors\">\n          </select><br/>\n\n\n          Select <a href ng-click=\"myColor = { name:'not in list', shade: 'other' }\">bogus</a>.<br>\n          <hr/>\n          Currently selected: {{ {selected_color:myColor} }}\n          <div style=\"border:solid 1px black; height:20px\"\n               ng-style=\"{'background-color':myColor.name}\">\n          </div>\n        </div>\n      </file>\n      <file name=\"protractor.js\" type=\"protractor\">\n         it('should check ng-options', function() {\n           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');\n           element.all(by.model('myColor')).first().click();\n           element.all(by.css('select[ng-model=\"myColor\"] option')).first().click();\n           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');\n           element(by.css('.nullable select[ng-model=\"myColor\"]')).click();\n           element.all(by.css('.nullable select[ng-model=\"myColor\"] option')).first().click();\n           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');\n         });\n      </file>\n    </example>\n */\n\nvar ngOptionsDirective = valueFn({\n  restrict: 'A',\n  terminal: true\n});\n\n// jshint maxlen: false\nvar selectDirective = ['$compile', '$parse', function($compile,   $parse) {\n                         //000011111111110000000000022222222220000000000000000000003333333333000000000000004444444444444440000000005555555555555550000000666666666666666000000000000000777777777700000000000000000008888888888\n  var NG_OPTIONS_REGEXP = /^\\s*([\\s\\S]+?)(?:\\s+as\\s+([\\s\\S]+?))?(?:\\s+group\\s+by\\s+([\\s\\S]+?))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+([\\s\\S]+?)(?:\\s+track\\s+by\\s+([\\s\\S]+?))?$/,\n      nullModelCtrl = {$setViewValue: noop};\n// jshint maxlen: 100\n\n  return {\n    restrict: 'E',\n    require: ['select', '?ngModel'],\n    controller: ['$element', '$scope', '$attrs', function($element, $scope, $attrs) {\n      var self = this,\n          optionsMap = {},\n          ngModelCtrl = nullModelCtrl,\n          nullOption,\n          unknownOption;\n\n\n      self.databound = $attrs.ngModel;\n\n\n      self.init = function(ngModelCtrl_, nullOption_, unknownOption_) {\n        ngModelCtrl = ngModelCtrl_;\n        nullOption = nullOption_;\n        unknownOption = unknownOption_;\n      };\n\n\n      self.addOption = function(value, element) {\n        assertNotHasOwnProperty(value, '\"option value\"');\n        optionsMap[value] = true;\n\n        if (ngModelCtrl.$viewValue == value) {\n          $element.val(value);\n          if (unknownOption.parent()) unknownOption.remove();\n        }\n        // Workaround for https://code.google.com/p/chromium/issues/detail?id=381459\n        // Adding an <option selected=\"selected\"> element to a <select required=\"required\"> should\n        // automatically select the new element\n        if (element && element[0].hasAttribute('selected')) {\n          element[0].selected = true;\n        }\n      };\n\n\n      self.removeOption = function(value) {\n        if (this.hasOption(value)) {\n          delete optionsMap[value];\n          if (ngModelCtrl.$viewValue === value) {\n            this.renderUnknownOption(value);\n          }\n        }\n      };\n\n\n      self.renderUnknownOption = function(val) {\n        var unknownVal = '? ' + hashKey(val) + ' ?';\n        unknownOption.val(unknownVal);\n        $element.prepend(unknownOption);\n        $element.val(unknownVal);\n        unknownOption.prop('selected', true); // needed for IE\n      };\n\n\n      self.hasOption = function(value) {\n        return optionsMap.hasOwnProperty(value);\n      };\n\n      $scope.$on('$destroy', function() {\n        // disable unknown option so that we don't do work when the whole select is being destroyed\n        self.renderUnknownOption = noop;\n      });\n    }],\n\n    link: function(scope, element, attr, ctrls) {\n      // if ngModel is not defined, we don't need to do anything\n      if (!ctrls[1]) return;\n\n      var selectCtrl = ctrls[0],\n          ngModelCtrl = ctrls[1],\n          multiple = attr.multiple,\n          optionsExp = attr.ngOptions,\n          nullOption = false, // if false, user will not be able to select it (used by ngOptions)\n          emptyOption,\n          renderScheduled = false,\n          // we can't just jqLite('<option>') since jqLite is not smart enough\n          // to create it in <select> and IE barfs otherwise.\n          optionTemplate = jqLite(document.createElement('option')),\n          optGroupTemplate =jqLite(document.createElement('optgroup')),\n          unknownOption = optionTemplate.clone();\n\n      // find \"null\" option\n      for (var i = 0, children = element.children(), ii = children.length; i < ii; i++) {\n        if (children[i].value === '') {\n          emptyOption = nullOption = children.eq(i);\n          break;\n        }\n      }\n\n      selectCtrl.init(ngModelCtrl, nullOption, unknownOption);\n\n      // required validator\n      if (multiple) {\n        ngModelCtrl.$isEmpty = function(value) {\n          return !value || value.length === 0;\n        };\n      }\n\n      if (optionsExp) setupAsOptions(scope, element, ngModelCtrl);\n      else if (multiple) setupAsMultiple(scope, element, ngModelCtrl);\n      else setupAsSingle(scope, element, ngModelCtrl, selectCtrl);\n\n\n      ////////////////////////////\n\n\n\n      function setupAsSingle(scope, selectElement, ngModelCtrl, selectCtrl) {\n        ngModelCtrl.$render = function() {\n          var viewValue = ngModelCtrl.$viewValue;\n\n          if (selectCtrl.hasOption(viewValue)) {\n            if (unknownOption.parent()) unknownOption.remove();\n            selectElement.val(viewValue);\n            if (viewValue === '') emptyOption.prop('selected', true); // to make IE9 happy\n          } else {\n            if (viewValue == null && emptyOption) {\n              selectElement.val('');\n            } else {\n              selectCtrl.renderUnknownOption(viewValue);\n            }\n          }\n        };\n\n        selectElement.on('change', function() {\n          scope.$apply(function() {\n            if (unknownOption.parent()) unknownOption.remove();\n            ngModelCtrl.$setViewValue(selectElement.val());\n          });\n        });\n      }\n\n      function setupAsMultiple(scope, selectElement, ctrl) {\n        var lastView;\n        ctrl.$render = function() {\n          var items = new HashMap(ctrl.$viewValue);\n          forEach(selectElement.find('option'), function(option) {\n            option.selected = isDefined(items.get(option.value));\n          });\n        };\n\n        // we have to do it on each watch since ngModel watches reference, but\n        // we need to work of an array, so we need to see if anything was inserted/removed\n        scope.$watch(function selectMultipleWatch() {\n          if (!equals(lastView, ctrl.$viewValue)) {\n            lastView = shallowCopy(ctrl.$viewValue);\n            ctrl.$render();\n          }\n        });\n\n        selectElement.on('change', function() {\n          scope.$apply(function() {\n            var array = [];\n            forEach(selectElement.find('option'), function(option) {\n              if (option.selected) {\n                array.push(option.value);\n              }\n            });\n            ctrl.$setViewValue(array);\n          });\n        });\n      }\n\n      function setupAsOptions(scope, selectElement, ctrl) {\n        var match;\n\n        if (!(match = optionsExp.match(NG_OPTIONS_REGEXP))) {\n          throw ngOptionsMinErr('iexp',\n            \"Expected expression in form of \" +\n            \"'_select_ (as _label_)? for (_key_,)?_value_ in _collection_'\" +\n            \" but got '{0}'. Element: {1}\",\n            optionsExp, startingTag(selectElement));\n        }\n\n        var displayFn = $parse(match[2] || match[1]),\n            valueName = match[4] || match[6],\n            selectAs = / as /.test(match[0]) && match[1],\n            selectAsFn = selectAs ? $parse(selectAs) : null,\n            keyName = match[5],\n            groupByFn = $parse(match[3] || ''),\n            valueFn = $parse(match[2] ? match[1] : valueName),\n            valuesFn = $parse(match[7]),\n            track = match[8],\n            trackFn = track ? $parse(match[8]) : null,\n            trackKeysCache = {},\n            // This is an array of array of existing option groups in DOM.\n            // We try to reuse these if possible\n            // - optionGroupsCache[0] is the options with no option group\n            // - optionGroupsCache[?][0] is the parent: either the SELECT or OPTGROUP element\n            optionGroupsCache = [[{element: selectElement, label:''}]],\n            //re-usable object to represent option's locals\n            locals = {};\n\n        if (nullOption) {\n          // compile the element since there might be bindings in it\n          $compile(nullOption)(scope);\n\n          // remove the class, which is added automatically because we recompile the element and it\n          // becomes the compilation root\n          nullOption.removeClass('ng-scope');\n\n          // we need to remove it before calling selectElement.empty() because otherwise IE will\n          // remove the label from the element. wtf?\n          nullOption.remove();\n        }\n\n        // clear contents, we'll add what's needed based on the model\n        selectElement.empty();\n\n        selectElement.on('change', selectionChanged);\n\n        ctrl.$render = render;\n\n        scope.$watchCollection(valuesFn, scheduleRendering);\n        scope.$watchCollection(getLabels, scheduleRendering);\n\n        if (multiple) {\n          scope.$watchCollection(function() { return ctrl.$modelValue; }, scheduleRendering);\n        }\n\n        // ------------------------------------------------------------------ //\n\n        function callExpression(exprFn, key, value) {\n          locals[valueName] = value;\n          if (keyName) locals[keyName] = key;\n          return exprFn(scope, locals);\n        }\n\n        function selectionChanged() {\n          scope.$apply(function() {\n            var collection = valuesFn(scope) || [];\n            var viewValue;\n            if (multiple) {\n              viewValue = [];\n              forEach(selectElement.val(), function(selectedKey) {\n                  selectedKey = trackFn ? trackKeysCache[selectedKey] : selectedKey;\n                viewValue.push(getViewValue(selectedKey, collection[selectedKey]));\n              });\n            } else {\n              var selectedKey = trackFn ? trackKeysCache[selectElement.val()] : selectElement.val();\n              viewValue = getViewValue(selectedKey, collection[selectedKey]);\n            }\n            ctrl.$setViewValue(viewValue);\n            render();\n          });\n        }\n\n        function getViewValue(key, value) {\n          if (key === '?') {\n            return undefined;\n          } else if (key === '') {\n            return null;\n          } else {\n            var viewValueFn = selectAsFn ? selectAsFn : valueFn;\n            return callExpression(viewValueFn, key, value);\n          }\n        }\n\n        function getLabels() {\n          var values = valuesFn(scope);\n          var toDisplay;\n          if (values && isArray(values)) {\n            toDisplay = new Array(values.length);\n            for (var i = 0, ii = values.length; i < ii; i++) {\n              toDisplay[i] = callExpression(displayFn, i, values[i]);\n            }\n            return toDisplay;\n          } else if (values) {\n            // TODO: Add a test for this case\n            toDisplay = {};\n            for (var prop in values) {\n              if (values.hasOwnProperty(prop)) {\n                toDisplay[prop] = callExpression(displayFn, prop, values[prop]);\n              }\n            }\n          }\n          return toDisplay;\n        }\n\n        function createIsSelectedFn(viewValue) {\n          var selectedSet;\n          if (multiple) {\n            if (trackFn && isArray(viewValue)) {\n\n              selectedSet = new HashMap([]);\n              for (var trackIndex = 0; trackIndex < viewValue.length; trackIndex++) {\n                // tracking by key\n                selectedSet.put(callExpression(trackFn, null, viewValue[trackIndex]), true);\n              }\n            } else {\n              selectedSet = new HashMap(viewValue);\n            }\n          } else if (trackFn) {\n            viewValue = callExpression(trackFn, null, viewValue);\n          }\n\n          return function isSelected(key, value) {\n            var compareValueFn;\n            if (trackFn) {\n              compareValueFn = trackFn;\n            } else if (selectAsFn) {\n              compareValueFn = selectAsFn;\n            } else {\n              compareValueFn = valueFn;\n            }\n\n            if (multiple) {\n              return isDefined(selectedSet.remove(callExpression(compareValueFn, key, value)));\n            } else {\n              return viewValue === callExpression(compareValueFn, key, value);\n            }\n          };\n        }\n\n        function scheduleRendering() {\n          if (!renderScheduled) {\n            scope.$$postDigest(render);\n            renderScheduled = true;\n          }\n        }\n\n        /**\n         * A new labelMap is created with each render.\n         * This function is called for each existing option with added=false,\n         * and each new option with added=true.\n         * - Labels that are passed to this method twice,\n         * (once with added=true and once with added=false) will end up with a value of 0, and\n         * will cause no change to happen to the corresponding option.\n         * - Labels that are passed to this method only once with added=false will end up with a\n         * value of -1 and will eventually be passed to selectCtrl.removeOption()\n         * - Labels that are passed to this method only once with added=true will end up with a\n         * value of 1 and will eventually be passed to selectCtrl.addOption()\n        */\n        function updateLabelMap(labelMap, label, added) {\n          labelMap[label] = labelMap[label] || 0;\n          labelMap[label] += (added ? 1 : -1);\n        }\n\n        function render() {\n          renderScheduled = false;\n\n          // Temporary location for the option groups before we render them\n          var optionGroups = {'':[]},\n              optionGroupNames = [''],\n              optionGroupName,\n              optionGroup,\n              option,\n              existingParent, existingOptions, existingOption,\n              viewValue = ctrl.$viewValue,\n              values = valuesFn(scope) || [],\n              keys = keyName ? sortedKeys(values) : values,\n              key,\n              value,\n              groupLength, length,\n              groupIndex, index,\n              labelMap = {},\n              selected,\n              isSelected = createIsSelectedFn(viewValue),\n              anySelected = false,\n              lastElement,\n              element,\n              label,\n              optionId;\n\n          trackKeysCache = {};\n\n          // We now build up the list of options we need (we merge later)\n          for (index = 0; length = keys.length, index < length; index++) {\n            key = index;\n            if (keyName) {\n              key = keys[index];\n              if (key.charAt(0) === '$') continue;\n            }\n            value = values[key];\n\n            optionGroupName = callExpression(groupByFn, key, value) || '';\n            if (!(optionGroup = optionGroups[optionGroupName])) {\n              optionGroup = optionGroups[optionGroupName] = [];\n              optionGroupNames.push(optionGroupName);\n            }\n\n            selected = isSelected(key, value);\n            anySelected = anySelected || selected;\n\n            label = callExpression(displayFn, key, value); // what will be seen by the user\n\n            // doing displayFn(scope, locals) || '' overwrites zero values\n            label = isDefined(label) ? label : '';\n            optionId = trackFn ? trackFn(scope, locals) : (keyName ? keys[index] : index);\n            if (trackFn) {\n              trackKeysCache[optionId] = key;\n            }\n\n            optionGroup.push({\n              // either the index into array or key from object\n              id: optionId,\n              label: label,\n              selected: selected                   // determine if we should be selected\n            });\n          }\n          if (!multiple) {\n            if (nullOption || viewValue === null) {\n              // insert null option if we have a placeholder, or the model is null\n              optionGroups[''].unshift({id:'', label:'', selected:!anySelected});\n            } else if (!anySelected) {\n              // option could not be found, we have to insert the undefined item\n              optionGroups[''].unshift({id:'?', label:'', selected:true});\n            }\n          }\n\n          // Now we need to update the list of DOM nodes to match the optionGroups we computed above\n          for (groupIndex = 0, groupLength = optionGroupNames.length;\n               groupIndex < groupLength;\n               groupIndex++) {\n            // current option group name or '' if no group\n            optionGroupName = optionGroupNames[groupIndex];\n\n            // list of options for that group. (first item has the parent)\n            optionGroup = optionGroups[optionGroupName];\n\n            if (optionGroupsCache.length <= groupIndex) {\n              // we need to grow the optionGroups\n              existingParent = {\n                element: optGroupTemplate.clone().attr('label', optionGroupName),\n                label: optionGroup.label\n              };\n              existingOptions = [existingParent];\n              optionGroupsCache.push(existingOptions);\n              selectElement.append(existingParent.element);\n            } else {\n              existingOptions = optionGroupsCache[groupIndex];\n              existingParent = existingOptions[0];  // either SELECT (no group) or OPTGROUP element\n\n              // update the OPTGROUP label if not the same.\n              if (existingParent.label != optionGroupName) {\n                existingParent.element.attr('label', existingParent.label = optionGroupName);\n              }\n            }\n\n            lastElement = null;  // start at the beginning\n            for (index = 0, length = optionGroup.length; index < length; index++) {\n              option = optionGroup[index];\n              if ((existingOption = existingOptions[index + 1])) {\n                // reuse elements\n                lastElement = existingOption.element;\n                if (existingOption.label !== option.label) {\n                  updateLabelMap(labelMap, existingOption.label, false);\n                  updateLabelMap(labelMap, option.label, true);\n                  lastElement.text(existingOption.label = option.label);\n                  lastElement.prop('label', existingOption.label);\n                }\n                if (existingOption.id !== option.id) {\n                  lastElement.val(existingOption.id = option.id);\n                }\n                // lastElement.prop('selected') provided by jQuery has side-effects\n                if (lastElement[0].selected !== option.selected) {\n                  lastElement.prop('selected', (existingOption.selected = option.selected));\n                  if (msie) {\n                    // See #7692\n                    // The selected item wouldn't visually update on IE without this.\n                    // Tested on Win7: IE9, IE10 and IE11. Future IEs should be tested as well\n                    lastElement.prop('selected', existingOption.selected);\n                  }\n                }\n              } else {\n                // grow elements\n\n                // if it's a null option\n                if (option.id === '' && nullOption) {\n                  // put back the pre-compiled element\n                  element = nullOption;\n                } else {\n                  // jQuery(v1.4.2) Bug: We should be able to chain the method calls, but\n                  // in this version of jQuery on some browser the .text() returns a string\n                  // rather then the element.\n                  (element = optionTemplate.clone())\n                      .val(option.id)\n                      .prop('selected', option.selected)\n                      .attr('selected', option.selected)\n                      .prop('label', option.label)\n                      .text(option.label);\n                }\n\n                existingOptions.push(existingOption = {\n                    element: element,\n                    label: option.label,\n                    id: option.id,\n                    selected: option.selected\n                });\n                updateLabelMap(labelMap, option.label, true);\n                if (lastElement) {\n                  lastElement.after(element);\n                } else {\n                  existingParent.element.append(element);\n                }\n                lastElement = element;\n              }\n            }\n            // remove any excessive OPTIONs in a group\n            index++; // increment since the existingOptions[0] is parent element not OPTION\n            while (existingOptions.length > index) {\n              option = existingOptions.pop();\n              updateLabelMap(labelMap, option.label, false);\n              option.element.remove();\n            }\n          }\n          // remove any excessive OPTGROUPs from select\n          while (optionGroupsCache.length > groupIndex) {\n            // remove all the labels in the option group\n            optionGroup = optionGroupsCache.pop();\n            for (index = 1; index < optionGroup.length; ++index) {\n              updateLabelMap(labelMap, optionGroup[index].label, false);\n            }\n            optionGroup[0].element.remove();\n          }\n          forEach(labelMap, function(count, label) {\n            if (count > 0) {\n              selectCtrl.addOption(label);\n            } else if (count < 0) {\n              selectCtrl.removeOption(label);\n            }\n          });\n        }\n      }\n    }\n  };\n}];\n\nvar optionDirective = ['$interpolate', function($interpolate) {\n  var nullSelectCtrl = {\n    addOption: noop,\n    removeOption: noop\n  };\n\n  return {\n    restrict: 'E',\n    priority: 100,\n    compile: function(element, attr) {\n      if (isUndefined(attr.value)) {\n        var interpolateFn = $interpolate(element.text(), true);\n        if (!interpolateFn) {\n          attr.$set('value', element.text());\n        }\n      }\n\n      return function(scope, element, attr) {\n        var selectCtrlName = '$selectController',\n            parent = element.parent(),\n            selectCtrl = parent.data(selectCtrlName) ||\n              parent.parent().data(selectCtrlName); // in case we are in optgroup\n\n        if (!selectCtrl || !selectCtrl.databound) {\n          selectCtrl = nullSelectCtrl;\n        }\n\n        if (interpolateFn) {\n          scope.$watch(interpolateFn, function interpolateWatchAction(newVal, oldVal) {\n            attr.$set('value', newVal);\n            if (oldVal !== newVal) {\n              selectCtrl.removeOption(oldVal);\n            }\n            selectCtrl.addOption(newVal, element);\n          });\n        } else {\n          selectCtrl.addOption(attr.value, element);\n        }\n\n        element.on('$destroy', function() {\n          selectCtrl.removeOption(attr.value);\n        });\n      };\n    }\n  };\n}];\n\nvar styleDirective = valueFn({\n  restrict: 'E',\n  terminal: false\n});\n\nvar requiredDirective = function() {\n  return {\n    restrict: 'A',\n    require: '?ngModel',\n    link: function(scope, elm, attr, ctrl) {\n      if (!ctrl) return;\n      attr.required = true; // force truthy in case we are on non input element\n\n      ctrl.$validators.required = function(modelValue, viewValue) {\n        return !attr.required || !ctrl.$isEmpty(viewValue);\n      };\n\n      attr.$observe('required', function() {\n        ctrl.$validate();\n      });\n    }\n  };\n};\n\n\nvar patternDirective = function() {\n  return {\n    restrict: 'A',\n    require: '?ngModel',\n    link: function(scope, elm, attr, ctrl) {\n      if (!ctrl) return;\n\n      var regexp, patternExp = attr.ngPattern || attr.pattern;\n      attr.$observe('pattern', function(regex) {\n        if (isString(regex) && regex.length > 0) {\n          regex = new RegExp('^' + regex + '$');\n        }\n\n        if (regex && !regex.test) {\n          throw minErr('ngPattern')('noregexp',\n            'Expected {0} to be a RegExp but was {1}. Element: {2}', patternExp,\n            regex, startingTag(elm));\n        }\n\n        regexp = regex || undefined;\n        ctrl.$validate();\n      });\n\n      ctrl.$validators.pattern = function(value) {\n        return ctrl.$isEmpty(value) || isUndefined(regexp) || regexp.test(value);\n      };\n    }\n  };\n};\n\n\nvar maxlengthDirective = function() {\n  return {\n    restrict: 'A',\n    require: '?ngModel',\n    link: function(scope, elm, attr, ctrl) {\n      if (!ctrl) return;\n\n      var maxlength = -1;\n      attr.$observe('maxlength', function(value) {\n        var intVal = int(value);\n        maxlength = isNaN(intVal) ? -1 : intVal;\n        ctrl.$validate();\n      });\n      ctrl.$validators.maxlength = function(modelValue, viewValue) {\n        return (maxlength < 0) || ctrl.$isEmpty(viewValue) || (viewValue.length <= maxlength);\n      };\n    }\n  };\n};\n\nvar minlengthDirective = function() {\n  return {\n    restrict: 'A',\n    require: '?ngModel',\n    link: function(scope, elm, attr, ctrl) {\n      if (!ctrl) return;\n\n      var minlength = 0;\n      attr.$observe('minlength', function(value) {\n        minlength = int(value) || 0;\n        ctrl.$validate();\n      });\n      ctrl.$validators.minlength = function(modelValue, viewValue) {\n        return ctrl.$isEmpty(viewValue) || viewValue.length >= minlength;\n      };\n    }\n  };\n};\n\n  if (window.angular.bootstrap) {\n    //AngularJS is already loaded, so we can return here...\n    console.log('WARNING: Tried to load angular more than once.');\n    return;\n  }\n\n  //try to bind to jquery now so that one can write jqLite(document).ready()\n  //but we will rebind on bootstrap again.\n  bindJQuery();\n\n  publishExternalAPI(angular);\n\n  jqLite(document).ready(function() {\n    angularInit(document, bootstrap);\n  });\n\n})(window, document);\n\n!window.angular.$$csp() && window.angular.element(document.head).prepend('<style type=\"text/css\">@charset \"UTF-8\";[ng\\\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\\\:form{display:block;}</style>');","/**\n * @license AngularJS v1.3.18\n * (c) 2010-2014 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular, undefined) {'use strict';\n\n/* jshint maxlen: false */\n\n/**\n * @ngdoc module\n * @name ngAnimate\n * @description\n *\n * The `ngAnimate` module provides support for JavaScript, CSS3 transition and CSS3 keyframe animation hooks within existing core and custom directives.\n *\n * <div doc-module-components=\"ngAnimate\"></div>\n *\n * # Usage\n *\n * To see animations in action, all that is required is to define the appropriate CSS classes\n * or to register a JavaScript animation via the `myModule.animation()` function. The directives that support animation automatically are:\n * `ngRepeat`, `ngInclude`, `ngIf`, `ngSwitch`, `ngShow`, `ngHide`, `ngView` and `ngClass`. Custom directives can take advantage of animation\n * by using the `$animate` service.\n *\n * Below is a more detailed breakdown of the supported animation events provided by pre-existing ng directives:\n *\n * | Directive                                                                                                | Supported Animations                                                     |\n * |----------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------|\n * | {@link ng.directive:ngRepeat#animations ngRepeat}                                                        | enter, leave and move                                                    |\n * | {@link ngRoute.directive:ngView#animations ngView}                                                       | enter and leave                                                          |\n * | {@link ng.directive:ngInclude#animations ngInclude}                                                      | enter and leave                                                          |\n * | {@link ng.directive:ngSwitch#animations ngSwitch}                                                        | enter and leave                                                          |\n * | {@link ng.directive:ngIf#animations ngIf}                                                                | enter and leave                                                          |\n * | {@link ng.directive:ngClass#animations ngClass}                                                          | add and remove (the CSS class(es) present)                               |\n * | {@link ng.directive:ngShow#animations ngShow} & {@link ng.directive:ngHide#animations ngHide}            | add and remove (the ng-hide class value)                                 |\n * | {@link ng.directive:form#animation-hooks form} & {@link ng.directive:ngModel#animation-hooks ngModel}    | add and remove (dirty, pristine, valid, invalid & all other validations) |\n * | {@link module:ngMessages#animations ngMessages}                                                          | add and remove (ng-active & ng-inactive)                                 |\n * | {@link module:ngMessages#animations ngMessage}                                                           | enter and leave                                                          |\n *\n * You can find out more information about animations upon visiting each directive page.\n *\n * Below is an example of how to apply animations to a directive that supports animation hooks:\n *\n * ```html\n * <style type=\"text/css\">\n * .slide.ng-enter, .slide.ng-leave {\n *   -webkit-transition:0.5s linear all;\n *   transition:0.5s linear all;\n * }\n *\n * .slide.ng-enter { }        /&#42; starting animations for enter &#42;/\n * .slide.ng-enter.ng-enter-active { } /&#42; terminal animations for enter &#42;/\n * .slide.ng-leave { }        /&#42; starting animations for leave &#42;/\n * .slide.ng-leave.ng-leave-active { } /&#42; terminal animations for leave &#42;/\n * </style>\n *\n * <!--\n * the animate service will automatically add .ng-enter and .ng-leave to the element\n * to trigger the CSS transition/animations\n * -->\n * <ANY class=\"slide\" ng-include=\"...\"></ANY>\n * ```\n *\n * Keep in mind that, by default, if an animation is running, any child elements cannot be animated\n * until the parent element's animation has completed. This blocking feature can be overridden by\n * placing the `ng-animate-children` attribute on a parent container tag.\n *\n * ```html\n * <div class=\"slide-animation\" ng-if=\"on\" ng-animate-children>\n *   <div class=\"fade-animation\" ng-if=\"on\">\n *     <div class=\"explode-animation\" ng-if=\"on\">\n *        ...\n *     </div>\n *   </div>\n * </div>\n * ```\n *\n * When the `on` expression value changes and an animation is triggered then each of the elements within\n * will all animate without the block being applied to child elements.\n *\n * ## Are animations run when the application starts?\n * No they are not. When an application is bootstrapped Angular will disable animations from running to avoid\n * a frenzy of animations from being triggered as soon as the browser has rendered the screen. For this to work,\n * Angular will wait for two digest cycles until enabling animations. From there on, any animation-triggering\n * layout changes in the application will trigger animations as normal.\n *\n * In addition, upon bootstrap, if the routing system or any directives or load remote data (via $http) then Angular\n * will automatically extend the wait time to enable animations once **all** of the outbound HTTP requests\n * are complete.\n *\n * ## CSS-defined Animations\n * The animate service will automatically apply two CSS classes to the animated element and these two CSS classes\n * are designed to contain the start and end CSS styling. Both CSS transitions and keyframe animations are supported\n * and can be used to play along with this naming structure.\n *\n * The following code below demonstrates how to perform animations using **CSS transitions** with Angular:\n *\n * ```html\n * <style type=\"text/css\">\n * /&#42;\n *  The animate class is apart of the element and the ng-enter class\n *  is attached to the element once the enter animation event is triggered\n * &#42;/\n * .reveal-animation.ng-enter {\n *  -webkit-transition: 1s linear all; /&#42; Safari/Chrome &#42;/\n *  transition: 1s linear all; /&#42; All other modern browsers and IE10+ &#42;/\n *\n *  /&#42; The animation preparation code &#42;/\n *  opacity: 0;\n * }\n *\n * /&#42;\n *  Keep in mind that you want to combine both CSS\n *  classes together to avoid any CSS-specificity\n *  conflicts\n * &#42;/\n * .reveal-animation.ng-enter.ng-enter-active {\n *  /&#42; The animation code itself &#42;/\n *  opacity: 1;\n * }\n * </style>\n *\n * <div class=\"view-container\">\n *   <div ng-view class=\"reveal-animation\"></div>\n * </div>\n * ```\n *\n * The following code below demonstrates how to perform animations using **CSS animations** with Angular:\n *\n * ```html\n * <style type=\"text/css\">\n * .reveal-animation.ng-enter {\n *   -webkit-animation: enter_sequence 1s linear; /&#42; Safari/Chrome &#42;/\n *   animation: enter_sequence 1s linear; /&#42; IE10+ and Future Browsers &#42;/\n * }\n * @-webkit-keyframes enter_sequence {\n *   from { opacity:0; }\n *   to { opacity:1; }\n * }\n * @keyframes enter_sequence {\n *   from { opacity:0; }\n *   to { opacity:1; }\n * }\n * </style>\n *\n * <div class=\"view-container\">\n *   <div ng-view class=\"reveal-animation\"></div>\n * </div>\n * ```\n *\n * Both CSS3 animations and transitions can be used together and the animate service will figure out the correct duration and delay timing.\n *\n * Upon DOM mutation, the event class is added first (something like `ng-enter`), then the browser prepares itself to add\n * the active class (in this case `ng-enter-active`) which then triggers the animation. The animation module will automatically\n * detect the CSS code to determine when the animation ends. Once the animation is over then both CSS classes will be\n * removed from the DOM. If a browser does not support CSS transitions or CSS animations then the animation will start and end\n * immediately resulting in a DOM element that is at its final state. This final state is when the DOM element\n * has no CSS transition/animation classes applied to it.\n *\n * ### Structural transition animations\n *\n * Structural transitions (such as enter, leave and move) will always apply a `0s none` transition\n * value to force the browser into rendering the styles defined in the setup (`.ng-enter`, `.ng-leave`\n * or `.ng-move`) class. This means that any active transition animations operating on the element\n * will be cut off to make way for the enter, leave or move animation.\n *\n * ### Class-based transition animations\n *\n * Class-based transitions refer to transition animations that are triggered when a CSS class is\n * added to or removed from the element (via `$animate.addClass`, `$animate.removeClass`,\n * `$animate.setClass`, or by directives such as `ngClass`, `ngModel` and `form`).\n * They are different when compared to structural animations since they **do not cancel existing\n * animations** nor do they **block successive transitions** from rendering on the same element.\n * This distinction allows for **multiple class-based transitions** to be performed on the same element.\n *\n * In addition to ngAnimate supporting the default (natural) functionality of class-based transition\n * animations, ngAnimate also decorates the element with starting and ending CSS classes to aid the\n * developer in further styling the element throughout the transition animation. Earlier versions\n * of ngAnimate may have caused natural CSS transitions to break and not render properly due to\n * $animate temporarily blocking transitions using `0s none` in order to allow the setup CSS class\n * (the `-add` or `-remove` class) to be applied without triggering an animation. However, as of\n * **version 1.3**, this workaround has been removed with ngAnimate and all non-ngAnimate CSS\n * class transitions are compatible with ngAnimate.\n *\n * There is, however, one special case when dealing with class-based transitions in ngAnimate.\n * When rendering class-based transitions that make use of the setup and active CSS classes\n * (e.g. `.fade-add` and `.fade-add-active` for when `.fade` is added) be sure to define\n * the transition value **on the active CSS class** and not the setup class.\n *\n * ```css\n * .fade-add {\n *   /&#42; remember to place a 0s transition here\n *      to ensure that the styles are applied instantly\n *      even if the element already has a transition style &#42;/\n *   transition:0s linear all;\n *\n *   /&#42; starting CSS styles &#42;/\n *   opacity:1;\n * }\n * .fade-add.fade-add-active {\n *   /&#42; this will be the length of the animation &#42;/\n *   transition:1s linear all;\n *   opacity:0;\n * }\n * ```\n *\n * The setup CSS class (in this case `.fade-add`) also has a transition style property, however, it\n * has a duration of zero. This may not be required, however, incase the browser is unable to render\n * the styling present in this CSS class instantly then it could be that the browser is attempting\n * to perform an unnecessary transition.\n *\n * This workaround, however, does not apply to  standard class-based transitions that are rendered\n * when a CSS class containing a transition is applied to an element:\n *\n * ```css\n * /&#42; this works as expected &#42;/\n * .fade {\n *   transition:1s linear all;\n *   opacity:0;\n * }\n * ```\n *\n * Please keep this in mind when coding the CSS markup that will be used within class-based transitions.\n * Also, try not to mix the two class-based animation flavors together since the CSS code may become\n * overly complex.\n *\n *\n * ### Preventing Collisions With Third Party Libraries\n *\n * Some third-party frameworks place animation duration defaults across many element or className\n * selectors in order to make their code small and reuseable. This can lead to issues with ngAnimate, which\n * is expecting actual animations on these elements and has to wait for their completion.\n *\n * You can prevent this unwanted behavior by using a prefix on all your animation classes:\n *\n * ```css\n * /&#42; prefixed with animate- &#42;/\n * .animate-fade-add.animate-fade-add-active {\n *   transition:1s linear all;\n *   opacity:0;\n * }\n * ```\n *\n * You then configure `$animate` to enforce this prefix:\n *\n * ```js\n * $animateProvider.classNameFilter(/animate-/);\n * ```\n * </div>\n *\n * ### CSS Staggering Animations\n * A Staggering animation is a collection of animations that are issued with a slight delay in between each successive operation resulting in a\n * curtain-like effect. The ngAnimate module (versions >=1.2) supports staggering animations and the stagger effect can be\n * performed by creating a **ng-EVENT-stagger** CSS class and attaching that class to the base CSS class used for\n * the animation. The style property expected within the stagger class can either be a **transition-delay** or an\n * **animation-delay** property (or both if your animation contains both transitions and keyframe animations).\n *\n * ```css\n * .my-animation.ng-enter {\n *   /&#42; standard transition code &#42;/\n *   -webkit-transition: 1s linear all;\n *   transition: 1s linear all;\n *   opacity:0;\n * }\n * .my-animation.ng-enter-stagger {\n *   /&#42; this will have a 100ms delay between each successive leave animation &#42;/\n *   -webkit-transition-delay: 0.1s;\n *   transition-delay: 0.1s;\n *\n *   /&#42; in case the stagger doesn't work then these two values\n *    must be set to 0 to avoid an accidental CSS inheritance &#42;/\n *   -webkit-transition-duration: 0s;\n *   transition-duration: 0s;\n * }\n * .my-animation.ng-enter.ng-enter-active {\n *   /&#42; standard transition styles &#42;/\n *   opacity:1;\n * }\n * ```\n *\n * Staggering animations work by default in ngRepeat (so long as the CSS class is defined). Outside of ngRepeat, to use staggering animations\n * on your own, they can be triggered by firing multiple calls to the same event on $animate. However, the restrictions surrounding this\n * are that each of the elements must have the same CSS className value as well as the same parent element. A stagger operation\n * will also be reset if more than 10ms has passed after the last animation has been fired.\n *\n * The following code will issue the **ng-leave-stagger** event on the element provided:\n *\n * ```js\n * var kids = parent.children();\n *\n * $animate.leave(kids[0]); //stagger index=0\n * $animate.leave(kids[1]); //stagger index=1\n * $animate.leave(kids[2]); //stagger index=2\n * $animate.leave(kids[3]); //stagger index=3\n * $animate.leave(kids[4]); //stagger index=4\n *\n * $timeout(function() {\n *   //stagger has reset itself\n *   $animate.leave(kids[5]); //stagger index=0\n *   $animate.leave(kids[6]); //stagger index=1\n * }, 100, false);\n * ```\n *\n * Stagger animations are currently only supported within CSS-defined animations.\n *\n * ## JavaScript-defined Animations\n * In the event that you do not want to use CSS3 transitions or CSS3 animations or if you wish to offer animations on browsers that do not\n * yet support CSS transitions/animations, then you can make use of JavaScript animations defined inside of your AngularJS module.\n *\n * ```js\n * //!annotate=\"YourApp\" Your AngularJS Module|Replace this or ngModule with the module that you used to define your application.\n * var ngModule = angular.module('YourApp', ['ngAnimate']);\n * ngModule.animation('.my-crazy-animation', function() {\n *   return {\n *     enter: function(element, done) {\n *       //run the animation here and call done when the animation is complete\n *       return function(cancelled) {\n *         //this (optional) function will be called when the animation\n *         //completes or when the animation is cancelled (the cancelled\n *         //flag will be set to true if cancelled).\n *       };\n *     },\n *     leave: function(element, done) { },\n *     move: function(element, done) { },\n *\n *     //animation that can be triggered before the class is added\n *     beforeAddClass: function(element, className, done) { },\n *\n *     //animation that can be triggered after the class is added\n *     addClass: function(element, className, done) { },\n *\n *     //animation that can be triggered before the class is removed\n *     beforeRemoveClass: function(element, className, done) { },\n *\n *     //animation that can be triggered after the class is removed\n *     removeClass: function(element, className, done) { }\n *   };\n * });\n * ```\n *\n * JavaScript-defined animations are created with a CSS-like class selector and a collection of events which are set to run\n * a javascript callback function. When an animation is triggered, $animate will look for a matching animation which fits\n * the element's CSS class attribute value and then run the matching animation event function (if found).\n * In other words, if the CSS classes present on the animated element match any of the JavaScript animations then the callback function will\n * be executed. It should be also noted that only simple, single class selectors are allowed (compound class selectors are not supported).\n *\n * Within a JavaScript animation, an object containing various event callback animation functions is expected to be returned.\n * As explained above, these callbacks are triggered based on the animation event. Therefore if an enter animation is run,\n * and the JavaScript animation is found, then the enter callback will handle that animation (in addition to the CSS keyframe animation\n * or transition code that is defined via a stylesheet).\n *\n *\n * ### Applying Directive-specific Styles to an Animation\n * In some cases a directive or service may want to provide `$animate` with extra details that the animation will\n * include into its animation. Let's say for example we wanted to render an animation that animates an element\n * towards the mouse coordinates as to where the user clicked last. By collecting the X/Y coordinates of the click\n * (via the event parameter) we can set the `top` and `left` styles into an object and pass that into our function\n * call to `$animate.addClass`.\n *\n * ```js\n * canvas.on('click', function(e) {\n *   $animate.addClass(element, 'on', {\n *     to: {\n *       left : e.client.x + 'px',\n *       top : e.client.y + 'px'\n *     }\n *   }):\n * });\n * ```\n *\n * Now when the animation runs, and a transition or keyframe animation is picked up, then the animation itself will\n * also include and transition the styling of the `left` and `top` properties into its running animation. If we want\n * to provide some starting animation values then we can do so by placing the starting animations styles into an object\n * called `from` in the same object as the `to` animations.\n *\n * ```js\n * canvas.on('click', function(e) {\n *   $animate.addClass(element, 'on', {\n *     from: {\n *        position: 'absolute',\n *        left: '0px',\n *        top: '0px'\n *     },\n *     to: {\n *       left : e.client.x + 'px',\n *       top : e.client.y + 'px'\n *     }\n *   }):\n * });\n * ```\n *\n * Once the animation is complete or cancelled then the union of both the before and after styles are applied to the\n * element. If `ngAnimate` is not present then the styles will be applied immediately.\n *\n */\n\nangular.module('ngAnimate', ['ng'])\n\n  /**\n   * @ngdoc provider\n   * @name $animateProvider\n   * @description\n   *\n   * The `$animateProvider` allows developers to register JavaScript animation event handlers directly inside of a module.\n   * When an animation is triggered, the $animate service will query the $animate service to find any animations that match\n   * the provided name value.\n   *\n   * Requires the {@link ngAnimate `ngAnimate`} module to be installed.\n   *\n   * Please visit the {@link ngAnimate `ngAnimate`} module overview page learn more about how to use animations in your application.\n   *\n   */\n  .directive('ngAnimateChildren', function() {\n    var NG_ANIMATE_CHILDREN = '$$ngAnimateChildren';\n    return function(scope, element, attrs) {\n      var val = attrs.ngAnimateChildren;\n      if (angular.isString(val) && val.length === 0) { //empty attribute\n        element.data(NG_ANIMATE_CHILDREN, true);\n      } else {\n        scope.$watch(val, function(value) {\n          element.data(NG_ANIMATE_CHILDREN, !!value);\n        });\n      }\n    };\n  })\n\n  //this private service is only used within CSS-enabled animations\n  //IE8 + IE9 do not support rAF natively, but that is fine since they\n  //also don't support transitions and keyframes which means that the code\n  //below will never be used by the two browsers.\n  .factory('$$animateReflow', ['$$rAF', '$document', function($$rAF, $document) {\n    var bod = $document[0].body;\n    return function(fn) {\n      //the returned function acts as the cancellation function\n      return $$rAF(function() {\n        //the line below will force the browser to perform a repaint\n        //so that all the animated elements within the animation frame\n        //will be properly updated and drawn on screen. This is\n        //required to perform multi-class CSS based animations with\n        //Firefox. DO NOT REMOVE THIS LINE. DO NOT OPTIMIZE THIS LINE.\n        //THE MINIFIER WILL REMOVE IT OTHERWISE WHICH WILL RESULT IN AN\n        //UNPREDICTABLE BUG THAT IS VERY HARD TO TRACK DOWN AND WILL\n        //TAKE YEARS AWAY FROM YOUR LIFE!\n        fn(bod.offsetWidth);\n      });\n    };\n  }])\n\n  .config(['$provide', '$animateProvider', function($provide, $animateProvider) {\n    var noop = angular.noop;\n    var forEach = angular.forEach;\n    var selectors = $animateProvider.$$selectors;\n    var isArray = angular.isArray;\n    var isString = angular.isString;\n    var isObject = angular.isObject;\n\n    var ELEMENT_NODE = 1;\n    var NG_ANIMATE_STATE = '$$ngAnimateState';\n    var NG_ANIMATE_CHILDREN = '$$ngAnimateChildren';\n    var NG_ANIMATE_CLASS_NAME = 'ng-animate';\n    var rootAnimateState = {running: true};\n\n    function extractElementNode(element) {\n      for (var i = 0; i < element.length; i++) {\n        var elm = element[i];\n        if (elm.nodeType == ELEMENT_NODE) {\n          return elm;\n        }\n      }\n    }\n\n    function prepareElement(element) {\n      return element && angular.element(element);\n    }\n\n    function stripCommentsFromElement(element) {\n      return angular.element(extractElementNode(element));\n    }\n\n    function isMatchingElement(elm1, elm2) {\n      return extractElementNode(elm1) == extractElementNode(elm2);\n    }\n    var $$jqLite;\n    $provide.decorator('$animate',\n        ['$delegate', '$$q', '$injector', '$sniffer', '$rootElement', '$$asyncCallback', '$rootScope', '$document', '$templateRequest', '$$jqLite',\n function($delegate,   $$q,   $injector,   $sniffer,   $rootElement,   $$asyncCallback,   $rootScope,   $document,   $templateRequest,   $$$jqLite) {\n\n      $$jqLite = $$$jqLite;\n      $rootElement.data(NG_ANIMATE_STATE, rootAnimateState);\n\n      // Wait until all directive and route-related templates are downloaded and\n      // compiled. The $templateRequest.totalPendingRequests variable keeps track of\n      // all of the remote templates being currently downloaded. If there are no\n      // templates currently downloading then the watcher will still fire anyway.\n      var deregisterWatch = $rootScope.$watch(\n        function() { return $templateRequest.totalPendingRequests; },\n        function(val, oldVal) {\n          if (val !== 0) return;\n          deregisterWatch();\n\n          // Now that all templates have been downloaded, $animate will wait until\n          // the post digest queue is empty before enabling animations. By having two\n          // calls to $postDigest calls we can ensure that the flag is enabled at the\n          // very end of the post digest queue. Since all of the animations in $animate\n          // use $postDigest, it's important that the code below executes at the end.\n          // This basically means that the page is fully downloaded and compiled before\n          // any animations are triggered.\n          $rootScope.$$postDigest(function() {\n            $rootScope.$$postDigest(function() {\n              rootAnimateState.running = false;\n            });\n          });\n        }\n      );\n\n      var globalAnimationCounter = 0;\n      var classNameFilter = $animateProvider.classNameFilter();\n      var isAnimatableClassName = !classNameFilter\n              ? function() { return true; }\n              : function(className) {\n                return classNameFilter.test(className);\n              };\n\n      function classBasedAnimationsBlocked(element, setter) {\n        var data = element.data(NG_ANIMATE_STATE) || {};\n        if (setter) {\n          data.running = true;\n          data.structural = true;\n          element.data(NG_ANIMATE_STATE, data);\n        }\n        return data.disabled || (data.running && data.structural);\n      }\n\n      function runAnimationPostDigest(fn) {\n        var cancelFn, defer = $$q.defer();\n        defer.promise.$$cancelFn = function() {\n          cancelFn && cancelFn();\n        };\n        $rootScope.$$postDigest(function() {\n          cancelFn = fn(function() {\n            defer.resolve();\n          });\n        });\n        return defer.promise;\n      }\n\n      function parseAnimateOptions(options) {\n        // some plugin code may still be passing in the callback\n        // function as the last param for the $animate methods so\n        // it's best to only allow string or array values for now\n        if (isObject(options)) {\n          if (options.tempClasses && isString(options.tempClasses)) {\n            options.tempClasses = options.tempClasses.split(/\\s+/);\n          }\n          return options;\n        }\n      }\n\n      function resolveElementClasses(element, cache, runningAnimations) {\n        runningAnimations = runningAnimations || {};\n\n        var lookup = {};\n        forEach(runningAnimations, function(data, selector) {\n          forEach(selector.split(' '), function(s) {\n            lookup[s]=data;\n          });\n        });\n\n        var hasClasses = Object.create(null);\n        forEach((element.attr('class') || '').split(/\\s+/), function(className) {\n          hasClasses[className] = true;\n        });\n\n        var toAdd = [], toRemove = [];\n        forEach((cache && cache.classes) || [], function(status, className) {\n          var hasClass = hasClasses[className];\n          var matchingAnimation = lookup[className] || {};\n\n          // When addClass and removeClass is called then $animate will check to\n          // see if addClass and removeClass cancel each other out. When there are\n          // more calls to removeClass than addClass then the count falls below 0\n          // and then the removeClass animation will be allowed. Otherwise if the\n          // count is above 0 then that means an addClass animation will commence.\n          // Once an animation is allowed then the code will also check to see if\n          // there exists any on-going animation that is already adding or remvoing\n          // the matching CSS class.\n          if (status === false) {\n            //does it have the class or will it have the class\n            if (hasClass || matchingAnimation.event == 'addClass') {\n              toRemove.push(className);\n            }\n          } else if (status === true) {\n            //is the class missing or will it be removed?\n            if (!hasClass || matchingAnimation.event == 'removeClass') {\n              toAdd.push(className);\n            }\n          }\n        });\n\n        return (toAdd.length + toRemove.length) > 0 && [toAdd.join(' '), toRemove.join(' ')];\n      }\n\n      function lookup(name) {\n        if (name) {\n          var matches = [],\n              flagMap = {},\n              classes = name.substr(1).split('.');\n\n          //the empty string value is the default animation\n          //operation which performs CSS transition and keyframe\n          //animations sniffing. This is always included for each\n          //element animation procedure if the browser supports\n          //transitions and/or keyframe animations. The default\n          //animation is added to the top of the list to prevent\n          //any previous animations from affecting the element styling\n          //prior to the element being animated.\n          if ($sniffer.transitions || $sniffer.animations) {\n            matches.push($injector.get(selectors['']));\n          }\n\n          for (var i=0; i < classes.length; i++) {\n            var klass = classes[i],\n                selectorFactoryName = selectors[klass];\n            if (selectorFactoryName && !flagMap[klass]) {\n              matches.push($injector.get(selectorFactoryName));\n              flagMap[klass] = true;\n            }\n          }\n          return matches;\n        }\n      }\n\n      function animationRunner(element, animationEvent, className, options) {\n        //transcluded directives may sometimes fire an animation using only comment nodes\n        //best to catch this early on to prevent any animation operations from occurring\n        var node = element[0];\n        if (!node) {\n          return;\n        }\n\n        if (options) {\n          options.to = options.to || {};\n          options.from = options.from || {};\n        }\n\n        var classNameAdd;\n        var classNameRemove;\n        if (isArray(className)) {\n          classNameAdd = className[0];\n          classNameRemove = className[1];\n          if (!classNameAdd) {\n            className = classNameRemove;\n            animationEvent = 'removeClass';\n          } else if (!classNameRemove) {\n            className = classNameAdd;\n            animationEvent = 'addClass';\n          } else {\n            className = classNameAdd + ' ' + classNameRemove;\n          }\n        }\n\n        var isSetClassOperation = animationEvent == 'setClass';\n        var isClassBased = isSetClassOperation\n                           || animationEvent == 'addClass'\n                           || animationEvent == 'removeClass'\n                           || animationEvent == 'animate';\n\n        var currentClassName = element.attr('class');\n        var classes = currentClassName + ' ' + className;\n        if (!isAnimatableClassName(classes)) {\n          return;\n        }\n\n        var beforeComplete = noop,\n            beforeCancel = [],\n            before = [],\n            afterComplete = noop,\n            afterCancel = [],\n            after = [];\n\n        var animationLookup = (' ' + classes).replace(/\\s+/g,'.');\n        forEach(lookup(animationLookup), function(animationFactory) {\n          var created = registerAnimation(animationFactory, animationEvent);\n          if (!created && isSetClassOperation) {\n            registerAnimation(animationFactory, 'addClass');\n            registerAnimation(animationFactory, 'removeClass');\n          }\n        });\n\n        function registerAnimation(animationFactory, event) {\n          var afterFn = animationFactory[event];\n          var beforeFn = animationFactory['before' + event.charAt(0).toUpperCase() + event.substr(1)];\n          if (afterFn || beforeFn) {\n            if (event == 'leave') {\n              beforeFn = afterFn;\n              //when set as null then animation knows to skip this phase\n              afterFn = null;\n            }\n            after.push({\n              event: event, fn: afterFn\n            });\n            before.push({\n              event: event, fn: beforeFn\n            });\n            return true;\n          }\n        }\n\n        function run(fns, cancellations, allCompleteFn) {\n          var animations = [];\n          forEach(fns, function(animation) {\n            animation.fn && animations.push(animation);\n          });\n\n          var count = 0;\n          function afterAnimationComplete(index) {\n            if (cancellations) {\n              (cancellations[index] || noop)();\n              if (++count < animations.length) return;\n              cancellations = null;\n            }\n            allCompleteFn();\n          }\n\n          //The code below adds directly to the array in order to work with\n          //both sync and async animations. Sync animations are when the done()\n          //operation is called right away. DO NOT REFACTOR!\n          forEach(animations, function(animation, index) {\n            var progress = function() {\n              afterAnimationComplete(index);\n            };\n            switch (animation.event) {\n              case 'setClass':\n                cancellations.push(animation.fn(element, classNameAdd, classNameRemove, progress, options));\n                break;\n              case 'animate':\n                cancellations.push(animation.fn(element, className, options.from, options.to, progress));\n                break;\n              case 'addClass':\n                cancellations.push(animation.fn(element, classNameAdd || className,     progress, options));\n                break;\n              case 'removeClass':\n                cancellations.push(animation.fn(element, classNameRemove || className,  progress, options));\n                break;\n              default:\n                cancellations.push(animation.fn(element, progress, options));\n                break;\n            }\n          });\n\n          if (cancellations && cancellations.length === 0) {\n            allCompleteFn();\n          }\n        }\n\n        return {\n          node: node,\n          event: animationEvent,\n          className: className,\n          isClassBased: isClassBased,\n          isSetClassOperation: isSetClassOperation,\n          applyStyles: function() {\n            if (options) {\n              element.css(angular.extend(options.from || {}, options.to || {}));\n            }\n          },\n          before: function(allCompleteFn) {\n            beforeComplete = allCompleteFn;\n            run(before, beforeCancel, function() {\n              beforeComplete = noop;\n              allCompleteFn();\n            });\n          },\n          after: function(allCompleteFn) {\n            afterComplete = allCompleteFn;\n            run(after, afterCancel, function() {\n              afterComplete = noop;\n              allCompleteFn();\n            });\n          },\n          cancel: function() {\n            if (beforeCancel) {\n              forEach(beforeCancel, function(cancelFn) {\n                (cancelFn || noop)(true);\n              });\n              beforeComplete(true);\n            }\n            if (afterCancel) {\n              forEach(afterCancel, function(cancelFn) {\n                (cancelFn || noop)(true);\n              });\n              afterComplete(true);\n            }\n          }\n        };\n      }\n\n      /**\n       * @ngdoc service\n       * @name $animate\n       * @kind object\n       *\n       * @description\n       * The `$animate` service provides animation detection support while performing DOM operations (enter, leave and move) as well as during addClass and removeClass operations.\n       * When any of these operations are run, the $animate service\n       * will examine any JavaScript-defined animations (which are defined by using the $animateProvider provider object)\n       * as well as any CSS-defined animations against the CSS classes present on the element once the DOM operation is run.\n       *\n       * The `$animate` service is used behind the scenes with pre-existing directives and animation with these directives\n       * will work out of the box without any extra configuration.\n       *\n       * Requires the {@link ngAnimate `ngAnimate`} module to be installed.\n       *\n       * Please visit the {@link ngAnimate `ngAnimate`} module overview page learn more about how to use animations in your application.\n       * ## Callback Promises\n       * With AngularJS 1.3, each of the animation methods, on the `$animate` service, return a promise when called. The\n       * promise itself is then resolved once the animation has completed itself, has been cancelled or has been\n       * skipped due to animations being disabled. (Note that even if the animation is cancelled it will still\n       * call the resolve function of the animation.)\n       *\n       * ```js\n       * $animate.enter(element, container).then(function() {\n       *   //...this is called once the animation is complete...\n       * });\n       * ```\n       *\n       * Also note that, due to the nature of the callback promise, if any Angular-specific code (like changing the scope,\n       * location of the page, etc...) is executed within the callback promise then be sure to wrap the code using\n       * `$scope.$apply(...)`;\n       *\n       * ```js\n       * $animate.leave(element).then(function() {\n       *   $scope.$apply(function() {\n       *     $location.path('/new-page');\n       *   });\n       * });\n       * ```\n       *\n       * An animation can also be cancelled by calling the `$animate.cancel(promise)` method with the provided\n       * promise that was returned when the animation was started.\n       *\n       * ```js\n       * var promise = $animate.addClass(element, 'super-long-animation');\n       * promise.then(function() {\n       *   //this will still be called even if cancelled\n       * });\n       *\n       * element.on('click', function() {\n       *   //tooo lazy to wait for the animation to end\n       *   $animate.cancel(promise);\n       * });\n       * ```\n       *\n       * (Keep in mind that the promise cancellation is unique to `$animate` since promises in\n       * general cannot be cancelled.)\n       *\n       */\n      return {\n        /**\n         * @ngdoc method\n         * @name $animate#animate\n         * @kind function\n         *\n         * @description\n         * Performs an inline animation on the element which applies the provided `to` and `from` CSS styles to the element.\n         * If any detected CSS transition, keyframe or JavaScript matches the provided `className` value then the animation\n         * will take on the provided styles. For example, if a transition animation is set for the given className then the\n         * provided `from` and `to` styles will be applied alongside the given transition. If a JavaScript animation is\n         * detected then the provided styles will be given in as function paramters.\n         *\n         * ```js\n         * ngModule.animation('.my-inline-animation', function() {\n         *   return {\n         *     animate : function(element, className, from, to, done) {\n         *       //styles\n         *     }\n         *   }\n         * });\n         * ```\n         *\n         * Below is a breakdown of each step that occurs during the `animate` animation:\n         *\n         * | Animation Step                                                                                                        | What the element class attribute looks like                  |\n         * |-----------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------|\n         * | 1. `$animate.animate(...)` is called                                                                                  | `class=\"my-animation\"`                                       |\n         * | 2. `$animate` waits for the next digest to start the animation                                                        | `class=\"my-animation ng-animate\"`                            |\n         * | 3. `$animate` runs the JavaScript-defined animations detected on the element                                          | `class=\"my-animation ng-animate\"`                            |\n         * | 4. the `className` class value is added to the element                                                                | `class=\"my-animation ng-animate className\"`                  |\n         * | 5. `$animate` scans the element styles to get the CSS transition/animation duration and delay                         | `class=\"my-animation ng-animate className\"`                  |\n         * | 6. `$animate` blocks all CSS transitions on the element to ensure the `.className` class styling is applied right away| `class=\"my-animation ng-animate className\"`                  |\n         * | 7. `$animate` applies the provided collection of `from` CSS styles to the element                                     | `class=\"my-animation ng-animate className\"`                  |\n         * | 8. `$animate` waits for a single animation frame (this performs a reflow)                                             | `class=\"my-animation ng-animate className\"`                  |\n         * | 9. `$animate` removes the CSS transition block placed on the element                                                  | `class=\"my-animation ng-animate className\"`                  |\n         * | 10. the `className-active` class is added (this triggers the CSS transition/animation)                                | `class=\"my-animation ng-animate className className-active\"` |\n         * | 11. `$animate` applies the collection of `to` CSS styles to the element which are then handled by the transition      | `class=\"my-animation ng-animate className className-active\"` |\n         * | 12. `$animate` waits for the animation to complete (via events and timeout)                                           | `class=\"my-animation ng-animate className className-active\"` |\n         * | 13. The animation ends and all generated CSS classes are removed from the element                                     | `class=\"my-animation\"`                                       |\n         * | 14. The returned promise is resolved.                                                                                 | `class=\"my-animation\"`                                       |\n         *\n         * @param {DOMElement} element the element that will be the focus of the enter animation\n         * @param {object} from a collection of CSS styles that will be applied to the element at the start of the animation\n         * @param {object} to a collection of CSS styles that the element will animate towards\n         * @param {string=} className an optional CSS class that will be added to the element for the duration of the animation (the default class is `ng-inline-animate`)\n         * @param {object=} options an optional collection of options that will be picked up by the CSS transition/animation\n         * @return {Promise} the animation callback promise\n        */\n        animate: function(element, from, to, className, options) {\n          className = className || 'ng-inline-animate';\n          options = parseAnimateOptions(options) || {};\n          options.from = to ? from : null;\n          options.to   = to ? to : from;\n\n          return runAnimationPostDigest(function(done) {\n            return performAnimation('animate', className, stripCommentsFromElement(element), null, null, noop, options, done);\n          });\n        },\n\n        /**\n         * @ngdoc method\n         * @name $animate#enter\n         * @kind function\n         *\n         * @description\n         * Appends the element to the parentElement element that resides in the document and then runs the enter animation. Once\n         * the animation is started, the following CSS classes will be present on the element for the duration of the animation:\n         *\n         * Below is a breakdown of each step that occurs during enter animation:\n         *\n         * | Animation Step                                                                                                        | What the element class attribute looks like                |\n         * |-----------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------|\n         * | 1. `$animate.enter(...)` is called                                                                                    | `class=\"my-animation\"`                                     |\n         * | 2. element is inserted into the `parentElement` element or beside the `afterElement` element                          | `class=\"my-animation\"`                                     |\n         * | 3. `$animate` waits for the next digest to start the animation                                                        | `class=\"my-animation ng-animate\"`                          |\n         * | 4. `$animate` runs the JavaScript-defined animations detected on the element                                          | `class=\"my-animation ng-animate\"`                          |\n         * | 5. the `.ng-enter` class is added to the element                                                                      | `class=\"my-animation ng-animate ng-enter\"`                 |\n         * | 6. `$animate` scans the element styles to get the CSS transition/animation duration and delay                         | `class=\"my-animation ng-animate ng-enter\"`                 |\n         * | 7. `$animate` blocks all CSS transitions on the element to ensure the `.ng-enter` class styling is applied right away | `class=\"my-animation ng-animate ng-enter\"`                 |\n         * | 8. `$animate` waits for a single animation frame (this performs a reflow)                                             | `class=\"my-animation ng-animate ng-enter\"`                 |\n         * | 9. `$animate` removes the CSS transition block placed on the element                                                  | `class=\"my-animation ng-animate ng-enter\"`                 |\n         * | 10. the `.ng-enter-active` class is added (this triggers the CSS transition/animation)                                | `class=\"my-animation ng-animate ng-enter ng-enter-active\"` |\n         * | 11. `$animate` waits for the animation to complete (via events and timeout)                                           | `class=\"my-animation ng-animate ng-enter ng-enter-active\"` |\n         * | 12. The animation ends and all generated CSS classes are removed from the element                                     | `class=\"my-animation\"`                                     |\n         * | 13. The returned promise is resolved.                                                                                 | `class=\"my-animation\"`                                     |\n         *\n         * @param {DOMElement} element the element that will be the focus of the enter animation\n         * @param {DOMElement} parentElement the parent element of the element that will be the focus of the enter animation\n         * @param {DOMElement} afterElement the sibling element (which is the previous element) of the element that will be the focus of the enter animation\n         * @param {object=} options an optional collection of options that will be picked up by the CSS transition/animation\n         * @return {Promise} the animation callback promise\n        */\n        enter: function(element, parentElement, afterElement, options) {\n          options = parseAnimateOptions(options);\n          element = angular.element(element);\n          parentElement = prepareElement(parentElement);\n          afterElement = prepareElement(afterElement);\n\n          classBasedAnimationsBlocked(element, true);\n          $delegate.enter(element, parentElement, afterElement);\n          return runAnimationPostDigest(function(done) {\n            return performAnimation('enter', 'ng-enter', stripCommentsFromElement(element), parentElement, afterElement, noop, options, done);\n          });\n        },\n\n        /**\n         * @ngdoc method\n         * @name $animate#leave\n         * @kind function\n         *\n         * @description\n         * Runs the leave animation operation and, upon completion, removes the element from the DOM. Once\n         * the animation is started, the following CSS classes will be added for the duration of the animation:\n         *\n         * Below is a breakdown of each step that occurs during leave animation:\n         *\n         * | Animation Step                                                                                                        | What the element class attribute looks like                |\n         * |-----------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------|\n         * | 1. `$animate.leave(...)` is called                                                                                    | `class=\"my-animation\"`                                     |\n         * | 2. `$animate` runs the JavaScript-defined animations detected on the element                                          | `class=\"my-animation ng-animate\"`                          |\n         * | 3. `$animate` waits for the next digest to start the animation                                                        | `class=\"my-animation ng-animate\"`                          |\n         * | 4. the `.ng-leave` class is added to the element                                                                      | `class=\"my-animation ng-animate ng-leave\"`                 |\n         * | 5. `$animate` scans the element styles to get the CSS transition/animation duration and delay                         | `class=\"my-animation ng-animate ng-leave\"`                 |\n         * | 6. `$animate` blocks all CSS transitions on the element to ensure the `.ng-leave` class styling is applied right away | `class=\"my-animation ng-animate ng-leave\"`                 |\n         * | 7. `$animate` waits for a single animation frame (this performs a reflow)                                             | `class=\"my-animation ng-animate ng-leave\"`                 |\n         * | 8. `$animate` removes the CSS transition block placed on the element                                                  | `class=\"my-animation ng-animate ng-leave\"`                 |\n         * | 9. the `.ng-leave-active` class is added (this triggers the CSS transition/animation)                                 | `class=\"my-animation ng-animate ng-leave ng-leave-active\"` |\n         * | 10. `$animate` waits for the animation to complete (via events and timeout)                                           | `class=\"my-animation ng-animate ng-leave ng-leave-active\"` |\n         * | 11. The animation ends and all generated CSS classes are removed from the element                                     | `class=\"my-animation\"`                                     |\n         * | 12. The element is removed from the DOM                                                                               | ...                                                        |\n         * | 13. The returned promise is resolved.                                                                                 | ...                                                        |\n         *\n         * @param {DOMElement} element the element that will be the focus of the leave animation\n         * @param {object=} options an optional collection of styles that will be picked up by the CSS transition/animation\n         * @return {Promise} the animation callback promise\n        */\n        leave: function(element, options) {\n          options = parseAnimateOptions(options);\n          element = angular.element(element);\n\n          cancelChildAnimations(element);\n          classBasedAnimationsBlocked(element, true);\n          return runAnimationPostDigest(function(done) {\n            return performAnimation('leave', 'ng-leave', stripCommentsFromElement(element), null, null, function() {\n              $delegate.leave(element);\n            }, options, done);\n          });\n        },\n\n        /**\n         * @ngdoc method\n         * @name $animate#move\n         * @kind function\n         *\n         * @description\n         * Fires the move DOM operation. Just before the animation starts, the animate service will either append it into the parentElement container or\n         * add the element directly after the afterElement element if present. Then the move animation will be run. Once\n         * the animation is started, the following CSS classes will be added for the duration of the animation:\n         *\n         * Below is a breakdown of each step that occurs during move animation:\n         *\n         * | Animation Step                                                                                                       | What the element class attribute looks like              |\n         * |----------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------|\n         * | 1. `$animate.move(...)` is called                                                                                    | `class=\"my-animation\"`                                   |\n         * | 2. element is moved into the parentElement element or beside the afterElement element                                | `class=\"my-animation\"`                                   |\n         * | 3. `$animate` waits for the next digest to start the animation                                                       | `class=\"my-animation ng-animate\"`                        |\n         * | 4. `$animate` runs the JavaScript-defined animations detected on the element                                         | `class=\"my-animation ng-animate\"`                        |\n         * | 5. the `.ng-move` class is added to the element                                                                      | `class=\"my-animation ng-animate ng-move\"`                |\n         * | 6. `$animate` scans the element styles to get the CSS transition/animation duration and delay                        | `class=\"my-animation ng-animate ng-move\"`                |\n         * | 7. `$animate` blocks all CSS transitions on the element to ensure the `.ng-move` class styling is applied right away | `class=\"my-animation ng-animate ng-move\"`                |\n         * | 8. `$animate` waits for a single animation frame (this performs a reflow)                                            | `class=\"my-animation ng-animate ng-move\"`                |\n         * | 9. `$animate` removes the CSS transition block placed on the element                                                 | `class=\"my-animation ng-animate ng-move\"`                |\n         * | 10. the `.ng-move-active` class is added (this triggers the CSS transition/animation)                                | `class=\"my-animation ng-animate ng-move ng-move-active\"` |\n         * | 11. `$animate` waits for the animation to complete (via events and timeout)                                          | `class=\"my-animation ng-animate ng-move ng-move-active\"` |\n         * | 12. The animation ends and all generated CSS classes are removed from the element                                    | `class=\"my-animation\"`                                   |\n         * | 13. The returned promise is resolved.                                                                                | `class=\"my-animation\"`                                   |\n         *\n         * @param {DOMElement} element the element that will be the focus of the move animation\n         * @param {DOMElement} parentElement the parentElement element of the element that will be the focus of the move animation\n         * @param {DOMElement} afterElement the sibling element (which is the previous element) of the element that will be the focus of the move animation\n         * @param {object=} options an optional collection of styles that will be picked up by the CSS transition/animation\n         * @return {Promise} the animation callback promise\n        */\n        move: function(element, parentElement, afterElement, options) {\n          options = parseAnimateOptions(options);\n          element = angular.element(element);\n          parentElement = prepareElement(parentElement);\n          afterElement = prepareElement(afterElement);\n\n          cancelChildAnimations(element);\n          classBasedAnimationsBlocked(element, true);\n          $delegate.move(element, parentElement, afterElement);\n          return runAnimationPostDigest(function(done) {\n            return performAnimation('move', 'ng-move', stripCommentsFromElement(element), parentElement, afterElement, noop, options, done);\n          });\n        },\n\n        /**\n         * @ngdoc method\n         * @name $animate#addClass\n         *\n         * @description\n         * Triggers a custom animation event based off the className variable and then attaches the className value to the element as a CSS class.\n         * Unlike the other animation methods, the animate service will suffix the className value with {@type -add} in order to provide\n         * the animate service the setup and active CSS classes in order to trigger the animation (this will be skipped if no CSS transitions\n         * or keyframes are defined on the -add-active or base CSS class).\n         *\n         * Below is a breakdown of each step that occurs during addClass animation:\n         *\n         * | Animation Step                                                                                         | What the element class attribute looks like                        |\n         * |--------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------|\n         * | 1. `$animate.addClass(element, 'super')` is called                                                     | `class=\"my-animation\"`                                             |\n         * | 2. `$animate` runs the JavaScript-defined animations detected on the element                           | `class=\"my-animation ng-animate\"`                                  |\n         * | 3. the `.super-add` class is added to the element                                                      | `class=\"my-animation ng-animate super-add\"`                        |\n         * | 4. `$animate` waits for a single animation frame (this performs a reflow)                              | `class=\"my-animation ng-animate super-add\"`                        |\n         * | 5. the `.super` and `.super-add-active` classes are added (this triggers the CSS transition/animation) | `class=\"my-animation ng-animate super super-add super-add-active\"` |\n         * | 6. `$animate` scans the element styles to get the CSS transition/animation duration and delay          | `class=\"my-animation ng-animate super super-add super-add-active\"` |\n         * | 7. `$animate` waits for the animation to complete (via events and timeout)                             | `class=\"my-animation ng-animate super super-add super-add-active\"` |\n         * | 8. The animation ends and all generated CSS classes are removed from the element                       | `class=\"my-animation super\"`                                       |\n         * | 9. The super class is kept on the element                                                              | `class=\"my-animation super\"`                                       |\n         * | 10. The returned promise is resolved.                                                                  | `class=\"my-animation super\"`                                       |\n         *\n         * @param {DOMElement} element the element that will be animated\n         * @param {string} className the CSS class that will be added to the element and then animated\n         * @param {object=} options an optional collection of styles that will be picked up by the CSS transition/animation\n         * @return {Promise} the animation callback promise\n        */\n        addClass: function(element, className, options) {\n          return this.setClass(element, className, [], options);\n        },\n\n        /**\n         * @ngdoc method\n         * @name $animate#removeClass\n         *\n         * @description\n         * Triggers a custom animation event based off the className variable and then removes the CSS class provided by the className value\n         * from the element. Unlike the other animation methods, the animate service will suffix the className value with {@type -remove} in\n         * order to provide the animate service the setup and active CSS classes in order to trigger the animation (this will be skipped if\n         * no CSS transitions or keyframes are defined on the -remove or base CSS classes).\n         *\n         * Below is a breakdown of each step that occurs during removeClass animation:\n         *\n         * | Animation Step                                                                                                       | What the element class attribute looks like                        |\n         * |----------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------|\n         * | 1. `$animate.removeClass(element, 'super')` is called                                                                | `class=\"my-animation super\"`                                       |\n         * | 2. `$animate` runs the JavaScript-defined animations detected on the element                                         | `class=\"my-animation super ng-animate\"`                            |\n         * | 3. the `.super-remove` class is added to the element                                                                 | `class=\"my-animation super ng-animate super-remove\"`               |\n         * | 4. `$animate` waits for a single animation frame (this performs a reflow)                                            | `class=\"my-animation super ng-animate super-remove\"`               |\n         * | 5. the `.super-remove-active` classes are added and `.super` is removed (this triggers the CSS transition/animation) | `class=\"my-animation ng-animate super-remove super-remove-active\"` |\n         * | 6. `$animate` scans the element styles to get the CSS transition/animation duration and delay                        | `class=\"my-animation ng-animate super-remove super-remove-active\"` |\n         * | 7. `$animate` waits for the animation to complete (via events and timeout)                                           | `class=\"my-animation ng-animate super-remove super-remove-active\"` |\n         * | 8. The animation ends and all generated CSS classes are removed from the element                                     | `class=\"my-animation\"`                                             |\n         * | 9. The returned promise is resolved.                                                                                 | `class=\"my-animation\"`                                             |\n         *\n         *\n         * @param {DOMElement} element the element that will be animated\n         * @param {string} className the CSS class that will be animated and then removed from the element\n         * @param {object=} options an optional collection of styles that will be picked up by the CSS transition/animation\n         * @return {Promise} the animation callback promise\n        */\n        removeClass: function(element, className, options) {\n          return this.setClass(element, [], className, options);\n        },\n\n        /**\n         *\n         * @ngdoc method\n         * @name $animate#setClass\n         *\n         * @description Adds and/or removes the given CSS classes to and from the element.\n         * Once complete, the `done()` callback will be fired (if provided).\n         *\n         * | Animation Step                                                                                                                               | What the element class attribute looks like                                            |\n         * |----------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------|\n         * | 1. `$animate.setClass(element, 'on', 'off')` is called                                                                                       | `class=\"my-animation off\"`                                                             |\n         * | 2. `$animate` runs the JavaScript-defined animations detected on the element                                                                 | `class=\"my-animation ng-animate off\"`                                                  |\n         * | 3. the `.on-add` and `.off-remove` classes are added to the element                                                                          | `class=\"my-animation ng-animate on-add off-remove off\"`                                |\n         * | 4. `$animate` waits for a single animation frame (this performs a reflow)                                                                    | `class=\"my-animation ng-animate on-add off-remove off\"`                                |\n         * | 5. the `.on`, `.on-add-active` and `.off-remove-active` classes are added and `.off` is removed (this triggers the CSS transition/animation) | `class=\"my-animation ng-animate on on-add on-add-active off-remove off-remove-active\"` |\n         * | 6. `$animate` scans the element styles to get the CSS transition/animation duration and delay                                                | `class=\"my-animation ng-animate on on-add on-add-active off-remove off-remove-active\"` |\n         * | 7. `$animate` waits for the animation to complete (via events and timeout)                                                                   | `class=\"my-animation ng-animate on on-add on-add-active off-remove off-remove-active\"` |\n         * | 8. The animation ends and all generated CSS classes are removed from the element                                                             | `class=\"my-animation on\"`                                                              |\n         * | 9. The returned promise is resolved.                                                                                                         | `class=\"my-animation on\"`                                                              |\n         *\n         * @param {DOMElement} element the element which will have its CSS classes changed\n         *   removed from it\n         * @param {string} add the CSS classes which will be added to the element\n         * @param {string} remove the CSS class which will be removed from the element\n         *   CSS classes have been set on the element\n         * @param {object=} options an optional collection of styles that will be picked up by the CSS transition/animation\n         * @return {Promise} the animation callback promise\n         */\n        setClass: function(element, add, remove, options) {\n          options = parseAnimateOptions(options);\n\n          var STORAGE_KEY = '$$animateClasses';\n          element = angular.element(element);\n          element = stripCommentsFromElement(element);\n\n          if (classBasedAnimationsBlocked(element)) {\n            return $delegate.$$setClassImmediately(element, add, remove, options);\n          }\n\n          // we're using a combined array for both the add and remove\n          // operations since the ORDER OF addClass and removeClass matters\n          var classes, cache = element.data(STORAGE_KEY);\n          var hasCache = !!cache;\n          if (!cache) {\n            cache = {};\n            cache.classes = {};\n          }\n          classes = cache.classes;\n\n          add = isArray(add) ? add : add.split(' ');\n          forEach(add, function(c) {\n            if (c && c.length) {\n              classes[c] = true;\n            }\n          });\n\n          remove = isArray(remove) ? remove : remove.split(' ');\n          forEach(remove, function(c) {\n            if (c && c.length) {\n              classes[c] = false;\n            }\n          });\n\n          if (hasCache) {\n            if (options && cache.options) {\n              cache.options = angular.extend(cache.options || {}, options);\n            }\n\n            //the digest cycle will combine all the animations into one function\n            return cache.promise;\n          } else {\n            element.data(STORAGE_KEY, cache = {\n              classes: classes,\n              options: options\n            });\n          }\n\n          return cache.promise = runAnimationPostDigest(function(done) {\n            var cache, parentNode, parentElement, elementNode = extractElementNode(element);\n            if (elementNode) {\n              cache = element.data(STORAGE_KEY);\n              element.removeData(STORAGE_KEY);\n\n              parentElement = element.parent();\n              parentNode = elementNode.parentNode;\n            }\n\n            // TODO(matsko): move this code into the animationsDisabled() function once #8092 is fixed\n            if (!parentNode || parentNode['$$NG_REMOVED'] || elementNode['$$NG_REMOVED']) {\n              done();\n              return;\n            }\n\n            var state = element.data(NG_ANIMATE_STATE) || {};\n            var classes = resolveElementClasses(element, cache, state.active);\n            return !classes\n              ? done()\n              : performAnimation('setClass', classes, element, parentElement, null, function() {\n                  if (classes[0]) $delegate.$$addClassImmediately(element, classes[0]);\n                  if (classes[1]) $delegate.$$removeClassImmediately(element, classes[1]);\n                }, cache.options, done);\n          });\n        },\n\n        /**\n         * @ngdoc method\n         * @name $animate#cancel\n         * @kind function\n         *\n         * @param {Promise} animationPromise The animation promise that is returned when an animation is started.\n         *\n         * @description\n         * Cancels the provided animation.\n        */\n        cancel: function(promise) {\n          promise.$$cancelFn();\n        },\n\n        /**\n         * @ngdoc method\n         * @name $animate#enabled\n         * @kind function\n         *\n         * @param {boolean=} value If provided then set the animation on or off.\n         * @param {DOMElement=} element If provided then the element will be used to represent the enable/disable operation\n         * @return {boolean} Current animation state.\n         *\n         * @description\n         * Globally enables/disables animations.\n         *\n        */\n        enabled: function(value, element) {\n          switch (arguments.length) {\n            case 2:\n              if (value) {\n                cleanup(element);\n              } else {\n                var data = element.data(NG_ANIMATE_STATE) || {};\n                data.disabled = true;\n                element.data(NG_ANIMATE_STATE, data);\n              }\n            break;\n\n            case 1:\n              rootAnimateState.disabled = !value;\n            break;\n\n            default:\n              value = !rootAnimateState.disabled;\n            break;\n          }\n          return !!value;\n         }\n      };\n\n      /*\n        all animations call this shared animation triggering function internally.\n        The animationEvent variable refers to the JavaScript animation event that will be triggered\n        and the className value is the name of the animation that will be applied within the\n        CSS code. Element, `parentElement` and `afterElement` are provided DOM elements for the animation\n        and the onComplete callback will be fired once the animation is fully complete.\n      */\n      function performAnimation(animationEvent, className, element, parentElement, afterElement, domOperation, options, doneCallback) {\n        var noopCancel = noop;\n        var runner = animationRunner(element, animationEvent, className, options);\n        if (!runner) {\n          fireDOMOperation();\n          fireBeforeCallbackAsync();\n          fireAfterCallbackAsync();\n          closeAnimation();\n          return noopCancel;\n        }\n\n        animationEvent = runner.event;\n        className = runner.className;\n        var elementEvents = angular.element._data(runner.node);\n        elementEvents = elementEvents && elementEvents.events;\n\n        if (!parentElement) {\n          parentElement = afterElement ? afterElement.parent() : element.parent();\n        }\n\n        //skip the animation if animations are disabled, a parent is already being animated,\n        //the element is not currently attached to the document body or then completely close\n        //the animation if any matching animations are not found at all.\n        //NOTE: IE8 + IE9 should close properly (run closeAnimation()) in case an animation was found.\n        if (animationsDisabled(element, parentElement)) {\n          fireDOMOperation();\n          fireBeforeCallbackAsync();\n          fireAfterCallbackAsync();\n          closeAnimation();\n          return noopCancel;\n        }\n\n        var ngAnimateState  = element.data(NG_ANIMATE_STATE) || {};\n        var runningAnimations     = ngAnimateState.active || {};\n        var totalActiveAnimations = ngAnimateState.totalActive || 0;\n        var lastAnimation         = ngAnimateState.last;\n        var skipAnimation = false;\n\n        if (totalActiveAnimations > 0) {\n          var animationsToCancel = [];\n          if (!runner.isClassBased) {\n            if (animationEvent == 'leave' && runningAnimations['ng-leave']) {\n              skipAnimation = true;\n            } else {\n              //cancel all animations when a structural animation takes place\n              for (var klass in runningAnimations) {\n                animationsToCancel.push(runningAnimations[klass]);\n              }\n              ngAnimateState = {};\n              cleanup(element, true);\n            }\n          } else if (lastAnimation.event == 'setClass') {\n            animationsToCancel.push(lastAnimation);\n            cleanup(element, className);\n          } else if (runningAnimations[className]) {\n            var current = runningAnimations[className];\n            if (current.event == animationEvent) {\n              skipAnimation = true;\n            } else {\n              animationsToCancel.push(current);\n              cleanup(element, className);\n            }\n          }\n\n          if (animationsToCancel.length > 0) {\n            forEach(animationsToCancel, function(operation) {\n              operation.cancel();\n            });\n          }\n        }\n\n        if (runner.isClassBased\n            && !runner.isSetClassOperation\n            && animationEvent != 'animate'\n            && !skipAnimation) {\n          skipAnimation = (animationEvent == 'addClass') == element.hasClass(className); //opposite of XOR\n        }\n\n        if (skipAnimation) {\n          fireDOMOperation();\n          fireBeforeCallbackAsync();\n          fireAfterCallbackAsync();\n          fireDoneCallbackAsync();\n          return noopCancel;\n        }\n\n        runningAnimations     = ngAnimateState.active || {};\n        totalActiveAnimations = ngAnimateState.totalActive || 0;\n\n        if (animationEvent == 'leave') {\n          //there's no need to ever remove the listener since the element\n          //will be removed (destroyed) after the leave animation ends or\n          //is cancelled midway\n          element.one('$destroy', function(e) {\n            var element = angular.element(this);\n            var state = element.data(NG_ANIMATE_STATE);\n            if (state) {\n              var activeLeaveAnimation = state.active['ng-leave'];\n              if (activeLeaveAnimation) {\n                activeLeaveAnimation.cancel();\n                cleanup(element, 'ng-leave');\n              }\n            }\n          });\n        }\n\n        //the ng-animate class does nothing, but it's here to allow for\n        //parent animations to find and cancel child animations when needed\n        $$jqLite.addClass(element, NG_ANIMATE_CLASS_NAME);\n        if (options && options.tempClasses) {\n          forEach(options.tempClasses, function(className) {\n            $$jqLite.addClass(element, className);\n          });\n        }\n\n        var localAnimationCount = globalAnimationCounter++;\n        totalActiveAnimations++;\n        runningAnimations[className] = runner;\n\n        element.data(NG_ANIMATE_STATE, {\n          last: runner,\n          active: runningAnimations,\n          index: localAnimationCount,\n          totalActive: totalActiveAnimations\n        });\n\n        //first we run the before animations and when all of those are complete\n        //then we perform the DOM operation and run the next set of animations\n        fireBeforeCallbackAsync();\n        runner.before(function(cancelled) {\n          var data = element.data(NG_ANIMATE_STATE);\n          cancelled = cancelled ||\n                        !data || !data.active[className] ||\n                        (runner.isClassBased && data.active[className].event != animationEvent);\n\n          fireDOMOperation();\n          if (cancelled === true) {\n            closeAnimation();\n          } else {\n            fireAfterCallbackAsync();\n            runner.after(closeAnimation);\n          }\n        });\n\n        return runner.cancel;\n\n        function fireDOMCallback(animationPhase) {\n          var eventName = '$animate:' + animationPhase;\n          if (elementEvents && elementEvents[eventName] && elementEvents[eventName].length > 0) {\n            $$asyncCallback(function() {\n              element.triggerHandler(eventName, {\n                event: animationEvent,\n                className: className\n              });\n            });\n          }\n        }\n\n        function fireBeforeCallbackAsync() {\n          fireDOMCallback('before');\n        }\n\n        function fireAfterCallbackAsync() {\n          fireDOMCallback('after');\n        }\n\n        function fireDoneCallbackAsync() {\n          fireDOMCallback('close');\n          doneCallback();\n        }\n\n        //it is less complicated to use a flag than managing and canceling\n        //timeouts containing multiple callbacks.\n        function fireDOMOperation() {\n          if (!fireDOMOperation.hasBeenRun) {\n            fireDOMOperation.hasBeenRun = true;\n            domOperation();\n          }\n        }\n\n        function closeAnimation() {\n          if (!closeAnimation.hasBeenRun) {\n            if (runner) { //the runner doesn't exist if it fails to instantiate\n              runner.applyStyles();\n            }\n\n            closeAnimation.hasBeenRun = true;\n            if (options && options.tempClasses) {\n              forEach(options.tempClasses, function(className) {\n                $$jqLite.removeClass(element, className);\n              });\n            }\n\n            var data = element.data(NG_ANIMATE_STATE);\n            if (data) {\n\n              /* only structural animations wait for reflow before removing an\n                 animation, but class-based animations don't. An example of this\n                 failing would be when a parent HTML tag has a ng-class attribute\n                 causing ALL directives below to skip animations during the digest */\n              if (runner && runner.isClassBased) {\n                cleanup(element, className);\n              } else {\n                $$asyncCallback(function() {\n                  var data = element.data(NG_ANIMATE_STATE) || {};\n                  if (localAnimationCount == data.index) {\n                    cleanup(element, className, animationEvent);\n                  }\n                });\n                element.data(NG_ANIMATE_STATE, data);\n              }\n            }\n            fireDoneCallbackAsync();\n          }\n        }\n      }\n\n      function cancelChildAnimations(element) {\n        var node = extractElementNode(element);\n        if (node) {\n          var nodes = angular.isFunction(node.getElementsByClassName) ?\n            node.getElementsByClassName(NG_ANIMATE_CLASS_NAME) :\n            node.querySelectorAll('.' + NG_ANIMATE_CLASS_NAME);\n          forEach(nodes, function(element) {\n            element = angular.element(element);\n            var data = element.data(NG_ANIMATE_STATE);\n            if (data && data.active) {\n              forEach(data.active, function(runner) {\n                runner.cancel();\n              });\n            }\n          });\n        }\n      }\n\n      function cleanup(element, className) {\n        if (isMatchingElement(element, $rootElement)) {\n          if (!rootAnimateState.disabled) {\n            rootAnimateState.running = false;\n            rootAnimateState.structural = false;\n          }\n        } else if (className) {\n          var data = element.data(NG_ANIMATE_STATE) || {};\n\n          var removeAnimations = className === true;\n          if (!removeAnimations && data.active && data.active[className]) {\n            data.totalActive--;\n            delete data.active[className];\n          }\n\n          if (removeAnimations || !data.totalActive) {\n            $$jqLite.removeClass(element, NG_ANIMATE_CLASS_NAME);\n            element.removeData(NG_ANIMATE_STATE);\n          }\n        }\n      }\n\n      function animationsDisabled(element, parentElement) {\n        if (rootAnimateState.disabled) {\n          return true;\n        }\n\n        if (isMatchingElement(element, $rootElement)) {\n          return rootAnimateState.running;\n        }\n\n        var allowChildAnimations, parentRunningAnimation, hasParent;\n        do {\n          //the element did not reach the root element which means that it\n          //is not apart of the DOM. Therefore there is no reason to do\n          //any animations on it\n          if (parentElement.length === 0) break;\n\n          var isRoot = isMatchingElement(parentElement, $rootElement);\n          var state = isRoot ? rootAnimateState : (parentElement.data(NG_ANIMATE_STATE) || {});\n          if (state.disabled) {\n            return true;\n          }\n\n          //no matter what, for an animation to work it must reach the root element\n          //this implies that the element is attached to the DOM when the animation is run\n          if (isRoot) {\n            hasParent = true;\n          }\n\n          //once a flag is found that is strictly false then everything before\n          //it will be discarded and all child animations will be restricted\n          if (allowChildAnimations !== false) {\n            var animateChildrenFlag = parentElement.data(NG_ANIMATE_CHILDREN);\n            if (angular.isDefined(animateChildrenFlag)) {\n              allowChildAnimations = animateChildrenFlag;\n            }\n          }\n\n          parentRunningAnimation = parentRunningAnimation ||\n                                   state.running ||\n                                   (state.last && !state.last.isClassBased);\n        }\n        while (parentElement = parentElement.parent());\n\n        return !hasParent || (!allowChildAnimations && parentRunningAnimation);\n      }\n    }]);\n\n    $animateProvider.register('', ['$window', '$sniffer', '$timeout', '$$animateReflow',\n                           function($window,   $sniffer,   $timeout,   $$animateReflow) {\n      // Detect proper transitionend/animationend event names.\n      var CSS_PREFIX = '', TRANSITION_PROP, TRANSITIONEND_EVENT, ANIMATION_PROP, ANIMATIONEND_EVENT;\n\n      // If unprefixed events are not supported but webkit-prefixed are, use the latter.\n      // Otherwise, just use W3C names, browsers not supporting them at all will just ignore them.\n      // Note: Chrome implements `window.onwebkitanimationend` and doesn't implement `window.onanimationend`\n      // but at the same time dispatches the `animationend` event and not `webkitAnimationEnd`.\n      // Register both events in case `window.onanimationend` is not supported because of that,\n      // do the same for `transitionend` as Safari is likely to exhibit similar behavior.\n      // Also, the only modern browser that uses vendor prefixes for transitions/keyframes is webkit\n      // therefore there is no reason to test anymore for other vendor prefixes: http://caniuse.com/#search=transition\n      if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {\n        CSS_PREFIX = '-webkit-';\n        TRANSITION_PROP = 'WebkitTransition';\n        TRANSITIONEND_EVENT = 'webkitTransitionEnd transitionend';\n      } else {\n        TRANSITION_PROP = 'transition';\n        TRANSITIONEND_EVENT = 'transitionend';\n      }\n\n      if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {\n        CSS_PREFIX = '-webkit-';\n        ANIMATION_PROP = 'WebkitAnimation';\n        ANIMATIONEND_EVENT = 'webkitAnimationEnd animationend';\n      } else {\n        ANIMATION_PROP = 'animation';\n        ANIMATIONEND_EVENT = 'animationend';\n      }\n\n      var DURATION_KEY = 'Duration';\n      var PROPERTY_KEY = 'Property';\n      var DELAY_KEY = 'Delay';\n      var ANIMATION_ITERATION_COUNT_KEY = 'IterationCount';\n      var ANIMATION_PLAYSTATE_KEY = 'PlayState';\n      var NG_ANIMATE_PARENT_KEY = '$$ngAnimateKey';\n      var NG_ANIMATE_CSS_DATA_KEY = '$$ngAnimateCSS3Data';\n      var ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;\n      var CLOSING_TIME_BUFFER = 1.5;\n      var ONE_SECOND = 1000;\n\n      var lookupCache = {};\n      var parentCounter = 0;\n      var animationReflowQueue = [];\n      var cancelAnimationReflow;\n      function clearCacheAfterReflow() {\n        if (!cancelAnimationReflow) {\n          cancelAnimationReflow = $$animateReflow(function() {\n            animationReflowQueue = [];\n            cancelAnimationReflow = null;\n            lookupCache = {};\n          });\n        }\n      }\n\n      function afterReflow(element, callback) {\n        if (cancelAnimationReflow) {\n          cancelAnimationReflow();\n        }\n        animationReflowQueue.push(callback);\n        cancelAnimationReflow = $$animateReflow(function() {\n          forEach(animationReflowQueue, function(fn) {\n            fn();\n          });\n\n          animationReflowQueue = [];\n          cancelAnimationReflow = null;\n          lookupCache = {};\n        });\n      }\n\n      var closingTimer = null;\n      var closingTimestamp = 0;\n      var animationElementQueue = [];\n      function animationCloseHandler(element, totalTime) {\n        var node = extractElementNode(element);\n        element = angular.element(node);\n\n        //this item will be garbage collected by the closing\n        //animation timeout\n        animationElementQueue.push(element);\n\n        //but it may not need to cancel out the existing timeout\n        //if the timestamp is less than the previous one\n        var futureTimestamp = Date.now() + totalTime;\n        if (futureTimestamp <= closingTimestamp) {\n          return;\n        }\n\n        $timeout.cancel(closingTimer);\n\n        closingTimestamp = futureTimestamp;\n        closingTimer = $timeout(function() {\n          closeAllAnimations(animationElementQueue);\n          animationElementQueue = [];\n        }, totalTime, false);\n      }\n\n      function closeAllAnimations(elements) {\n        forEach(elements, function(element) {\n          var elementData = element.data(NG_ANIMATE_CSS_DATA_KEY);\n          if (elementData) {\n            forEach(elementData.closeAnimationFns, function(fn) {\n              fn();\n            });\n          }\n        });\n      }\n\n      function getElementAnimationDetails(element, cacheKey) {\n        var data = cacheKey ? lookupCache[cacheKey] : null;\n        if (!data) {\n          var transitionDuration = 0;\n          var transitionDelay = 0;\n          var animationDuration = 0;\n          var animationDelay = 0;\n\n          //we want all the styles defined before and after\n          forEach(element, function(element) {\n            if (element.nodeType == ELEMENT_NODE) {\n              var elementStyles = $window.getComputedStyle(element) || {};\n\n              var transitionDurationStyle = elementStyles[TRANSITION_PROP + DURATION_KEY];\n              transitionDuration = Math.max(parseMaxTime(transitionDurationStyle), transitionDuration);\n\n              var transitionDelayStyle = elementStyles[TRANSITION_PROP + DELAY_KEY];\n              transitionDelay  = Math.max(parseMaxTime(transitionDelayStyle), transitionDelay);\n\n              var animationDelayStyle = elementStyles[ANIMATION_PROP + DELAY_KEY];\n              animationDelay   = Math.max(parseMaxTime(elementStyles[ANIMATION_PROP + DELAY_KEY]), animationDelay);\n\n              var aDuration  = parseMaxTime(elementStyles[ANIMATION_PROP + DURATION_KEY]);\n\n              if (aDuration > 0) {\n                aDuration *= parseInt(elementStyles[ANIMATION_PROP + ANIMATION_ITERATION_COUNT_KEY], 10) || 1;\n              }\n              animationDuration = Math.max(aDuration, animationDuration);\n            }\n          });\n          data = {\n            total: 0,\n            transitionDelay: transitionDelay,\n            transitionDuration: transitionDuration,\n            animationDelay: animationDelay,\n            animationDuration: animationDuration\n          };\n          if (cacheKey) {\n            lookupCache[cacheKey] = data;\n          }\n        }\n        return data;\n      }\n\n      function parseMaxTime(str) {\n        var maxValue = 0;\n        var values = isString(str) ?\n          str.split(/\\s*,\\s*/) :\n          [];\n        forEach(values, function(value) {\n          maxValue = Math.max(parseFloat(value) || 0, maxValue);\n        });\n        return maxValue;\n      }\n\n      function getCacheKey(element) {\n        var parentElement = element.parent();\n        var parentID = parentElement.data(NG_ANIMATE_PARENT_KEY);\n        if (!parentID) {\n          parentElement.data(NG_ANIMATE_PARENT_KEY, ++parentCounter);\n          parentID = parentCounter;\n        }\n        return parentID + '-' + extractElementNode(element).getAttribute('class');\n      }\n\n      function animateSetup(animationEvent, element, className, styles) {\n        var structural = ['ng-enter','ng-leave','ng-move'].indexOf(className) >= 0;\n\n        var cacheKey = getCacheKey(element);\n        var eventCacheKey = cacheKey + ' ' + className;\n        var itemIndex = lookupCache[eventCacheKey] ? ++lookupCache[eventCacheKey].total : 0;\n\n        var stagger = {};\n        if (itemIndex > 0) {\n          var staggerClassName = className + '-stagger';\n          var staggerCacheKey = cacheKey + ' ' + staggerClassName;\n          var applyClasses = !lookupCache[staggerCacheKey];\n\n          applyClasses && $$jqLite.addClass(element, staggerClassName);\n\n          stagger = getElementAnimationDetails(element, staggerCacheKey);\n\n          applyClasses && $$jqLite.removeClass(element, staggerClassName);\n        }\n\n        $$jqLite.addClass(element, className);\n\n        var formerData = element.data(NG_ANIMATE_CSS_DATA_KEY) || {};\n        var timings = getElementAnimationDetails(element, eventCacheKey);\n        var transitionDuration = timings.transitionDuration;\n        var animationDuration = timings.animationDuration;\n\n        if (structural && transitionDuration === 0 && animationDuration === 0) {\n          $$jqLite.removeClass(element, className);\n          return false;\n        }\n\n        var blockTransition = styles || (structural && transitionDuration > 0);\n        var blockAnimation = animationDuration > 0 &&\n                             stagger.animationDelay > 0 &&\n                             stagger.animationDuration === 0;\n\n        var closeAnimationFns = formerData.closeAnimationFns || [];\n        element.data(NG_ANIMATE_CSS_DATA_KEY, {\n          stagger: stagger,\n          cacheKey: eventCacheKey,\n          running: formerData.running || 0,\n          itemIndex: itemIndex,\n          blockTransition: blockTransition,\n          closeAnimationFns: closeAnimationFns\n        });\n\n        var node = extractElementNode(element);\n\n        if (blockTransition) {\n          blockTransitions(node, true);\n          if (styles) {\n            element.css(styles);\n          }\n        }\n\n        if (blockAnimation) {\n          blockAnimations(node, true);\n        }\n\n        return true;\n      }\n\n      function animateRun(animationEvent, element, className, activeAnimationComplete, styles) {\n        var node = extractElementNode(element);\n        var elementData = element.data(NG_ANIMATE_CSS_DATA_KEY);\n        if (node.getAttribute('class').indexOf(className) == -1 || !elementData) {\n          activeAnimationComplete();\n          return;\n        }\n\n        var activeClassName = '';\n        var pendingClassName = '';\n        forEach(className.split(' '), function(klass, i) {\n          var prefix = (i > 0 ? ' ' : '') + klass;\n          activeClassName += prefix + '-active';\n          pendingClassName += prefix + '-pending';\n        });\n\n        var style = '';\n        var appliedStyles = [];\n        var itemIndex = elementData.itemIndex;\n        var stagger = elementData.stagger;\n        var staggerTime = 0;\n        if (itemIndex > 0) {\n          var transitionStaggerDelay = 0;\n          if (stagger.transitionDelay > 0 && stagger.transitionDuration === 0) {\n            transitionStaggerDelay = stagger.transitionDelay * itemIndex;\n          }\n\n          var animationStaggerDelay = 0;\n          if (stagger.animationDelay > 0 && stagger.animationDuration === 0) {\n            animationStaggerDelay = stagger.animationDelay * itemIndex;\n            appliedStyles.push(CSS_PREFIX + 'animation-play-state');\n          }\n\n          staggerTime = Math.round(Math.max(transitionStaggerDelay, animationStaggerDelay) * 100) / 100;\n        }\n\n        if (!staggerTime) {\n          $$jqLite.addClass(element, activeClassName);\n          if (elementData.blockTransition) {\n            blockTransitions(node, false);\n          }\n        }\n\n        var eventCacheKey = elementData.cacheKey + ' ' + activeClassName;\n        var timings = getElementAnimationDetails(element, eventCacheKey);\n        var maxDuration = Math.max(timings.transitionDuration, timings.animationDuration);\n        if (maxDuration === 0) {\n          $$jqLite.removeClass(element, activeClassName);\n          animateClose(element, className);\n          activeAnimationComplete();\n          return;\n        }\n\n        if (!staggerTime && styles && Object.keys(styles).length > 0) {\n          if (!timings.transitionDuration) {\n            element.css('transition', timings.animationDuration + 's linear all');\n            appliedStyles.push('transition');\n          }\n          element.css(styles);\n        }\n\n        var maxDelay = Math.max(timings.transitionDelay, timings.animationDelay);\n        var maxDelayTime = maxDelay * ONE_SECOND;\n\n        if (appliedStyles.length > 0) {\n          //the element being animated may sometimes contain comment nodes in\n          //the jqLite object, so we're safe to use a single variable to house\n          //the styles since there is always only one element being animated\n          var oldStyle = node.getAttribute('style') || '';\n          if (oldStyle.charAt(oldStyle.length - 1) !== ';') {\n            oldStyle += ';';\n          }\n          node.setAttribute('style', oldStyle + ' ' + style);\n        }\n\n        var startTime = Date.now();\n        var css3AnimationEvents = ANIMATIONEND_EVENT + ' ' + TRANSITIONEND_EVENT;\n        var animationTime     = (maxDelay + maxDuration) * CLOSING_TIME_BUFFER;\n        var totalTime         = (staggerTime + animationTime) * ONE_SECOND;\n\n        var staggerTimeout;\n        if (staggerTime > 0) {\n          $$jqLite.addClass(element, pendingClassName);\n          staggerTimeout = $timeout(function() {\n            staggerTimeout = null;\n\n            if (timings.transitionDuration > 0) {\n              blockTransitions(node, false);\n            }\n            if (timings.animationDuration > 0) {\n              blockAnimations(node, false);\n            }\n\n            $$jqLite.addClass(element, activeClassName);\n            $$jqLite.removeClass(element, pendingClassName);\n\n            if (styles) {\n              if (timings.transitionDuration === 0) {\n                element.css('transition', timings.animationDuration + 's linear all');\n              }\n              element.css(styles);\n              appliedStyles.push('transition');\n            }\n          }, staggerTime * ONE_SECOND, false);\n        }\n\n        element.on(css3AnimationEvents, onAnimationProgress);\n        elementData.closeAnimationFns.push(function() {\n          onEnd();\n          activeAnimationComplete();\n        });\n\n        elementData.running++;\n        animationCloseHandler(element, totalTime);\n        return onEnd;\n\n        // This will automatically be called by $animate so\n        // there is no need to attach this internally to the\n        // timeout done method.\n        function onEnd() {\n          element.off(css3AnimationEvents, onAnimationProgress);\n          $$jqLite.removeClass(element, activeClassName);\n          $$jqLite.removeClass(element, pendingClassName);\n          if (staggerTimeout) {\n            $timeout.cancel(staggerTimeout);\n          }\n          animateClose(element, className);\n          var node = extractElementNode(element);\n          for (var i in appliedStyles) {\n            node.style.removeProperty(appliedStyles[i]);\n          }\n        }\n\n        function onAnimationProgress(event) {\n          event.stopPropagation();\n          var ev = event.originalEvent || event;\n          var timeStamp = ev.$manualTimeStamp || ev.timeStamp || Date.now();\n\n          /* Firefox (or possibly just Gecko) likes to not round values up\n           * when a ms measurement is used for the animation */\n          var elapsedTime = parseFloat(ev.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES));\n\n          /* $manualTimeStamp is a mocked timeStamp value which is set\n           * within browserTrigger(). This is only here so that tests can\n           * mock animations properly. Real events fallback to event.timeStamp,\n           * or, if they don't, then a timeStamp is automatically created for them.\n           * We're checking to see if the timeStamp surpasses the expected delay,\n           * but we're using elapsedTime instead of the timeStamp on the 2nd\n           * pre-condition since animations sometimes close off early */\n          if (Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration) {\n            activeAnimationComplete();\n          }\n        }\n      }\n\n      function blockTransitions(node, bool) {\n        node.style[TRANSITION_PROP + PROPERTY_KEY] = bool ? 'none' : '';\n      }\n\n      function blockAnimations(node, bool) {\n        node.style[ANIMATION_PROP + ANIMATION_PLAYSTATE_KEY] = bool ? 'paused' : '';\n      }\n\n      function animateBefore(animationEvent, element, className, styles) {\n        if (animateSetup(animationEvent, element, className, styles)) {\n          return function(cancelled) {\n            cancelled && animateClose(element, className);\n          };\n        }\n      }\n\n      function animateAfter(animationEvent, element, className, afterAnimationComplete, styles) {\n        if (element.data(NG_ANIMATE_CSS_DATA_KEY)) {\n          return animateRun(animationEvent, element, className, afterAnimationComplete, styles);\n        } else {\n          animateClose(element, className);\n          afterAnimationComplete();\n        }\n      }\n\n      function animate(animationEvent, element, className, animationComplete, options) {\n        //If the animateSetup function doesn't bother returning a\n        //cancellation function then it means that there is no animation\n        //to perform at all\n        var preReflowCancellation = animateBefore(animationEvent, element, className, options.from);\n        if (!preReflowCancellation) {\n          clearCacheAfterReflow();\n          animationComplete();\n          return;\n        }\n\n        //There are two cancellation functions: one is before the first\n        //reflow animation and the second is during the active state\n        //animation. The first function will take care of removing the\n        //data from the element which will not make the 2nd animation\n        //happen in the first place\n        var cancel = preReflowCancellation;\n        afterReflow(element, function() {\n          //once the reflow is complete then we point cancel to\n          //the new cancellation function which will remove all of the\n          //animation properties from the active animation\n          cancel = animateAfter(animationEvent, element, className, animationComplete, options.to);\n        });\n\n        return function(cancelled) {\n          (cancel || noop)(cancelled);\n        };\n      }\n\n      function animateClose(element, className) {\n        $$jqLite.removeClass(element, className);\n        var data = element.data(NG_ANIMATE_CSS_DATA_KEY);\n        if (data) {\n          if (data.running) {\n            data.running--;\n          }\n          if (!data.running || data.running === 0) {\n            element.removeData(NG_ANIMATE_CSS_DATA_KEY);\n          }\n        }\n      }\n\n      return {\n        animate: function(element, className, from, to, animationCompleted, options) {\n          options = options || {};\n          options.from = from;\n          options.to = to;\n          return animate('animate', element, className, animationCompleted, options);\n        },\n\n        enter: function(element, animationCompleted, options) {\n          options = options || {};\n          return animate('enter', element, 'ng-enter', animationCompleted, options);\n        },\n\n        leave: function(element, animationCompleted, options) {\n          options = options || {};\n          return animate('leave', element, 'ng-leave', animationCompleted, options);\n        },\n\n        move: function(element, animationCompleted, options) {\n          options = options || {};\n          return animate('move', element, 'ng-move', animationCompleted, options);\n        },\n\n        beforeSetClass: function(element, add, remove, animationCompleted, options) {\n          options = options || {};\n          var className = suffixClasses(remove, '-remove') + ' ' +\n                          suffixClasses(add, '-add');\n          var cancellationMethod = animateBefore('setClass', element, className, options.from);\n          if (cancellationMethod) {\n            afterReflow(element, animationCompleted);\n            return cancellationMethod;\n          }\n          clearCacheAfterReflow();\n          animationCompleted();\n        },\n\n        beforeAddClass: function(element, className, animationCompleted, options) {\n          options = options || {};\n          var cancellationMethod = animateBefore('addClass', element, suffixClasses(className, '-add'), options.from);\n          if (cancellationMethod) {\n            afterReflow(element, animationCompleted);\n            return cancellationMethod;\n          }\n          clearCacheAfterReflow();\n          animationCompleted();\n        },\n\n        beforeRemoveClass: function(element, className, animationCompleted, options) {\n          options = options || {};\n          var cancellationMethod = animateBefore('removeClass', element, suffixClasses(className, '-remove'), options.from);\n          if (cancellationMethod) {\n            afterReflow(element, animationCompleted);\n            return cancellationMethod;\n          }\n          clearCacheAfterReflow();\n          animationCompleted();\n        },\n\n        setClass: function(element, add, remove, animationCompleted, options) {\n          options = options || {};\n          remove = suffixClasses(remove, '-remove');\n          add = suffixClasses(add, '-add');\n          var className = remove + ' ' + add;\n          return animateAfter('setClass', element, className, animationCompleted, options.to);\n        },\n\n        addClass: function(element, className, animationCompleted, options) {\n          options = options || {};\n          return animateAfter('addClass', element, suffixClasses(className, '-add'), animationCompleted, options.to);\n        },\n\n        removeClass: function(element, className, animationCompleted, options) {\n          options = options || {};\n          return animateAfter('removeClass', element, suffixClasses(className, '-remove'), animationCompleted, options.to);\n        }\n      };\n\n      function suffixClasses(classes, suffix) {\n        var className = '';\n        classes = isArray(classes) ? classes : classes.split(/\\s+/);\n        forEach(classes, function(klass, i) {\n          if (klass && klass.length > 0) {\n            className += (i > 0 ? ' ' : '') + klass + suffix;\n          }\n        });\n        return className;\n      }\n    }]);\n  }]);\n\n\n})(window, window.angular);\n","/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\nangular.module('ngMaterial', [\"ng\",\"ngAnimate\",\"ngAria\",\"material.core\",\"material.core.theming.palette\",\"material.core.theming\",\"material.components.autocomplete\",\"material.components.backdrop\",\"material.components.bottomSheet\",\"material.components.button\",\"material.components.card\",\"material.components.checkbox\",\"material.components.content\",\"material.components.dialog\",\"material.components.divider\",\"material.components.gridList\",\"material.components.icon\",\"material.components.input\",\"material.components.list\",\"material.components.progressCircular\",\"material.components.progressLinear\",\"material.components.radioButton\",\"material.components.select\",\"material.components.sidenav\",\"material.components.slider\",\"material.components.sticky\",\"material.components.subheader\",\"material.components.swipe\",\"material.components.switch\",\"material.components.tabs\",\"material.components.textField\",\"material.components.toast\",\"material.components.toolbar\",\"material.components.tooltip\",\"material.components.whiteframe\"]);\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\n/**\n * Initialization function that validates environment\n * requirements.\n */\nangular\n  .module('material.core', [ 'material.core.theming' ])\n  .config( MdCoreConfigure );\n\n\nfunction MdCoreConfigure($provide, $mdThemingProvider) {\n\n  $provide.decorator('$$rAF', [\"$delegate\", rAFDecorator]);\n\n  $mdThemingProvider.theme('default')\n    .primaryPalette('indigo')\n    .accentPalette('pink')\n    .warnPalette('red')\n    .backgroundPalette('grey');\n}\nMdCoreConfigure.$inject = [\"$provide\", \"$mdThemingProvider\"];\n\nfunction rAFDecorator( $delegate ) {\n  /**\n   * Use this to throttle events that come in often.\n   * The throttled function will always use the *last* invocation before the\n   * coming frame.\n   *\n   * For example, window resize events that fire many times a second:\n   * If we set to use an raf-throttled callback on window resize, then\n   * our callback will only be fired once per frame, with the last resize\n   * event that happened before that frame.\n   *\n   * @param {function} callback function to debounce\n   */\n  $delegate.throttle = function(cb) {\n    var queueArgs, alreadyQueued, queueCb, context;\n    return function debounced() {\n      queueArgs = arguments;\n      context = this;\n      queueCb = cb;\n      if (!alreadyQueued) {\n        alreadyQueued = true;\n        $delegate(function() {\n          queueCb.apply(context, queueArgs);\n          alreadyQueued = false;\n        });\n      }\n    };\n  };\n  return $delegate;\n}\n\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\nangular.module('material.core')\n.factory('$mdConstant', MdConstantFactory);\n\nfunction MdConstantFactory($$rAF, $sniffer) {\n\n  var webkit = /webkit/i.test($sniffer.vendorPrefix);\n  function vendorProperty(name) {\n    return webkit ?  ('webkit' + name.charAt(0).toUpperCase() + name.substring(1)) : name;\n  }\n\n  return {\n    KEY_CODE: {\n      ENTER: 13,\n      ESCAPE: 27,\n      SPACE: 32,\n      LEFT_ARROW : 37,\n      UP_ARROW : 38,\n      RIGHT_ARROW : 39,\n      DOWN_ARROW : 40,\n      TAB : 9\n    },\n    CSS: {\n      /* Constants */\n      TRANSITIONEND: 'transitionend' + (webkit ? ' webkitTransitionEnd' : ''),\n      ANIMATIONEND: 'animationend' + (webkit ? ' webkitAnimationEnd' : ''),\n\n      TRANSFORM: vendorProperty('transform'),\n      TRANSFORM_ORIGIN: vendorProperty('transformOrigin'),\n      TRANSITION: vendorProperty('transition'),\n      TRANSITION_DURATION: vendorProperty('transitionDuration'),\n      ANIMATION_PLAY_STATE: vendorProperty('animationPlayState'),\n      ANIMATION_DURATION: vendorProperty('animationDuration'),\n      ANIMATION_NAME: vendorProperty('animationName'),\n      ANIMATION_TIMING: vendorProperty('animationTimingFunction'),\n      ANIMATION_DIRECTION: vendorProperty('animationDirection')\n    },\n    MEDIA: {\n      'sm': '(max-width: 600px)',\n      'gt-sm': '(min-width: 600px)',\n      'md': '(min-width: 600px) and (max-width: 960px)',\n      'gt-md': '(min-width: 960px)',\n      'lg': '(min-width: 960px) and (max-width: 1200px)',\n      'gt-lg': '(min-width: 1200px)'\n    },\n    MEDIA_PRIORITY: [\n      'gt-lg',\n      'lg',\n      'gt-md',\n      'md',\n      'gt-sm',\n      'sm'\n    ]\n  };\n}\nMdConstantFactory.$inject = [\"$$rAF\", \"$sniffer\"];\n\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function(){\n\n  angular\n    .module('material.core')\n    .config( [\"$provide\", function($provide){\n       $provide.decorator('$mdUtil', ['$delegate', function ($delegate){\n           /**\n            * Inject the iterator facade to easily support iteration and accessors\n            * @see iterator below\n            */\n           $delegate.iterator = Iterator;\n\n           return $delegate;\n         }\n       ]);\n     }]);\n\n  /**\n   * iterator is a list facade to easily support iteration and accessors\n   *\n   * @param items Array list which this iterator will enumerate\n   * @param reloop Boolean enables iterator to consider the list as an endless reloop\n   */\n  function Iterator(items, reloop) {\n    var trueFn = function() { return true; };\n\n    if (items && !angular.isArray(items)) {\n      items = Array.prototype.slice.call(items);\n    }\n\n    reloop = !!reloop;\n    var _items = items || [ ];\n\n    // Published API\n    return {\n      items: getItems,\n      count: count,\n\n      inRange: inRange,\n      contains: contains,\n      indexOf: indexOf,\n      itemAt: itemAt,\n\n      findBy: findBy,\n\n      add: add,\n      remove: remove,\n\n      first: first,\n      last: last,\n      next: angular.bind(null, findSubsequentItem, false),\n      previous: angular.bind(null, findSubsequentItem, true),\n\n      hasPrevious: hasPrevious,\n      hasNext: hasNext\n\n    };\n\n    /**\n     * Publish copy of the enumerable set\n     * @returns {Array|*}\n     */\n    function getItems() {\n      return [].concat(_items);\n    }\n\n    /**\n     * Determine length of the list\n     * @returns {Array.length|*|number}\n     */\n    function count() {\n      return _items.length;\n    }\n\n    /**\n     * Is the index specified valid\n     * @param index\n     * @returns {Array.length|*|number|boolean}\n     */\n    function inRange(index) {\n      return _items.length && ( index > -1 ) && (index < _items.length );\n    }\n\n    /**\n     * Can the iterator proceed to the next item in the list; relative to\n     * the specified item.\n     *\n     * @param item\n     * @returns {Array.length|*|number|boolean}\n     */\n    function hasNext(item) {\n      return item ? inRange(indexOf(item) + 1) : false;\n    }\n\n    /**\n     * Can the iterator proceed to the previous item in the list; relative to\n     * the specified item.\n     *\n     * @param item\n     * @returns {Array.length|*|number|boolean}\n     */\n    function hasPrevious(item) {\n      return item ? inRange(indexOf(item) - 1) : false;\n    }\n\n    /**\n     * Get item at specified index/position\n     * @param index\n     * @returns {*}\n     */\n    function itemAt(index) {\n      return inRange(index) ? _items[index] : null;\n    }\n\n    /**\n     * Find all elements matching the key/value pair\n     * otherwise return null\n     *\n     * @param val\n     * @param key\n     *\n     * @return array\n     */\n    function findBy(key, val) {\n      return _items.filter(function(item) {\n        return item[key] === val;\n      });\n    }\n\n    /**\n     * Add item to list\n     * @param item\n     * @param index\n     * @returns {*}\n     */\n    function add(item, index) {\n      if ( !item ) return -1;\n\n      if (!angular.isNumber(index)) {\n        index = _items.length;\n      }\n\n      _items.splice(index, 0, item);\n\n      return indexOf(item);\n    }\n\n    /**\n     * Remove item from list...\n     * @param item\n     */\n    function remove(item) {\n      if ( contains(item) ){\n        _items.splice(indexOf(item), 1);\n      }\n    }\n\n    /**\n     * Get the zero-based index of the target item\n     * @param item\n     * @returns {*}\n     */\n    function indexOf(item) {\n      return _items.indexOf(item);\n    }\n\n    /**\n     * Boolean existence check\n     * @param item\n     * @returns {boolean}\n     */\n    function contains(item) {\n      return item && (indexOf(item) > -1);\n    }\n\n    /**\n     * Return first item in the list\n     * @returns {*}\n     */\n    function first() {\n      return _items.length ? _items[0] : null;\n    }\n\n    /**\n     * Return last item in the list...\n     * @returns {*}\n     */\n    function last() {\n      return _items.length ? _items[_items.length - 1] : null;\n    }\n\n    /**\n     * Find the next item. If reloop is true and at the end of the list, it will go back to the\n     * first item. If given, the `validate` callback will be used to determine whether the next item\n     * is valid. If not valid, it will try to find the next item again.\n     *\n     * @param {boolean} backwards Specifies the direction of searching (forwards/backwards)\n     * @param {*} item The item whose subsequent item we are looking for\n     * @param {Function=} validate The `validate` function\n     * @param {integer=} limit The recursion limit\n     *\n     * @returns {*} The subsequent item or null\n     */\n    function findSubsequentItem(backwards, item, validate, limit) {\n      validate = validate || trueFn;\n\n      var curIndex = indexOf(item);\n      while (true) {\n        if (!inRange(curIndex)) return null;\n\n        var nextIndex = curIndex + (backwards ? -1 : 1);\n        var foundItem = null;\n        if (inRange(nextIndex)) {\n          foundItem = _items[nextIndex];\n        } else if (reloop) {\n          foundItem = backwards ? last() : first();\n          nextIndex = indexOf(foundItem);\n        }\n\n        if ((foundItem === null) || (nextIndex === limit)) return null;\n        if (validate(foundItem)) return foundItem;\n\n        if (angular.isUndefined(limit)) limit = nextIndex;\n\n        curIndex = nextIndex;\n      }\n    }\n  }\n\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function(){\n\nangular.module('material.core')\n.factory('$mdMedia', mdMediaFactory);\n\n/**\n * @ngdoc service\n * @name $mdMedia\n * @module material.core\n *\n * @description\n * `$mdMedia` is used to evaluate whether a given media query is true or false given the\n * current device's screen / window size. The media query will be re-evaluated on resize, allowing\n * you to register a watch.\n *\n * `$mdMedia` also has pre-programmed support for media queries that match the layout breakpoints.\n *  (`sm`, `gt-sm`, `md`, `gt-md`, `lg`, `gt-lg`).\n *\n * @returns {boolean} a boolean representing whether or not the given media query is true or false.\n *\n * @usage\n * <hljs lang=\"js\">\n * app.controller('MyController', function($mdMedia, $scope) {\n *   $scope.$watch(function() { return $mdMedia('lg'); }, function(big) {\n *     $scope.bigScreen = big;\n *   });\n *\n *   $scope.screenIsSmall = $mdMedia('sm');\n *   $scope.customQuery = $mdMedia('(min-width: 1234px)');\n *   $scope.anotherCustom = $mdMedia('max-width: 300px');\n * });\n * </hljs>\n */\n\nfunction mdMediaFactory($mdConstant, $rootScope, $window) {\n  var queries = {};\n  var mqls = {};\n  var results = {};\n  var normalizeCache = {};\n\n  $mdMedia.getResponsiveAttribute = getResponsiveAttribute;\n  $mdMedia.getQuery = getQuery;\n  $mdMedia.watchResponsiveAttributes = watchResponsiveAttributes;\n\n  return $mdMedia;\n\n  function $mdMedia(query) {\n    var validated = queries[query];\n    if (angular.isUndefined(validated)) {\n      validated = queries[query] = validate(query);\n    }\n\n    var result = results[validated];\n    if (angular.isUndefined(result)) {\n      result = add(validated);\n    }\n\n    return result;\n  }\n\n  function validate(query) {\n    return $mdConstant.MEDIA[query] ||\n           ((query.charAt(0) !== '(') ? ('(' + query + ')') : query);\n  }\n\n  function add(query) {\n    var result = mqls[query] = $window.matchMedia(query);\n    result.addListener(onQueryChange);\n    return (results[result.media] = !!result.matches);\n  }\n\n  function onQueryChange(query) {\n    $rootScope.$evalAsync(function() {\n      results[query.media] = !!query.matches;\n    });\n  }\n\n  function getQuery(name) {\n    return mqls[name];\n  }\n\n  function getResponsiveAttribute(attrs, attrName) {\n    for (var i = 0; i < $mdConstant.MEDIA_PRIORITY.length; i++) {\n      var mediaName = $mdConstant.MEDIA_PRIORITY[i];\n      if (!mqls[queries[mediaName]].matches) {\n        continue;\n      }\n\n      var normalizedName = getNormalizedName(attrs, attrName + '-' + mediaName);\n      if (attrs[normalizedName]) {\n        return attrs[normalizedName];\n      }\n    }\n\n    // fallback on unprefixed\n    return attrs[getNormalizedName(attrs, attrName)];\n  }\n\n  function watchResponsiveAttributes(attrNames, attrs, watchFn) {\n    var unwatchFns = [];\n    attrNames.forEach(function(attrName) {\n      var normalizedName = getNormalizedName(attrs, attrName);\n      if (attrs[normalizedName]) {\n        unwatchFns.push(\n            attrs.$observe(normalizedName, angular.bind(void 0, watchFn, null)));\n      }\n\n      for (var mediaName in $mdConstant.MEDIA) {\n        normalizedName = getNormalizedName(attrs, attrName + '-' + mediaName);\n        if (!attrs[normalizedName]) {\n          return;\n        }\n\n        unwatchFns.push(attrs.$observe(normalizedName, angular.bind(void 0, watchFn, mediaName)));\n      }\n    });\n\n    return function unwatch() {\n      unwatchFns.forEach(function(fn) { fn(); })\n    };\n  }\n\n  // Improves performance dramatically\n  function getNormalizedName(attrs, attrName) {\n    return normalizeCache[attrName] ||\n        (normalizeCache[attrName] = attrs.$normalize(attrName));\n  }\n}\nmdMediaFactory.$inject = [\"$mdConstant\", \"$rootScope\", \"$window\"];\n\n\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\n/*\n * This var has to be outside the angular factory, otherwise when\n * there are multiple material apps on the same page, each app\n * will create its own instance of this array and the app's IDs\n * will not be unique.\n */\nvar nextUniqueId = ['0','0','0'];\n\nangular.module('material.core')\n.factory('$mdUtil', [\"$cacheFactory\", \"$document\", \"$timeout\", \"$q\", \"$window\", \"$mdConstant\", function($cacheFactory, $document, $timeout, $q, $window, $mdConstant) {\n  var Util;\n\n  function getNode(el) {\n    return el[0] || el;\n  }\n\n  return Util = {\n    now: window.performance ?\n      angular.bind(window.performance, window.performance.now) : \n      Date.now,\n\n    clientRect: function(element, offsetParent, isOffsetRect) {\n      var node = getNode(element);\n      offsetParent = getNode(offsetParent || node.offsetParent || document.body);\n      var nodeRect = node.getBoundingClientRect();\n\n      // The user can ask for an offsetRect: a rect relative to the offsetParent,\n      // or a clientRect: a rect relative to the page\n      var offsetRect = isOffsetRect ?\n        offsetParent.getBoundingClientRect() : \n        { left: 0, top: 0, width: 0, height: 0 };\n      return {\n        left: nodeRect.left - offsetRect.left + offsetParent.scrollLeft,\n        top: nodeRect.top - offsetRect.top + offsetParent.scrollTop,\n        width: nodeRect.width,\n        height: nodeRect.height\n      };\n    },\n    offsetRect: function(element, offsetParent) {\n      return Util.clientRect(element, offsetParent, true);\n    },\n\n    floatingScrollbars: function() {\n      if (this.floatingScrollbars.cached === undefined) {\n        var tempNode = angular.element('<div style=\"z-index: -1; position: absolute; height: 1px; overflow-y: scroll\"><div style=\"height: 2px;\"></div></div>');\n        $document[0].body.appendChild(tempNode[0]);\n        this.floatingScrollbars.cached = (tempNode[0].offsetWidth == tempNode[0].childNodes[0].offsetWidth);\n        tempNode.remove();\n      }\n      return this.floatingScrollbars.cached;\n    },\n\n    // Mobile safari only allows you to set focus in click event listeners...\n    forceFocus: function(element) {\n      var node = element[0] || element;\n\n      document.addEventListener('click', function focusOnClick(ev) {\n        if (ev.target === node && ev.$focus) {\n          node.focus();\n          ev.stopImmediatePropagation();\n          ev.preventDefault();\n          node.removeEventListener('click', focusOnClick);\n        }\n      }, true);\n\n      var newEvent = document.createEvent('MouseEvents');\n      newEvent.initMouseEvent('click', false, true, window, {}, 0, 0, 0, 0,\n                       false, false, false, false, 0, null);\n      newEvent.$material = true;\n      newEvent.$focus = true;\n      node.dispatchEvent(newEvent);\n    },\n\n    transitionEndPromise: function(element, opts) {\n      opts = opts || {};\n      var deferred = $q.defer();\n      element.on($mdConstant.CSS.TRANSITIONEND, finished);\n      function finished(ev) {\n        // Make sure this transitionend didn't bubble up from a child\n        if (!ev || ev.target === element[0]) {\n          element.off($mdConstant.CSS.TRANSITIONEND, finished);\n          deferred.resolve();\n        }\n      }\n      if (opts.timeout) $timeout(finished, opts.timeout);\n      return deferred.promise;\n    },\n\n    fakeNgModel: function() {\n      return {\n        $fake: true,\n        $setTouched : angular.noop,\n        $setViewValue: function(value) {\n          this.$viewValue = value;\n          this.$render(value);\n          this.$viewChangeListeners.forEach(function(cb) { cb(); });\n        },\n        $isEmpty: function(value) {\n          return (''+value).length === 0;\n        },\n        $parsers: [],\n        $formatters: [],\n        $viewChangeListeners: [],\n        $render: angular.noop\n      };\n    },\n\n    // Returns a function, that, as long as it continues to be invoked, will not\n    // be triggered. The function will be called after it stops being called for\n    // N milliseconds.\n    // @param wait Integer value of msecs to delay (since last debounce reset); default value 10 msecs\n    // @param invokeApply should the $timeout trigger $digest() dirty checking\n    debounce: function (func, wait, scope, invokeApply) {\n      var timer;\n\n      return function debounced() {\n        var context = scope,\n          args = Array.prototype.slice.call(arguments);\n\n        $timeout.cancel(timer);\n        timer = $timeout(function() {\n\n          timer = undefined;\n          func.apply(context, args);\n\n        }, wait || 10, invokeApply );\n      };\n    },\n\n    // Returns a function that can only be triggered every `delay` milliseconds.\n    // In other words, the function will not be called unless it has been more\n    // than `delay` milliseconds since the last call.\n    throttle: function throttle(func, delay) {\n      var recent;\n      return function throttled() {\n        var context = this;\n        var args = arguments;\n        var now = Util.now();\n\n        if (!recent || (now - recent > delay)) {\n          func.apply(context, args);\n          recent = now;\n        }\n      };\n    },\n\n    /**\n     * Measures the number of milliseconds taken to run the provided callback\n     * function. Uses a high-precision timer if available.\n     */\n    time: function time(cb) {\n      var start = Util.now();\n      cb();\n      return Util.now() - start;\n    },\n\n    /**\n     * nextUid, from angular.js.\n     * A consistent way of creating unique IDs in angular. The ID is a sequence of alpha numeric\n     * characters such as '012ABC'. The reason why we are not using simply a number counter is that\n     * the number string gets longer over time, and it can also overflow, where as the nextId\n     * will grow much slower, it is a string, and it will never overflow.\n     *\n     * @returns an unique alpha-numeric string\n     */\n    nextUid: function() {\n      var index = nextUniqueId.length;\n      var digit;\n\n      while(index) {\n        index--;\n        digit = nextUniqueId[index].charCodeAt(0);\n        if (digit == 57 /*'9'*/) {\n          nextUniqueId[index] = 'A';\n          return nextUniqueId.join('');\n        }\n        if (digit == 90  /*'Z'*/) {\n          nextUniqueId[index] = '0';\n        } else {\n          nextUniqueId[index] = String.fromCharCode(digit + 1);\n          return nextUniqueId.join('');\n        }\n      }\n      nextUniqueId.unshift('0');\n      return nextUniqueId.join('');\n    },\n\n    // Stop watchers and events from firing on a scope without destroying it,\n    // by disconnecting it from its parent and its siblings' linked lists.\n    disconnectScope: function disconnectScope(scope) {\n      if (!scope) return;\n\n      // we can't destroy the root scope or a scope that has been already destroyed\n      if (scope.$root === scope) return;\n      if (scope.$$destroyed ) return;\n\n      var parent = scope.$parent;\n      scope.$$disconnected = true;\n\n      // See Scope.$destroy\n      if (parent.$$childHead === scope) parent.$$childHead = scope.$$nextSibling;\n      if (parent.$$childTail === scope) parent.$$childTail = scope.$$prevSibling;\n      if (scope.$$prevSibling) scope.$$prevSibling.$$nextSibling = scope.$$nextSibling;\n      if (scope.$$nextSibling) scope.$$nextSibling.$$prevSibling = scope.$$prevSibling;\n\n      scope.$$nextSibling = scope.$$prevSibling = null;\n\n    },\n\n    // Undo the effects of disconnectScope above.\n    reconnectScope: function reconnectScope(scope) {\n      if (!scope) return;\n\n      // we can't disconnect the root node or scope already disconnected\n      if (scope.$root === scope) return;\n      if (!scope.$$disconnected) return;\n\n      var child = scope;\n\n      var parent = child.$parent;\n      child.$$disconnected = false;\n      // See Scope.$new for this logic...\n      child.$$prevSibling = parent.$$childTail;\n      if (parent.$$childHead) {\n        parent.$$childTail.$$nextSibling = child;\n        parent.$$childTail = child;\n      } else {\n        parent.$$childHead = parent.$$childTail = child;\n      }\n    },\n  /*\n   * getClosest replicates jQuery.closest() to walk up the DOM tree until it finds a matching nodeName\n   *\n   * @param el Element to start walking the DOM from\n   * @param tagName Tag name to find closest to el, such as 'form'\n   */\n    getClosest: function getClosest(el, tagName) {\n      tagName = tagName.toUpperCase();\n      do {\n        if (el.nodeName === tagName) {\n          return el;\n        }\n      } while (el = el.parentNode);\n      return null;\n    }\n  };\n\n}]);\n\n/*\n * Since removing jQuery from the demos, some code that uses `element.focus()` is broken.\n *\n * We need to add `element.focus()`, because it's testable unlike `element[0].focus`.\n *\n * TODO(ajoslin): This should be added in a better place later.\n */\n\nangular.element.prototype.focus = angular.element.prototype.focus || function() {\n  if (this.length) {\n    this[0].focus();\n  }\n  return this;\n};\nangular.element.prototype.blur = angular.element.prototype.blur || function() {\n  if (this.length) {\n    this[0].blur();\n  }\n  return this;\n};\n\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\nangular.module('material.core')\n  .service('$mdAria', AriaService);\n\nfunction AriaService($$rAF, $log, $window) {\n\n  return {\n    expect: expect,\n    expectAsync: expectAsync,\n    expectWithText: expectWithText\n  };\n\n  /**\n   * Check if expected attribute has been specified on the target element or child\n   * @param element\n   * @param attrName\n   * @param {optional} defaultValue What to set the attr to if no value is found\n   */\n  function expect(element, attrName, defaultValue) {\n    var node = element[0];\n\n    if (!node.hasAttribute(attrName) && !childHasAttribute(node, attrName)) {\n\n      defaultValue = angular.isString(defaultValue) ? defaultValue.trim() : '';\n      if (defaultValue.length) {\n        element.attr(attrName, defaultValue);\n      } else {\n        $log.warn('ARIA: Attribute \"', attrName, '\", required for accessibility, is missing on node:', node);\n      }\n\n    }\n  }\n\n  function expectAsync(element, attrName, defaultValueGetter) {\n    // Problem: when retrieving the element's contents synchronously to find the label,\n    // the text may not be defined yet in the case of a binding.\n    // There is a higher chance that a binding will be defined if we wait one frame.\n    $$rAF(function() {\n      expect(element, attrName, defaultValueGetter());\n    });\n  }\n\n  function expectWithText(element, attrName) {\n    expectAsync(element, attrName, function() {\n      return getText(element);\n    });\n  }\n\n  function getText(element) {\n    return element.text().trim();\n  }\n\n  function childHasAttribute(node, attrName) {\n    var hasChildren = node.hasChildNodes(),\n        hasAttr = false;\n\n    function isHidden(el) {\n      var style = el.currentStyle ? el.currentStyle : $window.getComputedStyle(el);\n      return (style.display === 'none');\n    }\n\n    if(hasChildren) {\n      var children = node.childNodes;\n      for(var i=0; i<children.length; i++){\n        var child = children[i];\n        if(child.nodeType === 1 && child.hasAttribute(attrName)) {\n          if(!isHidden(child)){\n            hasAttr = true;\n          }\n        }\n      }\n    }\n    return hasAttr;\n  }\n}\nAriaService.$inject = [\"$$rAF\", \"$log\", \"$window\"];\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\nangular.module('material.core')\n  .service('$mdCompiler', mdCompilerService);\n\nfunction mdCompilerService($q, $http, $injector, $compile, $controller, $templateCache) {\n  /* jshint validthis: true */\n\n  /*\n   * @ngdoc service\n   * @name $mdCompiler\n   * @module material.core\n   * @description\n   * The $mdCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $mdCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $mdCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is \n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties: \n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in. These values will not be available until after initialization.\n    */\n  this.compile = function(options) {\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = options.resolve || {};\n    var locals = options.locals || {};\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.  \n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function(value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    //Add the locals, which are just straight values to inject\n    //eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (templateUrl) {\n      resolve.$template = $http.get(templateUrl, {cache: $templateCache})\n        .then(function(response) {\n          return response.data;\n        });\n    } else {\n      resolve.$template = $q.when(template);\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function(locals) {\n\n      var template = transformTemplate(locals.$template);\n      var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      //Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link(scope) {\n          locals.$scope = scope;\n\n          //Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var ctrl = $controller(controller, locals);\n            if (bindToController) {\n              angular.extend(ctrl, locals);\n            }\n            //See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n          return linkFn(scope);\n        }\n      };\n    });\n\n  };\n}\nmdCompilerService.$inject = [\"$q\", \"$http\", \"$injector\", \"$compile\", \"$controller\", \"$templateCache\"];\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\n/*\n * TODO: Add support for multiple fingers on the `pointer` object (enables pinch gesture)\n */\n\nvar START_EVENTS = 'mousedown touchstart pointerdown';\nvar MOVE_EVENTS = 'mousemove touchmove pointermove';\nvar END_EVENTS = 'mouseup mouseleave touchend touchcancel pointerup pointercancel';\nvar HANDLERS;\n\ndocument.contains || (document.contains = function(node) {\n  return document.body.contains(node);\n});\n\n// TODO add windows phone to this\nvar userAgent = navigator.userAgent || navigator.vendor || window.opera;\nvar isIos = userAgent.match(/iPad/i) || userAgent.match(/iPhone/i) || userAgent.match(/iPod/i);\nvar isAndroid = userAgent.match(/Android/i);\nvar shouldHijackClicks = isIos || isAndroid;\n\nif (shouldHijackClicks) {\n  document.addEventListener('click', function(ev) {\n    // Space/enter on a button, and submit events, can send clicks\n    var isKeyClick = ev.clientX === 0 && ev.clientY === 0;\n    if (window.jQuery || isKeyClick || ev.$material) return;\n\n    // Prevent clicks unless they're sent by material\n    ev.preventDefault();\n    ev.stopPropagation();\n  }, true);\n}\n\nangular.element(document)\n  .on(START_EVENTS, gestureStart)\n  .on(MOVE_EVENTS, gestureMove)\n  .on(END_EVENTS, gestureEnd)\n  // For testing\n  .on('$$mdGestureReset', function() {\n    lastPointer = pointer = null;\n  });\n\n// The state of the current and previous 'pointer' (user's hand)\nvar pointer, lastPointer;\n\nfunction runHandlers(handlerEvent, event) {\n  var handler;\n  for (var handlerName in HANDLERS) {\n    handler = HANDLERS[handlerName];\n    if (handlerEvent === 'start') {\n      // Run cancel to reset any handlers' state\n      handler.cancel();\n    }\n    handler[handlerEvent](event, pointer);\n  }\n}\n\nfunction gestureStart(ev) {\n  // If we're already touched down, abort\n  if (pointer) return;\n\n  var now = +Date.now();\n\n  // iOS & old android bug: after a touch event, a click event is sent 350 ms later.\n  // If <400ms have passed, don't allow an event of a different type than the previous event\n  if (lastPointer && !typesMatch(ev, lastPointer) && (now - lastPointer.endTime < 1500)) {\n    return;\n  }\n\n  pointer = makeStartPointer(ev);\n\n  runHandlers('start', ev);\n}\n\nfunction gestureMove(ev) {\n  if (!pointer || !typesMatch(ev, pointer)) return;\n\n  updatePointerState(ev, pointer);\n  runHandlers('move', ev);\n}\n\nfunction gestureEnd(ev) {\n  if (!pointer || !typesMatch(ev, pointer)) return;\n\n  updatePointerState(ev, pointer);\n  pointer.endTime = +Date.now();\n\n  runHandlers('end', ev);\n\n  lastPointer = pointer;\n  pointer = null;\n}\n\n/******** Helpers *********/\nfunction typesMatch(ev, pointer) {\n  return ev && pointer && ev.type.charAt(0) === pointer.type;\n}\n\nfunction getEventPoint(ev) {\n  ev = ev.originalEvent || ev; // support jQuery events\n  return (ev.touches && ev.touches[0]) ||\n    (ev.changedTouches && ev.changedTouches[0]) ||\n    ev;\n}\n\nfunction updatePointerState(ev, pointer) {\n  var point = getEventPoint(ev);\n  var x = pointer.x = point.pageX;\n  var y = pointer.y = point.pageY;\n\n  pointer.distanceX = x - pointer.startX;\n  pointer.distanceY = y - pointer.startY;\n  pointer.distance = Math.sqrt(\n    pointer.distanceX * pointer.distanceX + pointer.distanceY * pointer.distanceY\n  );\n\n  pointer.directionX = pointer.distanceX > 0 ? 'right' : pointer.distanceX < 0 ? 'left' : '';\n  pointer.directionY = pointer.distanceY > 0 ? 'up' : pointer.distanceY < 0 ? 'down' : '';\n\n  pointer.duration = +Date.now() - pointer.startTime;\n  pointer.velocityX = pointer.distanceX / pointer.duration;\n  pointer.velocityY = pointer.distanceY / pointer.duration;\n}\n\n\nfunction makeStartPointer(ev) {\n  var point = getEventPoint(ev);\n  var startPointer = {\n    startTime: +Date.now(),\n    target: ev.target,\n    // 'p' for pointer, 'm' for mouse, 't' for touch\n    type: ev.type.charAt(0)\n  };\n  startPointer.startX = startPointer.x = point.pageX;\n  startPointer.startY = startPointer.y = point.pageY;\n  return startPointer;\n}\n\nangular.module('material.core')\n.run([\"$mdGesture\", function($mdGesture) {}]) // make sure $mdGesture is always instantiated\n.factory('$mdGesture', [\"$$MdGestureHandler\", \"$$rAF\", \"$timeout\", function($$MdGestureHandler, $$rAF, $timeout) {\n  HANDLERS = {};\n\n  if (shouldHijackClicks) {\n    addHandler('click', {\n      options: {\n        maxDistance: 6\n      },\n      onEnd: function(ev, pointer) {\n        if (pointer.distance < this.state.options.maxDistance) {\n          this.dispatchEvent(ev, 'click');\n        }\n      }\n    });\n  }\n\n  addHandler('press', {\n    onStart: function(ev, pointer) {\n      this.dispatchEvent(ev, '$md.pressdown');\n    },\n    onEnd: function(ev, pointer) {\n      this.dispatchEvent(ev, '$md.pressup');\n    }\n  });\n\n\n  addHandler('hold', {\n    options: {\n      // If the user keeps his finger within the same <maxDistance> area for\n      // <delay> ms, dispatch a hold event.\n      maxDistance: 6,\n      delay: 500\n    },\n    onCancel: function() {\n      $timeout.cancel(this.state.timeout);\n    },\n    onStart: function(ev, pointer) {\n      // For hold, require a parent to be registered with $mdGesture.register()\n      // Because we prevent scroll events, this is necessary.\n      if (!this.state.registeredParent) return this.cancel();\n\n      this.state.pos = {x: pointer.x, y: pointer.y};\n      this.state.timeout = $timeout(angular.bind(this, function holdDelayFn() {\n        this.dispatchEvent(ev, '$md.hold');\n        this.cancel(); //we're done!\n      }), this.state.options.delay, false);\n    },\n    onMove: function(ev, pointer) {\n      // Don't scroll while waiting for hold\n      ev.preventDefault();\n      var dx = this.state.pos.x - pointer.x;\n      var dy = this.state.pos.y - pointer.y;\n      if (Math.sqrt(dx*dx + dy*dy) > this.options.maxDistance) {\n        this.cancel();\n      }\n    },\n    onEnd: function() { this.onCancel(); }\n  });\n\n  addHandler('drag', {\n    options: {\n      minDistance: 6,\n      horizontal: true\n    },\n    onStart: function(ev) {\n      // For drag, require a parent to be registered with $mdGesture.register()\n      if (!this.state.registeredParent) this.cancel();\n    },\n    onMove: function(ev, pointer) {\n      var shouldStartDrag, shouldCancel;\n      // Don't allow touch events to scroll while we're dragging or\n      // deciding if this touchmove is a proper drag\n      ev.preventDefault();\n\n      if (!this.state.dragPointer) {\n        if (this.state.options.horizontal) {\n          shouldStartDrag = Math.abs(pointer.distanceX) > this.state.options.minDistance;\n          shouldCancel = Math.abs(pointer.distanceY) > this.state.options.minDistance * 1.5;\n        } else {\n          shouldStartDrag = Math.abs(pointer.distanceY) > this.state.options.minDistance;\n          shouldCancel = Math.abs(pointer.distanceX) > this.state.options.minDistance * 1.5;\n        }\n\n        if (shouldStartDrag) {\n          // Create a new pointer, starting at this point where the drag started.\n          this.state.dragPointer = makeStartPointer(ev);\n          updatePointerState(ev, this.state.dragPointer);\n          this.dispatchEvent(ev, '$md.dragstart', this.state.dragPointer);\n\n        } else if (shouldCancel) {\n          this.cancel();\n        }\n      } else {\n        this.dispatchDragMove(ev);\n      }\n    },\n    // Only dispatch these every frame; any more is unnecessray\n    dispatchDragMove: $$rAF.throttle(function(ev) {\n      // Make sure the drag didn't stop while waiting for the next frame\n      if (this.state.isRunning) {\n        updatePointerState(ev, this.state.dragPointer);\n        this.dispatchEvent(ev, '$md.drag', this.state.dragPointer);\n      }\n    }),\n    onEnd: function(ev, pointer) {\n      if (this.state.dragPointer) {\n        updatePointerState(ev, this.state.dragPointer);\n        this.dispatchEvent(ev, '$md.dragend', this.state.dragPointer);\n      }\n    }\n  });\n\n  addHandler('swipe', {\n    options: {\n      minVelocity: 0.65,\n      minDistance: 10\n    },\n    onEnd: function(ev, pointer) {\n      if (Math.abs(pointer.velocityX) > this.state.options.minVelocity &&\n          Math.abs(pointer.distanceX) > this.state.options.minDistance) {\n        var eventType = pointer.directionX == 'left' ? '$md.swipeleft' : '$md.swiperight';\n        this.dispatchEvent(ev, eventType);\n      }\n    }\n  });\n\n  var self;\n  return self = {\n    handler: addHandler,\n    register: register\n  };\n\n  function addHandler(name, definition) {\n    var handler = new $$MdGestureHandler(name);\n    angular.extend(handler, definition);\n    HANDLERS[name] = handler;\n    return self;\n  }\n\n  function register(element, handlerName, options) {\n    var handler = HANDLERS[ handlerName.replace(/^\\$md./, '') ];\n    if (!handler) {\n      throw new Error('Failed to register element with handler ' + handlerName + '. ' +\n                      'Available handlers: ' + Object.keys(HANDLERS).join(', '));\n    }\n    return handler.registerElement(element, options);\n  }\n}])\n.factory('$$MdGestureHandler', [\"$$rAF\", function($$rAF) {\n\n  function GestureHandler(name) {\n    this.name = name;\n    this.state = {};\n  }\n  GestureHandler.prototype = {\n    onStart: angular.noop,\n    onMove: angular.noop,\n    onEnd: angular.noop,\n    onCancel: angular.noop,\n    options: {},\n\n    dispatchEvent: typeof window.jQuery !== 'undefined' && angular.element === window.jQuery ?\n      jQueryDispatchEvent :\n      nativeDispatchEvent,\n\n    start: function(ev, pointer) {\n      if (this.state.isRunning) return;\n      var parentTarget = this.getNearestParent(ev.target);\n      var parentTargetOptions = parentTarget && parentTarget.$mdGesture[this.name] || {};\n\n      this.state = {\n        isRunning: true,\n        options: angular.extend({}, this.options, parentTargetOptions),\n        registeredParent: parentTarget\n      };\n      this.onStart(ev, pointer);\n    },\n    move: function(ev, pointer) {\n      if (!this.state.isRunning) return;\n      this.onMove(ev, pointer);\n    },\n    end: function(ev, pointer) {\n      if (!this.state.isRunning) return;\n      this.onEnd(ev, pointer);\n      this.state.isRunning = false;\n    },\n    cancel: function(ev, pointer) {\n      this.onCancel(ev, pointer);\n      this.state = {};\n    },\n\n    // Find and return the nearest parent element that has been registered via\n    // $mdGesture.register(element, 'handlerName').\n    getNearestParent: function(node) {\n      var current = node;\n      while (current) {\n        if ( (current.$mdGesture || {})[this.name] ) {\n          return current;\n        }\n        current = current.parentNode;\n      }\n    },\n\n    registerElement: function(element, options) {\n      var self = this;\n      element[0].$mdGesture = element[0].$mdGesture || {};\n      element[0].$mdGesture[this.name] = options || {};\n      element.on('$destroy', onDestroy);\n\n      return onDestroy;\n\n      function onDestroy() {\n        delete element[0].$mdGesture[self.name];\n        element.off('$destroy', onDestroy);\n      }\n    }\n  };\n\n  function jQueryDispatchEvent(srcEvent, eventType, eventPointer) {\n    eventPointer = eventPointer || pointer;\n    var eventObj = new angular.element.Event(eventType);\n\n    eventObj.$material = true;\n    eventObj.pointer = eventPointer;\n    eventObj.srcEvent = srcEvent;\n\n    angular.extend(eventObj, {\n      clientX: eventPointer.x,\n      clientY: eventPointer.y,\n      screenX: eventPointer.x,\n      screenY: eventPointer.y,\n      pageX: eventPointer.x,\n      pageY: eventPointer.y,\n      ctrlKey: srcEvent.ctrlKey,\n      altKey: srcEvent.altKey,\n      shiftKey: srcEvent.shiftKey,\n      metaKey: srcEvent.metaKey\n    });\n    angular.element(eventPointer.target).trigger(eventObj);\n  }\n\n  /*\n   * NOTE: nativeDispatchEvent is very performance sensitive.\n   */\n  function nativeDispatchEvent(srcEvent, eventType, eventPointer) {\n    eventPointer = eventPointer || pointer;\n    var eventObj;\n\n    if (eventType === 'click') {\n      eventObj = document.createEvent('MouseEvents');\n      eventObj.initMouseEvent(\n        'click', true, true, window, srcEvent.detail,\n        eventPointer.x, eventPointer.y, eventPointer.x, eventPointer.y,\n        srcEvent.ctrlKey, srcEvent.altKey, srcEvent.shiftKey, srcEvent.metaKey,\n        srcEvent.button, srcEvent.relatedTarget || null\n      );\n\n    } else {\n      eventObj = document.createEvent('CustomEvent');\n      eventObj.initCustomEvent(eventType, true, true, {});\n    }\n    eventObj.$material = true;\n    eventObj.pointer = eventPointer;\n    eventObj.srcEvent = srcEvent;\n    eventPointer.target.dispatchEvent(eventObj);\n  }\n\n  return GestureHandler;\n}]);\n\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\nangular.module('material.core')\n  .provider('$$interimElement', InterimElementProvider);\n\n/*\n * @ngdoc service\n * @name $$interimElement\n * @module material.core\n *\n * @description\n *\n * Factory that contructs `$$interimElement.$service` services.\n * Used internally in material design for elements that appear on screen temporarily.\n * The service provides a promise-like API for interacting with the temporary\n * elements.\n *\n * ```js\n * app.service('$mdToast', function($$interimElement) {\n *   var $mdToast = $$interimElement(toastDefaultOptions);\n *   return $mdToast;\n * });\n * ```\n * @param {object=} defaultOptions Options used by default for the `show` method on the service.\n *\n * @returns {$$interimElement.$service}\n *\n */\n\nfunction InterimElementProvider() {\n  createInterimElementProvider.$get = InterimElementFactory;\n  InterimElementFactory.$inject = [\"$document\", \"$q\", \"$rootScope\", \"$timeout\", \"$rootElement\", \"$animate\", \"$interpolate\", \"$mdCompiler\", \"$mdTheming\"];\n  return createInterimElementProvider;\n\n  /**\n   * Returns a new provider which allows configuration of a new interimElement\n   * service. Allows configuration of default options & methods for options,\n   * as well as configuration of 'preset' methods (eg dialog.basic(): basic is a preset method)\n   */\n  function createInterimElementProvider(interimFactoryName) {\n    var EXPOSED_METHODS = ['onHide', 'onShow', 'onRemove'];\n\n    var customMethods = {};\n    var providerConfig = {\n      presets: {}\n    };\n\n    var provider = {\n      setDefaults: setDefaults,\n      addPreset: addPreset,\n      addMethod: addMethod,\n      $get: factory\n    };\n\n    /**\n     * all interim elements will come with the 'build' preset\n     */\n    provider.addPreset('build', {\n      methods: ['controller', 'controllerAs', 'resolve',\n        'template', 'templateUrl', 'themable', 'transformTemplate', 'parent']\n    });\n\n    factory.$inject = [\"$$interimElement\", \"$animate\", \"$injector\"];\n    return provider;\n\n    /**\n     * Save the configured defaults to be used when the factory is instantiated\n     */\n    function setDefaults(definition) {\n      providerConfig.optionsFactory = definition.options;\n      providerConfig.methods = (definition.methods || []).concat(EXPOSED_METHODS);\n      return provider;\n    }\n\n    /**\n     * Add a method to the factory that isn't specific to any interim element operations\n     */\n\n    function addMethod(name, fn) {\n      customMethods[name] = fn;\n      return provider;\n    }\n\n    /**\n     * Save the configured preset to be used when the factory is instantiated\n     */\n    function addPreset(name, definition) {\n      definition = definition || {};\n      definition.methods = definition.methods || [];\n      definition.options = definition.options || function() { return {}; };\n\n      if (/^cancel|hide|show$/.test(name)) {\n        throw new Error(\"Preset '\" + name + \"' in \" + interimFactoryName + \" is reserved!\");\n      }\n      if (definition.methods.indexOf('_options') > -1) {\n        throw new Error(\"Method '_options' in \" + interimFactoryName + \" is reserved!\");\n      }\n      providerConfig.presets[name] = {\n        methods: definition.methods.concat(EXPOSED_METHODS),\n        optionsFactory: definition.options,\n        argOption: definition.argOption\n      };\n      return provider;\n    }\n\n    /**\n     * Create a factory that has the given methods & defaults implementing interimElement\n     */\n    /* @ngInject */\n    function factory($$interimElement, $animate, $injector) {\n      var defaultMethods;\n      var defaultOptions;\n      var interimElementService = $$interimElement();\n\n      /*\n       * publicService is what the developer will be using.\n       * It has methods hide(), cancel(), show(), build(), and any other\n       * presets which were set during the config phase.\n       */\n      var publicService = {\n        hide: interimElementService.hide,\n        cancel: interimElementService.cancel,\n        show: showInterimElement\n      };\n\n      defaultMethods = providerConfig.methods || [];\n      // This must be invoked after the publicService is initialized\n      defaultOptions = invokeFactory(providerConfig.optionsFactory, {});\n\n      // Copy over the simple custom methods\n      angular.forEach(customMethods, function(fn, name) {\n        publicService[name] = fn;\n      });\n\n      angular.forEach(providerConfig.presets, function(definition, name) {\n        var presetDefaults = invokeFactory(definition.optionsFactory, {});\n        var presetMethods = (definition.methods || []).concat(defaultMethods);\n\n        // Every interimElement built with a preset has a field called `$type`,\n        // which matches the name of the preset.\n        // Eg in preset 'confirm', options.$type === 'confirm'\n        angular.extend(presetDefaults, { $type: name });\n\n        // This creates a preset class which has setter methods for every\n        // method given in the `.addPreset()` function, as well as every\n        // method given in the `.setDefaults()` function.\n        //\n        // @example\n        // .setDefaults({\n        //   methods: ['hasBackdrop', 'clickOutsideToClose', 'escapeToClose', 'targetEvent'],\n        //   options: dialogDefaultOptions\n        // })\n        // .addPreset('alert', {\n        //   methods: ['title', 'ok'],\n        //   options: alertDialogOptions\n        // })\n        //\n        // Set values will be passed to the options when interimElemnt.show() is called.\n        function Preset(opts) {\n          this._options = angular.extend({}, presetDefaults, opts);\n        }\n        angular.forEach(presetMethods, function(name) {\n          Preset.prototype[name] = function(value) {\n            this._options[name] = value;\n            return this;\n          };\n        });\n\n        // Create shortcut method for one-linear methods\n        if (definition.argOption) {\n          var methodName = 'show' + name.charAt(0).toUpperCase() + name.slice(1);\n          publicService[methodName] = function(arg) {\n            var config = publicService[name](arg);\n            return publicService.show(config);\n          };\n        }\n\n        // eg $mdDialog.alert() will return a new alert preset\n        publicService[name] = function(arg) {\n          // If argOption is supplied, eg `argOption: 'content'`, then we assume\n          // if the argument is not an options object then it is the `argOption` option.\n          //\n          // @example `$mdToast.simple('hello')` // sets options.content to hello\n          //                                     // because argOption === 'content'\n          if (arguments.length && definition.argOption && !angular.isObject(arg) &&\n              !angular.isArray(arg)) {\n            return (new Preset())[definition.argOption](arg);\n          } else {\n            return new Preset(arg);\n          }\n\n        };\n      });\n\n      return publicService;\n\n      function showInterimElement(opts) {\n        // opts is either a preset which stores its options on an _options field,\n        // or just an object made up of options\n        if (opts && opts._options) opts = opts._options;\n        return interimElementService.show(\n          angular.extend({}, defaultOptions, opts)\n        );\n      }\n\n      /**\n       * Helper to call $injector.invoke with a local of the factory name for\n       * this provider.\n       * If an $mdDialog is providing options for a dialog and tries to inject\n       * $mdDialog, a circular dependency error will happen.\n       * We get around that by manually injecting $mdDialog as a local.\n       */\n      function invokeFactory(factory, defaultVal) {\n        var locals = {};\n        locals[interimFactoryName] = publicService;\n        return $injector.invoke(factory || function() { return defaultVal; }, {}, locals);\n      }\n\n    }\n\n  }\n\n  /* @ngInject */\n  function InterimElementFactory($document, $q, $rootScope, $timeout, $rootElement, $animate,\n                                 $interpolate, $mdCompiler, $mdTheming ) {\n    var startSymbol = $interpolate.startSymbol(),\n        endSymbol = $interpolate.endSymbol(),\n        usesStandardSymbols = ((startSymbol === '{{') && (endSymbol === '}}')),\n        processTemplate  = usesStandardSymbols ? angular.identity : replaceInterpolationSymbols;\n\n    return function createInterimElementService() {\n      /*\n       * @ngdoc service\n       * @name $$interimElement.$service\n       *\n       * @description\n       * A service used to control inserting and removing an element into the DOM.\n       *\n       */\n      var stack = [];\n      var service;\n      return service = {\n        show: show,\n        hide: hide,\n        cancel: cancel\n      };\n\n      /*\n       * @ngdoc method\n       * @name $$interimElement.$service#show\n       * @kind function\n       *\n       * @description\n       * Adds the `$interimElement` to the DOM and returns a promise that will be resolved or rejected\n       * with hide or cancel, respectively.\n       *\n       * @param {*} options is hashMap of settings\n       * @returns a Promise\n       *\n       */\n      function show(options) {\n        if (stack.length) {\n          return service.cancel().then(function() {\n            return show(options);\n          });\n        } else {\n          var interimElement = new InterimElement(options);\n          stack.push(interimElement);\n          return interimElement.show().then(function() {\n            return interimElement.deferred.promise;\n          });\n        }\n      }\n\n      /*\n       * @ngdoc method\n       * @name $$interimElement.$service#hide\n       * @kind function\n       *\n       * @description\n       * Removes the `$interimElement` from the DOM and resolves the promise returned from `show`\n       *\n       * @param {*} resolveParam Data to resolve the promise with\n       * @returns a Promise that will be resolved after the element has been removed.\n       *\n       */\n      function hide(response) {\n        var interimElement = stack.shift();\n        return interimElement && interimElement.remove().then(function() {\n          interimElement.deferred.resolve(response);\n        });\n      }\n\n      /*\n       * @ngdoc method\n       * @name $$interimElement.$service#cancel\n       * @kind function\n       *\n       * @description\n       * Removes the `$interimElement` from the DOM and rejects the promise returned from `show`\n       *\n       * @param {*} reason Data to reject the promise with\n       * @returns Promise that will be resolved after the element has been removed.\n       *\n       */\n      function cancel(reason) {\n        var interimElement = stack.shift();\n        return $q.when(interimElement && interimElement.remove().then(function() {\n          interimElement.deferred.reject(reason);\n        }));\n      }\n\n\n      /*\n       * Internal Interim Element Object\n       * Used internally to manage the DOM element and related data\n       */\n      function InterimElement(options) {\n        var self;\n        var hideTimeout, element, showDone, removeDone;\n\n        options = options || {};\n        options = angular.extend({\n          preserveScope: false,\n          scope: options.scope || $rootScope.$new(options.isolateScope),\n          onShow: function(scope, element, options) {\n            return $animate.enter(element, options.parent);\n          },\n          onRemove: function(scope, element, options) {\n            // Element could be undefined if a new element is shown before\n            // the old one finishes compiling.\n            return element && $animate.leave(element) || $q.when();\n          }\n        }, options);\n\n        if (options.template) {\n          options.template = processTemplate(options.template);\n        }\n\n        return self = {\n          options: options,\n          deferred: $q.defer(),\n          show: function() {\n            var compilePromise;\n            if (options.skipCompile) {\n              compilePromise = $q(function(resolve) { \n                resolve({\n                  locals: {},\n                  link: function() { return options.element; }\n                });\n              });\n            } else {\n              compilePromise = $mdCompiler.compile(options);\n            }\n\n            return showDone = compilePromise.then(function(compileData) {\n              angular.extend(compileData.locals, self.options);\n\n              element = compileData.link(options.scope);\n\n              // Search for parent at insertion time, if not specified\n              if (angular.isFunction(options.parent)) {\n                options.parent = options.parent(options.scope, element, options);\n              } else if (angular.isString(options.parent)) {\n                options.parent = angular.element($document[0].querySelector(options.parent));\n              }\n\n              // If parent querySelector/getter function fails, or it's just null,\n              // find a default.\n              if (!(options.parent || {}).length) {\n                options.parent = $rootElement.find('body');\n                if (!options.parent.length) options.parent = $rootElement;\n              }\n\n              if (options.themable) $mdTheming(element);\n              var ret = options.onShow(options.scope, element, options);\n              return $q.when(ret)\n                .then(function(){\n                  // Issue onComplete callback when the `show()` finishes\n                  (options.onComplete || angular.noop)(options.scope, element, options);\n                  startHideTimeout();\n                });\n\n              function startHideTimeout() {\n                if (options.hideDelay) {\n                  hideTimeout = $timeout(service.cancel, options.hideDelay) ;\n                }\n              }\n            }, function(reason) { showDone = true; self.deferred.reject(reason); });\n          },\n          cancelTimeout: function() {\n            if (hideTimeout) {\n              $timeout.cancel(hideTimeout);\n              hideTimeout = undefined;\n            }\n          },\n          remove: function() {\n            self.cancelTimeout();\n            return removeDone = $q.when(showDone).then(function() {\n              var ret = element ? options.onRemove(options.scope, element, options) : true;\n              return $q.when(ret).then(function() {\n                if (!options.preserveScope) options.scope.$destroy();\n                removeDone = true;\n              });\n            });\n          }\n        };\n      }\n    };\n\n    /*\n     * Replace `{{` and `}}` in a string (usually a template) with the actual start-/endSymbols used\n     * for interpolation. This allows pre-defined templates (for components such as dialog, toast etc)\n     * to continue to work in apps that use custom interpolation start-/endSymbols.\n     *\n     * @param {string} text The text in which to replace `{{` / `}}`\n     * @returns {string} The modified string using the actual interpolation start-/endSymbols\n     */\n    function replaceInterpolationSymbols(text) {\n      if (!text || !angular.isString(text)) return text;\n      return text.replace(/\\{\\{/g, startSymbol).replace(/}}/g, endSymbol);\n    }\n  }\n\n}\n\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n  'use strict';\n\n  /**\n   * @ngdoc module\n   * @name material.core.componentRegistry\n   *\n   * @description\n   * A component instance registration service.\n   * Note: currently this as a private service in the SideNav component.\n   */\n  angular.module('material.core')\n    .factory('$mdComponentRegistry', ComponentRegistry);\n\n  /*\n   * @private\n   * @ngdoc factory\n   * @name ComponentRegistry\n   * @module material.core.componentRegistry\n   *\n   */\n  function ComponentRegistry($log, $q) {\n\n    var self;\n    var instances = [ ];\n    var pendings = { };\n\n    return self = {\n      /**\n       * Used to print an error when an instance for a handle isn't found.\n       */\n      notFoundError: function(handle) {\n        $log.error('No instance found for handle', handle);\n      },\n      /**\n       * Return all registered instances as an array.\n       */\n      getInstances: function() {\n        return instances;\n      },\n\n      /**\n       * Get a registered instance.\n       * @param handle the String handle to look up for a registered instance.\n       */\n      get: function(handle) {\n        if ( !isValidID(handle) ) return null;\n\n        var i, j, instance;\n        for(i = 0, j = instances.length; i < j; i++) {\n          instance = instances[i];\n          if(instance.$$mdHandle === handle) {\n            return instance;\n          }\n        }\n        return null;\n      },\n\n      /**\n       * Register an instance.\n       * @param instance the instance to register\n       * @param handle the handle to identify the instance under.\n       */\n      register: function(instance, handle) {\n        if ( !handle ) return angular.noop;\n\n        instance.$$mdHandle = handle;\n        instances.push(instance);\n        resolveWhen();\n\n        return deregister;\n\n        /**\n         * Remove registration for an instance\n         */\n        function deregister() {\n          var index = instances.indexOf(instance);\n          if (index !== -1) {\n            instances.splice(index, 1);\n          }\n        }\n\n        /**\n         * Resolve any pending promises for this instance\n         */\n        function resolveWhen() {\n          var dfd = pendings[handle];\n          if ( dfd ) {\n            dfd.resolve( instance );\n            delete pendings[handle];\n          }\n        }\n      },\n\n      /**\n       * Async accessor to registered component instance\n       * If not available then a promise is created to notify\n       * all listeners when the instance is registered.\n       */\n      when : function(handle) {\n        if ( isValidID(handle) ) {\n          var deferred = $q.defer();\n          var instance = self.get(handle);\n\n          if ( instance )  {\n            deferred.resolve( instance );\n          } else {\n            pendings[handle] = deferred;\n          }\n\n          return deferred.promise;\n        }\n        return $q.reject(\"Invalid `md-component-id` value.\");\n      }\n\n    };\n\n    function isValidID(handle){\n      return handle && (handle !== \"\");\n    }\n\n  }\n  ComponentRegistry.$inject = [\"$log\", \"$q\"];\n\n\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\nangular.module('material.core')\n  .factory('$mdInkRipple', InkRippleService)\n  .directive('mdInkRipple', InkRippleDirective)\n  .directive('mdNoInk', attrNoDirective())\n  .directive('mdNoBar', attrNoDirective())\n  .directive('mdNoStretch', attrNoDirective());\n\nfunction InkRippleDirective($mdInkRipple) {\n  return {\n    controller: angular.noop,\n    link: function (scope, element, attr) {\n      if (attr.hasOwnProperty('mdInkRippleCheckbox')) {\n        $mdInkRipple.attachCheckboxBehavior(scope, element);\n      } else {\n        $mdInkRipple.attachButtonBehavior(scope, element);\n      }\n    }\n  };\n}\nInkRippleDirective.$inject = [\"$mdInkRipple\"];\n\nfunction InkRippleService($window, $timeout) {\n\n  return {\n    attachButtonBehavior: attachButtonBehavior,\n    attachCheckboxBehavior: attachCheckboxBehavior,\n    attachTabBehavior: attachTabBehavior,\n    attach: attach\n  };\n\n  function attachButtonBehavior(scope, element, options) {\n    return attach(scope, element, angular.extend({\n      fullRipple: true,\n      isMenuItem: element.hasClass('md-menu-item'),\n      center: false,\n      dimBackground: true\n    }, options));\n  }\n\n  function attachCheckboxBehavior(scope, element, options) {\n    return attach(scope, element, angular.extend({\n      center: true,\n      dimBackground: false,\n      fitRipple: true\n    }, options));\n  }\n\n  function attachTabBehavior(scope, element, options) {\n    return attach(scope, element, angular.extend({\n      center: false,\n      dimBackground: true,\n      outline: false,\n      rippleSize: 'full'\n    }, options));\n  }\n\n  function attach(scope, element, options) {\n    if (element.controller('mdNoInk')) return angular.noop;\n\n    options = angular.extend({\n      colorElement: element,\n      mousedown: true,\n      hover: true,\n      focus: true,\n      center: false,\n      mousedownPauseTime: 150,\n      dimBackground: false,\n      outline: false,\n      fullRipple: true,\n      isMenuItem: false,\n      fitRipple: false\n    }, options);\n\n    var rippleSize,\n        controller = element.controller('mdInkRipple') || {},\n        counter = 0,\n        ripples = [],\n        states = [],\n        isActiveExpr = element.attr('md-highlight'),\n        isActive = false,\n        isHeld = false,\n        node = element[0],\n        rippleSizeSetting = element.attr('md-ripple-size'),\n        color = parseColor(element.attr('md-ink-ripple')) || parseColor($window.getComputedStyle(options.colorElement[0]).color || 'rgb(0, 0, 0)');\n\n    switch (rippleSizeSetting) {\n      case 'full':\n        options.fullRipple = true;\n        break;\n      case 'partial':\n        options.fullRipple = false;\n        break;\n    }\n\n    // expose onInput for ripple testing\n    if (options.mousedown) {\n      element.on('$md.pressdown', onPressDown)\n        .on('$md.pressup', onPressUp);\n    }\n\n    controller.createRipple = createRipple;\n\n    if (isActiveExpr) {\n      scope.$watch(isActiveExpr, function watchActive(newValue) {\n        isActive = newValue;\n        if (isActive && !ripples.length) {\n          $timeout(function () { createRipple(0, 0); }, 0, false);\n        }\n        angular.forEach(ripples, updateElement);\n      });\n    }\n\n    // Publish self-detach method if desired...\n    return function detach() {\n      element.off('$md.pressdown', onPressDown)\n        .off('$md.pressup', onPressUp);\n      getRippleContainer().remove();\n    };\n\n    /**\n     * Gets the current ripple container\n     * If there is no ripple container, it creates one and returns it\n     *\n     * @returns {angular.element} ripple container element\n     */\n    function getRippleContainer() {\n      var container = element.data('$mdRippleContainer');\n      if (container) return container;\n      container = angular.element('<div class=\"md-ripple-container\">');\n      element.append(container);\n      element.data('$mdRippleContainer', container);\n      return container;\n    }\n\n    function parseColor(color) {\n      if (!color) return;\n      if (color.indexOf('rgba') === 0) return color.replace(/\\d?\\.?\\d*\\s*\\)\\s*$/, '0.1)');\n      if (color.indexOf('rgb')  === 0) return rgbToRGBA(color);\n      if (color.indexOf('#')    === 0) return hexToRGBA(color);\n\n      /**\n       * Converts a hex value to an rgba string\n       *\n       * @param {string} hex value (3 or 6 digits) to be converted\n       *\n       * @returns {string} rgba color with 0.1 alpha\n       */\n      function hexToRGBA(color) {\n        var hex = color.charAt(0) === '#' ? color.substr(1) : color,\n          dig = hex.length / 3,\n          red = hex.substr(0, dig),\n          grn = hex.substr(dig, dig),\n          blu = hex.substr(dig * 2);\n        if (dig === 1) {\n          red += red;\n          grn += grn;\n          blu += blu;\n        }\n        return 'rgba(' + parseInt(red, 16) + ',' + parseInt(grn, 16) + ',' + parseInt(blu, 16) + ',0.1)';\n      }\n\n      /**\n       * Converts rgb value to rgba string\n       *\n       * @param {string} rgb color string\n       *\n       * @returns {string} rgba color with 0.1 alpha\n       */\n      function rgbToRGBA(color) {\n        return color.replace(')', ', 0.1)').replace('(', 'a(');\n      }\n\n    }\n\n    function removeElement(elem, wait) {\n      ripples.splice(ripples.indexOf(elem), 1);\n      if (ripples.length === 0) {\n        getRippleContainer().css({ backgroundColor: '' });\n      }\n      $timeout(function () { elem.remove(); }, wait, false);\n    }\n\n    function updateElement(elem) {\n      var index = ripples.indexOf(elem),\n          state = states[index] || {},\n          elemIsActive = ripples.length > 1 ? false : isActive,\n          elemIsHeld   = ripples.length > 1 ? false : isHeld;\n      if (elemIsActive || state.animating || elemIsHeld) {\n        elem.addClass('md-ripple-visible');\n      } else if (elem) {\n        elem.removeClass('md-ripple-visible');\n        if (options.outline) {\n          elem.css({\n            width: rippleSize + 'px',\n            height: rippleSize + 'px',\n            marginLeft: (rippleSize * -1) + 'px',\n            marginTop: (rippleSize * -1) + 'px'\n          });\n        }\n        removeElement(elem, options.outline ? 450 : 650);\n      }\n    }\n\n    /**\n     * Creates a ripple at the provided coordinates\n     *\n     * @param {number} left cursor position\n     * @param {number} top cursor position\n     *\n     * @returns {angular.element} the generated ripple element\n     */\n    function createRipple(left, top) {\n\n      color = parseColor(element.attr('md-ink-ripple')) || parseColor($window.getComputedStyle(options.colorElement[0]).color || 'rgb(0, 0, 0)');\n\n      var container = getRippleContainer(),\n          size = getRippleSize(left, top),\n          css = getRippleCss(size, left, top),\n          elem = getRippleElement(css),\n          index = ripples.indexOf(elem),\n          state = states[index] || {};\n\n      rippleSize = size;\n\n      state.animating = true;\n\n      $timeout(function () {\n        if (options.dimBackground) {\n          container.css({ backgroundColor: color });\n        }\n        elem.addClass('md-ripple-placed md-ripple-scaled');\n        if (options.outline) {\n          elem.css({\n            borderWidth: (size * 0.5) + 'px',\n            marginLeft: (size * -0.5) + 'px',\n            marginTop: (size * -0.5) + 'px'\n          });\n        } else {\n          elem.css({ left: '50%', top: '50%' });\n        }\n        updateElement(elem);\n        $timeout(function () {\n          state.animating = false;\n          updateElement(elem);\n        }, (options.outline ? 450 : 225), false);\n      }, 0, false);\n\n      return elem;\n\n      /**\n       * Creates the ripple element with the provided css\n       *\n       * @param {object} css properties to be applied\n       *\n       * @returns {angular.element} the generated ripple element\n       */\n      function getRippleElement(css) {\n        var elem = angular.element('<div class=\"md-ripple\" data-counter=\"' + counter++ + '\">');\n        ripples.unshift(elem);\n        states.unshift({ animating: true });\n        container.append(elem);\n        css && elem.css(css);\n        return elem;\n      }\n\n      /**\n       * Calculate the ripple size\n       *\n       * @returns {number} calculated ripple diameter\n       */\n      function getRippleSize(left, top) {\n        var width = container.prop('offsetWidth'),\n            height = container.prop('offsetHeight'),\n            multiplier, size, rect;\n        if (options.isMenuItem) {\n          size = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));\n        } else if (options.outline) {\n          rect = node.getBoundingClientRect();\n          left -= rect.left;\n          top -= rect.top;\n          width = Math.max(left, width - left);\n          height = Math.max(top, height - top);\n          size = 2 * Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));\n        } else {\n          multiplier = options.fullRipple ? 1.1 : 0.8;\n          size = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2)) * multiplier;\n          if (options.fitRipple) {\n            size = Math.min(height, width, size);\n          }\n        }\n        return size;\n      }\n\n      /**\n       * Generates the ripple css\n       *\n       * @param {number} the diameter of the ripple\n       * @param {number} the left cursor offset\n       * @param {number} the top cursor offset\n       *\n       * @returns {{backgroundColor: string, borderColor: string, width: string, height: string}}\n       */\n      function getRippleCss(size, left, top) {\n        var rect,\n            css = {\n              backgroundColor: rgbaToRGB(color),\n              borderColor: rgbaToRGB(color),\n              width: size + 'px',\n              height: size + 'px'\n            };\n\n        if (options.outline) {\n          css.width = 0;\n          css.height = 0;\n        } else {\n          css.marginLeft = css.marginTop = (size * -0.5) + 'px';\n        }\n\n        if (options.center) {\n          css.left = css.top = '50%';\n        } else {\n          rect = node.getBoundingClientRect();\n          css.left = Math.round((left - rect.left) / container.prop('offsetWidth') * 100) + '%';\n          css.top = Math.round((top - rect.top) / container.prop('offsetHeight') * 100) + '%';\n        }\n\n        return css;\n\n        /**\n         * Converts rgba string to rgb, removing the alpha value\n         *\n         * @param {string} rgba color\n         *\n         * @returns {string} rgb color\n         */\n        function rgbaToRGB(color) {\n          return color.replace('rgba', 'rgb').replace(/,[^\\),]+\\)/, ')');\n        }\n      }\n    }\n\n    /**\n     * Handles user input start and stop events\n     *\n     */\n    function onPressDown(ev) {\n      if (!isRippleAllowed()) return;\n\n      createRipple(ev.pointer.x, ev.pointer.y);\n      isHeld = true;\n    }\n    function onPressUp() {\n      isHeld = false;\n      var ripple = ripples[ ripples.length - 1 ];\n      $timeout(function () { updateElement(ripple); }, 0, false);\n    }\n\n    /**\n     * Determines if the ripple is allowed\n     *\n     * @returns {boolean} true if the ripple is allowed, false if not\n     */\n    function isRippleAllowed() {\n      var parent = node.parentNode;\n      var grandparent = parent && parent.parentNode;\n      var ancestor = grandparent && grandparent.parentNode;\n      return !isDisabled(node) && !isDisabled(parent) && !isDisabled(grandparent) && !isDisabled(ancestor);\n      function isDisabled (elem) {\n        return elem && elem.hasAttribute && elem.hasAttribute('disabled');\n      }\n    }\n\n  }\n}\nInkRippleService.$inject = [\"$window\", \"$timeout\"];\n\n/**\n * noink/nobar/nostretch directive: make any element that has one of\n * these attributes be given a controller, so that other directives can\n * `require:` these and see if there is a `no<xxx>` parent attribute.\n *\n * @usage\n * <hljs lang=\"html\">\n * <parent md-no-ink>\n *   <child detect-no>\n *   </child>\n * </parent>\n * </hljs>\n *\n * <hljs lang=\"js\">\n * myApp.directive('detectNo', function() {\n *   return {\n *     require: ['^?mdNoInk', ^?mdNoBar'],\n *     link: function(scope, element, attr, ctrls) {\n *       var noinkCtrl = ctrls[0];\n *       var nobarCtrl = ctrls[1];\n *       if (noInkCtrl) {\n *         alert(\"the md-no-ink flag has been specified on an ancestor!\");\n *       }\n *       if (nobarCtrl) {\n *         alert(\"the md-no-bar flag has been specified on an ancestor!\");\n *       }\n *     }\n *   };\n * });\n * </hljs>\n */\nfunction attrNoDirective() {\n  return function() {\n    return {\n      controller: angular.noop\n    };\n  };\n}\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\nangular.module('material.core.theming.palette', [])\n.constant('$mdColorPalette', {\n  'red': {\n    '50': '#ffebee',\n    '100': '#ffcdd2',\n    '200': '#ef9a9a',\n    '300': '#e57373',\n    '400': '#ef5350',\n    '500': '#f44336',\n    '600': '#e53935',\n    '700': '#d32f2f',\n    '800': '#c62828',\n    '900': '#b71c1c',\n    'A100': '#ff8a80',\n    'A200': '#ff5252',\n    'A400': '#ff1744',\n    'A700': '#d50000',\n    'contrastDefaultColor': 'light',\n    'contrastDarkColors': '50 100 200 300 400 A100',\n    'contrastStrongLightColors': '500 600 700 A200 A400 A700'\n  },\n  'pink': {\n    '50': '#fce4ec',\n    '100': '#f8bbd0',\n    '200': '#f48fb1',\n    '300': '#f06292',\n    '400': '#ec407a',\n    '500': '#e91e63',\n    '600': '#d81b60',\n    '700': '#c2185b',\n    '800': '#ad1457',\n    '900': '#880e4f',\n    'A100': '#ff80ab',\n    'A200': '#ff4081',\n    'A400': '#f50057',\n    'A700': '#c51162',\n    'contrastDefaultColor': 'light',\n    'contrastDarkColors': '50 100 200 300 400 A100',\n    'contrastStrongLightColors': '500 600 A200 A400 A700'\n  },\n  'purple': {\n    '50': '#f3e5f5',\n    '100': '#e1bee7',\n    '200': '#ce93d8',\n    '300': '#ba68c8',\n    '400': '#ab47bc',\n    '500': '#9c27b0',\n    '600': '#8e24aa',\n    '700': '#7b1fa2',\n    '800': '#6a1b9a',\n    '900': '#4a148c',\n    'A100': '#ea80fc',\n    'A200': '#e040fb',\n    'A400': '#d500f9',\n    'A700': '#aa00ff',\n    'contrastDefaultColor': 'light',\n    'contrastDarkColors': '50 100 200 A100',\n    'contrastStrongLightColors': '300 400 A200 A400 A700'\n  },\n  'deep-purple': {\n    '50': '#ede7f6',\n    '100': '#d1c4e9',\n    '200': '#b39ddb',\n    '300': '#9575cd',\n    '400': '#7e57c2',\n    '500': '#673ab7',\n    '600': '#5e35b1',\n    '700': '#512da8',\n    '800': '#4527a0',\n    '900': '#311b92',\n    'A100': '#b388ff',\n    'A200': '#7c4dff',\n    'A400': '#651fff',\n    'A700': '#6200ea',\n    'contrastDefaultColor': 'light',\n    'contrastDarkColors': '50 100 200 A100',\n    'contrastStrongLightColors': '300 400 A200'\n  },\n  'indigo': {\n    '50': '#e8eaf6',\n    '100': '#c5cae9',\n    '200': '#9fa8da',\n    '300': '#7986cb',\n    '400': '#5c6bc0',\n    '500': '#3f51b5',\n    '600': '#3949ab',\n    '700': '#303f9f',\n    '800': '#283593',\n    '900': '#1a237e',\n    'A100': '#8c9eff',\n    'A200': '#536dfe',\n    'A400': '#3d5afe',\n    'A700': '#304ffe',\n    'contrastDefaultColor': 'light',\n    'contrastDarkColors': '50 100 200 A100',\n    'contrastStrongLightColors': '300 400 A200 A400'\n  },\n  'blue': {\n    '50': '#e3f2fd',\n    '100': '#bbdefb',\n    '200': '#90caf9',\n    '300': '#64b5f6',\n    '400': '#42a5f5',\n    '500': '#2196f3',\n    '600': '#1e88e5',\n    '700': '#1976d2',\n    '800': '#1565c0',\n    '900': '#0d47a1',\n    'A100': '#82b1ff',\n    'A200': '#448aff',\n    'A400': '#2979ff',\n    'A700': '#2962ff',\n    'contrastDefaultColor': 'light',\n    'contrastDarkColors': '100 200 300 400 A100',\n    'contrastStrongLightColors': '500 600 700 A200 A400 A700'\n  },\n  'light-blue': {\n    '50': '#e1f5fe',\n    '100': '#b3e5fc',\n    '200': '#81d4fa',\n    '300': '#4fc3f7',\n    '400': '#29b6f6',\n    '500': '#03a9f4',\n    '600': '#039be5',\n    '700': '#0288d1',\n    '800': '#0277bd',\n    '900': '#01579b',\n    'A100': '#80d8ff',\n    'A200': '#40c4ff',\n    'A400': '#00b0ff',\n    'A700': '#0091ea',\n    'contrastDefaultColor': 'dark',\n    'contrastLightColors': '500 600 700 800 900 A700',\n    'contrastStrongLightColors': '500 600 700 800 A700'\n  },\n  'cyan': {\n    '50': '#e0f7fa',\n    '100': '#b2ebf2',\n    '200': '#80deea',\n    '300': '#4dd0e1',\n    '400': '#26c6da',\n    '500': '#00bcd4',\n    '600': '#00acc1',\n    '700': '#0097a7',\n    '800': '#00838f',\n    '900': '#006064',\n    'A100': '#84ffff',\n    'A200': '#18ffff',\n    'A400': '#00e5ff',\n    'A700': '#00b8d4',\n    'contrastDefaultColor': 'dark',\n    'contrastLightColors': '500 600 700 800 900',\n    'contrastStrongLightColors': '500 600 700 800'\n  },\n  'teal': {\n    '50': '#e0f2f1',\n    '100': '#b2dfdb',\n    '200': '#80cbc4',\n    '300': '#4db6ac',\n    '400': '#26a69a',\n    '500': '#009688',\n    '600': '#00897b',\n    '700': '#00796b',\n    '800': '#00695c',\n    '900': '#004d40',\n    'A100': '#a7ffeb',\n    'A200': '#64ffda',\n    'A400': '#1de9b6',\n    'A700': '#00bfa5',\n    'contrastDefaultColor': 'dark',\n    'contrastLightColors': '500 600 700 800 900',\n    'contrastStrongLightColors': '500 600 700'\n  },\n  'green': {\n    '50': '#e8f5e9',\n    '100': '#c8e6c9',\n    '200': '#a5d6a7',\n    '300': '#81c784',\n    '400': '#66bb6a',\n    '500': '#4caf50',\n    '600': '#43a047',\n    '700': '#388e3c',\n    '800': '#2e7d32',\n    '900': '#1b5e20',\n    'A100': '#b9f6ca',\n    'A200': '#69f0ae',\n    'A400': '#00e676',\n    'A700': '#00c853',\n    'contrastDefaultColor': 'dark',\n    'contrastLightColors': '500 600 700 800 900',\n    'contrastStrongLightColors': '500 600 700'\n  },\n  'light-green': {\n    '50': '#f1f8e9',\n    '100': '#dcedc8',\n    '200': '#c5e1a5',\n    '300': '#aed581',\n    '400': '#9ccc65',\n    '500': '#8bc34a',\n    '600': '#7cb342',\n    '700': '#689f38',\n    '800': '#558b2f',\n    '900': '#33691e',\n    'A100': '#ccff90',\n    'A200': '#b2ff59',\n    'A400': '#76ff03',\n    'A700': '#64dd17',\n    'contrastDefaultColor': 'dark',\n    'contrastLightColors': '800 900',\n    'contrastStrongLightColors': '800 900'\n  },\n  'lime': {\n    '50': '#f9fbe7',\n    '100': '#f0f4c3',\n    '200': '#e6ee9c',\n    '300': '#dce775',\n    '400': '#d4e157',\n    '500': '#cddc39',\n    '600': '#c0ca33',\n    '700': '#afb42b',\n    '800': '#9e9d24',\n    '900': '#827717',\n    'A100': '#f4ff81',\n    'A200': '#eeff41',\n    'A400': '#c6ff00',\n    'A700': '#aeea00',\n    'contrastDefaultColor': 'dark',\n    'contrastLightColors': '900',\n    'contrastStrongLightColors': '900'\n  },\n  'yellow': {\n    '50': '#fffde7',\n    '100': '#fff9c4',\n    '200': '#fff59d',\n    '300': '#fff176',\n    '400': '#ffee58',\n    '500': '#ffeb3b',\n    '600': '#fdd835',\n    '700': '#fbc02d',\n    '800': '#f9a825',\n    '900': '#f57f17',\n    'A100': '#ffff8d',\n    'A200': '#ffff00',\n    'A400': '#ffea00',\n    'A700': '#ffd600',\n    'contrastDefaultColor': 'dark'\n  },\n  'amber': {\n    '50': '#fff8e1',\n    '100': '#ffecb3',\n    '200': '#ffe082',\n    '300': '#ffd54f',\n    '400': '#ffca28',\n    '500': '#ffc107',\n    '600': '#ffb300',\n    '700': '#ffa000',\n    '800': '#ff8f00',\n    '900': '#ff6f00',\n    'A100': '#ffe57f',\n    'A200': '#ffd740',\n    'A400': '#ffc400',\n    'A700': '#ffab00',\n    'contrastDefaultColor': 'dark'\n  },\n  'orange': {\n    '50': '#fff3e0',\n    '100': '#ffe0b2',\n    '200': '#ffcc80',\n    '300': '#ffb74d',\n    '400': '#ffa726',\n    '500': '#ff9800',\n    '600': '#fb8c00',\n    '700': '#f57c00',\n    '800': '#ef6c00',\n    '900': '#e65100',\n    'A100': '#ffd180',\n    'A200': '#ffab40',\n    'A400': '#ff9100',\n    'A700': '#ff6d00',\n    'contrastDefaultColor': 'dark',\n    'contrastLightColors': '800 900',\n    'contrastStrongLightColors': '800 900'\n  },\n  'deep-orange': {\n    '50': '#fbe9e7',\n    '100': '#ffccbc',\n    '200': '#ffab91',\n    '300': '#ff8a65',\n    '400': '#ff7043',\n    '500': '#ff5722',\n    '600': '#f4511e',\n    '700': '#e64a19',\n    '800': '#d84315',\n    '900': '#bf360c',\n    'A100': '#ff9e80',\n    'A200': '#ff6e40',\n    'A400': '#ff3d00',\n    'A700': '#dd2c00',\n    'contrastDefaultColor': 'light',\n    'contrastDarkColors': '50 100 200 300 400 A100 A200',\n    'contrastStrongLightColors': '500 600 700 800 900 A400 A700'\n  },\n  'brown': {\n    '50': '#efebe9',\n    '100': '#d7ccc8',\n    '200': '#bcaaa4',\n    '300': '#a1887f',\n    '400': '#8d6e63',\n    '500': '#795548',\n    '600': '#6d4c41',\n    '700': '#5d4037',\n    '800': '#4e342e',\n    '900': '#3e2723',\n    'A100': '#d7ccc8',\n    'A200': '#bcaaa4',\n    'A400': '#8d6e63',\n    'A700': '#5d4037',\n    'contrastDefaultColor': 'light',\n    'contrastDarkColors': '50 100 200',\n    'contrastStrongLightColors': '300 400'\n  },\n  'grey': {\n    '0': '#ffffff',\n    '50': '#fafafa',\n    '100': '#f5f5f5',\n    '200': '#eeeeee',\n    '300': '#e0e0e0',\n    '400': '#bdbdbd',\n    '500': '#9e9e9e',\n    '600': '#757575',\n    '700': '#616161',\n    '800': '#424242',\n    '900': '#212121',\n    '1000': '#000000',\n    'A100': '#ffffff',\n    'A200': '#eeeeee',\n    'A400': '#bdbdbd',\n    'A700': '#616161',\n    'contrastDefaultColor': 'dark',\n    'contrastLightColors': '600 700 800 900'\n  },\n  'blue-grey': {\n    '50': '#eceff1',\n    '100': '#cfd8dc',\n    '200': '#b0bec5',\n    '300': '#90a4ae',\n    '400': '#78909c',\n    '500': '#607d8b',\n    '600': '#546e7a',\n    '700': '#455a64',\n    '800': '#37474f',\n    '900': '#263238',\n    'A100': '#cfd8dc',\n    'A200': '#b0bec5',\n    'A400': '#78909c',\n    'A700': '#455a64',\n    'contrastDefaultColor': 'light',\n    'contrastDarkColors': '50 100 200 300',\n    'contrastStrongLightColors': '400 500'\n  }\n});\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\nangular.module('material.core.theming', ['material.core.theming.palette'])\n  .directive('mdTheme', ThemingDirective)\n  .directive('mdThemable', ThemableDirective)\n  .provider('$mdTheming', ThemingProvider)\n  .run(generateThemes);\n\n/**\n * @ngdoc provider\n * @name $mdThemingProvider\n * @module material.core\n *\n * @description Provider to configure the `$mdTheming` service.\n */\n\n/**\n * @ngdoc method\n * @name $mdThemingProvider#setDefaultTheme\n * @param {string} themeName Default theme name to be applied to elements. Default value is `default`.\n */\n\n/**\n * @ngdoc method\n * @name $mdThemingProvider#alwaysWatchTheme\n * @param {boolean} watch Whether or not to always watch themes for changes and re-apply\n * classes when they change. Default is `false`. Enabling can reduce performance.\n */\n\n// In memory storage of defined themes and color palettes (both loaded by CSS, and user specified)\nvar PALETTES;\nvar THEMES;\nvar themingProvider;\nvar generationIsDone;\n\nvar DARK_FOREGROUND = {\n  name: 'dark',\n  '1': 'rgba(0,0,0,0.87)',\n  '2': 'rgba(0,0,0,0.54)',\n  '3': 'rgba(0,0,0,0.26)',\n  '4': 'rgba(0,0,0,0.12)'\n};\nvar LIGHT_FOREGROUND = {\n  name: 'light',\n  '1': 'rgba(255,255,255,1.0)',\n  '2': 'rgba(255,255,255,0.7)',\n  '3': 'rgba(255,255,255,0.3)',\n  '4': 'rgba(255,255,255,0.12)'\n};\n\nvar DARK_SHADOW = '1px 1px 0px rgba(0,0,0,0.4), -1px -1px 0px rgba(0,0,0,0.4)';\nvar LIGHT_SHADOW = '';\n\nvar DARK_CONTRAST_COLOR = colorToRgbaArray('rgba(0,0,0,0.87)');\nvar LIGHT_CONTRAST_COLOR = colorToRgbaArray('rgba(255,255,255,0.87');\nvar STRONG_LIGHT_CONTRAST_COLOR = colorToRgbaArray('rgb(255,255,255)');\n\nvar THEME_COLOR_TYPES = ['primary', 'accent', 'warn', 'background'];\nvar DEFAULT_COLOR_TYPE = 'primary';\n\n// A color in a theme will use these hues by default, if not specified by user.\nvar LIGHT_DEFAULT_HUES = {\n  'accent': {\n    'default': 'A200',\n    'hue-1': 'A100',\n    'hue-2': 'A400',\n    'hue-3': 'A700'\n  }\n};\nvar DARK_DEFAULT_HUES = {\n  'background': {\n    'default': '500',\n    'hue-1': '300',\n    'hue-2': '600',\n    'hue-3': '800'\n  }\n};\nTHEME_COLOR_TYPES.forEach(function(colorType) {\n  // Color types with unspecified default hues will use these default hue values\n  var defaultDefaultHues = {\n    'default': '500',\n    'hue-1': '300',\n    'hue-2': '800',\n    'hue-3': 'A100'\n  };\n  if (!LIGHT_DEFAULT_HUES[colorType]) LIGHT_DEFAULT_HUES[colorType] = defaultDefaultHues;\n  if (!DARK_DEFAULT_HUES[colorType]) DARK_DEFAULT_HUES[colorType] = defaultDefaultHues;\n});\n\nvar VALID_HUE_VALUES = [\n  '50', '100', '200', '300', '400', '500', '600',\n  '700', '800', '900', 'A100', 'A200', 'A400', 'A700'\n];\n\nfunction ThemingProvider($mdColorPalette) {\n  PALETTES = {};\n  THEMES = {};\n  var defaultTheme = 'default';\n  var alwaysWatchTheme = false;\n\n  // Load JS Defined Palettes\n  angular.extend(PALETTES, $mdColorPalette);\n\n  // Default theme defined in core.js\n\n  ThemingService.$inject = [\"$rootScope\", \"$log\"];\n  return themingProvider = {\n    definePalette: definePalette,\n    extendPalette: extendPalette,\n    theme: registerTheme,\n\n    setDefaultTheme: function(theme) {\n      defaultTheme = theme;\n    },\n    alwaysWatchTheme: function(alwaysWatch) {\n      alwaysWatchTheme = alwaysWatch;\n    },\n    $get: ThemingService,\n    _LIGHT_DEFAULT_HUES: LIGHT_DEFAULT_HUES,\n    _DARK_DEFAULT_HUES: DARK_DEFAULT_HUES,\n    _PALETTES: PALETTES,\n    _THEMES: THEMES,\n    _parseRules: parseRules,\n    _rgba: rgba\n  };\n\n  // Example: $mdThemingProvider.definePalette('neonRed', { 50: '#f5fafa', ... });\n  function definePalette(name, map) {\n    map = map || {};\n    PALETTES[name] = checkPaletteValid(name, map);\n    return themingProvider;\n  }\n\n  // Returns an new object which is a copy of a given palette `name` with variables from\n  // `map` overwritten\n  // Example: var neonRedMap = $mdThemingProvider.extendPalette('red', { 50: '#f5fafafa' });\n  function extendPalette(name, map) {\n    return checkPaletteValid(name,  angular.extend({}, PALETTES[name] || {}, map) );\n  }\n\n  // Make sure that palette has all required hues\n  function checkPaletteValid(name, map) {\n    var missingColors = VALID_HUE_VALUES.filter(function(field) {\n      return !map[field];\n    });\n    if (missingColors.length) {\n      throw new Error(\"Missing colors %1 in palette %2!\"\n                      .replace('%1', missingColors.join(', '))\n                      .replace('%2', name));\n    }\n\n    return map;\n  }\n\n  // Register a theme (which is a collection of color palettes to use with various states\n  // ie. warn, accent, primary )\n  // Optionally inherit from an existing theme\n  // $mdThemingProvider.theme('custom-theme').primaryPalette('red');\n  function registerTheme(name, inheritFrom) {\n    inheritFrom = inheritFrom || 'default';\n    if (THEMES[name]) return THEMES[name];\n\n    var parentTheme = typeof inheritFrom === 'string' ? THEMES[inheritFrom] : inheritFrom;\n    var theme = new Theme(name);\n\n    if (parentTheme) {\n      angular.forEach(parentTheme.colors, function(color, colorType) {\n        theme.colors[colorType] = {\n          name: color.name,\n          // Make sure a COPY of the hues is given to the child color,\n          // not the same reference.\n          hues: angular.extend({}, color.hues)\n        };\n      });\n    }\n    THEMES[name] = theme;\n\n    return theme;\n  }\n\n  function Theme(name) {\n    var self = this;\n    self.name = name;\n    self.colors = {};\n\n    self.dark = setDark;\n    setDark(false);\n\n    function setDark(isDark) {\n      isDark = arguments.length === 0 ? true : !!isDark;\n\n      // If no change, abort\n      if (isDark === self.isDark) return;\n\n      self.isDark = isDark;\n\n      self.foregroundPalette = self.isDark ? LIGHT_FOREGROUND : DARK_FOREGROUND;\n      self.foregroundShadow = self.isDark ? DARK_SHADOW : LIGHT_SHADOW;\n      \n      // Light and dark themes have different default hues.\n      // Go through each existing color type for this theme, and for every\n      // hue value that is still the default hue value from the previous light/dark setting,\n      // set it to the default hue value from the new light/dark setting.\n      var newDefaultHues = self.isDark ? DARK_DEFAULT_HUES : LIGHT_DEFAULT_HUES;\n      var oldDefaultHues = self.isDark ? LIGHT_DEFAULT_HUES : DARK_DEFAULT_HUES;\n      angular.forEach(newDefaultHues, function(newDefaults, colorType) {\n        var color = self.colors[colorType];\n        var oldDefaults = oldDefaultHues[colorType];\n        if (color) {\n          for (var hueName in color.hues) {\n            if (color.hues[hueName] === oldDefaults[hueName]) {\n              color.hues[hueName] = newDefaults[hueName];\n            }\n          }\n        }\n      });\n\n      return self;\n    }\n\n    THEME_COLOR_TYPES.forEach(function(colorType) {\n      var defaultHues = (self.isDark ? DARK_DEFAULT_HUES : LIGHT_DEFAULT_HUES)[colorType];\n      self[colorType + 'Palette'] = function setPaletteType(paletteName, hues) {\n        var color = self.colors[colorType] = {\n          name: paletteName,\n          hues: angular.extend({}, defaultHues, hues)\n        };\n\n        Object.keys(color.hues).forEach(function(name) {\n          if (!defaultHues[name]) {\n            throw new Error(\"Invalid hue name '%1' in theme %2's %3 color %4. Available hue names: %4\"\n              .replace('%1', name)\n              .replace('%2', self.name)\n              .replace('%3', paletteName)\n              .replace('%4', Object.keys(defaultHues).join(', '))\n            );\n          }\n        });\n        Object.keys(color.hues).map(function(key) {\n          return color.hues[key];\n        }).forEach(function(hueValue) {\n          if (VALID_HUE_VALUES.indexOf(hueValue) == -1) {\n            throw new Error(\"Invalid hue value '%1' in theme %2's %3 color %4. Available hue values: %5\"\n              .replace('%1', hueValue)\n              .replace('%2', self.name)\n              .replace('%3', colorType)\n              .replace('%4', paletteName)\n              .replace('%5', VALID_HUE_VALUES.join(', '))\n            );\n          }\n        });\n        return self;\n      };\n\n      self[colorType + 'Color'] = function() {\n        var args = Array.prototype.slice.call(arguments);\n        console.warn('$mdThemingProviderTheme.' + colorType + 'Color() has been deprecated. ' +\n                     'Use $mdThemingProviderTheme.' + colorType + 'Palette() instead.');\n        return self[colorType + 'Palette'].apply(self, args);\n      };\n    });\n  }\n\n  /**\n   * @ngdoc service\n   * @name $mdTheming\n   *\n   * @description\n   *\n   * Service that makes an element apply theming related classes to itself.\n   *\n   * ```js\n   * app.directive('myFancyDirective', function($mdTheming) {\n   *   return {\n   *     restrict: 'e',\n   *     link: function(scope, el, attrs) {\n   *       $mdTheming(el);\n   *     }\n   *   };\n   * });\n   * ```\n   * @param {el=} element to apply theming to\n   */\n  /* @ngInject */\n  function ThemingService($rootScope, $log) {\n    applyTheme.inherit = function(el, parent) {\n      var ctrl = parent.controller('mdTheme');\n\n      var attrThemeValue = el.attr('md-theme-watch');\n      if ( (alwaysWatchTheme || angular.isDefined(attrThemeValue)) && attrThemeValue != 'false') {\n        var deregisterWatch = $rootScope.$watch(function() {\n          return ctrl && ctrl.$mdTheme || defaultTheme;\n        }, changeTheme);\n        el.on('$destroy', deregisterWatch);\n      } else {\n        var theme = ctrl && ctrl.$mdTheme || defaultTheme;\n        changeTheme(theme);\n      }\n\n      function changeTheme(theme) {\n        if (!registered(theme)) {\n          $log.warn('Attempted to use unregistered theme \\'' + theme + '\\'. ' +\n                    'Register it with $mdThemingProvider.theme().');\n        }\n        var oldTheme = el.data('$mdThemeName');\n        if (oldTheme) el.removeClass('md-' + oldTheme +'-theme');\n        el.addClass('md-' + theme + '-theme');\n        el.data('$mdThemeName', theme);\n      }\n    };\n\n    applyTheme.registered = registered;\n    applyTheme.defaultTheme = function() {\n      return defaultTheme;\n    };\n\n    return applyTheme;\n\n    function registered(theme) {\n      if (theme === undefined || theme === '') return true;\n      return THEMES[theme] !== undefined;\n    }\n\n    function applyTheme(scope, el) {\n      // Allow us to be invoked via a linking function signature.\n      if (el === undefined) {\n        el = scope;\n        scope = undefined;\n      }\n      if (scope === undefined) {\n        scope = $rootScope;\n      }\n      applyTheme.inherit(el, el);\n    }\n  }\n}\nThemingProvider.$inject = [\"$mdColorPalette\"];\n\nfunction ThemingDirective($mdTheming, $interpolate, $log) {\n  return {\n    priority: 100,\n    link: {\n      pre: function(scope, el, attrs) {\n        var ctrl = {\n          $setTheme: function(theme) {\n            if (!$mdTheming.registered(theme)) {\n              $log.warn('attempted to use unregistered theme \\'' + theme + '\\'');\n            }\n            ctrl.$mdTheme = theme;\n          }\n        };\n        el.data('$mdThemeController', ctrl);\n        ctrl.$setTheme($interpolate(attrs.mdTheme)(scope));\n        attrs.$observe('mdTheme', ctrl.$setTheme);\n      }\n    }\n  };\n}\nThemingDirective.$inject = [\"$mdTheming\", \"$interpolate\", \"$log\"];\n\nfunction ThemableDirective($mdTheming) {\n  return $mdTheming;\n}\nThemableDirective.$inject = [\"$mdTheming\"];\n\nfunction parseRules(theme, colorType, rules) {\n  checkValidPalette(theme, colorType);\n\n  rules = rules.replace(/THEME_NAME/g, theme.name);\n  var generatedRules = [];\n  var color = theme.colors[colorType];\n\n  var themeNameRegex = new RegExp('.md-' + theme.name + '-theme', 'g');\n  // Matches '{{ primary-color }}', etc\n  var hueRegex = new RegExp('(\\'|\")?{{\\\\s*(' + colorType + ')-(color|contrast)-?(\\\\d\\\\.?\\\\d*)?\\\\s*}}(\\\"|\\')?','g');\n  var simpleVariableRegex = /'?\"?\\{\\{\\s*([a-zA-Z]+)-(A?\\d+|hue\\-[0-3]|shadow)-?(\\d\\.?\\d*)?\\s*\\}\\}'?\"?/g;\n  var palette = PALETTES[color.name];\n\n  // find and replace simple variables where we use a specific hue, not angentire palette\n  // eg. \"{{primary-100}}\"\n  //\\(' + THEME_COLOR_TYPES.join('\\|') + '\\)'\n  rules = rules.replace(simpleVariableRegex, function(match, colorType, hue, opacity) {\n    if (colorType === 'foreground') {\n      if (hue == 'shadow') {\n        return theme.foregroundShadow;\n      } else {\n        return theme.foregroundPalette[hue] || theme.foregroundPalette['1'];\n      }\n    }\n    if (hue.indexOf('hue') === 0) {\n      hue = theme.colors[colorType].hues[hue];\n    }\n    return rgba( (PALETTES[ theme.colors[colorType].name ][hue] || '').value, opacity );\n  });\n\n  // For each type, generate rules for each hue (ie. default, md-hue-1, md-hue-2, md-hue-3)\n  angular.forEach(color.hues, function(hueValue, hueName) {\n    var newRule = rules\n      .replace(hueRegex, function(match, _, colorType, hueType, opacity) {\n        return rgba(palette[hueValue][hueType === 'color' ? 'value' : 'contrast'], opacity);\n      });\n    if (hueName !== 'default') {\n      newRule = newRule.replace(themeNameRegex, '.md-' + theme.name + '-theme.md-' + hueName);\n    }\n    generatedRules.push(newRule);\n  });\n\n  return generatedRules.join('');\n}\n\n// Generate our themes at run time given the state of THEMES and PALETTES\nfunction generateThemes($injector) {\n  var themeCss = $injector.has('$MD_THEME_CSS') ? $injector.get('$MD_THEME_CSS') : '';\n\n  // MD_THEME_CSS is a string generated by the build process that includes all the themable\n  // components as templates\n\n  // Expose contrast colors for palettes to ensure that text is always readable\n  angular.forEach(PALETTES, sanitizePalette);\n\n  // Break the CSS into individual rules\n  var rules = themeCss.split(/\\}(?!(\\}|'|\"|;))/)\n    .filter(function(rule) { return rule && rule.length; })\n    .map(function(rule) { return rule.trim() + '}'; });\n\n  var rulesByType = {};\n  THEME_COLOR_TYPES.forEach(function(type) {\n    rulesByType[type] = '';\n  });\n  var ruleMatchRegex = new RegExp('md-(' + THEME_COLOR_TYPES.join('|') + ')', 'g');\n\n  // Sort the rules based on type, allowing us to do color substitution on a per-type basis\n  rules.forEach(function(rule) {\n    var match = rule.match(ruleMatchRegex);\n    // First: test that if the rule has '.md-accent', it goes into the accent set of rules\n    for (var i = 0, type; type = THEME_COLOR_TYPES[i]; i++) {\n      if (rule.indexOf('.md-' + type) > -1) {\n        return rulesByType[type] += rule;\n      }\n    }\n\n    // If no eg 'md-accent' class is found, try to just find 'accent' in the rule and guess from\n    // there\n    for (i = 0; type = THEME_COLOR_TYPES[i]; i++) {\n      if (rule.indexOf(type) > -1) {\n        return rulesByType[type] += rule;\n      }\n    }\n\n    // Default to the primary array\n    return rulesByType[DEFAULT_COLOR_TYPE] += rule;\n  });\n\n  var styleString = '';\n\n  // For each theme, use the color palettes specified for `primary`, `warn` and `accent`\n  // to generate CSS rules.\n  angular.forEach(THEMES, function(theme) {\n    THEME_COLOR_TYPES.forEach(function(colorType) {\n      styleString += parseRules(theme, colorType, rulesByType[colorType] + '');\n    });\n    if (theme.colors.primary.name == theme.colors.accent.name) {\n      console.warn(\"$mdThemingProvider: Using the same palette for primary and\" +\n                   \" accent. This violates the material design spec.\");\n    }\n  });\n\n  // Insert our newly minted styles into the DOM\n  if (!generationIsDone) {\n    var style = document.createElement('style');\n    style.innerHTML = styleString;\n    var head = document.getElementsByTagName('head')[0];\n    head.insertBefore(style, head.firstElementChild);\n    generationIsDone = true;\n  }\n\n  // The user specifies a 'default' contrast color as either light or dark,\n  // then explicitly lists which hues are the opposite contrast (eg. A100 has dark, A200 has light)\n  function sanitizePalette(palette) {\n    var defaultContrast = palette.contrastDefaultColor;\n    var lightColors = palette.contrastLightColors || [];\n    var strongLightColors = palette.contrastStrongLightColors || [];\n    var darkColors = palette.contrastDarkColors || [];\n\n    // These colors are provided as space-separated lists\n    if (typeof lightColors === 'string') lightColors = lightColors.split(' ');\n    if (typeof strongLightColors === 'string') strongLightColors = strongLightColors.split(' ');\n    if (typeof darkColors === 'string') darkColors = darkColors.split(' ');\n\n    // Cleanup after ourselves\n    delete palette.contrastDefaultColor;\n    delete palette.contrastLightColors;\n    delete palette.contrastStrongLightColors;\n    delete palette.contrastDarkColors;\n\n    // Change { 'A100': '#fffeee' } to { 'A100': { value: '#fffeee', contrast:DARK_CONTRAST_COLOR }\n    angular.forEach(palette, function(hueValue, hueName) {\n      if (angular.isObject(hueValue)) return; // Already converted\n      // Map everything to rgb colors\n      var rgbValue = colorToRgbaArray(hueValue);\n      if (!rgbValue) {\n        throw new Error(\"Color %1, in palette %2's hue %3, is invalid. Hex or rgb(a) color expected.\"\n                        .replace('%1', hueValue)\n                        .replace('%2', palette.name)\n                        .replace('%3', hueName));\n      }\n\n      palette[hueName] = {\n        value: rgbValue,\n        contrast: getContrastColor()\n      };\n      function getContrastColor() {\n        if (defaultContrast === 'light') {\n          if (darkColors.indexOf(hueName) > -1) {\n            return DARK_CONTRAST_COLOR;\n          } else {\n            return strongLightColors.indexOf(hueName) > -1 ? STRONG_LIGHT_CONTRAST_COLOR \n              : LIGHT_CONTRAST_COLOR;\n          }\n        } else {\n          if (lightColors.indexOf(hueName) > -1) {\n            return strongLightColors.indexOf(hueName) > -1 ? STRONG_LIGHT_CONTRAST_COLOR \n              : LIGHT_CONTRAST_COLOR;\n          } else {\n            return DARK_CONTRAST_COLOR;\n          }\n        }\n      }\n    });\n  }\n\n}\ngenerateThemes.$inject = [\"$injector\"];\n\nfunction checkValidPalette(theme, colorType) {\n  // If theme attempts to use a palette that doesnt exist, throw error\n  if (!PALETTES[ (theme.colors[colorType] || {}).name ]) {\n    throw new Error(\n      \"You supplied an invalid color palette for theme %1's %2 palette. Available palettes: %3\"\n                    .replace('%1', theme.name)\n                    .replace('%2', colorType)\n                    .replace('%3', Object.keys(PALETTES).join(', '))\n    );\n  }\n}\n\nfunction colorToRgbaArray(clr) {\n  if (angular.isArray(clr) && clr.length == 3) return clr;\n  if (/^rgb/.test(clr)) {\n    return clr.replace(/(^\\s*rgba?\\(|\\)\\s*$)/g, '').split(',').map(function(value, i) {\n      return i == 3 ? parseFloat(value, 10) : parseInt(value, 10);\n    });\n  }\n  if (clr.charAt(0) == '#') clr = clr.substring(1);\n  if (!/^([a-fA-F0-9]{3}){1,2}$/g.test(clr)) return;\n\n  var dig = clr.length / 3;\n  var red = clr.substr(0, dig);\n  var grn = clr.substr(dig, dig);\n  var blu = clr.substr(dig * 2);\n  if (dig === 1) {\n    red += red;\n    grn += grn;\n    blu += blu;\n  }\n  return [parseInt(red, 16), parseInt(grn, 16), parseInt(blu, 16)];\n}\n\nfunction rgba(rgbArray, opacity) {\n  if (rgbArray.length == 4) {\n    rgbArray = angular.copy(rgbArray);\n    opacity ? rgbArray.pop() : opacity = rgbArray.pop();\n  }\n  return opacity && (typeof opacity == 'number' || (typeof opacity == 'string' && opacity.length)) ?\n    'rgba(' + rgbArray.join(',') + ',' + opacity + ')' :\n    'rgb(' + rgbArray.join(',') + ')';\n}\n\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function () {\n  'use strict';\n  /**\n   * @ngdoc module\n   * @name material.components.autocomplete\n   */\n  /*\n   * @see js folder for autocomplete implementation\n   */\n  angular.module('material.components.autocomplete', [\n    'material.core',\n    'material.components.icon'\n  ]);\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\n/*\n * @ngdoc module\n * @name material.components.backdrop\n * @description Backdrop\n */\n\n/**\n * @ngdoc directive\n * @name mdBackdrop\n * @module material.components.backdrop\n *\n * @restrict E\n *\n * @description\n * `<md-backdrop>` is a backdrop element used by other coponents, such as dialog and bottom sheet.\n * Apply class `opaque` to make the backdrop use the theme backdrop color.\n *\n */\n\nangular.module('material.components.backdrop', [\n  'material.core'\n])\n  .directive('mdBackdrop', BackdropDirective);\n\nfunction BackdropDirective($mdTheming) {\n  return $mdTheming;\n}\nBackdropDirective.$inject = [\"$mdTheming\"];\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\n/**\n * @ngdoc module\n * @name material.components.bottomSheet\n * @description\n * BottomSheet\n */\nangular.module('material.components.bottomSheet', [\n  'material.core',\n  'material.components.backdrop'\n])\n  .directive('mdBottomSheet', MdBottomSheetDirective)\n  .provider('$mdBottomSheet', MdBottomSheetProvider);\n\nfunction MdBottomSheetDirective() {\n  return {\n    restrict: 'E'\n  };\n}\n\n/**\n * @ngdoc service\n * @name $mdBottomSheet\n * @module material.components.bottomSheet\n *\n * @description\n * `$mdBottomSheet` opens a bottom sheet over the app and provides a simple promise API.\n *\n * ## Restrictions\n *\n * - The bottom sheet's template must have an outer `<md-bottom-sheet>` element.\n * - Add the `md-grid` class to the bottom sheet for a grid layout.\n * - Add the `md-list` class to the bottom sheet for a list layout.\n *\n * @usage\n * <hljs lang=\"html\">\n * <div ng-controller=\"MyController\">\n *   <md-button ng-click=\"openBottomSheet()\">\n *     Open a Bottom Sheet!\n *   </md-button>\n * </div>\n * </hljs>\n * <hljs lang=\"js\">\n * var app = angular.module('app', ['ngMaterial']);\n * app.controller('MyController', function($scope, $mdBottomSheet) {\n *   $scope.openBottomSheet = function() {\n *     $mdBottomSheet.show({\n *       template: '<md-bottom-sheet>Hello!</md-bottom-sheet>'\n *     });\n *   };\n * });\n * </hljs>\n */\n\n /**\n * @ngdoc method\n * @name $mdBottomSheet#show\n *\n * @description\n * Show a bottom sheet with the specified options.\n *\n * @param {object} options An options object, with the following properties:\n *\n *   - `templateUrl` - `{string=}`: The url of an html template file that will\n *   be used as the content of the bottom sheet. Restrictions: the template must\n *   have an outer `md-bottom-sheet` element.\n *   - `template` - `{string=}`: Same as templateUrl, except this is an actual\n *   template string.\n *   - `scope` - `{object=}`: the scope to link the template / controller to. If none is specified, it will create a new child scope.\n *     This scope will be destroyed when the bottom sheet is removed unless `preserveScope` is set to true.\n *   - `preserveScope` - `{boolean=}`: whether to preserve the scope when the element is removed. Default is false\n *   - `controller` - `{string=}`: The controller to associate with this bottom sheet.\n *   - `locals` - `{string=}`: An object containing key/value pairs. The keys will\n *   be used as names of values to inject into the controller. For example,\n *   `locals: {three: 3}` would inject `three` into the controller with the value\n *   of 3.\n *   - `targetEvent` - `{DOMClickEvent=}`: A click's event object. When passed in as an option,\n *   the location of the click will be used as the starting point for the opening animation\n *   of the the dialog.\n *   - `resolve` - `{object=}`: Similar to locals, except it takes promises as values\n *   and the bottom sheet will not open until the promises resolve.\n *   - `controllerAs` - `{string=}`: An alias to assign the controller to on the scope.\n *   - `parent` - `{element=}`: The element to append the bottom sheet to. Defaults to appending\n *     to the root element of the application.\n *   - `disableParentScroll` - `{boolean=}`: Whether to disable scrolling while the bottom sheet is open.\n *     Default true.\n *\n * @returns {promise} A promise that can be resolved with `$mdBottomSheet.hide()` or\n * rejected with `$mdBottomSheet.cancel()`.\n */\n\n/**\n * @ngdoc method\n * @name $mdBottomSheet#hide\n *\n * @description\n * Hide the existing bottom sheet and resolve the promise returned from\n * `$mdBottomSheet.show()`.\n *\n * @param {*=} response An argument for the resolved promise.\n *\n */\n\n/**\n * @ngdoc method\n * @name $mdBottomSheet#cancel\n *\n * @description\n * Hide the existing bottom sheet and reject the promise returned from\n * `$mdBottomSheet.show()`.\n *\n * @param {*=} response An argument for the rejected promise.\n *\n */\n\nfunction MdBottomSheetProvider($$interimElementProvider) {\n  // how fast we need to flick down to close the sheet, pixels/ms\n  var CLOSING_VELOCITY = 0.5;\n  var PADDING = 80; // same as css\n\n  bottomSheetDefaults.$inject = [\"$animate\", \"$mdConstant\", \"$timeout\", \"$$rAF\", \"$compile\", \"$mdTheming\", \"$mdBottomSheet\", \"$rootElement\", \"$rootScope\", \"$mdGesture\"];\n  return $$interimElementProvider('$mdBottomSheet')\n    .setDefaults({\n      methods: ['disableParentScroll', 'escapeToClose', 'targetEvent'],\n      options: bottomSheetDefaults\n    });\n\n  /* @ngInject */\n  function bottomSheetDefaults($animate, $mdConstant, $timeout, $$rAF, $compile, $mdTheming, $mdBottomSheet, $rootElement, $rootScope, $mdGesture) {\n    var backdrop;\n\n    return {\n      themable: true,\n      targetEvent: null,\n      onShow: onShow,\n      onRemove: onRemove,\n      escapeToClose: true,\n      disableParentScroll: true\n    };\n\n    function onShow(scope, element, options) {\n      // Add a backdrop that will close on click\n      backdrop = $compile('<md-backdrop class=\"md-opaque md-bottom-sheet-backdrop\">')(scope);\n      backdrop.on('click', function() {\n        $timeout($mdBottomSheet.cancel);\n      });\n\n      $mdTheming.inherit(backdrop, options.parent);\n\n      $animate.enter(backdrop, options.parent, null);\n\n      var bottomSheet = new BottomSheet(element, options.parent);\n      options.bottomSheet = bottomSheet;\n\n      // Give up focus on calling item\n      options.targetEvent && angular.element(options.targetEvent.target).blur();\n      $mdTheming.inherit(bottomSheet.element, options.parent);\n\n      if (options.disableParentScroll) {\n        options.lastOverflow = options.parent.css('overflow');\n        options.parent.css('overflow', 'hidden');\n      }\n\n      return $animate.enter(bottomSheet.element, options.parent)\n        .then(function() {\n          var focusable = angular.element(\n            element[0].querySelector('button') ||\n            element[0].querySelector('a') ||\n            element[0].querySelector('[ng-click]')\n          );\n          focusable.focus();\n\n          if (options.escapeToClose) {\n            options.rootElementKeyupCallback = function(e) {\n              if (e.keyCode === $mdConstant.KEY_CODE.ESCAPE) {\n                $timeout($mdBottomSheet.cancel);\n              }\n            };\n            $rootElement.on('keyup', options.rootElementKeyupCallback);\n          }\n        });\n\n    }\n\n    function onRemove(scope, element, options) {\n      var bottomSheet = options.bottomSheet;\n\n\n      $animate.leave(backdrop);\n      return $animate.leave(bottomSheet.element).then(function() {\n        if (options.disableParentScroll) {\n          options.parent.css('overflow', options.lastOverflow);\n          delete options.lastOverflow;\n        }\n\n        bottomSheet.cleanup();\n\n        // Restore focus\n        options.targetEvent && angular.element(options.targetEvent.target).focus();\n      });\n    }\n\n    /**\n     * BottomSheet class to apply bottom-sheet behavior to an element\n     */\n    function BottomSheet(element, parent) {\n      var deregister = $mdGesture.register(parent, 'drag', { horizontal: false });\n      parent.on('$md.dragstart', onDragStart)\n        .on('$md.drag', onDrag)\n        .on('$md.dragend', onDragEnd);\n\n      return {\n        element: element,\n        cleanup: function cleanup() {\n          deregister();\n          parent.off('$md.dragstart', onDragStart)\n            .off('$md.drag', onDrag)\n            .off('$md.dragend', onDragEnd);\n        }\n      };\n\n      function onDragStart(ev) {\n        // Disable transitions on transform so that it feels fast\n        element.css($mdConstant.CSS.TRANSITION_DURATION, '0ms');\n      }\n\n      function onDrag(ev) {\n        var transform = ev.pointer.distanceY;\n        if (transform < 5) {\n          // Slow down drag when trying to drag up, and stop after PADDING\n          transform = Math.max(-PADDING, transform / 2);\n        }\n        element.css($mdConstant.CSS.TRANSFORM, 'translate3d(0,' + (PADDING + transform) + 'px,0)');\n      }\n\n      function onDragEnd(ev) {\n        if (ev.pointer.distanceY > 0 &&\n            (ev.pointer.distanceY > 20 || Math.abs(ev.pointer.velocityY) > CLOSING_VELOCITY)) {\n          var distanceRemaining = element.prop('offsetHeight') - ev.pointer.distanceY;\n          var transitionDuration = Math.min(distanceRemaining / ev.pointer.velocityY * 0.75, 500);\n          element.css($mdConstant.CSS.TRANSITION_DURATION, transitionDuration + 'ms');\n          $timeout($mdBottomSheet.cancel);\n        } else {\n          element.css($mdConstant.CSS.TRANSITION_DURATION, '');\n          element.css($mdConstant.CSS.TRANSFORM, '');\n        }\n      }\n    }\n\n  }\n\n}\nMdBottomSheetProvider.$inject = [\"$$interimElementProvider\"];\n\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\n/**\n * @ngdoc module\n * @name material.components.button\n * @description\n *\n * Button\n */\nangular.module('material.components.button', [\n  'material.core'\n])\n  .directive('mdButton', MdButtonDirective);\n\n/**\n * @ngdoc directive\n * @name mdButton\n * @module material.components.button\n *\n * @restrict E\n *\n * @description\n * `<md-button>` is a button directive with optional ink ripples (default enabled).\n *\n * If you supply a `href` or `ng-href` attribute, it will become an `<a>` element. Otherwise, it will\n * become a `<button>` element.\n *\n * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)\n * the FAB button is in the accent color by default. The primary color palette may be used with\n * the `md-primary` class.\n *\n * @param {boolean=} md-no-ink If present, disable ripple ink effects.\n * @param {expression=} ng-disabled En/Disable based on the expression\n * @param {string=} md-ripple-size Overrides the default ripple size logic. Options: `full`, `partial`, `auto`\n * @param {string=} aria-label Adds alternative text to button for accessibility, useful for icon buttons.\n * If no default text is found, a warning will be logged.\n *\n * @usage\n * <hljs lang=\"html\">\n *  <md-button>\n *    Button\n *  </md-button>\n *  <md-button href=\"http://google.com\" class=\"md-button-colored\">\n *    I'm a link\n *  </md-button>\n *  <md-button ng-disabled=\"true\" class=\"md-colored\">\n *    I'm a disabled button\n *  </md-button>\n * </hljs>\n */\nfunction MdButtonDirective($mdInkRipple, $mdTheming, $mdAria) {\n\n  return {\n    restrict: 'EA',\n    replace: true,\n    transclude: true,\n    template: getTemplate,\n    link: postLink\n  };\n\n  function isAnchor(attr) {\n    return angular.isDefined(attr.href) || angular.isDefined(attr.ngHref);\n  }\n  \n  function getTemplate(element, attr) {\n    return isAnchor(attr) ?\n           '<a class=\"md-button\" ng-transclude></a>' :\n           '<button class=\"md-button\" ng-transclude></button>';\n  }\n\n  function postLink(scope, element, attr) {\n    var node = element[0];\n    $mdTheming(element);\n    $mdInkRipple.attachButtonBehavior(scope, element);\n\n    var elementHasText = node.textContent.trim();\n    if (!elementHasText) {\n      $mdAria.expect(element, 'aria-label');\n    }\n\n    // For anchor elements, we have to set tabindex manually when the \n    // element is disabled\n    if (isAnchor(attr) && angular.isDefined(attr.ngDisabled) ) {\n      scope.$watch(attr.ngDisabled, function(isDisabled) {\n        element.attr('tabindex', isDisabled ? -1 : 0);\n      });\n    }\n  }\n\n}\nMdButtonDirective.$inject = [\"$mdInkRipple\", \"$mdTheming\", \"$mdAria\"];\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\n/**\n * @ngdoc module\n * @name material.components.card\n *\n * @description\n * Card components.\n */\nangular.module('material.components.card', [\n  'material.core'\n])\n  .directive('mdCard', mdCardDirective);\n\n\n\n/**\n * @ngdoc directive\n * @name mdCard\n * @module material.components.card\n *\n * @restrict E\n *\n * @description\n * The `<md-card>` directive is a container element used within `<md-content>` containers.\n *\n * Cards have constant width and variable heights; where the maximum height is limited to what can\n * fit within a single view on a platform, but it can temporarily expand as needed\n *\n * @usage\n * <hljs lang=\"html\">\n * <md-card>\n *  <img src=\"img/washedout.png\" class=\"md-card-image\">\n *  <h2>Paracosm</h2>\n *  <p>\n *    The titles of Washed Out's breakthrough song and the first single from Paracosm share the * two most important words in Ernest Greene's musical language: feel it. It's a simple request, as well...\n *  </p>\n * </md-card>\n * </hljs>\n *\n */\nfunction mdCardDirective($mdTheming) {\n  return {\n    restrict: 'E',\n    link: function($scope, $element, $attr) {\n      $mdTheming($element);\n    }\n  };\n}\nmdCardDirective.$inject = [\"$mdTheming\"];\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\n/**\n * @ngdoc module\n * @name material.components.checkbox\n * @description Checkbox module!\n */\nangular.module('material.components.checkbox', [\n  'material.core'\n])\n  .directive('mdCheckbox', MdCheckboxDirective);\n\n/**\n * @ngdoc directive\n * @name mdCheckbox\n * @module material.components.checkbox\n * @restrict E\n *\n * @description\n * The checkbox directive is used like the normal [angular checkbox](https://docs.angularjs.org/api/ng/input/input%5Bcheckbox%5D).\n *\n * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)\n * the checkbox is in the accent color by default. The primary color palette may be used with\n * the `md-primary` class.\n *\n * @param {string} ng-model Assignable angular expression to data-bind to.\n * @param {string=} name Property name of the form under which the control is published.\n * @param {expression=} ng-true-value The value to which the expression should be set when selected.\n * @param {expression=} ng-false-value The value to which the expression should be set when not selected.\n * @param {string=} ng-change Angular expression to be executed when input changes due to user interaction with the input element.\n * @param {boolean=} md-no-ink Use of attribute indicates use of ripple ink effects\n * @param {string=} aria-label Adds label to checkbox for accessibility.\n * Defaults to checkbox's text. If no default text is found, a warning will be logged.\n *\n * @usage\n * <hljs lang=\"html\">\n * <md-checkbox ng-model=\"isChecked\" aria-label=\"Finished?\">\n *   Finished ?\n * </md-checkbox>\n *\n * <md-checkbox md-no-ink ng-model=\"hasInk\" aria-label=\"No Ink Effects\">\n *   No Ink Effects\n * </md-checkbox>\n *\n * <md-checkbox ng-disabled=\"true\" ng-model=\"isDisabled\" aria-label=\"Disabled\">\n *   Disabled\n * </md-checkbox>\n *\n * </hljs>\n *\n */\nfunction MdCheckboxDirective(inputDirective, $mdInkRipple, $mdAria, $mdConstant, $mdTheming, $mdUtil) {\n  inputDirective = inputDirective[0];\n  var CHECKED_CSS = 'md-checked';\n\n  return {\n    restrict: 'E',\n    transclude: true,\n    require: '?ngModel',\n    template: \n      '<div class=\"md-container\" md-ink-ripple md-ink-ripple-checkbox>' +\n        '<div class=\"md-icon\"></div>' +\n      '</div>' +\n      '<div ng-transclude class=\"md-label\"></div>',\n    compile: compile\n  };\n\n  // **********************************************************\n  // Private Methods\n  // **********************************************************\n\n  function compile (tElement, tAttrs) {\n\n    tAttrs.type = 'checkbox';\n    tAttrs.tabIndex = 0;\n    tElement.attr('role', tAttrs.type);\n\n    return function postLink(scope, element, attr, ngModelCtrl) {\n      ngModelCtrl = ngModelCtrl || $mdUtil.fakeNgModel();\n      var checked = false;\n      $mdTheming(element);\n\n      if (attr.ngChecked) {\n        scope.$watch(\n            scope.$eval.bind(scope, attr.ngChecked),\n            ngModelCtrl.$setViewValue.bind(ngModelCtrl)\n        );\n      }\n\n      $mdAria.expectWithText(element, 'aria-label');\n\n      // Reuse the original input[type=checkbox] directive from Angular core.\n      // This is a bit hacky as we need our own event listener and own render\n      // function.\n      inputDirective.link.pre(scope, {\n        on: angular.noop,\n        0: {}\n      }, attr, [ngModelCtrl]);\n\n      element.on('click', listener)\n        .on('keypress', keypressHandler);\n      ngModelCtrl.$render = render;\n\n      function keypressHandler(ev) {\n        if(ev.which === $mdConstant.KEY_CODE.SPACE) {\n          ev.preventDefault();\n          listener(ev);\n        }\n      }\n      function listener(ev) {\n        if (element[0].hasAttribute('disabled')) return;\n\n        scope.$apply(function() {\n          checked = !checked;\n          ngModelCtrl.$setViewValue(checked, ev && ev.type);\n          ngModelCtrl.$render();\n        });\n      }\n\n      function render() {\n        checked = ngModelCtrl.$viewValue;\n        if(checked) {\n          element.addClass(CHECKED_CSS);\n        } else {\n          element.removeClass(CHECKED_CSS);\n        }\n      }\n    };\n  }\n}\nMdCheckboxDirective.$inject = [\"inputDirective\", \"$mdInkRipple\", \"$mdAria\", \"$mdConstant\", \"$mdTheming\", \"$mdUtil\"];\n\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\n/**\n * @ngdoc module\n * @name material.components.content\n *\n * @description\n * Scrollable content\n */\nangular.module('material.components.content', [\n  'material.core'\n])\n  .directive('mdContent', mdContentDirective);\n\n/**\n * @ngdoc directive\n * @name mdContent\n * @module material.components.content\n *\n * @restrict E\n *\n * @description\n * The `<md-content>` directive is a container element useful for scrollable content\n *\n * ### Restrictions\n *\n * - Add the `md-padding` class to make the content padded.\n *\n * @usage\n * <hljs lang=\"html\">\n *  <md-content class=\"md-padding\">\n *      Lorem ipsum dolor sit amet, ne quod novum mei.\n *  </md-content>\n * </hljs>\n *\n */\n\nfunction mdContentDirective($mdTheming) {\n  return {\n    restrict: 'E',\n    controller: ['$scope', '$element', ContentController],\n    link: function(scope, element, attr) {\n      var node = element[0];\n\n      $mdTheming(element);\n      scope.$broadcast('$mdContentLoaded', element);\n\n      iosScrollFix(element[0]);\n    }\n  };\n\n  function ContentController($scope, $element) {\n    this.$scope = $scope;\n    this.$element = $element;\n  }\n}\nmdContentDirective.$inject = [\"$mdTheming\"];\n\nfunction iosScrollFix(node) {\n  // IOS FIX:\n  // If we scroll where there is no more room for the webview to scroll,\n  // by default the webview itself will scroll up and down, this looks really\n  // bad.  So if we are scrolling to the very top or bottom, add/subtract one\n  angular.element(node).on('$md.pressdown', function(ev) {\n    // Only touch events\n    if (ev.pointer.type !== 't') return;\n    // Don't let a child content's touchstart ruin it for us.\n    if (ev.$materialScrollFixed) return;\n    ev.$materialScrollFixed = true;\n\n    if (node.scrollTop === 0) {\n      node.scrollTop = 1;\n    } else if (node.scrollHeight === node.scrollTop + node.offsetHeight) {\n      node.scrollTop -= 1;\n    }\n  });\n}\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\n/**\n * @ngdoc module\n * @name material.components.dialog\n */\nangular.module('material.components.dialog', [\n  'material.core',\n  'material.components.backdrop'\n])\n  .directive('mdDialog', MdDialogDirective)\n  .provider('$mdDialog', MdDialogProvider);\n\nfunction MdDialogDirective($$rAF, $mdTheming) {\n  return {\n    restrict: 'E',\n    link: function(scope, element, attr) {\n      $mdTheming(element);\n      $$rAF(function() {\n        var content = element[0].querySelector('md-content');\n        if (content && content.scrollHeight > content.clientHeight) {\n          element.addClass('md-content-overflow');\n        }\n      });\n    }\n  };\n}\nMdDialogDirective.$inject = [\"$$rAF\", \"$mdTheming\"];\n\n/**\n * @ngdoc service\n * @name $mdDialog\n * @module material.components.dialog\n *\n * @description\n * `$mdDialog` opens a dialog over the app to inform users about critical information or require\n *  them to make decisions. There are two approaches for setup: a simple promise API\n *  and regular object syntax.\n *\n * ## Restrictions\n *\n * - The dialog is always given an isolate scope.\n * - The dialog's template must have an outer `<md-dialog>` element.\n *   Inside, use an `<md-content>` element for the dialog's content, and use\n *   an element with class `md-actions` for the dialog's actions.\n *\n * @usage\n * ### HTML\n *\n * <hljs lang=\"html\">\n * <div  ng-app=\"demoApp\" ng-controller=\"EmployeeController\">\n *   <md-button ng-click=\"showAlert()\" class=\"md-raised md-warn\">\n *     Employee Alert!\n *   </md-button>\n *   <md-button ng-click=\"showDialog($event)\" class=\"md-raised\">\n *     Custom Dialog\n *   </md-button>\n *   <md-button ng-click=\"closeAlert()\" ng-disabled=\"!hasAlert()\" class=\"md-raised\">\n *     Close Alert\n *   </md-button>\n *   <md-button ng-click=\"showGreeting($event)\" class=\"md-raised md-primary\" >\n *     Greet Employee\n *   </md-button>\n * </div>\n * </hljs>\n *\n * ### JavaScript: object syntax\n * <hljs lang=\"js\">\n * (function(angular, undefined){\n *   \"use strict\";\n *\n *   angular\n *    .module('demoApp', ['ngMaterial'])\n *    .controller('AppCtrl', AppController);\n *\n *   function AppController($scope, $mdDialog) {\n *     var alert;\n *     $scope.showAlert = showAlert;\n *     $scope.showDialog = showDialog;\n *     $scope.items = [1, 2, 3];\n *\n *     // Internal method\n *     function showAlert() {\n *       alert = $mdDialog.alert({\n *         title: 'Attention',\n *         content: 'This is an example of how easy dialogs can be!',\n *         ok: 'Close'\n *       });\n *\n *       $mdDialog\n *         .show( alert )\n *         .finally(function() {\n *           alert = undefined;\n *         });\n *     }\n *\n *     function showDialog($event) {\n *        var parentEl = angular.element(document.body);\n *        $mdDialog.show({\n *          parent: parentEl,\n *          targetEvent: $event,\n *          template:\n *            '<md-dialog aria-label=\"List dialog\">' +\n *            '  <md-content>'+\n *            '    <md-list>'+\n *            '      <md-item ng-repeat=\"item in items\">'+\n *            '       <p>Number {{item}}</p>' +\n *            '      </md-item>'+\n *            '    </md-list>'+\n *            '  </md-content>' +\n *            '  <div class=\"md-actions\">' +\n *            '    <md-button ng-click=\"closeDialog()\">' +\n *            '      Close Dialog' +\n *            '    </md-button>' +\n *            '  </div>' +\n *            '</md-dialog>',\n *          locals: {\n *            items: $scope.items\n *          },\n *          controller: DialogController\n *       });\n *       function DialogController(scope, $mdDialog, items) {\n *         scope.items = items;\n *         scope.closeDialog = function() {\n *           $mdDialog.hide();\n *         }\n *       }\n *     }\n *\n * })(angular);\n * </hljs>\n *\n * ### JavaScript: promise API syntax, custom dialog template\n * <hljs lang=\"js\">\n * (function(angular, undefined){\n *   \"use strict\";\n *\n *   angular\n *     .module('demoApp', ['ngMaterial'])\n *     .controller('EmployeeController', EmployeeEditor)\n *     .controller('GreetingController', GreetingController);\n *\n *   // Fictitious Employee Editor to show how to use simple and complex dialogs.\n *\n *   function EmployeeEditor($scope, $mdDialog) {\n *     var alert;\n *\n *     $scope.showAlert = showAlert;\n *     $scope.closeAlert = closeAlert;\n *     $scope.showGreeting = showCustomGreeting;\n *\n *     $scope.hasAlert = function() { return !!alert };\n *     $scope.userName = $scope.userName || 'Bobby';\n *\n *     // Dialog #1 - Show simple alert dialog and cache\n *     // reference to dialog instance\n *\n *     function showAlert() {\n *       alert = $mdDialog.alert()\n *         .title('Attention, ' + $scope.userName)\n *         .content('This is an example of how easy dialogs can be!')\n *         .ok('Close');\n *\n *       $mdDialog\n *           .show( alert )\n *           .finally(function() {\n *             alert = undefined;\n *           });\n *     }\n *\n *     // Close the specified dialog instance and resolve with 'finished' flag\n *     // Normally this is not needed, just use '$mdDialog.hide()' to close\n *     // the most recent dialog popup.\n *\n *     function closeAlert() {\n *       $mdDialog.hide( alert, \"finished\" );\n *       alert = undefined;\n *     }\n *\n *     // Dialog #2 - Demonstrate more complex dialogs construction and popup.\n *\n *     function showCustomGreeting($event) {\n *         $mdDialog.show({\n *           targetEvent: $event,\n *           template:\n *             '<md-dialog>' +\n *\n *             '  <md-content>Hello {{ employee }}!</md-content>' +\n *\n *             '  <div class=\"md-actions\">' +\n *             '    <md-button ng-click=\"closeDialog()\">' +\n *             '      Close Greeting' +\n *\n *             '    </md-button>' +\n *             '  </div>' +\n *             '</md-dialog>',\n *           controller: 'GreetingController',\n *           onComplete: afterShowAnimation,\n *           locals: { employee: $scope.userName }\n *         });\n *\n *         // When the 'enter' animation finishes...\n *\n *         function afterShowAnimation(scope, element, options) {\n *            // post-show code here: DOM element focus, etc.\n *         }\n *     }\n *   }\n *\n *   // Greeting controller used with the more complex 'showCustomGreeting()' custom dialog\n *\n *   function GreetingController($scope, $mdDialog, employee) {\n *     // Assigned from construction <code>locals</code> options...\n *     $scope.employee = employee;\n *\n *     $scope.closeDialog = function() {\n *       // Easily hides most recent dialog shown...\n *       // no specific instance reference is needed.\n *       $mdDialog.hide();\n *     };\n *   }\n *\n * })(angular);\n * </hljs>\n */\n\n /**\n * @ngdoc method\n * @name $mdDialog#alert\n *\n * @description\n * Builds a preconfigured dialog with the specified message.\n *\n * @returns {obj} an `$mdDialogPreset` with the chainable configuration methods:\n *\n * - $mdDialogPreset#title(string) - sets title to string\n * - $mdDialogPreset#content(string) - sets content / message to string\n * - $mdDialogPreset#ok(string) - sets okay button text to string\n * - $mdDialogPreset#theme(string) - sets the theme of the dialog\n *\n */\n\n /**\n * @ngdoc method\n * @name $mdDialog#confirm\n *\n * @description\n * Builds a preconfigured dialog with the specified message. You can call show and the promise returned\n * will be resolved only if the user clicks the confirm action on the dialog.\n *\n * @returns {obj} an `$mdDialogPreset` with the chainable configuration methods:\n *\n * Additionally, it supports the following methods:\n *\n * - $mdDialogPreset#title(string) - sets title to string\n * - $mdDialogPreset#content(string) - sets content / message to string\n * - $mdDialogPreset#ok(string) - sets okay button text to string\n * - $mdDialogPreset#cancel(string) - sets cancel button text to string\n * - $mdDialogPreset#theme(string) - sets the theme of the dialog\n *\n */\n\n/**\n * @ngdoc method\n * @name $mdDialog#show\n *\n * @description\n * Show a dialog with the specified options.\n *\n * @param {object} optionsOrPreset Either provide an `$mdDialogPreset` returned from `alert()`, and\n * `confirm()`, or an options object with the following properties:\n *   - `templateUrl` - `{string=}`: The url of a template that will be used as the content\n *   of the dialog.\n *   - `template` - `{string=}`: Same as templateUrl, except this is an actual template string.\n *   - `targetEvent` - `{DOMClickEvent=}`: A click's event object. When passed in as an option,\n *     the location of the click will be used as the starting point for the opening animation\n *     of the the dialog.\n *   - `scope` - `{object=}`: the scope to link the template / controller to. If none is specified, it will create a new isolate scope.\n *     This scope will be destroyed when the dialog is removed unless `preserveScope` is set to true.\n *   - `preserveScope` - `{boolean=}`: whether to preserve the scope when the element is removed. Default is false\n *   - `disableParentScroll` - `{boolean=}`: Whether to disable scrolling while the dialog is open.\n *     Default true.\n *   - `hasBackdrop` - `{boolean=}`: Whether there should be an opaque backdrop behind the dialog.\n *     Default true.\n *   - `clickOutsideToClose` - `{boolean=}`: Whether the user can click outside the dialog to\n *     close it. Default true.\n *   - `escapeToClose` - `{boolean=}`: Whether the user can press escape to close the dialog.\n *     Default true.\n *   - `controller` - `{string=}`: The controller to associate with the dialog. The controller\n *     will be injected with the local `$mdDialog`, which passes along a scope for the dialog.\n *   - `locals` - `{object=}`: An object containing key/value pairs. The keys will be used as names\n *     of values to inject into the controller. For example, `locals: {three: 3}` would inject\n *     `three` into the controller, with the value 3. If `bindToController` is true, they will be\n *     copied to the controller instead. \n *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in. These values will not be available until after initialization.\n *   - `resolve` - `{object=}`: Similar to locals, except it takes promises as values, and the\n *     dialog will not open until all of the promises resolve.\n *   - `controllerAs` - `{string=}`: An alias to assign the controller to on the scope.\n *   - `parent` - `{element=}`: The element to append the dialog to. Defaults to appending\n *     to the root element of the application.\n *   - `onComplete` `{function=}`: Callback function used to announce when the show() action is\n *     finished.\n *\n * @returns {promise} A promise that can be resolved with `$mdDialog.hide()` or\n * rejected with `$mdDialog.cancel()`.\n */\n\n/**\n * @ngdoc method\n * @name $mdDialog#hide\n *\n * @description\n * Hide an existing dialog and resolve the promise returned from `$mdDialog.show()`.\n *\n * @param {*=} response An argument for the resolved promise.\n */\n\n/**\n * @ngdoc method\n * @name $mdDialog#cancel\n *\n * @description\n * Hide an existing dialog and reject the promise returned from `$mdDialog.show()`.\n *\n * @param {*=} response An argument for the rejected promise.\n */\n\nfunction MdDialogProvider($$interimElementProvider) {\n\n  var alertDialogMethods = ['title', 'content', 'ariaLabel', 'ok'];\n\n  advancedDialogOptions.$inject = [\"$mdDialog\", \"$mdTheming\"];\n  dialogDefaultOptions.$inject = [\"$timeout\", \"$rootElement\", \"$compile\", \"$animate\", \"$mdAria\", \"$document\", \"$mdUtil\", \"$mdConstant\", \"$mdTheming\", \"$$rAF\", \"$q\", \"$mdDialog\"];\n  return $$interimElementProvider('$mdDialog')\n    .setDefaults({\n      methods: ['disableParentScroll', 'hasBackdrop', 'clickOutsideToClose', 'escapeToClose', 'targetEvent'],\n      options: dialogDefaultOptions\n    })\n    .addPreset('alert', {\n      methods: ['title', 'content', 'ariaLabel', 'ok', 'theme'],\n      options: advancedDialogOptions\n    })\n    .addPreset('confirm', {\n      methods: ['title', 'content', 'ariaLabel', 'ok', 'cancel', 'theme'],\n      options: advancedDialogOptions\n    });\n\n  /* @ngInject */\n  function advancedDialogOptions($mdDialog, $mdTheming) {\n    return {\n      template: [\n        '<md-dialog md-theme=\"{{ dialog.theme }}\" aria-label=\"{{ dialog.ariaLabel }}\">',\n          '<md-content>',\n            '<h2>{{ dialog.title }}</h2>',\n            '<p>{{ dialog.content }}</p>',\n          '</md-content>',\n          '<div class=\"md-actions\">',\n            '<md-button ng-if=\"dialog.$type == \\'confirm\\'\" ng-click=\"dialog.abort()\">',\n              '{{ dialog.cancel }}',\n            '</md-button>',\n            '<md-button ng-click=\"dialog.hide()\" class=\"md-primary\">',\n              '{{ dialog.ok }}',\n            '</md-button>',\n          '</div>',\n        '</md-dialog>'\n      ].join(''),\n      controller: function mdDialogCtrl() {\n        this.hide = function() {\n          $mdDialog.hide(true);\n        };\n        this.abort = function() {\n          $mdDialog.cancel();\n        };\n      },\n      controllerAs: 'dialog',\n      bindToController: true,\n      theme: $mdTheming.defaultTheme()\n    };\n  }\n\n  /* @ngInject */\n  function dialogDefaultOptions($timeout, $rootElement, $compile, $animate, $mdAria, $document,\n                                $mdUtil, $mdConstant, $mdTheming, $$rAF, $q, $mdDialog) {\n    return {\n      hasBackdrop: true,\n      isolateScope: true,\n      onShow: onShow,\n      onRemove: onRemove,\n      clickOutsideToClose: true,\n      escapeToClose: true,\n      targetEvent: null,\n      disableParentScroll: true,\n      transformTemplate: function(template) {\n        return '<div class=\"md-dialog-container\">' + template + '</div>';\n      }\n    };\n\n\n    // On show method for dialogs\n    function onShow(scope, element, options) {\n      // Incase the user provides a raw dom element, always wrap it in jqLite\n      options.parent = angular.element(options.parent);\n\n      options.popInTarget = angular.element((options.targetEvent || {}).target);\n      var closeButton = findCloseButton();\n\n      configureAria(element.find('md-dialog'));\n\n      if (options.hasBackdrop) {\n        // Fix for IE 10\n        var computeFrom = (options.parent[0] == $document[0].body && $document[0].documentElement \n                           && $document[0].scrollTop) ? angular.element($document[0].documentElement) : options.parent;\n        var parentOffset = computeFrom.prop('scrollTop');\n        options.backdrop = angular.element('<md-backdrop class=\"md-dialog-backdrop md-opaque\">');\n        $mdTheming.inherit(options.backdrop, options.parent);\n        $animate.enter(options.backdrop, options.parent);\n        element.css('top', parentOffset +'px');\n      }\n\n      if (options.disableParentScroll) {\n        options.lastOverflow = options.parent.css('overflow');\n        options.parent.css('overflow', 'hidden');\n      }\n\n      return dialogPopIn(\n        element,\n        options.parent,\n        options.popInTarget && options.popInTarget.length && options.popInTarget\n      )\n      .then(function() {\n        if (options.escapeToClose) {\n          options.rootElementKeyupCallback = function(e) {\n            if (e.keyCode === $mdConstant.KEY_CODE.ESCAPE) {\n              $timeout($mdDialog.cancel);\n            }\n          };\n          $rootElement.on('keyup', options.rootElementKeyupCallback);\n        }\n\n        if (options.clickOutsideToClose) {\n          options.dialogClickOutsideCallback = function(ev) {\n            // Only close if we click the flex container outside the backdrop\n            if (ev.target === element[0]) {\n              $timeout($mdDialog.cancel);\n            }\n          };\n          element.on('click', options.dialogClickOutsideCallback);\n        }\n        closeButton.focus();\n      });\n\n\n      function findCloseButton() {\n        //If no element with class dialog-close, try to find the last\n        //button child in md-actions and assume it is a close button\n        var closeButton = element[0].querySelector('.dialog-close');\n        if (!closeButton) {\n          var actionButtons = element[0].querySelectorAll('.md-actions button');\n          closeButton = actionButtons[ actionButtons.length - 1 ];\n        }\n        return angular.element(closeButton);\n      }\n\n    }\n\n    // On remove function for all dialogs\n    function onRemove(scope, element, options) {\n\n      if (options.backdrop) {\n        $animate.leave(options.backdrop);\n      }\n      if (options.disableParentScroll) {\n        options.parent.css('overflow', options.lastOverflow);\n        delete options.lastOverflow;\n      }\n      if (options.escapeToClose) {\n        $rootElement.off('keyup', options.rootElementKeyupCallback);\n      }\n      if (options.clickOutsideToClose) {\n        element.off('click', options.dialogClickOutsideCallback);\n      }\n      return dialogPopOut(\n        element,\n        options.parent,\n        options.popInTarget && options.popInTarget.length && options.popInTarget\n      ).then(function() {\n        options.scope.$destroy();\n        element.remove();\n        options.popInTarget && options.popInTarget.focus();\n      });\n\n    }\n\n    /**\n     * Inject ARIA-specific attributes appropriate for Dialogs\n     */\n    function configureAria(element) {\n      element.attr({\n        'role': 'dialog'\n      });\n\n      var dialogContent = element.find('md-content');\n      if (dialogContent.length === 0){\n        dialogContent = element;\n      }\n      $mdAria.expectAsync(element, 'aria-label', function() {\n        var words = dialogContent.text().split(/\\s+/);\n        if (words.length > 3) words = words.slice(0,3).concat('...');\n        return words.join(' ');\n      });\n    }\n\n    function dialogPopIn(container, parentElement, clickElement) {\n      var dialogEl = container.find('md-dialog');\n\n      parentElement.append(container);\n      transformToClickElement(dialogEl, clickElement);\n\n      $$rAF(function() {\n        dialogEl.addClass('transition-in')\n          .css($mdConstant.CSS.TRANSFORM, '');\n      });\n\n      return $mdUtil.transitionEndPromise(dialogEl);\n    }\n\n    function dialogPopOut(container, parentElement, clickElement) {\n      var dialogEl = container.find('md-dialog');\n\n      dialogEl.addClass('transition-out').removeClass('transition-in');\n      transformToClickElement(dialogEl, clickElement);\n\n      return $mdUtil.transitionEndPromise(dialogEl);\n    }\n\n    function transformToClickElement(dialogEl, clickElement) {\n      if (clickElement) {\n        var clickRect = clickElement[0].getBoundingClientRect();\n        var dialogRect = dialogEl[0].getBoundingClientRect();\n\n        var scaleX = Math.min(0.5, clickRect.width / dialogRect.width);\n        var scaleY = Math.min(0.5, clickRect.height / dialogRect.height);\n\n        dialogEl.css($mdConstant.CSS.TRANSFORM, 'translate3d(' +\n          (-dialogRect.left + clickRect.left + clickRect.width/2 - dialogRect.width/2) + 'px,' +\n          (-dialogRect.top + clickRect.top + clickRect.height/2 - dialogRect.height/2) + 'px,' +\n          '0) scale(' + scaleX + ',' + scaleY + ')'\n        );\n      }\n    }\n\n    function dialogTransitionEnd(dialogEl) {\n      var deferred = $q.defer();\n      dialogEl.on($mdConstant.CSS.TRANSITIONEND, finished);\n      function finished(ev) {\n        //Make sure this transitionend didn't bubble up from a child\n        if (ev.target === dialogEl[0]) {\n          dialogEl.off($mdConstant.CSS.TRANSITIONEND, finished);\n          deferred.resolve();\n        }\n      }\n      return deferred.promise;\n    }\n\n  }\n}\nMdDialogProvider.$inject = [\"$$interimElementProvider\"];\n\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\n/**\n * @ngdoc module\n * @name material.components.divider\n * @description Divider module!\n */\nangular.module('material.components.divider', [\n  'material.core'\n])\n  .directive('mdDivider', MdDividerDirective);\n\nfunction MdDividerController(){}\n\n/**\n * @ngdoc directive\n * @name mdDivider\n * @module material.components.divider\n * @restrict E\n *\n * @description\n * Dividers group and separate content within lists and page layouts using strong visual and spatial distinctions. This divider is a thin rule, lightweight enough to not distract the user from content.\n *\n * @param {boolean=} md-inset Add this attribute to activate the inset divider style.\n * @usage\n * <hljs lang=\"html\">\n * <md-divider></md-divider>\n *\n * <md-divider md-inset></md-divider>\n * </hljs>\n *\n */\nfunction MdDividerDirective($mdTheming) {\n  return {\n    restrict: 'E',\n    link: $mdTheming,\n    controller: [MdDividerController]\n  };\n}\nMdDividerDirective.$inject = [\"$mdTheming\"];\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\n/**\n * @ngdoc module\n * @name material.components.gridList\n */\nangular.module('material.components.gridList', ['material.core'])\n       .directive('mdGridList', GridListDirective)\n       .directive('mdGridTile', GridTileDirective)\n       .directive('mdGridTileFooter', GridTileCaptionDirective)\n       .directive('mdGridTileHeader', GridTileCaptionDirective)\n       .factory('$mdGridLayout', GridLayoutFactory);\n\n/**\n * @ngdoc directive\n * @name mdGridList\n * @module material.components.gridList\n * @restrict E\n * @description\n * Grid lists are an alternative to standard list views. Grid lists are distinct\n * from grids used for layouts and other visual presentations.\n *\n * A grid list is best suited to presenting a homogenous data type, typically\n * images, and is optimized for visual comprehension and differentiating between\n * like data types.\n *\n * A grid list is a continuous element consisting of tessellated, regular\n * subdivisions called cells that contain tiles (`md-grid-tile`).\n *\n * <img src=\"//material-design.storage.googleapis.com/publish/v_2/material_ext_publish/0Bx4BSt6jniD7OVlEaXZ5YmU1Xzg/components_grids_usage2.png\"\n *    style=\"width: 300px; height: auto; margin-right: 16px;\" alt=\"Concept of grid explained visually\">\n * <img src=\"//material-design.storage.googleapis.com/publish/v_2/material_ext_publish/0Bx4BSt6jniD7VGhsOE5idWlJWXM/components_grids_usage3.png\"\n *    style=\"width: 300px; height: auto;\" alt=\"Grid concepts legend\">\n *\n * Cells are arrayed vertically and horizontally within the grid.\n *\n * Tiles hold content and can span one or more cells vertically or horizontally.\n *\n * ### Responsive Attributes\n *\n * The `md-grid-list` directive supports \"responsive\" attributes, which allow\n * different `md-cols`, `md-gutter` and `md-row-height` values depending on the\n * currently matching media query (as defined in `$mdConstant.MEDIA`).\n *\n * In order to set a responsive attribute, first define the fallback value with\n * the standard attribute name, then add additional attributes with the\n * following convention: `{base-attribute-name}-{media-query-name}=\"{value}\"`\n * (ie. `md-cols-lg=\"8\"`)\n *\n * @param {number} md-cols Number of columns in the grid.\n * @param {string} md-row-height One of\n * <ul>\n *   <li>CSS length - Fixed height rows (eg. `8px` or `1rem`)</li>\n *   <li>`{width}:{height}` - Ratio of width to height (eg.\n *   `md-row-height=\"16:9\"`)</li>\n *   <li>`\"fit\"` - Height will be determined by subdividing the available\n *   height by the number of rows</li>\n * </ul>\n * @param {string=} md-gutter The amount of space between tiles in CSS units\n *     (default 1px)\n * @param {expression=} md-on-layout Expression to evaluate after layout. Event\n *     object is available as `$event`, and contains performance information.\n *\n * @usage\n * Basic:\n * <hljs lang=\"html\">\n * <md-grid-list md-cols=\"5\" md-gutter=\"1em\" md-row-height=\"4:3\">\n *   <md-grid-tile></md-grid-tile>\n * </md-grid-list>\n * </hljs>\n *\n * Fixed-height rows:\n * <hljs lang=\"html\">\n * <md-grid-list md-cols=\"4\" md-row-height=\"200px\" ...>\n *   <md-grid-tile></md-grid-tile>\n * </md-grid-list>\n * </hljs>\n *\n * Fit rows:\n * <hljs lang=\"html\">\n * <md-grid-list md-cols=\"4\" md-row-height=\"fit\" style=\"height: 400px;\" ...>\n *   <md-grid-tile></md-grid-tile>\n * </md-grid-list>\n * </hljs>\n *\n * Using responsive attributes:\n * <hljs lang=\"html\">\n * <md-grid-list\n *     md-cols-sm=\"2\"\n *     md-cols-md=\"4\"\n *     md-cols-lg=\"8\"\n *     md-cols-gt-lg=\"12\"\n *     ...>\n *   <md-grid-tile></md-grid-tile>\n * </md-grid-list>\n * </hljs>\n */\nfunction GridListDirective($interpolate, $mdConstant, $mdGridLayout, $mdMedia, $mdUtil) {\n  return {\n    restrict: 'E',\n    controller: GridListController,\n    scope: {\n      mdOnLayout: '&'\n    },\n    link: postLink\n  };\n\n  function postLink(scope, element, attrs, ctrl) {\n    // Apply semantics\n    element.attr('role', 'list');\n\n    // Provide the controller with a way to trigger layouts.\n    ctrl.layoutDelegate = layoutDelegate\n\n    var invalidateLayout = angular.bind(ctrl, ctrl.invalidateLayout),\n        unwatchAttrs = watchMedia();\n    scope.$on('$destroy', unwatchMedia);\n\n    /**\n     * Watches for changes in media, invalidating layout as necessary.\n     */\n    function watchMedia() {\n      for (var mediaName in $mdConstant.MEDIA) {\n        $mdMedia(mediaName); // initialize\n        $mdMedia.getQuery($mdConstant.MEDIA[mediaName])\n            .addListener(invalidateLayout);\n      }\n      return $mdMedia.watchResponsiveAttributes(\n          ['md-cols', 'md-row-height'], attrs, layoutIfMediaMatch);;\n    }\n\n    function unwatchMedia() {\n      unwatchAttrs();\n      for (var mediaName in $mdConstant.MEDIA) {\n        $mdMedia.getQuery($mdConstant.MEDIA[mediaName])\n            .removeListener(invalidateLayout);\n      }\n    }\n\n    /**\n     * Performs grid layout if the provided mediaName matches the currently\n     * active media type.\n     */\n    function layoutIfMediaMatch(mediaName) {\n      if (mediaName == null) {\n        // TODO(shyndman): It would be nice to only layout if we have\n        // instances of attributes using this media type\n        ctrl.invalidateLayout();\n      } else if ($mdMedia(mediaName)) {\n        ctrl.invalidateLayout();\n      }\n    }\n\n    /**\n     * Invokes the layout engine, and uses its results to lay out our\n     * tile elements.\n     */\n    function layoutDelegate() {\n      var tiles = getTileElements(),\n          colCount = getColumnCount(),\n          rowMode = getRowMode(),\n          rowHeight = getRowHeight(),\n          gutter = getGutter(),\n          performance =\n              $mdGridLayout(colCount, getTileSpans(), getTileElements())\n                  .map(function(tilePositions, rowCount) {\n                    return {\n                      grid: {\n                        element: element,\n                        style: getGridStyle(colCount, rowCount, gutter, rowMode, rowHeight)\n                      },\n                      tiles: tilePositions.map(function(ps, i) {\n                        return {\n                          element: angular.element(tiles[i]),\n                          style: getTileStyle(ps.position, ps.spans,\n                              colCount, rowCount,\n                              gutter, rowMode, rowHeight)\n                        }\n                      })\n                    }\n                  })\n                  .reflow()\n                  .performance();\n\n      // Report layout\n      scope.mdOnLayout({\n        $event: {\n          performance: performance\n        }\n      });\n    }\n\n    var UNIT      = $interpolate( \"{{ share }}% - ({{ gutter }} * {{ gutterShare }})\" );\n    var POSITION  = $interpolate( \"calc(({{ unit }}) * {{ offset }} + {{ offset }} * {{ gutter }})\" );\n    var DIMENSION = $interpolate( \"calc(({{ unit }}) * {{ span }} + ({{ span }} - 1) * {{ gutter }})\" );\n\n    // TODO(shyndman): Replace args with a ctx object.\n    function getTileStyle(position, spans, colCount, rowCount, gutter, rowMode, rowHeight) {\n      // TODO(shyndman): There are style caching opportunities here.\n      var hShare = (1 / colCount) * 100,\n          hGutterShare = colCount === 1 ? 0 : (colCount - 1) / colCount,\n          hUnit = UNIT({ share: hShare, gutterShare: hGutterShare, gutter: gutter });\n\n      var style = {\n        left: POSITION({ unit: hUnit, offset: position.col, gutter: gutter }),\n        width: DIMENSION({ unit: hUnit, span: spans.col, gutter: gutter }),\n        // resets\n        paddingTop: '',\n        marginTop: '',\n        top: '',\n        height: ''\n      };\n\n      switch (rowMode) {\n        case 'fixed':\n          style.top = POSITION({ unit: rowHeight, offset: position.row, gutter: gutter });\n          style.height = DIMENSION({ unit: rowHeight, span: spans.row, gutter: gutter });\n          break;\n\n        case 'ratio':\n          // rowHeight is width / height\n          var vShare = hShare * (1 / rowHeight),\n              vUnit = UNIT({ share: vShare, gutterShare: hGutterShare, gutter: gutter });\n\n          style.paddingTop = DIMENSION({ unit: vUnit, span: spans.row, gutter: gutter});\n          style.marginTop = POSITION({ unit: vUnit, offset: position.row, gutter: gutter });\n          break;\n\n        case 'fit':\n          var vGutterShare = rowCount === 1 ? 0 : (rowCount - 1) / rowCount,\n              vShare = (1 / rowCount) * 100,\n              vUnit = UNIT({ share: vShare, gutterShare: vGutterShare, gutter: gutter });\n\n          style.top = POSITION({ unit: vUnit, offset: position.row, gutter: gutter });\n          style.height = DIMENSION({ unit: vUnit, span: spans.row, gutter: gutter });\n          break;\n      }\n\n      return style;\n    }\n\n    function getGridStyle(colCount, rowCount, gutter, rowMode, rowHeight) {\n      var style = {\n        height: '',\n        paddingBottom: ''\n      };\n\n      switch(rowMode) {\n        case 'fixed':\n          style.height = DIMENSION({ unit: rowHeight, span: rowCount, gutter: gutter });\n          break;\n\n        case 'ratio':\n          // rowHeight is width / height\n          var hGutterShare = colCount === 1 ? 0 : (colCount - 1) / colCount,\n              hShare = (1 / colCount) * 100,\n              vShare = hShare * (1 / rowHeight),\n              vUnit = UNIT({ share: vShare, gutterShare: hGutterShare, gutter: gutter });\n\n          style.paddingBottom = DIMENSION({ unit: vUnit, span: rowCount, gutter: gutter});\n          break;\n\n        case 'fit':\n          // noop, as the height is user set\n          break;\n      }\n\n      return style;\n    }\n\n    function getTileElements() {\n      return ctrl.tiles.map(function(tile) { return tile.element });\n    }\n\n    function getTileSpans() {\n      return ctrl.tiles.map(function(tile) {\n        return {\n          row: parseInt(\n              $mdMedia.getResponsiveAttribute(tile.attrs, 'md-rowspan'), 10) || 1,\n          col: parseInt(\n              $mdMedia.getResponsiveAttribute(tile.attrs, 'md-colspan'), 10) || 1\n        };\n      });\n    }\n\n    function getColumnCount() {\n      var colCount = parseInt($mdMedia.getResponsiveAttribute(attrs, 'md-cols'), 10);\n      if (isNaN(colCount)) {\n        throw 'md-grid-list: md-cols attribute was not found, or contained a non-numeric value';\n      }\n      return colCount;\n    }\n\n    function getGutter() {\n      return applyDefaultUnit($mdMedia.getResponsiveAttribute(attrs, 'md-gutter') || 1);\n    }\n\n    function getRowHeight() {\n      var rowHeight = $mdMedia.getResponsiveAttribute(attrs, 'md-row-height');\n      switch (getRowMode()) {\n        case 'fixed':\n          return applyDefaultUnit(rowHeight);\n        case 'ratio':\n          var whRatio = rowHeight.split(':');\n          return parseFloat(whRatio[0]) / parseFloat(whRatio[1]);\n        case 'fit':\n          return 0; // N/A\n      }\n    }\n\n    function getRowMode() {\n      var rowHeight = $mdMedia.getResponsiveAttribute(attrs, 'md-row-height');\n      if (rowHeight == 'fit') {\n        return 'fit';\n      } else if (rowHeight.indexOf(':') !== -1) {\n        return 'ratio';\n      } else {\n        return 'fixed';\n      }\n    }\n\n    function applyDefaultUnit(val) {\n      return /\\D$/.test(val) ? val : val + 'px';\n    }\n  }\n}\nGridListDirective.$inject = [\"$interpolate\", \"$mdConstant\", \"$mdGridLayout\", \"$mdMedia\", \"$mdUtil\"];\n\n  /* @ngInject */\nfunction GridListController($timeout) {\n  this.invalidated = false;\n  this.$timeout_ = $timeout;\n  this.tiles = [];\n  this.layoutDelegate = angular.noop;\n}\nGridListController.$inject = [\"$timeout\"];\n\nGridListController.prototype = {\n  addTile: function(tileElement, tileAttrs, idx) {\n    var tile = { element: tileElement, attrs: tileAttrs };\n    if (angular.isUndefined(idx)) {\n      this.tiles.push(tile);\n    } else {\n      this.tiles.splice(idx, 0, tile);\n    }\n    this.invalidateLayout();\n  },\n\n  removeTile: function(tileElement, tileAttrs) {\n    var idx = this._findTileIndex(tileAttrs);\n    if (idx === -1) {\n      return;\n    }\n    this.tiles.splice(idx, 1);\n    this.invalidateLayout();\n  },\n\n  invalidateLayout: function() {\n    if (this.invalidated) {\n      return;\n    }\n    this.invalidated = true;\n    this.$timeout_(angular.bind(this, this.layout));\n  },\n\n  layout: function() {\n    try {\n      this.layoutDelegate();\n    } finally {\n      this.invalidated = false;\n    }\n  },\n\n  _findTileIndex: function(tileAttrs) {\n    for (var i = 0; i < this.tiles.length; i++) {\n      if (this.tiles[i].attrs == tileAttrs) {\n        return i;\n      }\n    }\n    return -1;\n  }\n}\n\n\n/* @ngInject */\nfunction GridLayoutFactory($mdUtil) {\n  var defaultAnimator = GridTileAnimator;\n\n  /**\n   * Set the reflow animator callback\n   */\n  GridLayout.animateWith =function(customAnimator) {\n    defaultAnimator = !angular.isFunction(customAnimator) ? GridTileAnimator : customAnimator;\n  };\n\n  return GridLayout;\n\n  /**\n   * Publish layout function\n   */\n  function GridLayout(colCount, tileSpans) {\n      var self, layoutInfo, gridStyles, layoutTime, mapTime, reflowTime, layoutInfo;\n\n      layoutTime = $mdUtil.time(function() {\n        layoutInfo = calculateGridFor(colCount, tileSpans);\n      });\n\n      return self = {\n\n        /**\n         * An array of objects describing each tile's position in the grid.\n         */\n        layoutInfo: function() {\n          return layoutInfo;\n        },\n\n        /**\n         * Maps grid positioning to an element and a set of styles using the\n         * provided updateFn.\n         */\n        map: function(updateFn) {\n          mapTime = $mdUtil.time(function() {\n            var info = self.layoutInfo();\n            gridStyles = updateFn(info.positioning, info.rowCount);\n          });\n          return self;\n        },\n\n        /**\n         * Default animator simply sets the element.css( <styles> ). An alternate\n         * animator can be provided as an argument. The function has the following\n         * signature:\n         *\n         *    function({grid: {element: JQLite, style: Object}, tiles: Array<{element: JQLite, style: Object}>)\n         */\n        reflow: function(animatorFn) {\n          reflowTime = $mdUtil.time(function() {\n            var animator = animatorFn || defaultAnimator;\n            animator(gridStyles.grid, gridStyles.tiles);\n          });\n          return self;\n        },\n\n        /**\n         * Timing for the most recent layout run.\n         */\n        performance: function() {\n          return {\n            tileCount: tileSpans.length,\n            layoutTime: layoutTime,\n            mapTime: mapTime,\n            reflowTime: reflowTime,\n            totalTime: layoutTime + mapTime + reflowTime\n          };\n        }\n      };\n    }\n\n  /**\n   * Default Gridlist animator simple sets the css for each element;\n   * NOTE: any transitions effects must be manually set in the CSS.\n   * e.g.\n   *\n   *  md-grid-tile {\n   *    transition: all 700ms ease-out 50ms;\n   *  }\n   *\n   */\n  function GridTileAnimator(grid, tiles) {\n    grid.element.css(grid.style);\n    tiles.forEach(function(t) {\n      t.element.css(t.style);\n    })\n  }\n\n  /**\n   * Calculates the positions of tiles.\n   *\n   * The algorithm works as follows:\n   *    An Array<Number> with length colCount (spaceTracker) keeps track of\n   *    available tiling positions, where elements of value 0 represents an\n   *    empty position. Space for a tile is reserved by finding a sequence of\n   *    0s with length <= than the tile's colspan. When such a space has been\n   *    found, the occupied tile positions are incremented by the tile's\n   *    rowspan value, as these positions have become unavailable for that\n   *    many rows.\n   *\n   *    If the end of a row has been reached without finding space for the\n   *    tile, spaceTracker's elements are each decremented by 1 to a minimum\n   *    of 0. Rows are searched in this fashion until space is found.\n   */\n  function calculateGridFor(colCount, tileSpans) {\n    var curCol = 0,\n        curRow = 0,\n        spaceTracker = newSpaceTracker();\n\n    return {\n      positioning: tileSpans.map(function(spans, i) {\n        return {\n          spans: spans,\n          position: reserveSpace(spans, i)\n        };\n      }),\n      rowCount: curRow + Math.max.apply(Math, spaceTracker)\n    }\n\n    function reserveSpace(spans, i) {\n      if (spans.col > colCount) {\n        throw 'md-grid-list: Tile at position ' + i + ' has a colspan ' +\n            '(' + spans.col + ') that exceeds the column count ' +\n            '(' + colCount + ')';\n      }\n\n      var start = 0,\n          end = 0;\n\n      // TODO(shyndman): This loop isn't strictly necessary if you can\n      // determine the minimum number of rows before a space opens up. To do\n      // this, recognize that you've iterated across an entire row looking for\n      // space, and if so fast-forward by the minimum rowSpan count. Repeat\n      // until the required space opens up.\n      while (end - start < spans.col) {\n        if (curCol >= colCount) {\n          nextRow();\n          continue;\n        }\n\n        start = spaceTracker.indexOf(0, curCol);\n        if (start === -1 || (end = findEnd(start + 1)) === -1) {\n          start = end = 0;\n          nextRow();\n          continue;\n        }\n\n        curCol = end + 1;\n      }\n\n      adjustRow(start, spans.col, spans.row);\n      curCol = start + spans.col;\n\n      return {\n        col: start,\n        row: curRow\n      };\n    }\n\n    function nextRow() {\n      curCol = 0;\n      curRow++;\n      adjustRow(0, colCount, -1); // Decrement row spans by one\n    }\n\n    function adjustRow(from, cols, by) {\n      for (var i = from; i < from + cols; i++) {\n        spaceTracker[i] = Math.max(spaceTracker[i] + by, 0);\n      }\n    }\n\n    function findEnd(start) {\n      var i;\n      for (i = start; i < spaceTracker.length; i++) {\n        if (spaceTracker[i] !== 0) {\n          return i;\n        }\n      }\n\n      if (i === spaceTracker.length) {\n        return i;\n      }\n    }\n\n    function newSpaceTracker() {\n      var tracker = [];\n      for (var i = 0; i < colCount; i++) {\n        tracker.push(0);\n      }\n      return tracker;\n    }\n  }\n}\nGridLayoutFactory.$inject = [\"$mdUtil\"];\n\n/**\n * @ngdoc directive\n * @name mdGridTile\n * @module material.components.gridList\n * @restrict E\n * @description\n * Tiles contain the content of an `md-grid-list`. They span one or more grid\n * cells vertically or horizontally, and use `md-grid-tile-{footer,header}` to\n * display secondary content.\n *\n * ### Responsive Attributes\n *\n * The `md-grid-tile` directive supports \"responsive\" attributes, which allow\n * different `md-rowspan` and `md-colspan` values depending on the currently\n * matching media query (as defined in `$mdConstant.MEDIA`).\n *\n * In order to set a responsive attribute, first define the fallback value with\n * the standard attribute name, then add additional attributes with the\n * following convention: `{base-attribute-name}-{media-query-name}=\"{value}\"`\n * (ie. `md-colspan-sm=\"4\"`)\n *\n * @param {number=} md-colspan The number of columns to span (default 1). Cannot\n *    exceed the number of columns in the grid. Supports interpolation.\n * @param {number=} md-rowspan The number of rows to span (default 1). Supports\n *     interpolation.\n *\n * @usage\n * With header:\n * <hljs lang=\"html\">\n * <md-grid-tile>\n *   <md-grid-tile-header>\n *     <h3>This is a header</h3>\n *   </md-grid-tile-header>\n * </md-grid-tile>\n * </hljs>\n *\n * With footer:\n * <hljs lang=\"html\">\n * <md-grid-tile>\n *   <md-grid-tile-footer>\n *     <h3>This is a footer</h3>\n *   </md-grid-tile-footer>\n * </md-grid-tile>\n * </hljs>\n *\n * Spanning multiple rows/columns:\n * <hljs lang=\"html\">\n * <md-grid-tile md-colspan=\"2\" md-rowspan=\"3\">\n * </md-grid-tile>\n * </hljs>\n *\n * Responsive attributes:\n * <hljs lang=\"html\">\n * <md-grid-tile md-colspan=\"1\" md-colspan-sm=\"3\" md-colspan-md=\"5\">\n * </md-grid-tile>\n * </hljs>\n */\nfunction GridTileDirective($mdMedia) {\n  return {\n    restrict: 'E',\n    require: '^mdGridList',\n    template: '<figure ng-transclude></figure>',\n    transclude: true,\n    scope: {},\n    link: postLink\n  };\n\n  function postLink(scope, element, attrs, gridCtrl) {\n    // Apply semantics\n    element.attr('role', 'listitem');\n\n    // If our colspan or rowspan changes, trigger a layout\n    var unwatchAttrs = $mdMedia.watchResponsiveAttributes(['md-colspan', 'md-rowspan'],\n        attrs, angular.bind(gridCtrl, gridCtrl.invalidateLayout));\n\n    // Tile registration/deregistration\n    // TODO(shyndman): Kind of gross to access parent scope like this.\n    //    Consider other options.\n    gridCtrl.addTile(element, attrs, scope.$parent.$index);\n    scope.$on('$destroy', function() {\n      unwatchAttrs();\n      gridCtrl.removeTile(element, attrs);\n    });\n  }\n}\nGridTileDirective.$inject = [\"$mdMedia\"];\n\nfunction GridTileCaptionDirective() {\n  return {\n    template: '<figcaption ng-transclude></figcaption>',\n    transclude: true\n  };\n}\n\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\n/**\n * @ngdoc module\n * @name material.components.icon\n * @description\n * Icon\n */\nangular.module('material.components.icon', [\n    'material.core'\n  ])\n  .directive('mdIcon', mdIconDirective);\n\n/**\n * @ngdoc directive\n * @name mdIcon\n * @module material.components.icon\n *\n * @restrict E\n *\n * @description\n * The `md-icon` directive is an markup element useful for showing an icon based on a font-face\n * or a SVG. Both external SVGs (via URLs) or cached SVG from icon sets can be\n * easily loaded and used.\n *\n * @param {string} md-svg-src String URL [or expression ] used to load, cache, and display an external SVG.\n * @param {string} md-svg-icon String name used for lookup of the icon from the internal cache; interpolated strings or\n * expressions may also be used. Specific set names can be used with the syntax `<set name>:<icon name>`.<br/><br/>\n * To use icon sets, developers are required to pre-register the sets using the `$mdIconProvider` service.\n * @param {string} md-font-icon String name of CSS icon associated with the font-face will be used\n * to render the icon. Requires the fonts and the named CSS styles to be preloaded.\n * @param {string=} alt Labels icon for accessibility. If an empty string is provided, icon\n * will be hidden from accessibility layer with `aria-hidden=\"true\"`. If there's no alt on the icon\n * nor a label on the parent element, a warning will be logged to the console.\n *\n * @usage\n * <hljs lang=\"html\">\n *  <md-icon md-font-icon=\"android\"          alt=\"android \" ></md-icon>\n *  <md-icon md-svg-icon=\"action:android\"    alt=\"android \" ></md-icon>\n *  <md-icon md-svg-src=\"/android.svg\"       alt=\"android \" ></md-icon>\n *  <md-icon md-svg-src=\"{{ getAndroid() }}\" alt=\"android \" ></md-icon>\n * </hljs>\n */\nfunction mdIconDirective($mdIcon, $mdTheming, $mdAria ) {\n  return {\n    scope: {\n      fontIcon: '@mdFontIcon',\n      svgIcon: '@mdSvgIcon',\n      svgSrc: '@mdSvgSrc'\n    },\n    restrict: 'E',\n    template: getTemplate,\n    link: postLink\n  };\n\n  function getTemplate(element, attr) {\n    return attr.mdFontIcon ? '<span class=\"md-font\" ng-class=\"fontIcon\"></span>' : '';\n  }\n\n  /**\n   * Directive postLink\n   * Supports embedded SVGs, font-icons, & external SVGs\n   */\n  function postLink(scope, element, attr) {\n    $mdTheming(element);\n\n    var ariaLabel = attr.alt || scope.fontIcon || scope.svgIcon;\n    var attrName = attr.$normalize(attr.$attr.mdSvgIcon || attr.$attr.mdSvgSrc || '');\n\n    if (attr.alt != '' && !parentsHaveText()) {\n      $mdAria.expect(element, 'aria-label', ariaLabel);\n      $mdAria.expect(element, 'role', 'img');\n    } else {\n      // Hide from the accessibility layer.\n      $mdAria.expect(element, 'aria-hidden', 'true');\n    }\n\n    if (attrName) {\n      // Use either pre-configured SVG or URL source, respectively.\n      attr.$observe(attrName, function(attrVal) {\n\n        element.empty();\n        if (attrVal) {\n          $mdIcon(attrVal).then(function(svg) {\n            element.append(svg);\n          });\n        }\n\n      });\n    }\n    function parentsHaveText() {\n      var parent = element.parent();\n      if (parent.attr('aria-label') || parent.text()) {\n        return true;\n      }\n      else if(parent.parent().attr('aria-label') || parent.parent().text()) {\n        return true;\n      }\n      return false;\n    }\n  }\n}\nmdIconDirective.$inject = [\"$mdIcon\", \"$mdTheming\", \"$mdAria\"];\n\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n  'use strict';\n\n  angular\n    .module('material.components.icon' )\n    .provider('$mdIcon', MdIconProvider);\n\n  /**\n    * @ngdoc service\n    * @name $mdIconProvider\n    * @module material.components.icon\n    *\n    * @description\n    * `$mdIconProvider` is used only to register icon IDs with URLs. These configuration features allow\n    * icons and icon sets to be pre-registered and associated with source URLs **before** the `<md-icon />`\n    * directives are compiled.\n    *\n    * Loading of the actual svg files are deferred to on-demand requests and are loaded\n    * internally by the `$mdIcon` service using the `$http` service. When an SVG is requested by name/ID,\n    * the `$mdIcon` service searches its registry for the associated source URL;\n    * that URL is used to on-demand load and parse the SVG dynamically.\n    *\n    * <hljs lang=\"js\">\n    *   app.config(function($mdIconProvider) {\n    *\n    *     // Configure URLs for icons specified by [set:]id.\n    *\n    *     $mdIconProvider\n    *          .defaultIconSet('my/app/icons.svg')       // Register a default set of SVG icons\n    *          .iconSet('social', 'my/app/social.svg')   // Register a named icon set of SVGs\n    *          .icon('android', 'my/app/android.svg')    // Register a specific icon (by name)\n    *          .icon('work:chair', 'my/app/chair.svg');  // Register icon in a specific set\n    *   });\n    * </hljs>\n    *\n    * SVG icons and icon sets can be easily pre-loaded and cached using either (a) a build process or (b) a runtime\n    * **startup** process (shown below):\n    *\n    * <hljs lang=\"js\">\n    *   app.config(function($mdIconProvider) {\n    *\n    *     // Register a default set of SVG icon definitions\n    *     $mdIconProvider.defaultIconSet('my/app/icons.svg')\n    *\n    *   })\n    *   .run(function($http, $templateCache){\n    *\n    *     // Pre-fetch icons sources by URL and cache in the $templateCache...\n    *     // subsequent $http calls will look there first.\n    *\n    *     var urls = [ 'imy/app/icons.svg', 'img/icons/android.svg'];\n    *\n    *     angular.forEach(urls, function(url) {\n    *       $http.get(url, {cache: $templateCache});\n    *     });\n    *\n    *   });\n    *\n    * </hljs>\n    *\n    * NOTE: the loaded SVG data is subsequently cached internally for future requests.\n    *\n    */\n\n   /**\n    * @ngdoc method\n    * @name $mdIconProvider#icon\n    *\n    * @description\n    * Register a source URL for a specific icon name; the name may include optional 'icon set' name prefix.\n    * These icons  will later be retrieved from the cache using `$mdIcon( <icon name> )`\n    *\n    * @param {string} id Icon name/id used to register the icon\n    * @param {string} url specifies the external location for the data file. Used internally by `$http` to load the\n    * data or as part of the lookup in `$templateCache` if pre-loading was configured.\n    * @param {string=} iconSize Number indicating the width and height of the icons in the set. All icons\n    * in the icon set must be the same size. Default size is 24.\n    *\n    * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API\n    *\n    * @usage\n    * <hljs lang=\"js\">\n    *   app.config(function($mdIconProvider) {\n    *\n    *     // Configure URLs for icons specified by [set:]id.\n    *\n    *     $mdIconProvider\n    *          .icon('android', 'my/app/android.svg')    // Register a specific icon (by name)\n    *          .icon('work:chair', 'my/app/chair.svg');  // Register icon in a specific set\n    *   });\n    * </hljs>\n    *\n    */\n   /**\n    * @ngdoc method\n    * @name $mdIconProvider#iconSet\n    *\n    * @description\n    * Register a source URL for a 'named' set of icons; group of SVG definitions where each definition\n    * has an icon id. Individual icons can be subsequently retrieved from this cached set using\n    * `$mdIcon( <icon set name>:<icon name> )`\n    *\n    * @param {string} id Icon name/id used to register the iconset\n    * @param {string} url specifies the external location for the data file. Used internally by `$http` to load the\n    * data or as part of the lookup in `$templateCache` if pre-loading was configured.\n    * @param {string=} iconSize Number indicating the width and height of the icons in the set. All icons\n    * in the icon set must be the same size. Default size is 24.\n    *\n    * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API\n    *\n    *\n    * @usage\n    * <hljs lang=\"js\">\n    *   app.config(function($mdIconProvider) {\n    *\n    *     // Configure URLs for icons specified by [set:]id.\n    *\n    *     $mdIconProvider\n    *          .iconSet('social', 'my/app/social.svg')   // Register a named icon set\n    *   });\n    * </hljs>\n    *\n    */\n   /**\n    * @ngdoc method\n    * @name $mdIconProvider#defaultIconSet\n    *\n    * @description\n    * Register a source URL for the default 'named' set of icons. Unless explicitly registered,\n    * subsequent lookups of icons will failover to search this 'default' icon set.\n    * Icon can be retrieved from this cached, default set using `$mdIcon( <icon name> )`\n    *\n    * @param {string} url specifies the external location for the data file. Used internally by `$http` to load the\n    * data or as part of the lookup in `$templateCache` if pre-loading was configured.\n    * @param {string=} iconSize Number indicating the width and height of the icons in the set. All icons\n    * in the icon set must be the same size. Default size is 24.\n    *\n    * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API\n    *\n    * @usage\n    * <hljs lang=\"js\">\n    *   app.config(function($mdIconProvider) {\n    *\n    *     // Configure URLs for icons specified by [set:]id.\n    *\n    *     $mdIconProvider\n    *          .defaultIconSet( 'my/app/social.svg' )   // Register a default icon set\n    *   });\n    * </hljs>\n    *\n    */\n   /**\n    * @ngdoc method\n    * @name $mdIconProvider#defaultIconSize\n    *\n    * @description\n    * While `<md-icon />` markup can also be style with sizing CSS, this method configures\n    * the default width **and** height used for all icons; unless overridden by specific CSS.\n    * The default sizing is (24px, 24px).\n    *\n    * @param {string} iconSize Number indicating the width and height of the icons in the set. All icons\n    * in the icon set must be the same size. Default size is 24.\n    *\n    * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API\n    *\n    * @usage\n    * <hljs lang=\"js\">\n    *   app.config(function($mdIconProvider) {\n    *\n    *     // Configure URLs for icons specified by [set:]id.\n    *\n    *     $mdIconProvider\n    *          .defaultIconSize(36)   // Register a default icon size (width == height)\n    *   });\n    * </hljs>\n    *\n    */\n\n var config = {\n   defaultIconSize: 24\n };\n\n function MdIconProvider() { }\n\n MdIconProvider.prototype = {\n   icon : function icon(id, url, iconSize) {\n     if ( id.indexOf(':') == -1 ) id = '$default:' + id;\n\n     config[id] = new ConfigurationItem(url, iconSize );\n     return this;\n   },\n\n   iconSet : function iconSet(id, url, iconSize) {\n     config[id] = new ConfigurationItem(url, iconSize );\n     return this;\n   },\n\n   defaultIconSet : function defaultIconSet(url, iconSize) {\n     var setName = '$default';\n\n     if ( !config[setName] ) {\n       config[setName] = new ConfigurationItem(url, iconSize );\n     }\n\n     config[setName].iconSize = iconSize || config.defaultIconSize;\n\n     return this;\n   },\n\n   defaultIconSize : function defaultIconSize(iconSize) {\n     config.defaultIconSize = iconSize;\n     return this;\n   },\n\n   preloadIcons: function ($templateCache) {\n     var iconProvider = this;\n     var svgRegistry = [\n       {\n         id : 'tabs-arrow',\n         url: 'tabs-arrow.svg',\n         svg: '<svg version=\"1.1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 24 24\"><g id=\"tabs-arrow\"><polygon points=\"15.4,7.4 14,6 8,12 14,18 15.4,16.6 10.8,12 \"/></g></svg>'\n       },\n       {\n         id : 'close',\n         url: 'close.svg',\n         svg: '<svg version=\"1.1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 24 24\"><g id=\"close\"><path d=\"M19 6.41l-1.41-1.41-5.59 5.59-5.59-5.59-1.41 1.41 5.59 5.59-5.59 5.59 1.41 1.41 5.59-5.59 5.59 5.59 1.41-1.41-5.59-5.59z\"/></g></svg>'\n       },\n       {\n         id:  'cancel',\n         url: 'cancel.svg',\n         svg: '<svg version=\"1.1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 24 24\"><g id=\"cancel\"><path d=\"M12 2c-5.53 0-10 4.47-10 10s4.47 10 10 10 10-4.47 10-10-4.47-10-10-10zm5 13.59l-1.41 1.41-3.59-3.59-3.59 3.59-1.41-1.41 3.59-3.59-3.59-3.59 1.41-1.41 3.59 3.59 3.59-3.59 1.41 1.41-3.59 3.59 3.59 3.59z\"/></g></svg>'\n       }\n     ];\n\n     svgRegistry.forEach(function(asset){\n       iconProvider.icon(asset.id,  asset.url);\n       $templateCache.put(asset.url, asset.svg);\n     });\n\n   },\n\n   $get : ['$http', '$q', '$log', '$templateCache', function($http, $q, $log, $templateCache) {\n     this.preloadIcons($templateCache);\n     return new MdIconService(config, $http, $q, $log, $templateCache);\n   }]\n };\n\n   /**\n    *  Configuration item stored in the Icon registry; used for lookups\n    *  to load if not already cached in the `loaded` cache\n    */\n   function ConfigurationItem(url, iconSize) {\n     this.url = url;\n     this.iconSize = iconSize || config.defaultIconSize;\n   }\n\n /**\n  * @ngdoc service\n  * @name $mdIcon\n  * @module material.components.icon\n  *\n  * @description\n  * The `$mdIcon` service is a function used to lookup SVG icons.\n  *\n  * @param {string} id Query value for a unique Id or URL. If the argument is a URL, then the service will retrieve the icon element\n  * from its internal cache or load the icon and cache it first. If the value is not a URL-type string, then an ID lookup is\n  * performed. The Id may be a unique icon ID or may include an iconSet ID prefix.\n  *\n  * For the **id** query to work properly, this means that all id-to-URL mappings must have been previously configured\n  * using the `$mdIconProvider`.\n  *\n  * @returns {obj} Clone of the initial SVG DOM element; which was created from the SVG markup in the SVG data file.\n  *\n  * @usage\n  * <hljs lang=\"js\">\n  * function SomeDirective($mdIcon) {\n  *\n  *   // See if the icon has already been loaded, if not\n  *   // then lookup the icon from the registry cache, load and cache\n  *   // it for future requests.\n  *   // NOTE: ID queries require configuration with $mdIconProvider\n  *\n  *   $mdIcon('android').then(function(iconEl)    { element.append(iconEl); });\n  *   $mdIcon('work:chair').then(function(iconEl) { element.append(iconEl); });\n  *\n  *   // Load and cache the external SVG using a URL\n  *\n  *   $mdIcon('img/icons/android.svg').then(function(iconEl) {\n  *     element.append(iconEl);\n  *   });\n  * };\n  * </hljs>\n  *\n  * NOTE: The `md-icon` directive internally uses the `$mdIcon` service to query, loaded, and instantiate\n  * SVG DOM elements.\n  */\n function MdIconService(config, $http, $q, $log, $templateCache) {\n   var iconCache = {};\n   var urlRegex = /[-a-zA-Z0-9@:%_\\+.~#?&//=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_\\+.~#?&//=]*)?/i;\n\n   Icon.prototype = { clone : cloneSVG, prepare: prepareAndStyle };\n\n   return function getIcon(id) {\n     id = id || '';\n\n     // If already loaded and cached, use a clone of the cached icon.\n     // Otherwise either load by URL, or lookup in the registry and then load by URL, and cache.\n\n     if ( iconCache[id]         ) return $q.when( iconCache[id].clone() );\n     if ( urlRegex.test(id)     ) return loadByURL(id).then( cacheIcon(id) );\n     if ( id.indexOf(':') == -1 ) id = '$default:' + id;\n\n     return loadByID(id)\n         .catch(loadFromIconSet)\n         .catch(announceIdNotFound)\n         .catch(announceNotFound)\n         .then( cacheIcon(id) );\n   };\n\n   /**\n    * Prepare and cache the loaded icon for the specified `id`\n    */\n   function cacheIcon( id ) {\n\n     return function updateCache( icon ) {\n       iconCache[id] = isIcon(icon) ? icon : new Icon(icon, config[id]);\n\n       return iconCache[id].clone();\n     };\n   }\n\n   /**\n    * Lookup the configuration in the registry, if !registered throw an error\n    * otherwise load the icon [on-demand] using the registered URL.\n    *\n    */\n   function loadByID(id) {\n     var iconConfig = config[id];\n\n     return !iconConfig ? $q.reject(id) : loadByURL(iconConfig.url).then(function(icon) {\n       return new Icon(icon, iconConfig);\n     });\n   }\n\n   /**\n    *    Loads the file as XML and uses querySelector( <id> ) to find\n    *    the desired node...\n    */\n   function loadFromIconSet(id) {\n     var setName = id.substring(0, id.lastIndexOf(':')) || '$default';\n     var iconSetConfig = config[setName];\n\n     return !iconSetConfig ? $q.reject(id) : loadByURL(iconSetConfig.url).then(extractFromSet);\n\n     function extractFromSet(set) {\n       var iconName = id.slice(id.lastIndexOf(':') + 1);\n       var icon = set.querySelector('#' + iconName);\n       return !icon ? $q.reject(id) : new Icon(icon, iconSetConfig);\n     }\n   }\n\n   /**\n    * Load the icon by URL (may use the $templateCache).\n    * Extract the data for later conversion to Icon\n    */\n   function loadByURL(url) {\n     return $http\n       .get(url, { cache: $templateCache })\n       .then(function(response) {\n         var els = angular.element(response.data);\n         // Iterate to find first svg node, allowing for comments in loaded SVG (common with auto-generated SVGs)\n         for (var i = 0; i < els.length; ++i) {\n           if (els[i].nodeName == 'svg') {\n             return els[i];\n           }\n         }\n       });\n   }\n\n   /**\n    * User did not specify a URL and the ID has not been registered with the $mdIcon\n    * registry\n    */\n   function announceIdNotFound(id) {\n     var msg;\n\n     if (angular.isString(id)) {\n       msg = 'icon ' + id + ' not found';\n       $log.warn(msg);\n     }\n\n     return $q.reject(msg || id);\n   }\n\n   /**\n    * Catch HTTP or generic errors not related to incorrect icon IDs.\n    */\n   function announceNotFound(err) {\n     var msg = angular.isString(err) ? err : (err.message || err.data || err.statusText);\n     $log.warn(msg);\n\n     return $q.reject(msg);\n   }\n\n   /**\n    * Check target signature to see if it is an Icon instance.\n    */\n   function isIcon(target) {\n     return angular.isDefined(target.element) && angular.isDefined(target.config);\n   }\n\n   /**\n    *  Define the Icon class\n    */\n   function Icon(el, config) {\n     if (el.tagName != 'svg') {\n       el = angular.element('<svg xmlns=\"http://www.w3.org/2000/svg\">').append(el)[0];\n     }\n     el = angular.element(el);\n\n     // Inject the namespace if not available...\n     if ( !el.attr('xmlns') ) {\n       el.attr('xmlns', \"http://www.w3.org/2000/svg\");\n     }\n\n     this.element = el;\n     this.config = config;\n     this.prepare();\n   }\n\n   /**\n    *  Prepare the DOM element that will be cached in the\n    *  loaded iconCache store.\n    */\n   function prepareAndStyle() {\n     var iconSize = this.config ? this.config.iconSize : config.defaultIconSize;\n     var svg = angular.element( this.element );\n         svg.attr({\n           'fit'   : '',\n           'height': '100%',\n           'width' : '100%',\n           'preserveAspectRatio': 'xMidYMid meet',\n           'viewBox' : svg.attr('viewBox') || ('0 0 ' + iconSize + ' ' + iconSize)\n         })\n         .css( {\n           'pointer-events' : 'none',\n           'display' : 'block'\n         });\n\n     this.element = svg;\n   }\n\n   /**\n    * Clone the Icon DOM element; which is stored as an angular.element()\n    */\n   function cloneSVG(){\n     return angular.element( this.element[0].cloneNode(true) );\n   }\n\n }\n\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n\n/**\n * @ngdoc module\n * @name material.components.input\n */\n\nangular.module('material.components.input', [\n  'material.core'\n])\n  .directive('mdInputContainer', mdInputContainerDirective)\n  .directive('label', labelDirective)\n  .directive('input', inputTextareaDirective)\n  .directive('textarea', inputTextareaDirective)\n  .directive('mdMaxlength', mdMaxlengthDirective)\n  .directive('placeholder', placeholderDirective);\n\n/**\n * @ngdoc directive\n * @name mdInputContainer\n * @module material.components.input\n *\n * @restrict E\n *\n * @description\n * `<md-input-container>` is the parent of any input or textarea element.\n *\n * Input and textarea elements will not behave properly unless the md-input-container\n * parent is provided.\n *\n * @param md-is-error {expression=} When the given expression evaluates to true, the input container will go into error state. Defaults to erroring if the input has been touched and is invalid.\n * @param md-no-float {boolean=} When present, placeholders will not be converted to floating labels\n *\n * @usage\n * <hljs lang=\"html\">\n *\n * <md-input-container>\n *   <label>Username</label>\n *   <input type=\"text\" ng-model=\"user.name\">\n * </md-input-container>\n *\n * <md-input-container>\n *   <label>Description</label>\n *   <textarea ng-model=\"user.description\"></textarea>\n * </md-input-container>\n *\n * </hljs>\n */\nfunction mdInputContainerDirective($mdTheming, $parse) {\n  ContainerCtrl.$inject = [\"$scope\", \"$element\", \"$attrs\"];\n  return {\n    restrict: 'E',\n    link: postLink,\n    controller: ContainerCtrl\n  };\n\n  function postLink(scope, element, attr) {\n    $mdTheming(element);\n  }\n  function ContainerCtrl($scope, $element, $attrs) {\n    var self = this;\n\n    self.isErrorGetter = $attrs.mdIsError && $parse($attrs.mdIsError);\n\n    self.element = $element;\n    self.setFocused = function(isFocused) {\n      $element.toggleClass('md-input-focused', !!isFocused);\n    };\n    self.setHasValue = function(hasValue) {\n      $element.toggleClass('md-input-has-value', !!hasValue);\n    };\n    self.setInvalid = function(isInvalid) {\n      $element.toggleClass('md-input-invalid', !!isInvalid);\n    };\n    $scope.$watch(function() {\n      return self.label && self.input;\n    }, function(hasLabelAndInput) {\n      if (hasLabelAndInput && !self.label.attr('for')) {\n        self.label.attr('for', self.input.attr('id'));\n      }\n    });\n  }\n}\nmdInputContainerDirective.$inject = [\"$mdTheming\", \"$parse\"];\n\nfunction labelDirective() {\n  return {\n    restrict: 'E',\n    require: '^?mdInputContainer',\n    link: function(scope, element, attr, containerCtrl) {\n      if (!containerCtrl || attr.mdNoFloat) return;\n\n      containerCtrl.label = element;\n      scope.$on('$destroy', function() {\n        containerCtrl.label = null;\n      });\n    }\n  };\n}\n\n/**\n * @ngdoc directive\n * @name mdInput\n * @restrict E\n * @module material.components.input\n *\n * @description\n * Use the `<input>` or the  `<textarea>` as a child of an `<md-input-container>`.\n *\n * @param {number=} md-maxlength The maximum number of characters allowed in this input. If this is specified, a character counter will be shown underneath the input.<br/><br/>\n * The purpose of **`md-maxength`** is exactly to show the max length counter text. If you don't want the counter text and only need \"plain\" validation, you can use the \"simple\" `ng-maxlength` or maxlength attributes.\n *\n * @usage\n * <hljs lang=\"html\">\n * <md-input-container>\n *   <label>Color</label>\n *   <input type=\"text\" ng-model=\"color\" required md-maxlength=\"10\">\n * </md-input-container>\n * </hljs>\n * <h3>With Errors (uses [ngMessages](https://docs.angularjs.org/api/ngMessages))</h3>\n * <hljs lang=\"html\">\n * <form name=\"userForm\">\n *   <md-input-container>\n *     <label>Last Name</label>\n *     <input name=\"lastName\" ng-model=\"lastName\" required md-maxlength=\"10\" minlength=\"4\">\n *     <div ng-messages=\"userForm.lastName.$error\" ng-show=\"userForm.bio.$dirty\">\n *       <div ng-message=\"required\">This is required!</div>\n *       <div ng-message=\"md-maxlength\">That's too long!</div>\n *       <div ng-message=\"minlength\">That's too short!</div>\n *     </div>\n *   </md-input-container>\n *   <md-input-container>\n *     <label>Biography</label>\n *     <textarea name=\"bio\" ng-model=\"biography\" required md-maxlength=\"150\"></textarea>\n *     <div ng-messages=\"userForm.bio.$error\" ng-show=\"userForm.bio.$dirty\">\n *       <div ng-message=\"required\">This is required!</div>\n *       <div ng-message=\"md-maxlength\">That's too long!</div>\n *     </div>\n *   </md-input-container>\n * </form>\n * </hljs>\n *\n * Behaves like the [AngularJS input directive](https://docs.angularjs.org/api/ng/directive/input).\n *\n */\n\nfunction inputTextareaDirective($mdUtil, $window) {\n  return {\n    restrict: 'E',\n    require: ['^?mdInputContainer', '?ngModel'],\n    link: postLink\n  };\n\n  function postLink(scope, element, attr, ctrls) {\n\n    var containerCtrl = ctrls[0];\n    var ngModelCtrl = ctrls[1] || $mdUtil.fakeNgModel();\n    var isReadonly = angular.isDefined(attr.readonly);\n\n    if ( !containerCtrl ) return;\n    if (containerCtrl.input) {\n      throw new Error(\"<md-input-container> can only have *one* <input> or <textarea> child element!\");\n    }\n    containerCtrl.input = element;\n\n    element.addClass('md-input');\n    if (!element.attr('id')) {\n      element.attr('id', 'input_' + $mdUtil.nextUid());\n    }\n\n    if (element[0].tagName.toLowerCase() === 'textarea') {\n      setupTextarea();\n    }\n\n    var touched = false;\n    var isErrorGetter = containerCtrl.isErrorGetter || function() {\n      return ngModelCtrl.$invalid && (touched || ngModelCtrl.$touched);\n    };\n    scope.$watch(isErrorGetter, containerCtrl.setInvalid);\n\n    ngModelCtrl.$parsers.push(ngModelPipelineCheckValue);\n    ngModelCtrl.$formatters.push(ngModelPipelineCheckValue);\n\n    element.on('input', inputCheckValue);\n\n    if (!isReadonly) {\n      element\n        .on('focus', function(ev) {\n          touched = true;\n          containerCtrl.setFocused(true);\n          scope.$evalAsync();\n        })\n        .on('blur', function(ev) {\n          containerCtrl.setFocused(false);\n          inputCheckValue();\n        });\n\n    }\n\n    scope.$on('$destroy', function() {\n      containerCtrl.setFocused(false);\n      containerCtrl.setHasValue(false);\n      containerCtrl.input = null;\n    });\n\n    /**\n     *\n     */\n    function ngModelPipelineCheckValue(arg) {\n      containerCtrl.setHasValue(!ngModelCtrl.$isEmpty(arg));\n      return arg;\n    }\n    function inputCheckValue() {\n      // An input's value counts if its length > 0,\n      // or if the input's validity state says it has bad input (eg string in a number input)\n      containerCtrl.setHasValue(element.val().length > 0 || (element[0].validity||{}).badInput);\n    }\n\n    function setupTextarea() {\n      var node = element[0];\n      var onChangeTextarea = $mdUtil.debounce(growTextarea, 1);\n\n      function pipelineListener(value) {\n        onChangeTextarea();\n        return value;\n      }\n\n      if (ngModelCtrl) {\n        ngModelCtrl.$formatters.push(pipelineListener);\n        ngModelCtrl.$viewChangeListeners.push(pipelineListener);\n      } else {\n        onChangeTextarea();\n      }\n      element.on('keydown input', onChangeTextarea);\n      element.on('scroll', onScroll);\n      angular.element($window).on('resize', onChangeTextarea);\n\n      scope.$on('$destroy', function() {\n        angular.element($window).off('resize', onChangeTextarea);\n      });\n\n      function growTextarea() {\n        node.style.height = \"auto\";\n        node.scrollTop = 0;\n        var height = getHeight();\n        if (height) node.style.height = height + 'px';\n      }\n\n      function getHeight () {\n        var line = node.scrollHeight - node.offsetHeight;\n        return node.offsetHeight + (line > 0 ? line : 0);\n      }\n\n      function onScroll(e) {\n        node.scrollTop = 0;\n        // for smooth new line adding\n        var line = node.scrollHeight - node.offsetHeight;\n        var height = node.offsetHeight + line;\n        node.style.height = height + 'px';\n      }\n    }\n  }\n}\ninputTextareaDirective.$inject = [\"$mdUtil\", \"$window\"];\n\nfunction mdMaxlengthDirective($animate) {\n  return {\n    restrict: 'A',\n    require: ['ngModel', '^mdInputContainer'],\n    link: postLink\n  };\n\n  function postLink(scope, element, attr, ctrls) {\n    var maxlength;\n    var ngModelCtrl = ctrls[0];\n    var containerCtrl = ctrls[1];\n    var charCountEl = angular.element('<div class=\"md-char-counter\">');\n\n    // Stop model from trimming. This makes it so whitespace\n    // over the maxlength still counts as invalid.\n    attr.$set('ngTrim', 'false');\n    containerCtrl.element.append(charCountEl);\n\n    ngModelCtrl.$formatters.push(renderCharCount);\n    ngModelCtrl.$viewChangeListeners.push(renderCharCount);\n    element.on('input keydown', function() {\n      renderCharCount(); //make sure it's called with no args\n    });\n\n    scope.$watch(attr.mdMaxlength, function(value) {\n      maxlength = value;\n      if (angular.isNumber(value) && value > 0) {\n        if (!charCountEl.parent().length) {\n          $animate.enter(charCountEl, containerCtrl.element,\n                         angular.element(containerCtrl.element[0].lastElementChild));\n        }\n        renderCharCount();\n      } else {\n        $animate.leave(charCountEl);\n      }\n    });\n\n    ngModelCtrl.$validators['md-maxlength'] = function(modelValue, viewValue) {\n      if (!angular.isNumber(maxlength) || maxlength < 0) {\n        return true;\n      }\n      return ( modelValue || element.val() || viewValue || '' ).length <= maxlength;\n    };\n\n    function renderCharCount(value) {\n      charCountEl.text( ( element.val() || value || '' ).length + '/' + maxlength );\n      return value;\n    }\n  }\n}\nmdMaxlengthDirective.$inject = [\"$animate\"];\n\nfunction placeholderDirective() {\n  return {\n    restrict: 'A',\n    require: '^^?mdInputContainer',\n    link: postLink\n  };\n\n  function postLink(scope, element, attr, inputContainer) {\n    if (!inputContainer) return;\n    if (angular.isDefined(inputContainer.element.attr('md-no-float'))) return;\n\n    var placeholderText = attr.placeholder;\n    element.removeAttr('placeholder');\n\n    inputContainer.element.append('<div class=\"md-placeholder\">' + placeholderText + '</div>');\n  }\n}\n\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\n/**\n * @ngdoc module\n * @name material.components.list\n * @description\n * List module\n */\nangular.module('material.components.list', [\n  'material.core'\n])\n  .directive('mdList', mdListDirective)\n  .directive('mdItem', mdItemDirective)\n  .directive('mdListItem', mdItemDirective);\n\n/**\n * @ngdoc directive\n * @name mdList\n * @module material.components.list\n *\n * @restrict E\n *\n * @description\n * The `<md-list>` directive is a list container for 1..n `<md-item>` tags.\n *\n * @usage\n * <hljs lang=\"html\">\n * <md-list>\n *   <md-item ng-repeat=\"item in todos\">\n *     <md-item-content>\n *       <div class=\"md-tile-left\">\n *         <img ng-src=\"{{item.face}}\" class=\"face\" alt=\"{{item.who}}\">\n *       </div>\n *       <div class=\"md-tile-content\">\n *         <h3>{{item.what}}</h3>\n *         <h4>{{item.who}}</h4>\n *         <p>\n *           {{item.notes}}\n *         </p>\n *       </div>\n *     </md-item-content>\n *   </md-item>\n * </md-list>\n * </hljs>\n *\n */\nfunction mdListDirective() {\n  return {\n    restrict: 'E',\n    link: function($scope, $element, $attr) {\n      $element.attr({\n        'role' : 'list'\n      });\n    }\n  };\n}\n\n/**\n * @ngdoc directive\n * @name mdItem\n * @module material.components.list\n *\n * @restrict E\n *\n * @description\n * The `<md-item>` directive is a container intended for row items in a `<md-list>` container.\n *\n * @usage\n * <hljs lang=\"html\">\n *  <md-list>\n *    <md-item>\n *            Item content in list\n *    </md-item>\n *  </md-list>\n * </hljs>\n *\n */\nfunction mdItemDirective() {\n  return {\n    restrict: 'E',\n    link: function($scope, $element, $attr) {\n      $element.attr({\n        'role' : 'listitem'\n      });\n    }\n  };\n}\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\n/**\n * @ngdoc module\n * @name material.components.progressCircular\n * @description Circular Progress module!\n */\nangular.module('material.components.progressCircular', [\n  'material.core'\n])\n  .directive('mdProgressCircular', MdProgressCircularDirective);\n\n/**\n * @ngdoc directive\n * @name mdProgressCircular\n * @module material.components.progressCircular\n * @restrict E\n *\n* @description\n * The circular progress directive is used to make loading content in your app as delightful and painless as possible by minimizing the amount of visual change a user sees before they can view and interact with content.\n *\n * For operations where the percentage of the operation completed can be determined, use a determinate indicator. They give users a quick sense of how long an operation will take.\n *\n * For operations where the user is asked to wait a moment while something finishes up, and it’s not necessary to expose what's happening behind the scenes and how long it will take, use an indeterminate indicator.\n *\n * @param {string} md-mode Select from one of two modes: determinate and indeterminate.\n * @param {number=} value In determinate mode, this number represents the percentage of the circular progress. Default: 0\n * @param {number=} md-diameter This specifies the diamter of the circular progress. Default: 48\n *\n * @usage\n * <hljs lang=\"html\">\n * <md-progress-circular md-mode=\"determinate\" value=\"...\"></md-progress-circular>\n *\n * <md-progress-circular md-mode=\"determinate\" ng-value=\"...\"></md-progress-circular>\n *\n * <md-progress-circular md-mode=\"determinate\" value=\"...\" md-diameter=\"100\"></md-progress-circular>\n *\n * <md-progress-circular md-mode=\"indeterminate\"></md-progress-circular>\n * </hljs>\n */\nfunction MdProgressCircularDirective($$rAF, $mdConstant, $mdTheming) {\n  var fillRotations = new Array(101),\n    fixRotations = new Array(101);\n\n  for (var i = 0; i < 101; i++) {\n    var percent = i / 100;\n    var rotation = Math.floor(percent * 180);\n\n    fillRotations[i] = 'rotate(' + rotation.toString() + 'deg)';\n    fixRotations[i] = 'rotate(' + (rotation * 2).toString() + 'deg)';\n  }\n\n  return {\n    restrict: 'E',\n    template:\n        '<div class=\"md-spinner-wrapper\">' +\n          '<div class=\"md-inner\">' +\n            '<div class=\"md-gap\"></div>' +\n            '<div class=\"md-left\">' +\n              '<div class=\"md-half-circle\"></div>' +\n            '</div>' +\n            '<div class=\"md-right\">' +\n              '<div class=\"md-half-circle\"></div>' +\n            '</div>' +\n          '</div>' +\n        '</div>',\n    compile: compile\n  };\n\n  function compile(tElement, tAttrs, transclude) {\n    tElement.attr('aria-valuemin', 0);\n    tElement.attr('aria-valuemax', 100);\n    tElement.attr('role', 'progressbar');\n\n    return postLink;\n  }\n\n  function postLink(scope, element, attr) {\n    $mdTheming(element);\n    var circle = element[0],\n      fill = circle.querySelectorAll('.md-fill, .md-mask.md-full'),\n      fix = circle.querySelectorAll('.md-fill.md-fix'),\n      i, clamped, fillRotation, fixRotation;\n\n    var diameter = attr.mdDiameter || 48;\n    var scale = diameter/48;\n\n    circle.style[$mdConstant.CSS.TRANSFORM] = 'scale(' + scale.toString() + ')';\n\n    attr.$observe('value', function(value) {\n      clamped = clamp(value);\n      fillRotation = fillRotations[clamped];\n      fixRotation = fixRotations[clamped];\n\n      element.attr('aria-valuenow', clamped);\n\n      for (i = 0; i < fill.length; i++) {\n        fill[i].style[$mdConstant.CSS.TRANSFORM] = fillRotation;\n      }\n\n      for (i = 0; i < fix.length; i++) {\n        fix[i].style[$mdConstant.CSS.TRANSFORM] = fixRotation;\n      }\n    });\n  }\n\n  function clamp(value) {\n    if (value > 100) {\n      return 100;\n    }\n\n    if (value < 0) {\n      return 0;\n    }\n\n    return Math.ceil(value || 0);\n  }\n}\nMdProgressCircularDirective.$inject = [\"$$rAF\", \"$mdConstant\", \"$mdTheming\"];\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\n\n/**\n * @ngdoc module\n * @name material.components.progressLinear\n * @description Linear Progress module!\n */\nangular.module('material.components.progressLinear', [\n  'material.core'\n])\n  .directive('mdProgressLinear', MdProgressLinearDirective);\n\n/**\n * @ngdoc directive\n * @name mdProgressLinear\n * @module material.components.progressLinear\n * @restrict E\n *\n * @description\n * The linear progress directive is used to make loading content in your app as delightful and painless as possible by minimizing the amount of visual change a user sees before they can view and interact with content. Each operation should only be represented by one activity indicator—for example, one refresh operation should not display both a refresh bar and an activity circle.\n *\n * For operations where the percentage of the operation completed can be determined, use a determinate indicator. They give users a quick sense of how long an operation will take.\n *\n * For operations where the user is asked to wait a moment while something finishes up, and it’s not necessary to expose what's happening behind the scenes and how long it will take, use an indeterminate indicator.\n *\n * @param {string} md-mode Select from one of four modes: determinate, indeterminate, buffer or query.\n * @param {number=} value In determinate and buffer modes, this number represents the percentage of the primary progress bar. Default: 0\n * @param {number=} md-buffer-value In the buffer mode, this number represents the precentage of the secondary progress bar. Default: 0\n *\n * @usage\n * <hljs lang=\"html\">\n * <md-progress-linear md-mode=\"determinate\" value=\"...\"></md-progress-linear>\n *\n * <md-progress-linear md-mode=\"determinate\" ng-value=\"...\"></md-progress-linear>\n *\n * <md-progress-linear md-mode=\"indeterminate\"></md-progress-linear>\n *\n * <md-progress-linear md-mode=\"buffer\" value=\"...\" md-buffer-value=\"...\"></md-progress-linear>\n *\n * <md-progress-linear md-mode=\"query\"></md-progress-linear>\n * </hljs>\n */\nfunction MdProgressLinearDirective($$rAF, $mdConstant, $mdTheming) {\n\n  return {\n    restrict: 'E',\n    template: '<div class=\"md-container\">' +\n      '<div class=\"md-dashed\"></div>' +\n      '<div class=\"md-bar md-bar1\"></div>' +\n      '<div class=\"md-bar md-bar2\"></div>' +\n      '</div>',\n    compile: compile\n  };\n  \n  function compile(tElement, tAttrs, transclude) {\n    tElement.attr('aria-valuemin', 0);\n    tElement.attr('aria-valuemax', 100);\n    tElement.attr('role', 'progressbar');\n\n    return postLink;\n  }\n  function postLink(scope, element, attr) {\n    $mdTheming(element);\n    var bar1Style = element[0].querySelector('.md-bar1').style,\n      bar2Style = element[0].querySelector('.md-bar2').style,\n      container = angular.element(element[0].querySelector('.md-container'));\n\n    attr.$observe('value', function(value) {\n      if (attr.mdMode == 'query') {\n        return;\n      }\n\n      var clamped = clamp(value);\n      element.attr('aria-valuenow', clamped);\n      bar2Style[$mdConstant.CSS.TRANSFORM] = transforms[clamped];\n    });\n\n    attr.$observe('mdBufferValue', function(value) {\n      bar1Style[$mdConstant.CSS.TRANSFORM] = transforms[clamp(value)];\n    });\n\n    $$rAF(function() {\n      container.addClass('md-ready');\n    });\n  }\n\n  function clamp(value) {\n    if (value > 100) {\n      return 100;\n    }\n\n    if (value < 0) {\n      return 0;\n    }\n\n    return Math.ceil(value || 0);\n  }\n}\nMdProgressLinearDirective.$inject = [\"$$rAF\", \"$mdConstant\", \"$mdTheming\"];\n\n\n// **********************************************************\n// Private Methods\n// **********************************************************\nvar transforms = (function() {\n  var values = new Array(101);\n  for(var i = 0; i < 101; i++){\n    values[i] = makeTransform(i);\n  }\n\n  return values;\n\n  function makeTransform(value){\n    var scale = value/100;\n    var translateX = (value-100)/2;\n    return 'translateX(' + translateX.toString() + '%) scale(' + scale.toString() + ', 1)';\n  }\n})();\n\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\n\n/**\n * @ngdoc module\n * @name material.components.radioButton\n * @description radioButton module!\n */\nangular.module('material.components.radioButton', [\n  'material.core'\n])\n  .directive('mdRadioGroup', mdRadioGroupDirective)\n  .directive('mdRadioButton', mdRadioButtonDirective);\n\n/**\n * @ngdoc directive\n * @module material.components.radioButton\n * @name mdRadioGroup\n *\n * @restrict E\n *\n * @description\n * The `<md-radio-group>` directive identifies a grouping\n * container for the 1..n grouped radio buttons; specified using nested\n * `<md-radio-button>` tags.\n *\n * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)\n * the radio button is in the accent color by default. The primary color palette may be used with\n * the `md-primary` class.\n *\n * Note: `<md-radio-group>` and `<md-radio-button>` handle tabindex differently\n * than the native `<input type='radio'>` controls. Whereas the native controls\n * force the user to tab through all the radio buttons, `<md-radio-group>`\n * is focusable, and by default the `<md-radio-button>`s are not.\n *\n * @param {string} ng-model Assignable angular expression to data-bind to.\n * @param {boolean=} md-no-ink Use of attribute indicates flag to disable ink ripple effects.\n *\n * @usage\n * <hljs lang=\"html\">\n * <md-radio-group ng-model=\"selected\">\n *\n *   <md-radio-button\n *        ng-repeat=\"d in colorOptions\"\n *        ng-value=\"d.value\" aria-label=\"{{ d.label }}\">\n *\n *          {{ d.label }}\n *\n *   </md-radio-button>\n *\n * </md-radio-group>\n * </hljs>\n *\n */\nfunction mdRadioGroupDirective($mdUtil, $mdConstant, $mdTheming) {\n  RadioGroupController.prototype = createRadioGroupControllerProto();\n\n  return {\n    restrict: 'E',\n    controller: ['$element', RadioGroupController],\n    require: ['mdRadioGroup', '?ngModel'],\n    link: { pre: linkRadioGroup }\n  };\n\n  function linkRadioGroup(scope, element, attr, ctrls) {\n    $mdTheming(element);\n    var rgCtrl = ctrls[0];\n    var ngModelCtrl = ctrls[1] || $mdUtil.fakeNgModel();\n\n    function keydownListener(ev) {\n      switch(ev.keyCode) {\n        case $mdConstant.KEY_CODE.LEFT_ARROW:\n        case $mdConstant.KEY_CODE.UP_ARROW:\n          ev.preventDefault();\n          rgCtrl.selectPrevious();\n          break;\n\n        case $mdConstant.KEY_CODE.RIGHT_ARROW:\n        case $mdConstant.KEY_CODE.DOWN_ARROW:\n          ev.preventDefault();\n          rgCtrl.selectNext();\n          break;\n\n        case $mdConstant.KEY_CODE.ENTER:\n          var form = angular.element($mdUtil.getClosest(element[0], 'form'));\n          if (form.length > 0) {\n            form.triggerHandler('submit');\n          }\n          break;\n      }\n    }\n\n    rgCtrl.init(ngModelCtrl);\n\n    element.attr({\n              'role': 'radiogroup',\n              'tabIndex': element.attr('tabindex') || '0'\n            })\n            .on('keydown', keydownListener);\n\n  }\n\n  function RadioGroupController($element) {\n    this._radioButtonRenderFns = [];\n    this.$element = $element;\n  }\n\n  function createRadioGroupControllerProto() {\n    return {\n      init: function(ngModelCtrl) {\n        this._ngModelCtrl = ngModelCtrl;\n        this._ngModelCtrl.$render = angular.bind(this, this.render);\n      },\n      add: function(rbRender) {\n        this._radioButtonRenderFns.push(rbRender);\n      },\n      remove: function(rbRender) {\n        var index = this._radioButtonRenderFns.indexOf(rbRender);\n        if (index !== -1) {\n          this._radioButtonRenderFns.splice(index, 1);\n        }\n      },\n      render: function() {\n        this._radioButtonRenderFns.forEach(function(rbRender) {\n          rbRender();\n        });\n      },\n      setViewValue: function(value, eventType) {\n        this._ngModelCtrl.$setViewValue(value, eventType);\n        // update the other radio buttons as well\n        this.render();\n      },\n      getViewValue: function() {\n        return this._ngModelCtrl.$viewValue;\n      },\n      selectNext: function() {\n        return changeSelectedButton(this.$element, 1);\n      },\n      selectPrevious: function() {\n        return changeSelectedButton(this.$element, -1);\n      },\n      setActiveDescendant: function (radioId) {\n        this.$element.attr('aria-activedescendant', radioId);\n      }\n    };\n  }\n  /**\n   * Change the radio group's selected button by a given increment.\n   * If no button is selected, select the first button.\n   */\n  function changeSelectedButton(parent, increment) {\n    // Coerce all child radio buttons into an array, then wrap then in an iterator\n    var buttons = $mdUtil.iterator(parent[0].querySelectorAll('md-radio-button'), true);\n\n    if (buttons.count()) {\n      var validate = function (button) {\n        // If disabled, then NOT valid\n        return !angular.element(button).attr(\"disabled\");\n      };\n      var selected = parent[0].querySelector('md-radio-button.md-checked');\n      var target = buttons[increment < 0 ? 'previous' : 'next'](selected, validate) || buttons.first();\n      // Activate radioButton's click listener (triggerHandler won't create a real click event)\n      angular.element(target).triggerHandler('click');\n\n\n    }\n  }\n\n}\nmdRadioGroupDirective.$inject = [\"$mdUtil\", \"$mdConstant\", \"$mdTheming\"];\n\n/**\n * @ngdoc directive\n * @module material.components.radioButton\n * @name mdRadioButton\n *\n * @restrict E\n *\n * @description\n * The `<md-radio-button>`directive is the child directive required to be used within `<md-radio-group>` elements.\n *\n * While similar to the `<input type=\"radio\" ng-model=\"\" value=\"\">` directive,\n * the `<md-radio-button>` directive provides ink effects, ARIA support, and\n * supports use within named radio groups.\n *\n * @param {string} ngModel Assignable angular expression to data-bind to.\n * @param {string=} ngChange Angular expression to be executed when input changes due to user\n *    interaction with the input element.\n * @param {string} ngValue Angular expression which sets the value to which the expression should\n *    be set when selected.*\n * @param {string} value The value to which the expression should be set when selected.\n * @param {string=} name Property name of the form under which the control is published.\n * @param {string=} aria-label Adds label to radio button for accessibility.\n * Defaults to radio button's text. If no text content is available, a warning will be logged.\n *\n * @usage\n * <hljs lang=\"html\">\n *\n * <md-radio-button value=\"1\" aria-label=\"Label 1\">\n *   Label 1\n * </md-radio-button>\n *\n * <md-radio-button ng-model=\"color\" ng-value=\"specialValue\" aria-label=\"Green\">\n *   Green\n * </md-radio-button>\n *\n * </hljs>\n *\n */\nfunction mdRadioButtonDirective($mdAria, $mdUtil, $mdTheming) {\n\n  var CHECKED_CSS = 'md-checked';\n\n  return {\n    restrict: 'E',\n    require: '^mdRadioGroup',\n    transclude: true,\n    template: '<div class=\"md-container\" md-ink-ripple md-ink-ripple-checkbox>' +\n                '<div class=\"md-off\"></div>' +\n                '<div class=\"md-on\"></div>' +\n              '</div>' +\n              '<div ng-transclude class=\"md-label\"></div>',\n    link: link\n  };\n\n  function link(scope, element, attr, rgCtrl) {\n    var lastChecked;\n\n    $mdTheming(element);\n    configureAria(element, scope);\n\n    rgCtrl.add(render);\n    attr.$observe('value', render);\n\n    element\n      .on('click', listener)\n      .on('$destroy', function() {\n        rgCtrl.remove(render);\n      });\n\n    function listener(ev) {\n      if (element[0].hasAttribute('disabled')) return;\n\n      scope.$apply(function() {\n        rgCtrl.setViewValue(attr.value, ev && ev.type);\n      });\n    }\n\n    function render() {\n      var checked = (rgCtrl.getViewValue() == attr.value);\n      if (checked === lastChecked) {\n        return;\n      }\n      lastChecked = checked;\n      element.attr('aria-checked', checked);\n      if (checked) {\n        element.addClass(CHECKED_CSS);\n        rgCtrl.setActiveDescendant(element.attr('id'));\n      } else {\n        element.removeClass(CHECKED_CSS);\n      }\n    }\n    /**\n     * Inject ARIA-specific attributes appropriate for each radio button\n     */\n    function configureAria( element, scope ){\n      scope.ariaId = buildAriaID();\n\n      element.attr({\n        'id' :  scope.ariaId,\n        'role' : 'radio',\n        'aria-checked' : 'false'\n      });\n\n      $mdAria.expectWithText(element, 'aria-label');\n\n      /**\n       * Build a unique ID for each radio button that will be used with aria-activedescendant.\n       * Preserve existing ID if already specified.\n       * @returns {*|string}\n       */\n      function buildAriaID() {\n        return attr.id || ( 'radio' + \"_\" + $mdUtil.nextUid() );\n      }\n    }\n  }\n}\nmdRadioButtonDirective.$inject = [\"$mdAria\", \"$mdUtil\", \"$mdTheming\"];\n\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n/**\n * @ngdoc module\n * @name material.components.select\n */\n\n/***************************************************\n\n### TODO ###\n**DOCUMENTATION AND DEMOS**\n\n- [ ] ng-model with child mdOptions (basic)\n- [ ] ng-model=\"foo\" ng-model-options=\"{ trackBy: '$value.id' }\" for objects\n- [ ] mdOption with value\n- [ ] Usage with input inside\n- [ ] Usage with md-multiple\n\n### TODO - POST RC1 ###\n- [ ] Abstract placement logic in $mdSelect service to $mdMenu service\n\n***************************************************/\n\nvar SELECT_EDGE_MARGIN = 8;\nvar selectNextId = 0;\n\nangular.module('material.components.select', [\n  'material.core',\n  'material.components.backdrop'\n])\n.directive('mdSelect', SelectDirective)\n.directive('mdSelectMenu', SelectMenuDirective)\n.directive('mdOption', OptionDirective)\n.directive('mdOptgroup', OptgroupDirective)\n.provider('$mdSelect', SelectProvider);\n\n\n/**\n * @ngdoc directive\n * @name mdSelect\n * @restrict E\n * @module material.components.select\n *\n * @description Displays a select box, bound to an ng-model.\n *\n * @param {expression} ng-model The model!\n * @param {boolean=} multiple Whether it's multiple.\n * @param {string=} placeholder Placeholder hint text.\n *\n * @usage\n * With a placeholder (label is added dynamically)\n * <hljs lang=\"html\">\n *   <md-select\n *     ng-model=\"someModel\"\n *     placeholder=\"Select a state\">\n *     <md-option ng-value=\"opt\" ng-repeat=\"opt in neighborhoods2\">{{ opt }}</md-option>\n *   </md-select>\n * </hljs>\n *\n * With an explicit label\n * <hljs lang=\"html\">\n *   <md-select\n *     ng-model=\"someModel\">\n *     <md-select-label>Select a state</md-select-label>\n *     <md-option ng-value=\"opt\" ng-repeat=\"opt in neighborhoods2\">{{ opt }}</md-option>\n *   </md-select>\n * </hljs>\n */\nfunction SelectDirective($mdSelect, $mdUtil, $mdTheming, $interpolate, $compile, $parse) {\n  var intStart = $interpolate.startSymbol();\n  var intEnd = $interpolate.endSymbol();\n\n  return {\n    restrict: 'E',\n    require: ['mdSelect', 'ngModel'],\n    compile: compile,\n    controller: function() { } // empty placeholder controller to be initialized in link\n  };\n\n  function compile(element, attr) {\n    // The user is allowed to provide a label for the select as md-select-label child\n    var labelEl = element.find('md-select-label').remove();\n\n    // If not provided, we automatically make one\n    if (!labelEl.length) {\n      labelEl = angular.element('<md-select-label><span></span></md-select-label>');\n    }\n    labelEl.append('<span class=\"md-select-icon\" aria-hidden=\"true\"></span>');\n    labelEl.addClass('md-select-label');\n    labelEl.attr('id', 'select_label_' + $mdUtil.nextUid());\n\n    // There's got to be an md-content inside. If there's not one, let's add it.\n    if (!element.find('md-content').length) {\n      element.append( angular.element('<md-content>').append(element.contents()) );\n    }\n\n    // Add progress spinner for md-options-loading\n    if (attr.mdOnOpen) {\n      element.find('md-content').prepend(\n        angular.element('<md-progress-circular>')\n               .attr('md-mode', 'indeterminate')\n               .attr('ng-hide', '$$loadingAsyncDone')\n               .wrap('<div>')\n               .parent()\n      );\n    }\n\n    // Use everything that's left inside element.contents() as the contents of the menu\n    var selectTemplate = '<div class=\"md-select-menu-container\">' +\n        '<md-select-menu ' +\n        (angular.isDefined(attr.multiple) ? 'multiple' : '') + '>' +\n          element.html() +\n        '</md-select-menu></div>';\n\n    element.empty().append(labelEl);\n\n    $mdTheming(element);\n\n    return function postLink(scope, element, attr, ctrls) {\n      var isOpen;\n\n      var mdSelectCtrl = ctrls[0];\n      var ngModel = ctrls[1];\n      var labelEl = element.find('md-select-label');\n      var customLabel = labelEl.text().length !== 0;\n      var selectContainer, selectScope;\n      createSelect();\n\n      var originalRender = ngModel.$render;\n\n      ngModel.$render = function() {\n        originalRender();\n        syncLabelText();\n      };\n\n      mdSelectCtrl.setLabelText = function(text) {\n        if (customLabel) return; // Assume that user is handling it on their own\n        mdSelectCtrl.setIsPlaceholder(!text);\n        var newText = text || attr.placeholder || '';\n        var target = customLabel ? labelEl : labelEl.children().eq(0);\n        target.text(newText);\n      };\n\n      mdSelectCtrl.setIsPlaceholder = function(val) {\n        val ? labelEl.addClass('md-placeholder') : labelEl.removeClass('md-placeholder');\n      };\n\n      scope.$$postDigest(syncLabelText);\n\n      function syncLabelText() {\n        if (selectContainer) {\n          var selectMenuCtrl = selectContainer.find('md-select-menu').controller('mdSelectMenu');\n          mdSelectCtrl.setLabelText(selectMenuCtrl.selectedLabels());\n        }\n      }\n\n      attr.$observe('disabled', function(disabled) {\n        if (typeof disabled == \"string\") {\n          disabled = true;\n        }\n        if (disabled) {\n          element.attr('tabindex', -1);\n          element.off('click', openSelect);\n          element.off('keydown', openOnKeypress);\n        } else {\n          element.attr('tabindex', 0);\n          element.on('click', openSelect);\n          element.on('keydown', openOnKeypress);\n        }\n      });\n      if (!attr.disabled && !attr.ngDisabled) {\n        element.attr('tabindex', 0);\n        element.on('click', openSelect);\n        element.on('keydown', openOnKeypress);\n      }\n\n      element.attr({\n        'role': 'combobox',\n        'id': 'select_' + $mdUtil.nextUid(),\n        'aria-haspopup': true,\n        'aria-expanded': 'false',\n        'aria-labelledby': labelEl.attr('id')\n      });\n\n      scope.$on('$destroy', function() {\n        if (isOpen) {\n          $mdSelect.cancel().then(function() {\n            selectContainer.remove();\n          });\n        } else {\n          selectContainer.remove();\n        }\n      });\n\n\n      // Create a fake select to find out the label value\n      function createSelect() {\n        selectContainer = angular.element(selectTemplate);\n        var selectEl = selectContainer.find('md-select-menu');\n        selectEl.data('$ngModelController', ngModel);\n        selectEl.data('$mdSelectController', mdSelectCtrl);\n        selectScope = scope.$new();\n        selectContainer = $compile(selectContainer)(selectScope);\n      }\n\n      function openOnKeypress(e) {\n        var allowedCodes = [32, 13, 38, 40];\n        if (allowedCodes.indexOf(e.keyCode) != -1 ) {\n          // prevent page scrolling on interaction\n          e.preventDefault();\n          openSelect(e);\n        }\n      }\n\n      function openSelect() {\n        scope.$evalAsync(function() {\n          isOpen = true;\n          $mdSelect.show({\n            scope: selectScope,\n            preserveScope: true,\n            skipCompile: true,\n            element: selectContainer,\n            target: element[0],\n            hasBackdrop: true,\n            loadingAsync: attr.mdOnOpen ? scope.$eval(attr.mdOnOpen) : false,\n          }).then(function(selectedText) {\n            isOpen = false;\n          });\n        });\n      }\n    };\n  }\n}\nSelectDirective.$inject = [\"$mdSelect\", \"$mdUtil\", \"$mdTheming\", \"$interpolate\", \"$compile\", \"$parse\"];\n\nfunction SelectMenuDirective($parse, $mdUtil, $mdTheming) {\n\n  SelectMenuController.$inject = [\"$scope\", \"$attrs\", \"$element\"];\n  return {\n    restrict: 'E',\n    require: ['mdSelectMenu', '?ngModel'],\n    controller: SelectMenuController,\n    link: { pre: preLink }\n  };\n\n  // We use preLink instead of postLink to ensure that the select is initialized before\n  // its child options run postLink.\n  function preLink(scope, element, attr, ctrls) {\n    var selectCtrl = ctrls[0];\n    var ngModel = ctrls[1];\n\n    $mdTheming(element);\n    element.on('click', clickListener);\n    element.on('keypress', keyListener);\n    if (ngModel) selectCtrl.init(ngModel);\n    configureAria();\n\n    function configureAria() {\n      element.attr({\n        'id': 'select_menu_' + $mdUtil.nextUid(),\n        'role': 'listbox',\n        'aria-multiselectable': (selectCtrl.isMultiple ? 'true' : 'false')\n      });\n    }\n\n    function keyListener(e) {\n      if (e.keyCode == 13 || e.keyCode == 32) {\n        clickListener(e);\n      }\n    }\n\n    function clickListener(ev) {\n      var option = $mdUtil.getClosest(ev.target, 'md-option');\n      var optionCtrl = option && angular.element(option).data('$mdOptionController');\n      if (!option || !optionCtrl) return;\n\n      var optionHashKey = selectCtrl.hashGetter(optionCtrl.value);\n      var isSelected = angular.isDefined(selectCtrl.selected[optionHashKey]);\n\n      scope.$apply(function() {\n        if (selectCtrl.isMultiple) {\n          if (isSelected) {\n            selectCtrl.deselect(optionHashKey);\n          } else {\n            selectCtrl.select(optionHashKey, optionCtrl.value);\n          }\n        } else {\n          if (!isSelected) {\n            selectCtrl.deselect( Object.keys(selectCtrl.selected)[0] );\n            selectCtrl.select( optionHashKey, optionCtrl.value );\n          }\n        }\n        selectCtrl.refreshViewValue();\n      });\n    }\n  }\n\n\n\n  function SelectMenuController($scope, $attrs, $element) {\n    var self = this;\n    self.isMultiple = angular.isDefined($attrs.multiple);\n    // selected is an object with keys matching all of the selected options' hashed values\n    self.selected = {};\n    // options is an object with keys matching every option's hash value,\n    // and values matching every option's controller.\n    self.options = {};\n\n\n    self.init = function(ngModel) {\n      self.ngModel = ngModel;\n\n      // Allow users to provide `ng-model=\"foo\" ng-model-options=\"{trackBy: 'foo.id'}\"` so\n      // that we can properly compare objects set on the model to the available options\n      if (ngModel.$options && ngModel.$options.trackBy) {\n        var trackByLocals = {};\n        var trackByParsed = $parse(ngModel.$options.trackBy);\n        self.hashGetter = function(value, valueScope) {\n          trackByLocals.$value = value;\n          return trackByParsed(valueScope || $scope, trackByLocals);\n        };\n      // If the user doesn't provide a trackBy, we automatically generate an id for every\n      // value passed in\n      } else {\n        self.hashGetter = function getHashValue(value) {\n          if (angular.isObject(value)) {\n            return '$$object_' + (value.$$mdSelectId || (value.$$mdSelectId = ++selectNextId));\n          }\n          return value;\n        };\n      }\n\n      if (self.isMultiple) {\n        ngModel.$validators['md-multiple'] = validateArray;\n        ngModel.$render = renderMultiple;\n\n        // watchCollection on the model because by default ngModel only watches the model's\n        // reference. This allowed the developer to also push and pop from their array.\n        $scope.$watchCollection($attrs.ngModel, function(value) {\n          if (validateArray(value)) renderMultiple(value);\n        });\n      } else {\n        ngModel.$render = renderSingular;\n      }\n\n      function validateArray(modelValue, viewValue) {\n        // If a value is truthy but not an array, reject it.\n        // If value is undefined/falsy, accept that it's an empty array.\n        return angular.isArray(modelValue || viewValue || []);\n      }\n    };\n\n    self.selectedLabels = function() {\n      var selectedOptionEls = nodesToArray($element[0].querySelectorAll('md-option[selected]'));\n      if (selectedOptionEls.length) {\n        return selectedOptionEls.map(function(el) { return el.textContent; }).join(', ');\n      } else {\n        return '';\n      }\n    };\n\n    self.select = function(hashKey, hashedValue) {\n      var option = self.options[hashKey];\n      option && option.setSelected(true);\n      self.selected[hashKey] = hashedValue;\n    };\n    self.deselect = function(hashKey) {\n      var option = self.options[hashKey];\n      option && option.setSelected(false);\n      delete self.selected[hashKey];\n    };\n\n    self.addOption = function(hashKey, optionCtrl) {\n      if (angular.isDefined(self.options[hashKey])) {\n        throw new Error('Duplicate md-option values are not allowed in a select. ' +\n                        'Duplicate value \"' + optionCtrl.value + '\" found.');\n      }\n      self.options[hashKey] = optionCtrl;\n\n      // If this option's value was already in our ngModel, go ahead and select it.\n      if (angular.isDefined(self.selected[hashKey])) {\n        self.select(hashKey, optionCtrl.value);\n        self.refreshViewValue();\n      }\n    };\n    self.removeOption = function(hashKey) {\n      delete self.options[hashKey];\n      // Don't deselect an option when it's removed - the user's ngModel should be allowed\n      // to have values that do not match a currently available option.\n    };\n\n    self.refreshViewValue = function() {\n      var values = [];\n      var option;\n      for (var hashKey in self.selected) {\n         // If this hashKey has an associated option, push that option's value to the model.\n         if ((option = self.options[hashKey])) {\n           values.push(option.value);\n         } else {\n           // Otherwise, the given hashKey has no associated option, and we got it\n           // from an ngModel value at an earlier time. Push the unhashed value of\n           // this hashKey to the model.\n           // This allows the developer to put a value in the model that doesn't yet have\n           // an associated option.\n           values.push(self.selected[hashKey]);\n         }\n      }\n      self.ngModel.$setViewValue(self.isMultiple ? values : values[0]);\n    };\n\n    function renderMultiple() {\n      var newSelectedValues = self.ngModel.$modelValue || self.ngModel.$viewValue;\n      if (!angular.isArray(newSelectedValues)) return;\n\n      var oldSelected = Object.keys(self.selected);\n\n      var newSelectedHashes = newSelectedValues.map(self.hashGetter);\n      var deselected = oldSelected.filter(function(hash) {\n        return newSelectedHashes.indexOf(hash) === -1;\n      });\n\n      deselected.forEach(self.deselect);\n      newSelectedHashes.forEach(function(hashKey, i) {\n        self.select(hashKey, newSelectedValues[i]);\n      });\n    }\n    function renderSingular() {\n      var value = self.ngModel.$viewValue || self.ngModel.$modelValue;\n      Object.keys(self.selected).forEach(self.deselect);\n      self.select( self.hashGetter(value), value );\n    }\n  }\n\n}\nSelectMenuDirective.$inject = [\"$parse\", \"$mdUtil\", \"$mdTheming\"];\n\nfunction OptionDirective($mdInkRipple, $mdUtil) {\n\n  OptionController.$inject = [\"$element\"];\n  return {\n    restrict: 'E',\n    require: ['mdOption', '^^mdSelectMenu'],\n    controller: OptionController,\n    compile: compile\n  };\n\n  function compile(element, attr) {\n    // Manual transclusion to avoid the extra inner <span> that ng-transclude generates\n    element.append( angular.element('<div class=\"md-text\">').append(element.contents()) );\n    if (attr.tabindex === undefined) element.attr('tabindex', 0);\n    return postLink;\n  }\n\n  function postLink(scope, element, attr, ctrls) {\n    var optionCtrl = ctrls[0];\n    var selectCtrl = ctrls[1];\n\n    if (angular.isDefined(attr.ngValue)) {\n      scope.$watch(attr.ngValue, setOptionValue);\n    } else if (angular.isDefined(attr.value)) {\n      setOptionValue(attr.value);\n    } else {\n      throw new Error(\"Expected either ngValue or value attr\");\n    }\n\n    attr.$observe('selected', function(selected) {\n      if (!angular.isDefined(selected)) return;\n      if (selected) {\n        if (!selectCtrl.isMultiple) {\n          selectCtrl.deselect( Object.keys(selectCtrl.selected)[0] );\n        }\n        selectCtrl.select(optionCtrl.hashKey, optionCtrl.value);\n      } else {\n        selectCtrl.deselect(optionCtrl.hashKey);\n      }\n      selectCtrl.refreshViewValue();\n      selectCtrl.ngModel.$render();\n    });\n\n    $mdInkRipple.attachButtonBehavior(scope, element);\n    configureAria();\n\n    function setOptionValue(newValue, oldValue) {\n      var oldHashKey = selectCtrl.hashGetter(oldValue, scope);\n      var newHashKey = selectCtrl.hashGetter(newValue, scope);\n\n      optionCtrl.hashKey = newHashKey;\n      optionCtrl.value = newValue;\n\n      selectCtrl.removeOption(oldHashKey, optionCtrl);\n      selectCtrl.addOption(newHashKey, optionCtrl);\n    }\n\n    scope.$on('$destroy', function() {\n      selectCtrl.removeOption(optionCtrl.hashKey, optionCtrl);\n    });\n\n    function configureAria() {\n      element.attr({\n        'role': 'option',\n        'aria-selected': 'false',\n        'id': 'select_option_'+ $mdUtil.nextUid()\n      });\n    }\n  }\n\n  function OptionController($element) {\n    this.selected = false;\n    this.setSelected = function(isSelected) {\n      if (isSelected && !this.selected) {\n        $element.attr({\n          'selected': 'selected',\n          'aria-selected': 'true'\n        });\n      } else if (!isSelected && this.selected) {\n        $element.removeAttr('selected');\n        $element.attr('aria-selected', 'false');\n      }\n      this.selected = isSelected;\n    };\n  }\n\n}\nOptionDirective.$inject = [\"$mdInkRipple\", \"$mdUtil\"];\n\nfunction OptgroupDirective() {\n  return {\n    restrict: 'E',\n    compile: compile\n  };\n  function compile(el, attrs) {\n    var labelElement = el.find('label');\n    if (!labelElement.length) {\n      labelElement = angular.element('<label>');\n      el.prepend(labelElement);\n    }\n    if (attrs.label) labelElement.text(attrs.label);\n  }\n}\n\nfunction SelectProvider($$interimElementProvider) {\n  selectDefaultOptions.$inject = [\"$mdSelect\", \"$mdConstant\", \"$$rAF\", \"$mdUtil\", \"$mdTheming\", \"$timeout\"];\n  return $$interimElementProvider('$mdSelect')\n    .setDefaults({\n      methods: ['target'],\n      options: selectDefaultOptions\n    });\n\n  /* @ngInject */\n  function selectDefaultOptions($mdSelect, $mdConstant, $$rAF, $mdUtil, $mdTheming, $timeout) {\n    return {\n      parent: 'body',\n      onShow: onShow,\n      onRemove: onRemove,\n      hasBackdrop: true,\n      disableParentScroll: $mdUtil.floatingScrollbars(),\n      themable: true\n    };\n\n    function onShow(scope, element, opts) {\n      if (!opts.target) {\n        throw new Error('$mdSelect.show() expected a target element in options.target but got ' +\n                        '\"' + opts.target + '\"!');\n      }\n\n      angular.extend(opts, {\n        isRemoved: false,\n        target: angular.element(opts.target), //make sure it's not a naked dom node\n        parent: angular.element(opts.parent),\n        selectEl: element.find('md-select-menu'),\n        contentEl: element.find('md-content'),\n        backdrop: opts.hasBackdrop && angular.element('<md-backdrop class=\"md-select-backdrop\">')\n      });\n\n      configureAria();\n\n      element.removeClass('md-leave');\n\n      var optionNodes = opts.selectEl[0].getElementsByTagName('md-option');\n\n      if (opts.loadingAsync && opts.loadingAsync.then) {\n        opts.loadingAsync.then(function() {\n          scope.$$loadingAsyncDone = true;\n          // Give ourselves two frames for the progress loader to clear out.\n          $$rAF(function() {\n            $$rAF(function() {\n              // Don't go forward if the select has been removed in this time...\n              if (opts.isRemoved) return;\n              animateSelect(scope, element, opts);\n            });\n          });\n        });\n      }\n\n      if (opts.disableParentScroll) {\n        opts.disableTarget = opts.parent.find('md-content');\n        if (!opts.disableTarget.length) opts.disableTarget = opts.parent;\n        opts.lastOverflow = opts.disableTarget.css('overflow');\n        opts.disableTarget.css('overflow', 'hidden');\n      }\n      // Only activate click listeners after a short time to stop accidental double taps/clicks\n      // from clicking the wrong item\n      $timeout(activateInteraction, 75, false);\n\n      if (opts.backdrop) {\n        $mdTheming.inherit(opts.backdrop, opts.parent);\n        opts.parent.append(opts.backdrop);\n      }\n      opts.parent.append(element);\n\n      // Give the select a frame to 'initialize' in the DOM,\n      // so we can read its height/width/position\n      $$rAF(function() {\n        $$rAF(function() {\n          if (opts.isRemoved) return;\n          animateSelect(scope, element, opts);\n        });\n      });\n\n      return $mdUtil.transitionEndPromise(opts.selectEl, {timeout: 350});\n\n      function configureAria() {\n        opts.selectEl.attr('aria-labelledby', opts.target.attr('id'));\n        opts.target.attr('aria-owns', opts.selectEl.attr('id'));\n        opts.target.attr('aria-expanded', 'true');\n      }\n\n      function activateInteraction() {\n        if (opts.isRemoved) return;\n        var selectCtrl = opts.selectEl.controller('mdSelectMenu') || {};\n        element.addClass('md-clickable');\n\n        opts.backdrop && opts.backdrop.on('click', function(e) {\n          e.preventDefault();\n          e.stopPropagation();\n          opts.restoreFocus = false;\n          scope.$apply($mdSelect.cancel);\n        });\n\n        // Escape to close\n        opts.selectEl.on('keydown', function(ev) {\n          switch (ev.keyCode) {\n            case $mdConstant.KEY_CODE.SPACE:\n            case $mdConstant.KEY_CODE.ENTER:\n              var option = $mdUtil.getClosest(ev.target, 'md-option');\n              if (option) {\n                opts.selectEl.triggerHandler({\n                  type: 'click',\n                  target: option\n                });\n                ev.preventDefault();\n              }\n              break;\n            case $mdConstant.KEY_CODE.TAB:\n            case $mdConstant.KEY_CODE.ESCAPE:\n              ev.preventDefault();\n              opts.restoreFocus = true;\n              scope.$apply($mdSelect.cancel);\n          }\n        });\n\n        // Cycling of options, and closing on enter\n        opts.selectEl.on('keydown', function(ev) {\n          switch (ev.keyCode) {\n            case $mdConstant.KEY_CODE.UP_ARROW: return focusPrevOption();\n            case $mdConstant.KEY_CODE.DOWN_ARROW: return focusNextOption();\n          }\n        });\n\n        function focusOption(direction) {\n          var optionsArray = nodesToArray(optionNodes);\n          var index = optionsArray.indexOf(opts.focusedNode);\n          if (index === -1) {\n            // We lost the previously focused element, reset to first option\n            index = 0;\n          } else if (direction === 'next' && index < optionsArray.length - 1) {\n            index++;\n          } else if (direction === 'prev' && index > 0) {\n            index--;\n          }\n          var newOption = opts.focusedNode = optionsArray[index];\n          newOption && newOption.focus();\n        }\n        function focusNextOption() {\n          focusOption('next');\n        }\n        function focusPrevOption() {\n          focusOption('prev');\n        }\n\n        if (!selectCtrl.isMultiple) {\n          opts.selectEl.on('click', closeMenu);\n          opts.selectEl.on('keydown', function(e) {\n            if (e.keyCode == 32 || e.keyCode == 13) {\n              closeMenu();\n            }\n          });\n        }\n        function closeMenu() {\n          opts.restoreFocus = true;\n          scope.$evalAsync(function() {\n            $mdSelect.hide(selectCtrl.ngModel.$viewValue);\n          });\n        }\n      }\n\n    }\n\n    function onRemove(scope, element, opts) {\n      opts.isRemoved = true;\n      element.addClass('md-leave')\n        .removeClass('md-clickable');\n      opts.target.attr('aria-expanded', 'false');\n\n      if (opts.disableParentScroll && $mdUtil.floatingScrollbars()) {\n        opts.disableTarget.css('overflow', opts.lastOverflow);\n        delete opts.lastOverflow;\n        delete opts.disableTarget;\n      }\n\n      var mdSelect = opts.selectEl.controller('mdSelect');\n      if (mdSelect) {\n        mdSelect.setLabelText(opts.selectEl.controller('mdSelectMenu').selectedLabels());\n      }\n\n      return $mdUtil.transitionEndPromise(element, { timeout: 350 }).then(function() {\n        element.removeClass('md-active');\n        opts.parent[0].removeChild(element[0]); // use browser to avoid $destroy event\n        opts.backdrop && opts.backdrop.remove();\n        if (opts.restoreFocus) opts.target.focus();\n      });\n    }\n\n    function animateSelect(scope, element, opts) {\n      var containerNode = element[0],\n          targetNode = opts.target[0],\n          parentNode = opts.parent[0],\n          selectNode = opts.selectEl[0],\n          contentNode = opts.contentEl[0],\n          parentRect = parentNode.getBoundingClientRect(),\n          targetRect = $mdUtil.clientRect(targetNode, parentNode),\n          shouldOpenAroundTarget = false,\n          bounds = {\n            left: parentNode.scrollLeft + SELECT_EDGE_MARGIN,\n            top: parentNode.scrollTop + SELECT_EDGE_MARGIN,\n            bottom: parentRect.height + parentNode.scrollTop - SELECT_EDGE_MARGIN,\n            right: parentRect.width - SELECT_EDGE_MARGIN\n          },\n          spaceAvailable = {\n            top: targetRect.top - bounds.top,\n            left: targetRect.left - bounds.left,\n            right: bounds.right - (targetRect.left + targetRect.width),\n            bottom: bounds.bottom - (targetRect.top + targetRect.height)\n          },\n          maxWidth = parentRect.width - SELECT_EDGE_MARGIN * 2,\n          isScrollable = contentNode.scrollHeight > contentNode.offsetHeight,\n          selectedNode = selectNode.querySelector('md-option[selected]'),\n          optionNodes = selectNode.getElementsByTagName('md-option'),\n          optgroupNodes = selectNode.getElementsByTagName('md-optgroup');\n\n\n      var centeredNode;\n      // If a selected node, center around that\n      if (selectedNode) {\n        centeredNode = selectedNode;\n      // If there are option groups, center around the first option group\n      } else if (optgroupNodes.length) {\n        centeredNode = optgroupNodes[0];\n      // Otherwise, center around the first optionNode\n      } else if (optionNodes.length){\n        centeredNode = optionNodes[0];\n      // In case there are no options, center on whatever's in there... (eg progress indicator)\n      } else {\n        centeredNode = contentNode.firstElementChild || contentNode;\n      }\n\n      if (contentNode.offsetWidth > maxWidth) {\n        contentNode.style['max-width'] = maxWidth + 'px';\n      }\n      if (shouldOpenAroundTarget) {\n        contentNode.style['min-width'] = targetRect.width + 'px';\n      }\n\n      // Remove padding before we compute the position of the menu\n      if (isScrollable) {\n        selectNode.classList.add('md-overflow');\n      }\n\n      // Get the selectMenuRect *after* max-width is possibly set above\n      var selectMenuRect = selectNode.getBoundingClientRect();\n      var centeredRect = getOffsetRect(centeredNode);\n\n      if (centeredNode) {\n        var centeredStyle = window.getComputedStyle(centeredNode);\n        centeredRect.paddingLeft = parseInt(centeredStyle.paddingLeft, 10) || 0;\n        centeredRect.paddingRight = parseInt(centeredStyle.paddingRight, 10) || 0;\n      }\n\n      var focusedNode = centeredNode;\n      if ((focusedNode.tagName || '').toUpperCase() === 'MD-OPTGROUP') {\n        focusedNode = optionNodes[0] || contentNode.firstElementChild || contentNode;\n      }\n      if (focusedNode) {\n        opts.focusedNode = focusedNode;\n        focusedNode.focus();\n      }\n\n      if (isScrollable) {\n        var scrollBuffer = contentNode.offsetHeight / 2;\n        contentNode.scrollTop = centeredRect.top + centeredRect.height / 2 - scrollBuffer;\n\n        if (spaceAvailable.top < scrollBuffer) {\n          contentNode.scrollTop = Math.min(\n            centeredRect.top,\n            contentNode.scrollTop + scrollBuffer - spaceAvailable.top\n          );\n        } else if (spaceAvailable.bottom < scrollBuffer) {\n          contentNode.scrollTop = Math.max(\n            centeredRect.top + centeredRect.height - selectMenuRect.height,\n            contentNode.scrollTop - scrollBuffer + spaceAvailable.bottom\n          );\n        }\n      }\n\n      var left, top, transformOrigin;\n      if (shouldOpenAroundTarget) {\n        left = targetRect.left;\n        top = targetRect.top + targetRect.height;\n        transformOrigin = '50% 0';\n        if (top + selectMenuRect.height > bounds.bottom) {\n          top = targetRect.top - selectMenuRect.height;\n          transformOrigin = '50% 100%';\n        }\n      } else {\n        left = targetRect.left + centeredRect.left - centeredRect.paddingLeft;\n        top = targetRect.top + targetRect.height / 2 - centeredRect.height / 2 -\n          centeredRect.top + contentNode.scrollTop;\n\n        transformOrigin = (centeredRect.left + targetRect.width / 2) + 'px ' +\n        (centeredRect.top + centeredRect.height / 2 - contentNode.scrollTop) + 'px 0px';\n\n        containerNode.style.minWidth = targetRect.width + centeredRect.paddingLeft +\n          centeredRect.paddingRight + 'px';\n      }\n\n      // Keep left and top within the window\n      var containerRect = containerNode.getBoundingClientRect();\n      containerNode.style.left = clamp(bounds.left, left, bounds.right - containerRect.width) + 'px';\n      containerNode.style.top = clamp(bounds.top, top, bounds.bottom - containerRect.height) + 'px';\n      selectNode.style[$mdConstant.CSS.TRANSFORM_ORIGIN] = transformOrigin;\n\n      selectNode.style[$mdConstant.CSS.TRANSFORM] = 'scale(' +\n        Math.min(targetRect.width / selectMenuRect.width, 1.0) + ',' +\n        Math.min(targetRect.height / selectMenuRect.height, 1.0) +\n      ')';\n\n      $$rAF(function() {\n        element.addClass('md-active');\n        selectNode.style[$mdConstant.CSS.TRANSFORM] = '';\n      });\n    }\n\n  }\n\n  function clamp(min, n, max) {\n    return Math.min(max, Math.max(n, min));\n  }\n\n  function getOffsetRect(node) {\n    return node ? {\n      left: node.offsetLeft,\n      top: node.offsetTop,\n      width: node.offsetWidth,\n      height: node.offsetHeight\n    } : { left: 0, top: 0, width: 0, height: 0 };\n  }\n}\nSelectProvider.$inject = [\"$$interimElementProvider\"];\n\n// Annoying method to copy nodes to an array, thanks to IE\nfunction nodesToArray(nodes) {\n  var results = [];\n  for (var i = 0; i < nodes.length; ++i) {\n    results.push(nodes.item(i));\n  }\n  return results;\n}\n})();\n\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\n/**\n * @ngdoc module\n * @name material.components.sidenav\n *\n * @description\n * A Sidenav QP component.\n */\nangular.module('material.components.sidenav', [\n    'material.core',\n    'material.components.backdrop'\n  ])\n  .factory('$mdSidenav', SidenavService )\n  .directive('mdSidenav', SidenavDirective)\n  .controller('$mdSidenavController', SidenavController);\n\n\n/**\n * @private\n * @ngdoc service\n * @name $mdSidenav\n * @module material.components.sidenav\n *\n * @description\n * `$mdSidenav` makes it easy to interact with multiple sidenavs\n * in an app.\n *\n * @usage\n * <hljs lang=\"js\">\n * // Toggle the given sidenav\n * $mdSidenav(componentId).toggle();\n * </hljs>\n * <hljs lang=\"js\">\n * // Open the given sidenav\n * $mdSidenav(componentId).open();\n * </hljs>\n * <hljs lang=\"js\">\n * // Close the given sidenav\n * $mdSidenav(componentId).close();\n * </hljs>\n * <hljs lang=\"js\">\n * // Exposes whether given sidenav is set to be open\n * $mdSidenav(componentId).isOpen();\n * </hljs>\n * <hljs lang=\"js\">\n * // Exposes whether given sidenav is locked open\n * // If this is true, the sidenav will be open regardless of isOpen()\n * $mdSidenav(componentId).isLockedOpen();\n * </hljs>\n */\nfunction SidenavService($mdComponentRegistry, $q) {\n  return function(handle) {\n    var errorMsg = \"SideNav '\" + handle + \"' is not available!\";\n\n    // Lookup the controller instance for the specified sidNav instance\n    var instance = $mdComponentRegistry.get(handle);\n    if(!instance) {\n      $mdComponentRegistry.notFoundError(handle);\n    }\n\n    return {\n      isOpen: function() {\n        return instance && instance.isOpen();\n      },\n      isLockedOpen: function() {\n        return instance && instance.isLockedOpen();\n      },\n      toggle: function() {\n        return instance ? instance.toggle() : $q.reject(errorMsg);\n      },\n      open: function() {\n        return instance ? instance.open() : $q.reject(errorMsg);\n      },\n      close: function() {\n        return instance ? instance.close() : $q.reject(errorMsg);\n      }\n    };\n  };\n}\nSidenavService.$inject = [\"$mdComponentRegistry\", \"$q\"];\n\n/**\n * @ngdoc directive\n * @name mdSidenav\n * @module material.components.sidenav\n * @restrict E\n *\n * @description\n *\n * A Sidenav component that can be opened and closed programatically.\n *\n * By default, upon opening it will slide out on top of the main content area.\n *\n * @usage\n * <hljs lang=\"html\">\n * <div layout=\"row\" ng-controller=\"MyController\">\n *   <md-sidenav md-component-id=\"left\" class=\"md-sidenav-left\">\n *     Left Nav!\n *   </md-sidenav>\n *\n *   <md-content>\n *     Center Content\n *     <md-button ng-click=\"openLeftMenu()\">\n *       Open Left Menu\n *     </md-button>\n *   </md-content>\n *\n *   <md-sidenav md-component-id=\"right\"\n *     md-is-locked-open=\"$mdMedia('min-width: 333px')\"\n *     class=\"md-sidenav-right\">\n *     Right Nav!\n *   </md-sidenav>\n * </div>\n * </hljs>\n *\n * <hljs lang=\"js\">\n * var app = angular.module('myApp', ['ngMaterial']);\n * app.controller('MyController', function($scope, $mdSidenav) {\n *   $scope.openLeftMenu = function() {\n *     $mdSidenav('left').toggle();\n *   };\n * });\n * </hljs>\n *\n * @param {expression=} md-is-open A model bound to whether the sidenav is opened.\n * @param {string=} md-component-id componentId to use with $mdSidenav service.\n * @param {expression=} md-is-locked-open When this expression evalutes to true,\n * the sidenav 'locks open': it falls into the content's flow instead\n * of appearing over it. This overrides the `is-open` attribute.\n *\n * The $mdMedia() service is exposed to the is-locked-open attribute, which\n * can be given a media query or one of the `sm`, `gt-sm`, `md`, `gt-md`, `lg` or `gt-lg` presets.\n * Examples:\n *\n *   - `<md-sidenav md-is-locked-open=\"shouldLockOpen\"></md-sidenav>`\n *   - `<md-sidenav md-is-locked-open=\"$mdMedia('min-width: 1000px')\"></md-sidenav>`\n *   - `<md-sidenav md-is-locked-open=\"$mdMedia('sm')\"></md-sidenav>` (locks open on small screens)\n */\nfunction SidenavDirective($timeout, $animate, $parse, $log, $mdMedia, $mdConstant, $compile, $mdTheming, $q, $document) {\n  return {\n    restrict: 'E',\n    scope: {\n      isOpen: '=?mdIsOpen'\n    },\n    controller: '$mdSidenavController',\n    compile: function(element) {\n      element.addClass('md-closed');\n      element.attr('tabIndex', '-1');\n      return postLink;\n    }\n  };\n\n  /**\n   * Directive Post Link function...\n   */\n  function postLink(scope, element, attr, sidenavCtrl) {\n    var triggeringElement = null;\n    var promise = $q.when(true);\n\n    var isLockedOpenParsed = $parse(attr.mdIsLockedOpen);\n    var isLocked = function() {\n      return isLockedOpenParsed(scope.$parent, {\n        $media: function(arg) { $log.warn(\"$media is deprecated for is-locked-open. Use $mdMedia instead.\"); return $mdMedia(arg); },\n        $mdMedia: $mdMedia\n      });\n    };\n    var backdrop = $compile(\n      '<md-backdrop class=\"md-sidenav-backdrop md-opaque ng-enter\">'\n    )(scope);\n\n    element.on('$destroy', sidenavCtrl.destroy);\n    $mdTheming.inherit(backdrop, element);\n\n    scope.$watch(isLocked, updateIsLocked);\n    scope.$watch('isOpen', updateIsOpen);\n\n\n    // Publish special accessor for the Controller instance\n    sidenavCtrl.$toggleOpen = toggleOpen;\n\n    /**\n     * Toggle the DOM classes to indicate `locked`\n     * @param isLocked\n     */\n    function updateIsLocked(isLocked, oldValue) {\n      scope.isLockedOpen = isLocked;\n      if (isLocked === oldValue) {\n        element.toggleClass('md-locked-open', !!isLocked);\n      } else {\n        $animate[isLocked ? 'addClass' : 'removeClass'](element, 'md-locked-open');\n      }\n      backdrop.toggleClass('md-locked-open', !!isLocked);\n    }\n\n    /**\n     * Toggle the SideNav view and attach/detach listeners\n     * @param isOpen\n     */\n    function updateIsOpen(isOpen) {\n      var parent = element.parent();\n\n      parent[isOpen ? 'on' : 'off']('keydown', onKeyDown);\n      backdrop[isOpen ? 'on' : 'off']('click', close);\n\n      if ( isOpen ) {\n        // Capture upon opening..\n        triggeringElement = $document[0].activeElement;\n      }\n\n      return promise = $q.all([\n        $animate[isOpen ? 'enter' : 'leave'](backdrop, parent),\n        $animate[isOpen ? 'removeClass' : 'addClass'](element, 'md-closed').then(function() {\n          // If we opened, and haven't closed again before the animation finished\n          if (scope.isOpen) {\n            element.focus();\n          }\n        })\n      ]);\n    }\n\n    /**\n     * Toggle the sideNav view and publish a promise to be resolved when\n     * the view animation finishes.\n     *\n     * @param isOpen\n     * @returns {*}\n     */\n    function toggleOpen( isOpen ) {\n      if (scope.isOpen == isOpen ) {\n\n        return $q.when(true);\n\n      } else {\n        var deferred = $q.defer();\n\n        // Toggle value to force an async `updateIsOpen()` to run\n        scope.isOpen = isOpen;\n\n        $timeout(function() {\n\n          // When the current `updateIsOpen()` animation finishes\n          promise.then(function(result){\n\n            if ( !scope.isOpen ) {\n              // reset focus to originating element (if available) upon close\n              triggeringElement && triggeringElement.focus();\n              triggeringElement = null;\n            }\n\n            deferred.resolve(result);\n          });\n\n        },0,false);\n\n        return deferred.promise;\n      }\n    }\n\n    /**\n     * Auto-close sideNav when the `escape` key is pressed.\n     * @param evt\n     */\n    function onKeyDown(ev) {\n      var isEscape = (ev.keyCode === $mdConstant.KEY_CODE.ESCAPE);\n      return isEscape ? close(ev) : $q.when(true);\n    }\n\n    /**\n     * With backdrop `clicks` or `escape` key-press, immediately\n     * apply the CSS close transition... Then notify the controller\n     * to close() and perform its own actions.\n     */\n    function close(ev) {\n      ev.preventDefault();\n      ev.stopPropagation();\n\n      return sidenavCtrl.close();\n    }\n\n  }\n}\nSidenavDirective.$inject = [\"$timeout\", \"$animate\", \"$parse\", \"$log\", \"$mdMedia\", \"$mdConstant\", \"$compile\", \"$mdTheming\", \"$q\", \"$document\"];\n\n/*\n * @private\n * @ngdoc controller\n * @name SidenavController\n * @module material.components.sidenav\n *\n */\nfunction SidenavController($scope, $element, $attrs, $mdComponentRegistry, $q) {\n\n  var self = this;\n\n  // Use Default internal method until overridden by directive postLink\n\n  self.$toggleOpen = function() { return $q.when($scope.isOpen); };\n  self.isOpen = function() { return !!$scope.isOpen; };\n  self.isLockedOpen = function() { return !!$scope.isLockedOpen; };\n  self.open   = function() { return self.$toggleOpen( true );  };\n  self.close  = function() { return self.$toggleOpen( false ); };\n  self.toggle = function() { return self.$toggleOpen( !$scope.isOpen );  };\n\n  self.destroy = $mdComponentRegistry.register(self, $attrs.mdComponentId);\n}\nSidenavController.$inject = [\"$scope\", \"$element\", \"$attrs\", \"$mdComponentRegistry\", \"$q\"];\n\n\n\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n  'use strict';\n\n  /**\n   * @ngdoc module\n   * @name material.components.slider\n   */\n  angular.module('material.components.slider', [\n    'material.core'\n  ])\n  .directive('mdSlider', SliderDirective);\n\n/**\n * @ngdoc directive\n * @name mdSlider\n * @module material.components.slider\n * @restrict E\n * @description\n * The `<md-slider>` component allows the user to choose from a range of\n * values.\n *\n * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)\n * the slider is in the accent color by default. The primary color palette may be used with\n * the `md-primary` class.\n *\n * It has two modes: 'normal' mode, where the user slides between a wide range\n * of values, and 'discrete' mode, where the user slides between only a few\n * select values.\n *\n * To enable discrete mode, add the `md-discrete` attribute to a slider,\n * and use the `step` attribute to change the distance between\n * values the user is allowed to pick.\n *\n * @usage\n * <h4>Normal Mode</h4>\n * <hljs lang=\"html\">\n * <md-slider ng-model=\"myValue\" min=\"5\" max=\"500\">\n * </md-slider>\n * </hljs>\n * <h4>Discrete Mode</h4>\n * <hljs lang=\"html\">\n * <md-slider md-discrete ng-model=\"myDiscreteValue\" step=\"10\" min=\"10\" max=\"130\">\n * </md-slider>\n * </hljs>\n *\n * @param {boolean=} md-discrete Whether to enable discrete mode.\n * @param {number=} step The distance between values the user is allowed to pick. Default 1.\n * @param {number=} min The minimum value the user is allowed to pick. Default 0.\n * @param {number=} max The maximum value the user is allowed to pick. Default 100.\n */\nfunction SliderDirective($$rAF, $window, $mdAria, $mdUtil, $mdConstant, $mdTheming, $mdGesture, $parse) {\n  return {\n    scope: {},\n    require: '?ngModel',\n    template:\n      '<div class=\"md-slider-wrapper\">\\\n        <div class=\"md-track-container\">\\\n          <div class=\"md-track\"></div>\\\n          <div class=\"md-track md-track-fill\"></div>\\\n          <div class=\"md-track-ticks\"></div>\\\n        </div>\\\n        <div class=\"md-thumb-container\">\\\n          <div class=\"md-thumb\"></div>\\\n          <div class=\"md-focus-thumb\"></div>\\\n          <div class=\"md-focus-ring\"></div>\\\n          <div class=\"md-sign\">\\\n            <span class=\"md-thumb-text\"></span>\\\n          </div>\\\n          <div class=\"md-disabled-thumb\"></div>\\\n        </div>\\\n      </div>',\n    compile: compile\n  };\n\n  // **********************************************************\n  // Private Methods\n  // **********************************************************\n\n  function compile (tElement, tAttrs) {\n    tElement.attr({\n      tabIndex: 0,\n      role: 'slider'\n    });\n\n    $mdAria.expect(tElement, 'aria-label');\n\n    return postLink;\n  }\n\n  function postLink(scope, element, attr, ngModelCtrl) {\n    $mdTheming(element);\n    ngModelCtrl = ngModelCtrl || {\n      // Mock ngModelController if it doesn't exist to give us\n      // the minimum functionality needed\n      $setViewValue: function(val) {\n        this.$viewValue = val;\n        this.$viewChangeListeners.forEach(function(cb) { cb(); });\n      },\n      $parsers: [],\n      $formatters: [],\n      $viewChangeListeners: []\n    };\n\n    var isDisabledParsed = attr.ngDisabled && $parse(attr.ngDisabled);\n    var isDisabledGetter = isDisabledParsed ?\n      function() { return isDisabledParsed(scope.$parent); } :\n      angular.noop;\n    var thumb = angular.element(element[0].querySelector('.md-thumb'));\n    var thumbText = angular.element(element[0].querySelector('.md-thumb-text'));\n    var thumbContainer = thumb.parent();\n    var trackContainer = angular.element(element[0].querySelector('.md-track-container'));\n    var activeTrack = angular.element(element[0].querySelector('.md-track-fill'));\n    var tickContainer = angular.element(element[0].querySelector('.md-track-ticks'));\n    var throttledRefreshDimensions = $mdUtil.throttle(refreshSliderDimensions, 5000);\n\n    // Default values, overridable by attrs\n    attr.min ? attr.$observe('min', updateMin) : updateMin(0);\n    attr.max ? attr.$observe('max', updateMax) : updateMax(100);\n    attr.step ? attr.$observe('step', updateStep) : updateStep(1);\n\n    // We have to manually stop the $watch on ngDisabled because it exists\n    // on the parent scope, and won't be automatically destroyed when\n    // the component is destroyed.\n    var stopDisabledWatch = angular.noop;\n    if (attr.ngDisabled) {\n      stopDisabledWatch = scope.$parent.$watch(attr.ngDisabled, updateAriaDisabled);\n    }\n\n    $mdGesture.register(element, 'drag');\n\n    element\n      .on('keydown', keydownListener)\n      .on('$md.pressdown', onPressDown)\n      .on('$md.pressup', onPressUp)\n      .on('$md.dragstart', onDragStart)\n      .on('$md.drag', onDrag)\n      .on('$md.dragend', onDragEnd);\n\n    // On resize, recalculate the slider's dimensions and re-render\n    function updateAll() {\n      refreshSliderDimensions();\n      ngModelRender();\n      redrawTicks();\n    }\n    setTimeout(updateAll);\n\n    var debouncedUpdateAll = $$rAF.throttle(updateAll);\n    angular.element($window).on('resize', debouncedUpdateAll);\n\n    scope.$on('$destroy', function() {\n      angular.element($window).off('resize', debouncedUpdateAll);\n      stopDisabledWatch();\n    });\n\n    ngModelCtrl.$render = ngModelRender;\n    ngModelCtrl.$viewChangeListeners.push(ngModelRender);\n    ngModelCtrl.$formatters.push(minMaxValidator);\n    ngModelCtrl.$formatters.push(stepValidator);\n\n    /**\n     * Attributes\n     */\n    var min;\n    var max;\n    var step;\n    function updateMin(value) {\n      min = parseFloat(value);\n      element.attr('aria-valuemin', value);\n      updateAll();\n    }\n    function updateMax(value) {\n      max = parseFloat(value);\n      element.attr('aria-valuemax', value);\n      updateAll();\n    }\n    function updateStep(value) {\n      step = parseFloat(value);\n      redrawTicks();\n    }\n    function updateAriaDisabled(isDisabled) {\n      element.attr('aria-disabled', !!isDisabled);\n    }\n\n    // Draw the ticks with canvas.\n    // The alternative to drawing ticks with canvas is to draw one element for each tick,\n    // which could quickly become a performance bottleneck.\n    var tickCanvas, tickCtx;\n    function redrawTicks() {\n      if (!angular.isDefined(attr.mdDiscrete)) return;\n\n      var numSteps = Math.floor( (max - min) / step );\n      if (!tickCanvas) {\n        var trackTicksStyle = $window.getComputedStyle(tickContainer[0]);\n        tickCanvas = angular.element('<canvas style=\"position:absolute;\">');\n        tickCtx = tickCanvas[0].getContext('2d');\n        tickCtx.fillStyle = trackTicksStyle.backgroundColor || 'black';\n        tickContainer.append(tickCanvas);\n      }\n      var dimensions = getSliderDimensions();\n      tickCanvas[0].width = dimensions.width;\n      tickCanvas[0].height = dimensions.height;\n\n      var distance;\n      for (var i = 0; i <= numSteps; i++) {\n        distance = Math.floor(dimensions.width * (i / numSteps));\n        tickCtx.fillRect(distance - 1, 0, 2, dimensions.height);\n      }\n    }\n\n\n    /**\n     * Refreshing Dimensions\n     */\n    var sliderDimensions = {};\n    refreshSliderDimensions();\n    function refreshSliderDimensions() {\n      sliderDimensions = trackContainer[0].getBoundingClientRect();\n    }\n    function getSliderDimensions() {\n      throttledRefreshDimensions();\n      return sliderDimensions;\n    }\n\n    /**\n     * left/right arrow listener\n     */\n    function keydownListener(ev) {\n      if(element[0].hasAttribute('disabled')) {\n        return;\n      }\n\n      var changeAmount;\n      if (ev.keyCode === $mdConstant.KEY_CODE.LEFT_ARROW) {\n        changeAmount = -step;\n      } else if (ev.keyCode === $mdConstant.KEY_CODE.RIGHT_ARROW) {\n        changeAmount = step;\n      }\n      if (changeAmount) {\n        if (ev.metaKey || ev.ctrlKey || ev.altKey) {\n          changeAmount *= 4;\n        }\n        ev.preventDefault();\n        ev.stopPropagation();\n        scope.$evalAsync(function() {\n          setModelValue(ngModelCtrl.$viewValue + changeAmount);\n        });\n      }\n    }\n\n    /**\n     * ngModel setters and validators\n     */\n    function setModelValue(value) {\n      ngModelCtrl.$setViewValue( minMaxValidator(stepValidator(value)) );\n    }\n    function ngModelRender() {\n      if (isNaN(ngModelCtrl.$viewValue)) {\n        ngModelCtrl.$viewValue = ngModelCtrl.$modelValue;\n      }\n\n      var percent = (ngModelCtrl.$viewValue - min) / (max - min);\n      scope.modelValue = ngModelCtrl.$viewValue;\n      element.attr('aria-valuenow', ngModelCtrl.$viewValue);\n      setSliderPercent(percent);\n      thumbText.text( ngModelCtrl.$viewValue );\n    }\n\n    function minMaxValidator(value) {\n      if (angular.isNumber(value)) {\n        return Math.max(min, Math.min(max, value));\n      }\n    }\n    function stepValidator(value) {\n      if (angular.isNumber(value)) {\n        return Math.round(value / step) * step;\n      }\n    }\n\n    /**\n     * @param percent 0-1\n     */\n    function setSliderPercent(percent) {\n      activeTrack.css('width', (percent * 100) + '%');\n      thumbContainer.css(\n        'left',\n        (percent * 100) + '%'\n      );\n      element.toggleClass('md-min', percent === 0);\n    }\n\n\n    /**\n     * Slide listeners\n     */\n    var isDragging = false;\n    var isDiscrete = angular.isDefined(attr.mdDiscrete);\n\n    function onPressDown(ev) {\n      if (isDisabledGetter()) return;\n\n      element.addClass('active');\n      element[0].focus();\n      refreshSliderDimensions();\n\n      var exactVal = percentToValue( positionToPercent( ev.pointer.x ));\n      var closestVal = minMaxValidator( stepValidator(exactVal) );\n      scope.$apply(function() {\n        setModelValue( closestVal );\n        setSliderPercent( valueToPercent(closestVal));\n      });\n    }\n    function onPressUp(ev) {\n      if (isDisabledGetter()) return;\n\n      element.removeClass('dragging active');\n\n      var exactVal = percentToValue( positionToPercent( ev.pointer.x ));\n      var closestVal = minMaxValidator( stepValidator(exactVal) );\n      scope.$apply(function() {\n        setModelValue(closestVal);\n        ngModelRender();\n      });\n    }\n    function onDragStart(ev) {\n      if (isDisabledGetter()) return;\n      isDragging = true;\n      ev.stopPropagation();\n\n      element.addClass('dragging');\n      setSliderFromEvent(ev);\n    }\n    function onDrag(ev) {\n      if (!isDragging) return;\n      ev.stopPropagation();\n      setSliderFromEvent(ev);\n    }\n    function onDragEnd(ev) {\n      if (!isDragging) return;\n      ev.stopPropagation();\n      isDragging = false;\n    }\n\n    function setSliderFromEvent(ev) {\n      // While panning discrete, update only the\n      // visual positioning but not the model value.\n      if ( isDiscrete ) adjustThumbPosition( ev.pointer.x );\n      else              doSlide( ev.pointer.x );\n    }\n\n    /**\n     * Slide the UI by changing the model value\n     * @param x\n     */\n    function doSlide( x ) {\n      scope.$evalAsync( function() {\n        setModelValue( percentToValue( positionToPercent(x) ));\n      });\n    }\n\n    /**\n     * Slide the UI without changing the model (while dragging/panning)\n     * @param x\n     */\n    function adjustThumbPosition( x ) {\n      var exactVal = percentToValue( positionToPercent( x ));\n      var closestVal = minMaxValidator( stepValidator(exactVal) );\n      setSliderPercent( positionToPercent(x) );\n      thumbText.text( closestVal );\n    }\n\n    /**\n     * Convert horizontal position on slider to percentage value of offset from beginning...\n     * @param x\n     * @returns {number}\n     */\n    function positionToPercent( x ) {\n      return Math.max(0, Math.min(1, (x - sliderDimensions.left) / (sliderDimensions.width)));\n    }\n\n    /**\n     * Convert percentage offset on slide to equivalent model value\n     * @param percent\n     * @returns {*}\n     */\n    function percentToValue( percent ) {\n      return (min + percent * (max - min));\n    }\n\n    function valueToPercent( val ) {\n      return (val - min)/(max - min);\n    }\n  }\n}\nSliderDirective.$inject = [\"$$rAF\", \"$window\", \"$mdAria\", \"$mdUtil\", \"$mdConstant\", \"$mdTheming\", \"$mdGesture\", \"$parse\"];\n\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\n/*\n * @ngdoc module\n * @name material.components.sticky\n * @description\n *\n * Sticky effects for md\n */\n\nangular.module('material.components.sticky', [\n  'material.core',\n  'material.components.content'\n])\n  .factory('$mdSticky', MdSticky);\n\n/*\n * @ngdoc service\n * @name $mdSticky\n * @module material.components.sticky\n *\n * @description\n * The `$mdSticky`service provides a mixin to make elements sticky.\n *\n * @returns A `$mdSticky` function that takes three arguments:\n *   - `scope`\n *   - `element`: The element that will be 'sticky'\n *   - `elementClone`: A clone of the element, that will be shown\n *     when the user starts scrolling past the original element.\n *     If not provided, it will use the result of `element.clone()`.\n */\n\nfunction MdSticky($document, $mdConstant, $compile, $$rAF, $mdUtil) {\n\n  var browserStickySupport = checkStickySupport();\n\n  /**\n   * Registers an element as sticky, used internally by directives to register themselves\n   */\n  return function registerStickyElement(scope, element, stickyClone) {\n    var contentCtrl = element.controller('mdContent');\n    if (!contentCtrl) return;\n\n    if (browserStickySupport) {\n      element.css({\n        position: browserStickySupport,\n        top: 0,\n        'z-index': 2\n      });\n    } else {\n      var $$sticky = contentCtrl.$element.data('$$sticky');\n      if (!$$sticky) {\n        $$sticky = setupSticky(contentCtrl);\n        contentCtrl.$element.data('$$sticky', $$sticky);\n      }\n\n      var deregister = $$sticky.add(element, stickyClone || element.clone());\n      scope.$on('$destroy', deregister);\n    }\n  };\n\n  function setupSticky(contentCtrl) {\n    var contentEl = contentCtrl.$element;\n\n    // Refresh elements is very expensive, so we use the debounced\n    // version when possible.\n    var debouncedRefreshElements = $$rAF.throttle(refreshElements);\n\n    // setupAugmentedScrollEvents gives us `$scrollstart` and `$scroll`,\n    // more reliable than `scroll` on android.\n    setupAugmentedScrollEvents(contentEl);\n    contentEl.on('$scrollstart', debouncedRefreshElements);\n    contentEl.on('$scroll', onScroll);\n\n    var self;\n    var stickyBaseoffset = contentEl.prop('offsetTop');\n    return self = {\n      prev: null,\n      current: null, //the currently stickied item\n      next: null,\n      items: [],\n      add: add,\n      refreshElements: refreshElements\n    };\n\n    /***************\n     * Public\n     ***************/\n    // Add an element and its sticky clone to this content's sticky collection\n    function add(element, stickyClone) {\n      stickyClone.addClass('md-sticky-clone');\n      stickyClone.css('top', stickyBaseoffset + 'px');\n\n      var item = {\n        element: element,\n        clone: stickyClone\n      };\n      self.items.push(item);\n\n      contentEl.parent().prepend(item.clone);\n\n      debouncedRefreshElements();\n\n      return function remove() {\n        self.items.forEach(function(item, index) {\n          if (item.element[0] === element[0]) {\n            self.items.splice(index, 1);\n            item.clone.remove();\n          }\n        });\n        debouncedRefreshElements();\n      };\n    }\n\n    function refreshElements() {\n      // Sort our collection of elements by their current position in the DOM.\n      // We need to do this because our elements' order of being added may not\n      // be the same as their order of display.\n      self.items.forEach(refreshPosition);\n      self.items = self.items.sort(function(a, b) {\n        return a.top < b.top ? -1 : 1;\n      });\n\n      // Find which item in the list should be active, \n      // based upon the content's current scroll position\n      var item;\n      var currentScrollTop = contentEl.prop('scrollTop');\n      for (var i = self.items.length - 1; i >= 0; i--) {\n        if (currentScrollTop > self.items[i].top) {\n          item = self.items[i];\n          break;\n        }\n      }\n      setCurrentItem(item);\n    }\n\n\n    /***************\n     * Private\n     ***************/\n\n    // Find the `top` of an item relative to the content element,\n    // and also the height.\n    function refreshPosition(item) {\n      // Find the top of an item by adding to the offsetHeight until we reach the \n      // content element.\n      var current = item.element[0];\n      item.top = 0;\n      item.left = 0;\n      while (current && current !== contentEl[0]) {\n        item.top += current.offsetTop;\n        item.left += current.offsetLeft;\n        current = current.offsetParent;\n      }\n      item.height = item.element.prop('offsetHeight');\n      item.clone.css('margin-left', item.left + 'px');\n    }\n\n\n    // As we scroll, push in and select the correct sticky element.\n    function onScroll() {\n      var scrollTop = contentEl.prop('scrollTop');\n      var isScrollingDown = scrollTop > (onScroll.prevScrollTop || 0);\n      onScroll.prevScrollTop = scrollTop;\n\n      // At the top?\n      if (scrollTop === 0) {\n        setCurrentItem(null);\n\n      // Going to next item?\n      } else if (isScrollingDown && self.next) {\n        if (self.next.top - scrollTop <= 0) {\n          // Sticky the next item if we've scrolled past its position.\n          setCurrentItem(self.next);\n        } else if (self.current) {\n          // Push the current item up when we're almost at the next item.\n          if (self.next.top - scrollTop <= self.next.height) {\n            translate(self.current, self.next.top - self.next.height - scrollTop);\n          } else {\n            translate(self.current, null);\n          }\n        }\n        \n      // Scrolling up with a current sticky item?\n      } else if (!isScrollingDown && self.current) {\n        if (scrollTop < self.current.top) {\n          // Sticky the previous item if we've scrolled up past\n          // the original position of the currently stickied item.\n          setCurrentItem(self.prev);\n        }\n        // Scrolling up, and just bumping into the item above (just set to current)?\n        // If we have a next item bumping into the current item, translate\n        // the current item up from the top as it scrolls into view.\n        if (self.current && self.next) {\n          if (scrollTop >= self.next.top - self.current.height) {\n            translate(self.current, self.next.top - scrollTop - self.current.height);\n          } else {\n            translate(self.current, null);\n          }\n        }\n      }\n    }\n     \n   function setCurrentItem(item) {\n     if (self.current === item) return;\n     // Deactivate currently active item\n     if (self.current) {\n       translate(self.current, null);\n       setStickyState(self.current, null);\n     }\n\n     // Activate new item if given\n     if (item) {\n       setStickyState(item, 'active');\n     }\n\n     self.current = item;\n     var index = self.items.indexOf(item);\n     // If index === -1, index + 1 = 0. It works out.\n     self.next = self.items[index + 1];\n     self.prev = self.items[index - 1];\n     setStickyState(self.next, 'next');\n     setStickyState(self.prev, 'prev');\n   }\n\n   function setStickyState(item, state) {\n     if (!item || item.state === state) return;\n     if (item.state) {\n       item.clone.attr('sticky-prev-state', item.state);\n       item.element.attr('sticky-prev-state', item.state);\n     }\n     item.clone.attr('sticky-state', state);\n     item.element.attr('sticky-state', state);\n     item.state = state;\n   }\n\n   function translate(item, amount) {\n     if (!item) return;\n     if (amount === null || amount === undefined) {\n       if (item.translateY) {\n         item.translateY = null;\n         item.clone.css($mdConstant.CSS.TRANSFORM, '');\n       }\n     } else {\n       item.translateY = amount;\n       item.clone.css(\n         $mdConstant.CSS.TRANSFORM, \n         'translate3d(' + item.left + 'px,' + amount + 'px,0)'\n       );\n     }\n   }\n  }\n\n  // Function to check for browser sticky support\n  function checkStickySupport($el) {\n    var stickyProp;\n    var testEl = angular.element('<div>');\n    $document[0].body.appendChild(testEl[0]);\n\n    var stickyProps = ['sticky', '-webkit-sticky'];\n    for (var i = 0; i < stickyProps.length; ++i) {\n      testEl.css({position: stickyProps[i], top: 0, 'z-index': 2});\n      if (testEl.css('position') == stickyProps[i]) {\n        stickyProp = stickyProps[i];\n        break;\n      }\n    }\n    testEl.remove();\n    return stickyProp;\n  }\n\n  // Android 4.4 don't accurately give scroll events.\n  // To fix this problem, we setup a fake scroll event. We say:\n  // > If a scroll or touchmove event has happened in the last DELAY milliseconds, \n  //   then send a `$scroll` event every animationFrame.\n  // Additionally, we add $scrollstart and $scrollend events.\n  function setupAugmentedScrollEvents(element) {\n    var SCROLL_END_DELAY = 200;\n    var isScrolling;\n    var lastScrollTime;\n    element.on('scroll touchmove', function() {\n      if (!isScrolling) {\n        isScrolling = true;\n        $$rAF(loopScrollEvent);\n        element.triggerHandler('$scrollstart');\n      }\n      element.triggerHandler('$scroll');\n      lastScrollTime = +$mdUtil.now();\n    });\n\n    function loopScrollEvent() {\n      if (+$mdUtil.now() - lastScrollTime > SCROLL_END_DELAY) {\n        isScrolling = false;\n        element.triggerHandler('$scrollend');\n      } else {\n        element.triggerHandler('$scroll');\n        $$rAF(loopScrollEvent);\n      }\n    }\n  }\n\n}\nMdSticky.$inject = [\"$document\", \"$mdConstant\", \"$compile\", \"$$rAF\", \"$mdUtil\"];\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\n/**\n * @ngdoc module\n * @name material.components.subheader\n * @description\n * SubHeader module\n *\n *  Subheaders are special list tiles that delineate distinct sections of a\n *  list or grid list and are typically related to the current filtering or\n *  sorting criteria. Subheader tiles are either displayed inline with tiles or\n *  can be associated with content, for example, in an adjacent column.\n *\n *  Upon scrolling, subheaders remain pinned to the top of the screen and remain\n *  pinned until pushed on or off screen by the next subheader. @see [Material\n *  Design Specifications](https://www.google.com/design/spec/components/subheaders.html)\n *\n *  > To improve the visual grouping of content, use the system color for your subheaders.\n *\n */\nangular.module('material.components.subheader', [\n  'material.core',\n  'material.components.sticky'\n])\n  .directive('mdSubheader', MdSubheaderDirective);\n\n/**\n * @ngdoc directive\n * @name mdSubheader\n * @module material.components.subheader\n *\n * @restrict E\n *\n * @description\n * The `<md-subheader>` directive is a subheader for a section\n *\n * @usage\n * <hljs lang=\"html\">\n * <md-subheader>Online Friends</md-subheader>\n * </hljs>\n */\n\nfunction MdSubheaderDirective($mdSticky, $compile, $mdTheming) {\n  return {\n    restrict: 'E',\n    replace: true,\n    transclude: true,\n    template: \n      '<h2 class=\"md-subheader\">' +\n        '<span class=\"md-subheader-content\"></span>' +\n      '</h2>',\n    compile: function(element, attr, transclude) {\n      var outerHTML = element[0].outerHTML;\n      return function postLink(scope, element, attr) {\n        $mdTheming(element);\n        function getContent(el) {\n          return angular.element(el[0].querySelector('.md-subheader-content'));\n        }\n\n        // Transclude the user-given contents of the subheader\n        // the conventional way.\n        transclude(scope, function(clone) {\n          getContent(element).append(clone);\n        });\n\n        // Create another clone, that uses the outer and inner contents\n        // of the element, that will be 'stickied' as the user scrolls.\n        transclude(scope, function(clone) {\n          var stickyClone = $compile(angular.element(outerHTML))(scope);\n          $mdTheming(stickyClone);\n          getContent(stickyClone).append(clone);\n          $mdSticky(scope, element, stickyClone);\n        });\n      };\n    }\n  };\n}\nMdSubheaderDirective.$inject = [\"$mdSticky\", \"$compile\", \"$mdTheming\"];\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\n\n/**\n * @ngdoc module\n * @name material.components.swipe\n * @description Swipe module!\n */\n/**\n * @ngdoc directive\n * @module material.components.swipe\n * @name mdSwipeLeft\n *\n * @restrict A\n *\n * @description\n * The md-swipe-left directives allows you to specify custom behavior when an element is swiped\n * left.\n *\n * @usage\n * <hljs lang=\"html\">\n * <div md-swipe-left=\"onSwipeLeft()\">Swipe me left!</div>\n * </hljs>\n */\n\n/**\n * @ngdoc directive\n * @module material.components.swipe\n * @name mdSwipeRight\n *\n * @restrict A\n *\n * @description\n * The md-swipe-right directives allows you to specify custom behavior when an element is swiped\n * right.\n *\n * @usage\n * <hljs lang=\"html\">\n * <div md-swipe-right=\"onSwipeRight()\">Swipe me right!</div>\n * </hljs>\n */\n\nvar module = angular.module('material.components.swipe',[]);\n\n['SwipeLeft', 'SwipeRight'].forEach(function(name) {\n  var directiveName = 'md' + name;\n  var eventName = '$md.' + name.toLowerCase();\n\n  module.directive(directiveName, /*@ngInject*/ [\"$parse\", function($parse) {\n    return {\n      restrict: 'A',\n      link: postLink\n    };\n\n    function postLink(scope, element, attr) {\n      var fn = $parse(attr[directiveName]);\n\n      element.on(eventName, function(ev) {\n        scope.$apply(function() {\n          fn(scope, {\n            $event: ev\n          });\n        });\n      });\n\n    }\n  }]);\n});\n\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\n/**\n * @private\n * @ngdoc module\n * @name material.components.switch\n */\n\nangular.module('material.components.switch', [\n  'material.core',\n  'material.components.checkbox'\n])\n  .directive('mdSwitch', MdSwitch);\n\n/**\n * @private\n * @ngdoc directive\n * @module material.components.switch\n * @name mdSwitch\n * @restrict E\n *\n * The switch directive is used very much like the normal [angular checkbox](https://docs.angularjs.org/api/ng/input/input%5Bcheckbox%5D).\n *\n * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)\n * the switch is in the accent color by default. The primary color palette may be used with\n * the `md-primary` class.\n *\n * @param {string} ng-model Assignable angular expression to data-bind to.\n * @param {string=} name Property name of the form under which the control is published.\n * @param {expression=} ng-true-value The value to which the expression should be set when selected.\n * @param {expression=} ng-false-value The value to which the expression should be set when not selected.\n * @param {string=} ng-change Angular expression to be executed when input changes due to user interaction with the input element.\n * @param {boolean=} md-no-ink Use of attribute indicates use of ripple ink effects.\n * @param {string=} aria-label Publish the button label used by screen-readers for accessibility. Defaults to the switch's text.\n *\n * @usage\n * <hljs lang=\"html\">\n * <md-switch ng-model=\"isActive\" aria-label=\"Finished?\">\n *   Finished ?\n * </md-switch>\n *\n * <md-switch md-no-ink ng-model=\"hasInk\" aria-label=\"No Ink Effects\">\n *   No Ink Effects\n * </md-switch>\n *\n * <md-switch ng-disabled=\"true\" ng-model=\"isDisabled\" aria-label=\"Disabled\">\n *   Disabled\n * </md-switch>\n *\n * </hljs>\n */\nfunction MdSwitch(mdCheckboxDirective, $mdTheming, $mdUtil, $document, $mdConstant, $parse, $$rAF, $mdGesture) {\n  var checkboxDirective = mdCheckboxDirective[0];\n\n  return {\n    restrict: 'E',\n    transclude: true,\n    template:\n      '<div class=\"md-container\">' +\n        '<div class=\"md-bar\"></div>' +\n        '<div class=\"md-thumb-container\">' +\n          '<div class=\"md-thumb\" md-ink-ripple md-ink-ripple-checkbox></div>' +\n        '</div>'+\n      '</div>' +\n      '<div ng-transclude class=\"md-label\">' +\n      '</div>',\n    require: '?ngModel',\n    compile: compile\n  };\n\n  function compile(element, attr) {\n    var checkboxLink = checkboxDirective.compile(element, attr);\n    // no transition on initial load\n    element.addClass('md-dragging');\n\n    return function (scope, element, attr, ngModel) {\n      ngModel = ngModel || $mdUtil.fakeNgModel();\n      var disabledGetter = $parse(attr.ngDisabled);\n      var thumbContainer = angular.element(element[0].querySelector('.md-thumb-container'));\n      var switchContainer = angular.element(element[0].querySelector('.md-container'));\n\n      // no transition on initial load\n      $$rAF(function() {\n        element.removeClass('md-dragging');\n      });\n\n      checkboxLink(scope, element, attr, ngModel);\n\n      if (angular.isDefined(attr.ngDisabled)) {\n        scope.$watch(disabledGetter, function(isDisabled) {\n          element.attr('tabindex', isDisabled ? -1 : 0);\n        });\n      }\n\n      // These events are triggered by setup drag\n      $mdGesture.register(switchContainer, 'drag');\n      switchContainer\n        .on('$md.dragstart', onDragStart)\n        .on('$md.drag', onDrag)\n        .on('$md.dragend', onDragEnd);\n\n      var drag;\n      function onDragStart(ev) {\n        // Don't go if ng-disabled===true\n        if (disabledGetter(scope)) return;\n        ev.stopPropagation();\n\n        element.addClass('md-dragging');\n        drag = {\n          width: thumbContainer.prop('offsetWidth')\n        };\n        element.removeClass('transition');\n      }\n\n      function onDrag(ev) {\n        if (!drag) return;\n        ev.stopPropagation();\n        ev.srcEvent && ev.srcEvent.preventDefault();\n\n        var percent = ev.pointer.distanceX / drag.width;\n\n        //if checked, start from right. else, start from left\n        var translate = ngModel.$viewValue ?  1 + percent : percent;\n        // Make sure the switch stays inside its bounds, 0-1%\n        translate = Math.max(0, Math.min(1, translate));\n\n        thumbContainer.css($mdConstant.CSS.TRANSFORM, 'translate3d(' + (100*translate) + '%,0,0)');\n        drag.translate = translate;\n      }\n\n      function onDragEnd(ev) {\n        if (!drag) return;\n        ev.stopPropagation();\n\n        element.removeClass('md-dragging');\n        thumbContainer.css($mdConstant.CSS.TRANSFORM, '');\n\n        // We changed if there is no distance (this is a click a click),\n        // or if the drag distance is >50% of the total.\n        var isChanged = ngModel.$viewValue ? drag.translate < 0.5 : drag.translate > 0.5;\n        if (isChanged) {\n          applyModelValue(!ngModel.$viewValue);\n        }\n        drag = null;\n      }\n\n      function applyModelValue(newValue) {\n        scope.$apply(function() {\n          ngModel.$setViewValue(newValue);\n          ngModel.$render();\n        });\n      }\n\n    };\n  }\n\n\n}\nMdSwitch.$inject = [\"mdCheckboxDirective\", \"$mdTheming\", \"$mdUtil\", \"$document\", \"$mdConstant\", \"$parse\", \"$$rAF\", \"$mdGesture\"];\n\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\n/**\n * @ngdoc module\n * @name material.components.tabs\n * @description\n *\n *  Tabs, created with the `<md-tabs>` directive provide *tabbed* navigation with different styles.\n *  The Tabs component consists of clickable tabs that are aligned horizontally side-by-side.\n *\n *  Features include support for:\n *\n *  - static or dynamic tabs,\n *  - responsive designs,\n *  - accessibility support (ARIA),\n *  - tab pagination,\n *  - external or internal tab content,\n *  - focus indicators and arrow-key navigations,\n *  - programmatic lookup and access to tab controllers, and\n *  - dynamic transitions through different tab contents.\n *\n */\n/*\n * @see js folder for tabs implementation\n */\nangular.module('material.components.tabs', [\n  'material.core',\n  'material.components.icon'\n]);\n\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\n/**\n * @ngdoc module\n * @name material.components.textField\n * @description\n * Form\n */\nangular.module('material.components.textField', [\n  'material.core'\n])\n  .directive('mdInputGroup', mdInputGroupDirective)\n  .directive('mdInput', mdInputDirective)\n  .directive('mdTextFloat', mdTextFloatDirective);\n\n\nfunction mdTextFloatDirective($mdTheming, $mdUtil, $parse, $log) {\n  return {\n    restrict: 'E',\n    replace: true,\n    scope : {\n      fid : '@?mdFid',\n      label : '@?',\n      value : '=ngModel'\n    },\n    compile : function(element, attr) {\n\n      $log.warn('<md-text-float> is deprecated. Please use `<md-input-container>` and `<input>`.' + \n                'More information at http://material.angularjs.org/#/api/material.components.input/directive/mdInputContainer');\n\n      if ( angular.isUndefined(attr.mdFid) ) {\n        attr.mdFid = $mdUtil.nextUid();\n      }\n\n      return {\n        pre : function(scope, element, attrs) {\n          var disabledParsed = $parse(attrs.ngDisabled);\n          scope.isDisabled = function() {\n            return disabledParsed(scope.$parent);\n          };\n\n          scope.inputType = attrs.type || \"text\";\n        },\n        post: $mdTheming\n      };\n    },\n    template:\n    '<md-input-group tabindex=\"-1\">' +\n    ' <label for=\"{{fid}}\" >{{label}}</label>' +\n    ' <md-input id=\"{{fid}}\" ng-disabled=\"isDisabled()\" ng-model=\"value\" type=\"{{inputType}}\"></md-input>' +\n    '</md-input-group>'\n  };\n}\nmdTextFloatDirective.$inject = [\"$mdTheming\", \"$mdUtil\", \"$parse\", \"$log\"];\n\nfunction mdInputGroupDirective($log) {\n  return {\n    restrict: 'CE',\n    controller: ['$element', function($element) {\n\n      $log.warn('<md-input-group> is deprecated. Please use `<md-input-container>` and `<input>`.' + \n                'More information at http://material.angularjs.org/#/api/material.components.input/directive/mdInputContainer');\n      this.setFocused = function(isFocused) {\n        $element.toggleClass('md-input-focused', !!isFocused);\n      };\n      this.setHasValue = function(hasValue) {\n        $element.toggleClass('md-input-has-value', hasValue );\n      };\n    }]\n  };\n\n}\nmdInputGroupDirective.$inject = [\"$log\"];\n\nfunction mdInputDirective($mdUtil, $log) {\n  return {\n    restrict: 'E',\n    replace: true,\n    template: '<input >',\n    require: ['^?mdInputGroup', '?ngModel'],\n    link: function(scope, element, attr, ctrls) {\n      if ( !ctrls[0] ) return;\n\n      $log.warn('<md-input> is deprecated. Please use `<md-input-container>` and `<input>`.' + \n                'More information at http://material.angularjs.org/#/api/material.components.input/directive/mdInputContainer');\n\n      var inputGroupCtrl = ctrls[0];\n      var ngModelCtrl = ctrls[1];\n\n      scope.$watch(scope.isDisabled, function(isDisabled) {\n        element.attr('aria-disabled', !!isDisabled);\n        element.attr('tabindex', !!isDisabled);\n      });\n      element.attr('type', attr.type || element.parent().attr('type') || \"text\");\n\n      // When the input value changes, check if it \"has\" a value, and\n      // set the appropriate class on the input group\n      if (ngModelCtrl) {\n        //Add a $formatter so we don't use up the render function\n        ngModelCtrl.$formatters.push(function(value) {\n          inputGroupCtrl.setHasValue( isNotEmpty(value) );\n          return value;\n        });\n      }\n\n      element\n        .on('input', function() {\n          inputGroupCtrl.setHasValue( isNotEmpty() );\n        })\n        .on('focus', function(e) {\n          // When the input focuses, add the focused class to the group\n          inputGroupCtrl.setFocused(true);\n        })\n        .on('blur', function(e) {\n          // When the input blurs, remove the focused class from the group\n          inputGroupCtrl.setFocused(false);\n          inputGroupCtrl.setHasValue( isNotEmpty() );\n        });\n\n      scope.$on('$destroy', function() {\n        inputGroupCtrl.setFocused(false);\n        inputGroupCtrl.setHasValue(false);\n      });\n\n\n      function isNotEmpty(value) {\n        value = angular.isUndefined(value) ? element.val() : value;\n        return (angular.isDefined(value) && (value!==null) &&\n               (value.toString().trim() !== \"\"));\n      }\n    }\n  };\n}\nmdInputDirective.$inject = [\"$mdUtil\", \"$log\"];\n\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\n/**\n * @ngdoc module\n * @name material.components.toast\n * @description\n * Toast\n */\nangular.module('material.components.toast', [\n  'material.core',\n  'material.components.button'\n])\n  .directive('mdToast', MdToastDirective)\n  .provider('$mdToast', MdToastProvider);\n\nfunction MdToastDirective() {\n  return {\n    restrict: 'E'\n  };\n}\n\n/**\n * @ngdoc service\n * @name $mdToast\n * @module material.components.toast\n *\n * @description\n * `$mdToast` is a service to build a toast nofication on any position\n * on the screen with an optional duration, and provides a simple promise API.\n *\n *\n * ## Restrictions on custom toasts\n * - The toast's template must have an outer `<md-toast>` element.\n * - For a toast action, use element with class `md-action`.\n * - Add the class `md-capsule` for curved corners.\n *\n * @usage\n * <hljs lang=\"html\">\n * <div ng-controller=\"MyController\">\n *   <md-button ng-click=\"openToast()\">\n *     Open a Toast!\n *   </md-button>\n * </div>\n * </hljs>\n *\n * <hljs lang=\"js\">\n * var app = angular.module('app', ['ngMaterial']);\n * app.controller('MyController', function($scope, $mdToast) {\n *   $scope.openToast = function($event) {\n *     $mdToast.show($mdToast.simple().content('Hello!'));\n *     // Could also do $mdToast.showSimple('Hello');\n *   };\n * });\n * </hljs>\n */\n\n/**\n * @ngdoc method\n * @name $mdToast#showSimple\n * \n * @description\n * Convenience method which builds and shows a simple toast.\n *\n * @returns {promise} A promise that can be resolved with `$mdToast.hide()` or\n * rejected with `$mdToast.cancel()`.\n *\n */\n\n /**\n * @ngdoc method\n * @name $mdToast#simple\n *\n * @description\n * Builds a preconfigured toast.\n *\n * @returns {obj} a `$mdToastPreset` with the chainable configuration methods:\n *\n * - $mdToastPreset#content(string) - sets toast content to string\n * - $mdToastPreset#action(string) - adds an action button, which resolves the promise returned from `show()` if clicked.\n * - $mdToastPreset#highlightAction(boolean) - sets action button to be highlighted\n * - $mdToastPreset#capsule(boolean) - adds 'md-capsule' class to the toast (curved corners)\n * - $mdToastPreset#theme(boolean) - sets the theme on the toast to theme (default is `$mdThemingProvider`'s default theme)\n */\n\n/**\n * @ngdoc method\n * @name $mdToast#updateContent\n * \n * @description\n * Updates the content of an existing toast. Useful for updating things like counts, etc.\n *\n */\n\n /**\n * @ngdoc method\n * @name $mdToast#build\n *\n * @description\n * Creates a custom `$mdToastPreset` that you can configure.\n *\n * @returns {obj} a `$mdToastPreset` with the chainable configuration methods for shows' options (see below).\n */\n\n /**\n * @ngdoc method\n * @name $mdToast#show\n *\n * @description Shows the toast.\n *\n * @param {object} optionsOrPreset Either provide an `$mdToastPreset` returned from `simple()`\n * and `build()`, or an options object with the following properties:\n *\n *   - `templateUrl` - `{string=}`: The url of an html template file that will\n *     be used as the content of the toast. Restrictions: the template must\n *     have an outer `md-toast` element.\n *   - `template` - `{string=}`: Same as templateUrl, except this is an actual\n *     template string.\n *   - `scope` - `{object=}`: the scope to link the template / controller to. If none is specified, it will create a new child scope.\n *     This scope will be destroyed when the toast is removed unless `preserveScope` is set to true.\n *   - `preserveScope` - `{boolean=}`: whether to preserve the scope when the element is removed. Default is false\n *   - `hideDelay` - `{number=}`: How many milliseconds the toast should stay\n *     active before automatically closing.  Set to 0 or false to have the toast stay open until\n *     closed manually. Default: 3000.\n *   - `position` - `{string=}`: Where to place the toast. Available: any combination\n *     of 'bottom', 'left', 'top', 'right', 'fit'. Default: 'bottom left'.\n *   - `controller` - `{string=}`: The controller to associate with this toast.\n *     The controller will be injected the local `$hideToast`, which is a function\n *     used to hide the toast.\n *   - `locals` - `{string=}`: An object containing key/value pairs. The keys will\n *     be used as names of values to inject into the controller. For example,\n *     `locals: {three: 3}` would inject `three` into the controller with the value\n *     of 3.\n *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in. These values will not be available until after initialization.\n *   - `resolve` - `{object=}`: Similar to locals, except it takes promises as values\n *     and the toast will not open until the promises resolve.\n *   - `controllerAs` - `{string=}`: An alias to assign the controller to on the scope.\n *   - `parent` - `{element=}`: The element to append the toast to. Defaults to appending\n *     to the root element of the application.\n *\n * @returns {promise} A promise that can be resolved with `$mdToast.hide()` or\n * rejected with `$mdToast.cancel()`.\n */\n\n/**\n * @ngdoc method\n * @name $mdToast#hide\n *\n * @description\n * Hide an existing toast and resolve the promise returned from `$mdToast.show()`.\n *\n * @param {*=} response An argument for the resolved promise.\n *\n * @returns {promise} a promise that is called when the existing element is removed from the DOM\n *\n */\n\n/**\n * @ngdoc method\n * @name $mdToast#cancel\n *\n * @description\n * Hide the existing toast and reject the promise returned from\n * `$mdToast.show()`.\n *\n * @param {*=} response An argument for the rejected promise.\n *\n * @returns {promise} a promise that is called when the existing element is removed from the DOM\n *\n */\n\nfunction MdToastProvider($$interimElementProvider) {\n  var activeToastContent;\n  var $mdToast = $$interimElementProvider('$mdToast')\n    .setDefaults({\n      methods: ['position', 'hideDelay', 'capsule'],\n      options: toastDefaultOptions\n    })\n    .addPreset('simple', {\n      argOption: 'content',\n      methods: ['content', 'action', 'highlightAction', 'theme'],\n      options: /* @ngInject */ [\"$mdToast\", \"$mdTheming\", function($mdToast, $mdTheming) {\n        var opts = {\n          template: [\n            '<md-toast md-theme=\"{{ toast.theme }}\" ng-class=\"{\\'md-capsule\\': toast.capsule}\">',\n              '<span flex>{{ toast.content }}</span>',\n              '<md-button class=\"md-action\" ng-if=\"toast.action\" ng-click=\"toast.resolve()\" ng-class=\"{\\'md-highlight\\': toast.highlightAction}\">',\n                '{{ toast.action }}',\n              '</md-button>',\n            '</md-toast>'\n          ].join(''),\n          controller: /* @ngInject */ [\"$scope\", function mdToastCtrl($scope) {\n            var self = this;\n            $scope.$watch(function() { return activeToastContent; }, function() {\n              self.content = activeToastContent;\n            });\n            this.resolve = function() {\n              $mdToast.hide();\n            };\n          }],\n          theme: $mdTheming.defaultTheme(),\n          controllerAs: 'toast',\n          bindToController: true\n        };\n        return opts;\n      }]\n    })\n    .addMethod('updateContent', function(newContent) {\n      activeToastContent = newContent;\n    });\n\n  toastDefaultOptions.$inject = [\"$timeout\", \"$animate\", \"$mdToast\"];\n    return $mdToast;\n\n  /* @ngInject */\n  function toastDefaultOptions($timeout, $animate, $mdToast) {\n    return {\n      onShow: onShow,\n      onRemove: onRemove,\n      position: 'bottom left',\n      themable: true,\n      hideDelay: 3000\n    };\n\n    function onShow(scope, element, options) {\n      // 'top left' -> 'md-top md-left'\n      activeToastContent = options.content;\n      element.addClass(options.position.split(' ').map(function(pos) {\n        return 'md-' + pos;\n      }).join(' '));\n      options.parent.addClass(toastOpenClass(options.position));\n\n      options.onSwipe = function(ev, gesture) {\n        //Add swipeleft/swiperight class to element so it can animate correctly\n        element.addClass('md-' + ev.type.replace('$md.',''));\n        $timeout($mdToast.cancel);\n      };\n      element.on('$md.swipeleft $md.swiperight', options.onSwipe);\n      return $animate.enter(element, options.parent);\n    }\n\n    function onRemove(scope, element, options) {\n      element.off('$md.swipeleft $md.swiperight', options.onSwipe);\n      options.parent.removeClass(toastOpenClass(options.position));\n      return $animate.leave(element);\n    }\n\n    function toastOpenClass(position) {\n      return 'md-toast-open-' +\n        (position.indexOf('top') > -1 ? 'top' : 'bottom');\n    }\n  }\n\n}\nMdToastProvider.$inject = [\"$$interimElementProvider\"];\n\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\n/**\n * @ngdoc module\n * @name material.components.toolbar\n */\nangular.module('material.components.toolbar', [\n  'material.core',\n  'material.components.content'\n])\n  .directive('mdToolbar', mdToolbarDirective);\n\n/**\n * @ngdoc directive\n * @name mdToolbar\n * @module material.components.toolbar\n * @restrict E\n * @description\n * `md-toolbar` is used to place a toolbar in your app.\n *\n * Toolbars are usually used above a content area to display the title of the\n * current page, and show relevant action buttons for that page.\n *\n * You can change the height of the toolbar by adding either the\n * `md-medium-tall` or `md-tall` class to the toolbar.\n *\n * @usage\n * <hljs lang=\"html\">\n * <div layout=\"column\" layout-fill>\n *   <md-toolbar>\n *\n *     <div class=\"md-toolbar-tools\">\n *       <span>My App's Title</span>\n *\n *       <!-- fill up the space between left and right area -->\n *       <span flex></span>\n *\n *       <md-button>\n *         Right Bar Button\n *       </md-button>\n *     </div>\n *\n *   </md-toolbar>\n *   <md-content>\n *     Hello!\n *   </md-content>\n * </div>\n * </hljs>\n *\n * @param {boolean=} md-scroll-shrink Whether the header should shrink away as\n * the user scrolls down, and reveal itself as the user scrolls up.\n * Note: for scrollShrink to work, the toolbar must be a sibling of a\n * `md-content` element, placed before it. See the scroll shrink demo.\n *\n *\n * @param {number=} md-shrink-speed-factor How much to change the speed of the toolbar's\n * shrinking by. For example, if 0.25 is given then the toolbar will shrink\n * at one fourth the rate at which the user scrolls down. Default 0.5.\n */\nfunction mdToolbarDirective($$rAF, $mdConstant, $mdUtil, $mdTheming) {\n\n  return {\n    restrict: 'E',\n    controller: angular.noop,\n    link: function(scope, element, attr) {\n      $mdTheming(element);\n\n      if (angular.isDefined(attr.mdScrollShrink)) {\n        setupScrollShrink();\n      }\n\n      function setupScrollShrink() {\n        // Current \"y\" position of scroll\n        var y = 0;\n        // Store the last scroll top position\n        var prevScrollTop = 0;\n\n        var shrinkSpeedFactor = attr.mdShrinkSpeedFactor || 0.5;\n\n        var toolbarHeight;\n        var contentElement;\n\n        var debouncedContentScroll = $$rAF.throttle(onContentScroll);\n        var debouncedUpdateHeight = $mdUtil.debounce(updateToolbarHeight, 5 * 1000);\n\n        // Wait for $mdContentLoaded event from mdContent directive.\n        // If the mdContent element is a sibling of our toolbar, hook it up\n        // to scroll events.\n        scope.$on('$mdContentLoaded', onMdContentLoad);\n\n        function onMdContentLoad($event, newContentEl) {\n          // Toolbar and content must be siblings\n          if (element.parent()[0] === newContentEl.parent()[0]) {\n            // unhook old content event listener if exists\n            if (contentElement) {\n              contentElement.off('scroll', debouncedContentScroll);\n            }\n\n            newContentEl.on('scroll', debouncedContentScroll);\n            newContentEl.attr('scroll-shrink', 'true');\n\n            contentElement = newContentEl;\n            $$rAF(updateToolbarHeight);\n          }\n        }\n\n        function updateToolbarHeight() {\n          toolbarHeight = element.prop('offsetHeight');\n          // Add a negative margin-top the size of the toolbar to the content el.\n          // The content will start transformed down the toolbarHeight amount,\n          // so everything looks normal.\n          //\n          // As the user scrolls down, the content will be transformed up slowly\n          // to put the content underneath where the toolbar was.\n          contentElement.css(\n            'margin-top',\n            (-toolbarHeight * shrinkSpeedFactor) + 'px'\n          );\n          onContentScroll();\n        }\n\n        function onContentScroll(e) {\n          var scrollTop = e ? e.target.scrollTop : prevScrollTop;\n\n          debouncedUpdateHeight();\n\n          y = Math.min(\n            toolbarHeight / shrinkSpeedFactor,\n            Math.max(0, y + scrollTop - prevScrollTop)\n          );\n\n          element.css(\n            $mdConstant.CSS.TRANSFORM,\n            'translate3d(0,' + (-y * shrinkSpeedFactor) + 'px,0)'\n          );\n          contentElement.css(\n            $mdConstant.CSS.TRANSFORM,\n            'translate3d(0,' + ((toolbarHeight - y) * shrinkSpeedFactor) + 'px,0)'\n          );\n\n          prevScrollTop = scrollTop;\n        }\n\n      }\n\n    }\n  };\n\n}\nmdToolbarDirective.$inject = [\"$$rAF\", \"$mdConstant\", \"$mdUtil\", \"$mdTheming\"];\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\n/**\n * @ngdoc module\n * @name material.components.tooltip\n */\nangular.module('material.components.tooltip', [\n  'material.core'\n])\n  .directive('mdTooltip', MdTooltipDirective);\n\n/**\n * @ngdoc directive\n * @name mdTooltip\n * @module material.components.tooltip\n * @description\n * Tooltips are used to describe elements that are interactive and primarily graphical (not textual).\n *\n * Place a `<md-tooltip>` as a child of the element it describes.\n *\n * A tooltip will activate when the user focuses, hovers over, or touches the parent.\n *\n * @usage\n * <hljs lang=\"html\">\n * <md-icon icon=\"/img/icons/ic_play_arrow_24px.svg\">\n *   <md-tooltip>\n *     Play Music\n *   </md-tooltip>\n * </md-icon>\n * </hljs>\n *\n * @param {expression=} md-visible Boolean bound to whether the tooltip is\n * currently visible.\n * @param {number=} md-delay How many milliseconds to wait to show the tooltip after the user focuses, hovers, or touches the parent. Defaults to 400ms.\n * @param {string=} md-direction Which direction would you like the tooltip to go?  Supports left, right, top, and bottom.  Defaults to bottom.\n */\nfunction MdTooltipDirective($timeout, $window, $$rAF, $document, $mdUtil, $mdTheming, $rootElement, $animate, $q) {\n\n  var TOOLTIP_SHOW_DELAY = 0;\n  var TOOLTIP_WINDOW_EDGE_SPACE = 8;\n\n  return {\n    restrict: 'E',\n    transclude: true,\n    template:\n      '<div class=\"md-background\"></div>' +\n      '<div class=\"md-content\" ng-transclude></div>',\n    scope: {\n      visible: '=?mdVisible',\n      delay: '=?mdDelay'\n    },\n    link: postLink\n  };\n\n  function postLink(scope, element, attr, contentCtrl) {\n    $mdTheming(element);\n    var parent = element.parent();\n    var background = angular.element(element[0].getElementsByClassName('md-background')[0]);\n    var content = angular.element(element[0].getElementsByClassName('md-content')[0]);\n    var direction = attr.mdDirection;\n\n    // Keep looking for a higher parent if our current one has no pointer events\n    while ($window.getComputedStyle(parent[0])['pointer-events'] == 'none') {\n      parent = parent.parent();\n    }\n\n    // Look for the nearest parent md-content, stopping at the rootElement.\n    var current = element.parent()[0];\n    while (current && current !== $rootElement[0] && current !== document.body) {\n      if (current.tagName && current.tagName.toLowerCase() == 'md-content') break;\n      current = current.parentNode;\n    }\n    var tooltipParent = angular.element(current || document.body);\n\n    if (!angular.isDefined(attr.mdDelay)) {\n      scope.delay = TOOLTIP_SHOW_DELAY;\n    }\n\n    // We will re-attach tooltip when visible\n    element.detach();\n    element.attr('role', 'tooltip');\n    element.attr('id', attr.id || ('tooltip_' + $mdUtil.nextUid()));\n\n    parent.on('focus mouseenter touchstart', function() { setVisible(true); });\n    parent.on('blur mouseleave touchend touchcancel', function() { if ($document[0].activeElement !== parent[0]) setVisible(false); });\n\n    scope.$watch('visible', function(isVisible) {\n      if (isVisible) showTooltip();\n      else hideTooltip();\n    });\n\n    var debouncedOnResize = $$rAF.throttle(function () { if (scope.visible) positionTooltip(); });\n    angular.element($window).on('resize', debouncedOnResize);\n\n    // Be sure to completely cleanup the element on destroy\n    scope.$on('$destroy', function() {\n      scope.visible = false;\n      element.remove();\n      angular.element($window).off('resize', debouncedOnResize);\n    });\n\n    // *******\n    // Methods\n    // *******\n\n    // If setting visible to true, debounce to scope.delay ms\n    // If setting visible to false and no timeout is active, instantly hide the tooltip.\n    function setVisible (value) {\n      setVisible.value = !!value;\n      if (!setVisible.queued) {\n        if (value) {\n          setVisible.queued = true;\n          $timeout(function() {\n            scope.visible = setVisible.value;\n            setVisible.queued = false;\n          }, scope.delay);\n\n        } else {\n          $timeout(function() { scope.visible = false; });\n        }\n      }\n    }\n\n    function showTooltip() {\n      // Insert the element before positioning it, so we can get position\n      parent.attr('aria-describedby', element.attr('id'));\n      tooltipParent.append(element);\n\n      // Wait until the element has been in the dom for two frames before fading it in.\n      // Additionally, we position the tooltip twice to avoid positioning bugs\n      positionTooltip();\n      $animate.addClass(element, 'md-show');\n      $animate.addClass(background, 'md-show');\n      $animate.addClass(content, 'md-show');\n    }\n\n    function hideTooltip() {\n      parent.removeAttr('aria-describedby');\n      $q.all([\n        $animate.removeClass(content, 'md-show'),\n        $animate.removeClass(background, 'md-show'),\n        $animate.removeClass(element, 'md-show')\n      ]).then(function () {\n        if (!scope.visible) element.detach();\n      });\n    }\n\n    function positionTooltip() {\n      var tipRect = $mdUtil.offsetRect(element, tooltipParent);\n      var parentRect = $mdUtil.offsetRect(parent, tooltipParent);\n      var newPosition = getPosition(direction);\n\n      // If the user provided a direction, just nudge the tooltip onto the screen\n      // Otherwise, recalculate based on 'top' since default is 'bottom'\n      if (direction) {\n        newPosition = fitInParent(newPosition);\n      } else if (newPosition.top > tooltipParent.prop('scrollHeight') - tipRect.height - TOOLTIP_WINDOW_EDGE_SPACE) {\n        newPosition = fitInParent(getPosition('top'));\n      }\n\n      element.css({top: newPosition.top + 'px', left: newPosition.left + 'px'});\n\n      positionBackground();\n\n      function positionBackground () {\n        var size = direction === 'left' || direction === 'right'\n              ? Math.sqrt(Math.pow(tipRect.width, 2) + Math.pow(tipRect.height / 2, 2)) * 2\n              : Math.sqrt(Math.pow(tipRect.width / 2, 2) + Math.pow(tipRect.height, 2)) * 2,\n            position = direction === 'left' ? { left: 100, top: 50 }\n              : direction === 'right' ? { left: 0, top: 50 }\n              : direction === 'top' ? { left: 50, top: 100 }\n              : { left: 50, top: 0 };\n        background.css({\n          width: size + 'px',\n          height: size + 'px',\n          left: position.left + '%',\n          top: position.top + '%'\n        });\n      }\n\n      function fitInParent (pos) {\n        var newPosition = { left: pos.left, top: pos.top };\n        newPosition.left = Math.min( newPosition.left, tooltipParent.prop('scrollWidth') - tipRect.width - TOOLTIP_WINDOW_EDGE_SPACE );\n        newPosition.left = Math.max( newPosition.left, TOOLTIP_WINDOW_EDGE_SPACE );\n        newPosition.top  = Math.min( newPosition.top,  tooltipParent.prop('scrollHeight') - tipRect.height - TOOLTIP_WINDOW_EDGE_SPACE );\n        newPosition.top  = Math.max( newPosition.top,  TOOLTIP_WINDOW_EDGE_SPACE );\n        return newPosition;\n      }\n\n      function getPosition (dir) {\n        return dir === 'left'\n          ? { left: parentRect.left - tipRect.width - TOOLTIP_WINDOW_EDGE_SPACE,\n              top: parentRect.top + parentRect.height / 2 - tipRect.height / 2 }\n          : dir === 'right'\n          ? { left: parentRect.left + parentRect.width + TOOLTIP_WINDOW_EDGE_SPACE,\n              top: parentRect.top + parentRect.height / 2 - tipRect.height / 2 }\n          : dir === 'top'\n          ? { left: parentRect.left + parentRect.width / 2 - tipRect.width / 2,\n              top: parentRect.top - tipRect.height - TOOLTIP_WINDOW_EDGE_SPACE }\n          : { left: parentRect.left + parentRect.width / 2 - tipRect.width / 2,\n              top: parentRect.top + parentRect.height + TOOLTIP_WINDOW_EDGE_SPACE };\n      }\n    }\n\n  }\n\n}\nMdTooltipDirective.$inject = [\"$timeout\", \"$window\", \"$$rAF\", \"$document\", \"$mdUtil\", \"$mdTheming\", \"$rootElement\", \"$animate\", \"$q\"];\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\n/**\n * @ngdoc module\n * @name material.components.whiteframe\n */\nangular.module('material.components.whiteframe', []);\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function () {\n  'use strict';\n  angular\n      .module('material.components.autocomplete')\n      .controller('MdAutocompleteCtrl', MdAutocompleteCtrl);\n\n  function MdAutocompleteCtrl ($scope, $element, $q, $mdUtil, $mdConstant) {\n\n    //-- private variables\n    var self = this,\n        itemParts = $scope.itemsExpr.split(/ in /i),\n        itemExpr = itemParts[1],\n        elements = {\n          main:  $element[0],\n          ul:    $element[0].getElementsByTagName('ul')[0],\n          input: $element[0].getElementsByTagName('input')[0]\n        },\n        promise = null,\n        cache = {},\n        noBlur = false;\n\n    //-- public variables\n    self.scope = $scope;\n    self.parent = $scope.$parent;\n    self.itemName = itemParts[0];\n    self.matches = [];\n    self.loading = false;\n    self.hidden = true;\n    self.index = 0;\n    self.keydown = keydown;\n    self.blur = blur;\n    self.clear = clearValue;\n    self.select = select;\n    self.getCurrentDisplayValue = getCurrentDisplayValue;\n    self.fetch = $mdUtil.debounce(fetchResults);\n    self.messages = [];\n\n    //-- While the mouse is inside of the dropdown, we don't want to handle input blur\n    //-- This is to allow the user to scroll the list without causing it to hide\n    self.listEnter = function () { noBlur = true; };\n    self.listLeave = function () { noBlur = false; };\n    self.mouseUp   = function () { elements.input.focus(); };\n\n    return init();\n\n    //-- start method definitions\n    function init () {\n      configureWatchers();\n      configureAria();\n    }\n\n    function configureAria () {\n      var ul = angular.element(elements.ul),\n          input = angular.element(elements.input),\n          id = ul.attr('id') || 'ul_' + $mdUtil.nextUid();\n      ul.attr('id', id);\n      input.attr('aria-owns', id);\n    }\n\n    function getItemScope (item) {\n      if (!item) return;\n      var locals = {};\n      if (self.itemName) locals[self.itemName] = item;\n      return locals;\n    }\n\n    function configureWatchers () {\n      var wait = parseInt($scope.delay, 10) || 0;\n      $scope.$watch('searchText', wait\n          ? $mdUtil.debounce(handleSearchText, wait)\n          : handleSearchText);\n      $scope.$watch('selectedItem', function (selectedItem, previousSelectedItem) {\n        if ($scope.itemChange && selectedItem !== previousSelectedItem)\n          $scope.itemChange(getItemScope(selectedItem));\n      });\n    }\n\n    function handleSearchText (searchText, previousSearchText) {\n      self.index = -1;\n      if (!searchText || searchText.length < Math.max(parseInt($scope.minLength, 10), 1)) {\n        self.loading = false;\n        self.matches = [];\n        self.hidden = shouldHide();\n        updateMessages();\n        return;\n      }\n      var term = searchText.toLowerCase();\n      if (promise && promise.cancel) {\n        promise.cancel();\n        promise = null;\n      }\n      if (!$scope.noCache && cache[term]) {\n        self.matches = cache[term];\n        updateMessages();\n      } else {\n        self.fetch(searchText);\n      }\n      self.hidden = shouldHide();\n      if ($scope.textChange && searchText !== previousSearchText)\n        $scope.textChange(getItemScope($scope.selectedItem));\n    }\n\n    function fetchResults (searchText) {\n      var items = $scope.$parent.$eval(itemExpr),\n          term = searchText.toLowerCase();\n      if (angular.isArray(items)) {\n        handleResults(items);\n      } else {\n        self.loading = true;\n        promise = $q.when(items).then(handleResults);\n      }\n      function handleResults (matches) {\n        cache[term] = matches;\n        if (searchText !== $scope.searchText) return; //-- just cache the results if old request\n        promise = null;\n        self.loading = false;\n        self.matches = matches;\n        self.hidden = shouldHide();\n        updateMessages();\n      }\n    }\n\n    function updateMessages () {\n      if (self.hidden) return;\n      switch (self.matches.length) {\n        case 0:  return self.messages.splice(0);\n        case 1:  return self.messages.push({ display: 'There is 1 match available.' });\n        default: return self.messages.push({ display: 'There are '\n            + self.matches.length\n            + ' matches available.' });\n      }\n    }\n\n    function updateSelectionMessage () {\n      self.messages.push({ display: getCurrentDisplayValue() });\n    }\n\n    function blur () {\n      if (!noBlur) self.hidden = true;\n    }\n\n    function keydown (event) {\n      switch (event.keyCode) {\n        case $mdConstant.KEY_CODE.DOWN_ARROW:\n            if (self.loading) return;\n            event.preventDefault();\n            self.index = Math.min(self.index + 1, self.matches.length - 1);\n            updateScroll();\n            updateSelectionMessage();\n            break;\n        case $mdConstant.KEY_CODE.UP_ARROW:\n            if (self.loading) return;\n            event.preventDefault();\n            self.index = Math.max(0, self.index - 1);\n            updateScroll();\n            updateSelectionMessage();\n            break;\n        case $mdConstant.KEY_CODE.ENTER:\n            if (self.loading || self.index < 0) return;\n            event.preventDefault();\n            select(self.index);\n            break;\n        case $mdConstant.KEY_CODE.ESCAPE:\n            self.matches = [];\n            self.hidden = true;\n            self.index = -1;\n            break;\n        case $mdConstant.KEY_CODE.TAB:\n            break;\n        default:\n      }\n    }\n\n    function clearValue () {\n      $scope.searchText = '';\n      select(-1);\n      elements.input.focus();\n    }\n\n    function shouldHide () {\n      return self.matches.length === 1 && $scope.searchText === getDisplayValue(self.matches[0]);\n    }\n\n    function getCurrentDisplayValue () {\n      return getDisplayValue(self.matches[self.index]);\n    }\n\n    function getDisplayValue (item) {\n      return (item && $scope.itemText) ? $scope.itemText(getItemScope(item)) : item;\n    }\n\n    function select (index) {\n      $scope.selectedItem = self.matches[index];\n      $scope.searchText = getDisplayValue($scope.selectedItem) || $scope.searchText;\n      self.hidden = true;\n      self.index = -1;\n      self.matches = [];\n    }\n\n    function updateScroll () {\n      var top = 41 * self.index,\n          bot = top + 41,\n          hgt = 41 * 5.5;\n      if (top < elements.ul.scrollTop) {\n        elements.ul.scrollTop = top;\n      } else if (bot > elements.ul.scrollTop + hgt) {\n        elements.ul.scrollTop = bot - hgt;\n      }\n    }\n\n  }\n  MdAutocompleteCtrl.$inject = [\"$scope\", \"$element\", \"$q\", \"$mdUtil\", \"$mdConstant\"];\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function () {\n  'use strict';\n  angular\n      .module('material.components.autocomplete')\n      .directive('mdAutocomplete', MdAutocomplete);\n\n  /**\n   * @ngdoc directive\n   * @name mdAutocomplete\n   * @module material.components.autocomplete\n   *\n   * @description\n   * `<md-autocomplete>` is a special input component with a drop-down of all possible matches to a custom query.\n   * This component allows you to provide real-time suggestions as the user types in the input area.\n   *\n   * @param {string=} md-search-text A model to bind the search query text to\n   * @param {object=} md-selected-item A model to bind the selected item to\n   * @param {expression} md-items An expression in the format of `item in items` to iterate over matches for your search.\n   * @param {string=} md-item-text An expression that will convert your object to a single string.\n   * @param {string=} placeholder Placeholder text that will be forwarded to the input.\n   * @param {boolean=} md-no-cache Disables the internal caching that happens in autocomplete\n   * @param {expression} md-selected-item-change An expression to be run each time a new item is selected\n   * @param {expression} md-search-text-change An expression to be run each time the search text updates\n   * @param {boolean=} ng-disabled Determines whether or not to disable the input field\n   * @param {number=} md-min-length Specifies the minimum length of text before autocomplete will make suggestions\n   * @param {number=} md-delay Specifies the amount of time (in milliseconds) to wait before looking for results\n   *\n   * @usage\n   * <hljs lang=\"html\">\n   *   <md-autocomplete\n   *       md-selected-item=\"selectedItem\"\n   *       md-search-text=\"searchText\"\n   *       md-items=\"item in getMatches(searchText)\"\n   *       md-item-text=\"item.display\">\n   *     <span md-highlight-text=\"searchText\">{{item.display}}</span>\n   *   </md-autocomplete>\n   * </hljs>\n   */\n\n  function MdAutocomplete () {\n    return {\n      template:     '\\\n        <md-autocomplete-wrap role=\"listbox\">\\\n          <input type=\"text\"\\\n              ng-disabled=\"isDisabled\"\\\n              ng-model=\"searchText\"\\\n              ng-keydown=\"$mdAutocompleteCtrl.keydown($event)\"\\\n              ng-blur=\"$mdAutocompleteCtrl.blur()\"\\\n              placeholder=\"{{placeholder}}\"\\\n              aria-label=\"{{placeholder}}\"\\\n              aria-autocomplete=\"list\"\\\n              aria-haspopup=\"true\"\\\n              aria-activedescendant=\"\"\\\n              aria-expanded=\"{{!$mdAutocompleteCtrl.hidden}}\"/>\\\n          <button\\\n              type=\"button\"\\\n              ng-if=\"searchText\"\\\n              ng-click=\"$mdAutocompleteCtrl.clear()\">\\\n            <md-icon md-svg-icon=\"cancel\"></md-icon>\\\n            <span class=\"visually-hidden\">Clear</span>\\\n          </button>\\\n          <md-progress-linear\\\n              ng-if=\"$mdAutocompleteCtrl.loading\"\\\n              md-mode=\"indeterminate\"></md-progress-linear>\\\n        </md-autocomplete-wrap>\\\n        <ul role=\"presentation\"\\\n            ng-mouseenter=\"$mdAutocompleteCtrl.listEnter()\"\\\n            ng-mouseleave=\"$mdAutocompleteCtrl.listLeave()\"\\\n            ng-mouseup=\"$mdAutocompleteCtrl.mouseUp()\">\\\n          <li ng-repeat=\"(index, item) in $mdAutocompleteCtrl.matches\"\\\n              ng-class=\"{ selected: index === $mdAutocompleteCtrl.index }\"\\\n              ng-show=\"searchText && !$mdAutocompleteCtrl.hidden\"\\\n              ng-click=\"$mdAutocompleteCtrl.select(index)\"\\\n              ng-transclude\\\n              md-autocomplete-list-item=\"$mdAutocompleteCtrl.itemName\">\\\n          </li>\\\n        </ul>\\\n        <aria-status\\\n            class=\"visually-hidden\"\\\n            role=\"status\"\\\n            aria-live=\"assertive\">\\\n          <p ng-repeat=\"message in $mdAutocompleteCtrl.messages\">{{message.display}}</p>\\\n        </aria-status>',\n      transclude:   true,\n      controller:   'MdAutocompleteCtrl',\n      controllerAs: '$mdAutocompleteCtrl',\n      scope:        {\n        searchText:   '=mdSearchText',\n        selectedItem: '=mdSelectedItem',\n        itemsExpr:    '@mdItems',\n        itemText:     '&mdItemText',\n        placeholder:  '@placeholder',\n        noCache:      '=mdNoCache',\n        itemChange:   '&mdSelectedItemChange',\n        textChange:   '&mdSearchTextChange',\n        isDisabled:   '=ngDisabled',\n        minLength:    '=mdMinLength',\n        delay:        '=mdDelay'\n      }\n    };\n  }\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function () {\n  'use strict';\n  angular\n      .module('material.components.autocomplete')\n      .controller('MdHighlightCtrl', MdHighlightCtrl);\n\n  function MdHighlightCtrl ($scope, $element, $interpolate) {\n    var term = $element.attr('md-highlight-text'),\n        text = $interpolate($element.text())($scope),\n        watcher = $scope.$watch(term, function (term) {\n          var regex = new RegExp('^' + sanitize(term), 'i'),\n              html = text.replace(regex, '<span class=\"highlight\">$&</span>');\n          $element.html(html);\n        });\n    $element.on('$destroy', function () { watcher(); });\n\n    function sanitize (term) {\n      if (!term) return term;\n      return term.replace(/[\\*\\[\\]\\(\\)\\{\\}\\\\\\^\\$]/g, '\\\\$&');\n    }\n  }\n  MdHighlightCtrl.$inject = [\"$scope\", \"$element\", \"$interpolate\"];\n\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function () {\n  'use strict';\n  angular\n      .module('material.components.autocomplete')\n      .directive('mdHighlightText', MdHighlight);\n\n  /**\n   * @ngdoc directive\n   * @name mdHighlightText\n   * @module material.components.autocomplete\n   *\n   * @description\n   * The `md-highlight-text` directive allows you to specify text that should be highlighted within\n   * an element.  Highlighted text will be wrapped in `<span class=\"highlight\"></span>` which can\n   * be styled through CSS.  Please note that child elements may not be used with this directive.\n   *\n   * @param {string=} md-highlight-text A model to be searched for\n   *\n   * @usage\n   * <hljs lang=\"html\">\n   * <input placeholder=\"Enter a search term...\" ng-model=\"searchTerm\" type=\"text\" />\n   * <ul>\n   *   <li ng-repeat=\"result in results\" md-highlight-text=\"searchTerm\">\n   *     {{result.text}}\n   *   </li>\n   * </ul>\n   * </hljs>\n   */\n\n  function MdHighlight () {\n    return {\n      terminal: true,\n      scope: false,\n      controller: 'MdHighlightCtrl'\n    };\n  }\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function () {\n  'use strict';\n  angular\n      .module('material.components.autocomplete')\n      .directive('mdAutocompleteListItem', MdAutocompleteListItem);\n\n  function MdAutocompleteListItem ($compile, $mdUtil) {\n    return {\n      require: '^?mdAutocomplete',\n      terminal: true,\n      link: link,\n      scope: false\n    };\n    function link (scope, element, attr, ctrl) {\n      var newScope = ctrl.parent.$new(false, ctrl.parent),\n          itemName = ctrl.scope.$eval(attr.mdAutocompleteListItem);\n      newScope[itemName] = scope.item;\n      $compile(element.contents())(newScope);\n      element.attr({ 'role': 'option', 'id': 'item_' + $mdUtil.nextUid() });\n    }\n  }\n  MdAutocompleteListItem.$inject = [\"$compile\", \"$mdUtil\"];\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\n/**\n * Conditionally configure ink bar animations when the\n * tab selection changes. If `mdNoBar` then do not show the\n * bar nor animate.\n */\nangular.module('material.components.tabs')\n  .directive('mdTabsInkBar', MdTabInkDirective);\n\nfunction MdTabInkDirective($$rAF) {\n\n  var lastIndex = 0;\n\n  return {\n    restrict: 'E',\n    require: ['^?mdNoBar', '^mdTabs'],\n    link: postLink\n  };\n\n  function postLink(scope, element, attr, ctrls) {\n    var mdNoBar = !!ctrls[0];\n\n    var tabsCtrl = ctrls[1],\n        debouncedUpdateBar = $$rAF.throttle(updateBar);\n\n    tabsCtrl.inkBarElement = element;\n\n    scope.$on('$mdTabsPaginationChanged', debouncedUpdateBar);\n\n    function updateBar() {\n      var selected = tabsCtrl.getSelectedItem();\n      var hideInkBar = !selected || tabsCtrl.count() < 2 || mdNoBar;\n\n      element.css('display', hideInkBar ? 'none' : 'block');\n\n      if (hideInkBar) return;\n\n      if (scope.pagination && scope.pagination.tabData) {\n        var index = tabsCtrl.getSelectedIndex();\n        var data = scope.pagination.tabData.tabs[index] || { left: 0, right: 0, width: 0 };\n        var right = element.parent().prop('offsetWidth') - data.right;\n        var classNames = ['md-transition-left', 'md-transition-right', 'md-no-transition'];\n        var classIndex = lastIndex > index ? 0 : lastIndex < index ? 1 : 2;\n\n        element\n            .removeClass(classNames.join(' '))\n            .addClass(classNames[classIndex])\n            .css({ left: data.left + 'px', right: right + 'px' });\n\n        lastIndex = index;\n      }\n    }\n  }\n}\nMdTabInkDirective.$inject = [\"$$rAF\"];\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\nangular.module('material.components.tabs')\n    .directive('mdTabsPagination', TabPaginationDirective);\n\nfunction TabPaginationDirective($mdConstant, $window, $$rAF, $$q, $timeout, $mdMedia) {\n\n  // Must match (2 * width of paginators) in scss\n  var PAGINATORS_WIDTH = (8 * 4) * 2;\n\n  return {\n    restrict: 'A',\n    require: '^mdTabs',\n    link: postLink\n  };\n\n  function postLink(scope, element, attr, tabsCtrl) {\n\n    var tabs = element[0].getElementsByTagName('md-tab');\n    var debouncedUpdatePagination = $$rAF.throttle(updatePagination);\n    var tabsParent = element.children();\n    var locked = false;\n    var state = scope.pagination = {\n      page: -1,\n      active: false,\n      clickNext: function() { locked || userChangePage(+1); },\n      clickPrevious: function() { locked || userChangePage(-1); }\n    };\n\n    scope.$on('$mdTabsChanged', debouncedUpdatePagination);\n    angular.element($window).on('resize', debouncedUpdatePagination);\n\n    scope.$on('$destroy', function() {\n      angular.element($window).off('resize', debouncedUpdatePagination);\n    });\n\n    scope.$watch(function() { return tabsCtrl.tabToFocus; }, onTabFocus);\n\n    // Make sure we don't focus an element on the next page\n    // before it's in view\n    function onTabFocus(tab, oldTab) {\n      if (!tab) return;\n\n      var pageIndex = getPageForTab(tab);\n      if (!state.active || pageIndex === state.page) {\n        tab.element.focus();\n      } else {\n        // Go to the new page, wait for the page transition to end, then focus.\n        oldTab && oldTab.element.blur();\n        setPage(pageIndex).then(function() {\n          locked = false;\n          tab.element.focus();\n        });\n      }\n    }\n\n    // Called when page is changed by a user action (click)\n    function userChangePage(increment) {\n      var sizeData = state.tabData;\n      var newPage = Math.max(0, Math.min(sizeData.pages.length - 1, state.page + increment));\n      var newTabIndex = sizeData.pages[newPage][ increment > 0 ? 'firstTabIndex' : 'lastTabIndex' ];\n      var newTab = tabsCtrl.itemAt(newTabIndex);\n      locked = true;\n      onTabFocus(newTab);\n    }\n\n    function updatePagination() {\n      if (!element.prop('offsetParent')) {\n        var watcher = waitForVisible();\n        return;\n      }\n\n      var tabs = element.find('md-tab');\n\n      disablePagination();\n\n      var sizeData = state.tabData = calculateTabData();\n      var needPagination = state.active = sizeData.pages.length > 1;\n\n      if (needPagination) { enablePagination(); }\n\n      scope.$evalAsync(function () { scope.$broadcast('$mdTabsPaginationChanged'); });\n\n      function enablePagination() {\n        tabsParent.css('width', '9999px');\n\n        //-- apply filler margins\n        angular.forEach(sizeData.tabs, function (tab) {\n          angular.element(tab.element).css('margin-left', tab.filler + 'px');\n        });\n\n        setPage(getPageForTab(tabsCtrl.getSelectedItem()));\n      }\n\n      function disablePagination() {\n        slideTabButtons(0);\n        tabsParent.css('width', '');\n        tabs.css('width', '');\n        tabs.css('margin-left', '');\n        state.page = null;\n        state.active = false;\n      }\n\n      function waitForVisible() {\n        return watcher || scope.$watch(\n            function () {\n              $timeout(function () {\n                if (element[0].offsetParent) {\n                  if (angular.isFunction(watcher)) {\n                    watcher();\n                  }\n                  debouncedUpdatePagination();\n                  watcher = null;\n                }\n              }, 0, false);\n            }\n        );\n      }\n    }\n\n    function slideTabButtons(x) {\n      if (tabsCtrl.pagingOffset === x) {\n        // Resolve instantly if no change\n        return $$q.when();\n      }\n\n      var deferred = $$q.defer();\n\n      tabsCtrl.$$pagingOffset = x;\n      tabsParent.css($mdConstant.CSS.TRANSFORM, 'translate3d(' + x + 'px,0,0)');\n      tabsParent.on($mdConstant.CSS.TRANSITIONEND, onTabsParentTransitionEnd);\n\n      return deferred.promise;\n\n      function onTabsParentTransitionEnd(ev) {\n        // Make sure this event didn't bubble up from an animation in a child element.\n        if (ev.target === tabsParent[0]) {\n          tabsParent.off($mdConstant.CSS.TRANSITIONEND, onTabsParentTransitionEnd);\n          deferred.resolve();\n        }\n      }\n    }\n\n    function shouldStretchTabs() {\n      switch (scope.stretchTabs) {\n        case 'never':  return false;\n        case 'always': return true;\n        default:       return $mdMedia('sm');\n      }\n    }\n\n    function calculateTabData(noAdjust) {\n      var clientWidth = element.parent().prop('offsetWidth');\n      var tabsWidth = clientWidth - PAGINATORS_WIDTH - 1;\n      var $tabs = angular.element(tabs);\n      var totalWidth = 0;\n      var max = 0;\n      var tabData = [];\n      var pages = [];\n      var currentPage;\n\n      $tabs.css('max-width', '');\n      angular.forEach(tabs, function (tab, index) {\n        var tabWidth = Math.min(tabsWidth, tab.offsetWidth);\n        var data = {\n          element: tab,\n          left: totalWidth,\n          width: tabWidth,\n          right: totalWidth + tabWidth,\n          filler: 0\n        };\n\n        //-- This calculates the page for each tab.  The first page will use the clientWidth, which\n        //   does not factor in the pagination items.  After the first page, tabsWidth is used\n        //   because at this point, we know that the pagination buttons will be shown.\n        data.page = Math.ceil(data.right / ( pages.length === 1 && index === tabs.length - 1 ? clientWidth : tabsWidth )) - 1;\n\n        if (data.page >= pages.length) {\n          data.filler = (tabsWidth * data.page) - data.left;\n          data.right += data.filler;\n          data.left += data.filler;\n          currentPage = {\n            left: data.left,\n            firstTabIndex: index,\n            lastTabIndex: index,\n            tabs: [ data ]\n          };\n          pages.push(currentPage);\n        } else {\n          currentPage.lastTabIndex = index;\n          currentPage.tabs.push(data);\n        }\n        totalWidth = data.right;\n        max = Math.max(max, tabWidth);\n        tabData.push(data);\n      });\n      $tabs.css('max-width', tabsWidth + 'px');\n\n      if (!noAdjust && shouldStretchTabs()) {\n        return adjustForStretchedTabs();\n      } else {\n        return {\n          width: totalWidth,\n          max: max,\n          tabs: tabData,\n          pages: pages,\n          tabElements: tabs\n        };\n      }\n\n\n      function adjustForStretchedTabs() {\n        var canvasWidth = pages.length === 1 ? clientWidth : tabsWidth;\n        var tabsPerPage = Math.min(Math.floor(canvasWidth / max), tabs.length);\n        var tabWidth    = Math.floor(canvasWidth / tabsPerPage);\n        $tabs.css('width', tabWidth + 'px');\n        return calculateTabData(true);\n      }\n    }\n\n    function getPageForTab(tab) {\n      var tabIndex = tabsCtrl.indexOf(tab);\n      if (tabIndex === -1) return 0;\n\n      var sizeData = state.tabData;\n\n      return sizeData ? sizeData.tabs[tabIndex].page : 0;\n    }\n\n    function setPage(page) {\n      if (page === state.page) return;\n\n      var lastPage = state.tabData.pages.length - 1;\n\n      if (page < 0) page = 0;\n      if (page > lastPage) page = lastPage;\n\n      state.hasPrev = page > 0;\n      state.hasNext = page < lastPage;\n\n      state.page = page;\n\n      scope.$broadcast('$mdTabsPaginationChanged');\n\n      return slideTabButtons(-state.tabData.pages[page].left);\n    }\n  }\n\n}\nTabPaginationDirective.$inject = [\"$mdConstant\", \"$window\", \"$$rAF\", \"$$q\", \"$timeout\", \"$mdMedia\"];\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\n\nangular.module('material.components.tabs')\n  .controller('$mdTab', TabItemController);\n\nfunction TabItemController($scope, $element, $attrs, $compile, $animate, $mdUtil, $parse, $timeout) {\n  var self = this;\n  var tabsCtrl = $element.controller('mdTabs');\n\n  // Properties\n  self.contentContainer = angular.element('<div class=\"md-tab-content ng-hide\">');\n  self.element = $element;\n\n  // Methods\n  self.isDisabled = isDisabled;\n  self.onAdd = onAdd;\n  self.onRemove = onRemove;\n  self.onSelect = onSelect;\n  self.onDeselect = onDeselect;\n\n  var disabledParsed = $parse($attrs.ngDisabled);\n  function isDisabled() {\n    return disabledParsed($scope.$parent);\n  }\n  \n  /**\n   * Add the tab's content to the DOM container area in the tabs,\n   * @param contentArea the contentArea to add the content of the tab to\n   */\n  function onAdd(contentArea, shouldDisconnectScope) {\n    if (self.content.length) {\n      self.contentContainer.append(self.content);\n      self.contentScope = $scope.$parent.$new();\n      contentArea.append(self.contentContainer);\n\n      $compile(self.contentContainer)(self.contentScope);\n      if (shouldDisconnectScope === true) {\n        $timeout(function () {\n          $mdUtil.disconnectScope(self.contentScope);\n        }, 0, false);\n      }\n    }\n  }\n\n  function onRemove() {\n    $animate.leave(self.contentContainer).then(function() {\n      self.contentScope && self.contentScope.$destroy();\n      self.contentScope = null;\n    });\n  }\n\n  function toggleAnimationClass(rightToLeft) {\n    self.contentContainer[rightToLeft ? 'addClass' : 'removeClass']('md-transition-rtl');\n  }\n\n  function onSelect(rightToLeft) {\n    // Resume watchers and events firing when tab is selected\n    $mdUtil.reconnectScope(self.contentScope);\n\n    $element\n      .addClass('active')\n      .attr({\n        'aria-selected': true,\n        'tabIndex': 0\n      })\n      .on('$md.swipeleft $md.swiperight', onSwipe);\n\n    toggleAnimationClass(rightToLeft);\n    $animate.removeClass(self.contentContainer, 'ng-hide');\n\n    $scope.onSelect();\n  }\n\n  function onDeselect(rightToLeft) {\n    // Stop watchers & events from firing while tab is deselected\n    $mdUtil.disconnectScope(self.contentScope);\n\n    $element\n      .removeClass('active')\n      .attr({\n        'aria-selected': false,\n        'tabIndex': -1\n      })\n      .off('$md.swipeleft $md.swiperight', onSwipe);\n\n    toggleAnimationClass(rightToLeft);\n    $animate.addClass(self.contentContainer, 'ng-hide');\n\n    $scope.onDeselect();\n  }\n\n  ///// Private functions\n\n  function onSwipe(ev) {\n    $scope.$apply(function() {\n      if (/left/.test(ev.type)) {\n        tabsCtrl.select(tabsCtrl.next());\n      } else {\n        tabsCtrl.select(tabsCtrl.previous());\n      }\n    });\n  }\n \n\n}\nTabItemController.$inject = [\"$scope\", \"$element\", \"$attrs\", \"$compile\", \"$animate\", \"$mdUtil\", \"$parse\", \"$timeout\"];\n\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\nangular.module('material.components.tabs')\n  .directive('mdTab', MdTabDirective);\n\n/**\n * @ngdoc directive\n * @name mdTab\n * @module material.components.tabs\n *\n * @restrict E\n *\n * @description\n * Use the `<md-tab>` a nested directive used within `<md-tabs>` to specify a tab with a **label** and optional *view content*.\n *\n * If the `label` attribute is not specified, then an optional `<md-tab-label>` tag can be used to specify more\n * complex tab header markup. If neither the **label** nor the **md-tab-label** are specified, then the nested\n * markup of the `<md-tab>` is used as the tab header markup.\n *\n * If a tab **label** has been identified, then any **non-**`<md-tab-label>` markup\n * will be considered tab content and will be transcluded to the internal `<div class=\"md-tabs-content\">` container.\n *\n * This container is used by the TabsController to show/hide the active tab's content view. This synchronization is\n * automatically managed by the internal TabsController whenever the tab selection changes. Selection changes can\n * be initiated via data binding changes, programmatic invocation, or user gestures.\n *\n * @param {string=} label Optional attribute to specify a simple string as the tab label\n * @param {boolean=} md-active When evaluteing to true, selects the tab.\n * @param {boolean=} disabled If present, disabled tab selection.\n * @param {expression=} md-on-deselect Expression to be evaluated after the tab has been de-selected.\n * @param {expression=} md-on-select Expression to be evaluated after the tab has been selected.\n *\n *\n * @usage\n *\n * <hljs lang=\"html\">\n * <md-tab label=\"\" disabled=\"\" md-on-select=\"\" md-on-deselect=\"\" >\n *   <h3>My Tab content</h3>\n * </md-tab>\n *\n * <md-tab >\n *   <md-tab-label>\n *     <h3>My Tab content</h3>\n *   </md-tab-label>\n *   <p>\n *     Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium,\n *     totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae\n *     dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit,\n *     sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.\n *   </p>\n * </md-tab>\n * </hljs>\n *\n */\nfunction MdTabDirective($mdInkRipple, $compile, $mdUtil, $mdConstant, $timeout) {\n  return {\n    restrict: 'E',\n    require: ['mdTab', '^mdTabs'],\n    controller: '$mdTab',\n    scope: {\n      onSelect: '&mdOnSelect',\n      onDeselect: '&mdOnDeselect',\n      label: '@'\n    },\n    compile: compile\n  };\n\n  function compile(element, attr) {\n    var tabLabel = element.find('md-tab-label');\n\n    if (tabLabel.length) {\n      // If a tab label element is found, remove it for later re-use.\n      tabLabel.remove();\n\n    } else if (angular.isDefined(attr.label)) {\n      // Otherwise, try to use attr.label as the label\n      tabLabel = angular.element('<md-tab-label>').html(attr.label);\n\n    } else {\n      // If nothing is found, use the tab's content as the label\n      tabLabel = angular.element('<md-tab-label>')\n                        .append(element.contents().remove());\n    }\n\n    // Everything that's left as a child is the tab's content.\n    var tabContent = element.contents().remove();\n\n    return function postLink(scope, element, attr, ctrls) {\n\n      var tabItemCtrl = ctrls[0]; // Controller for THIS tabItemCtrl\n      var tabsCtrl = ctrls[1]; // Controller for ALL tabs\n\n      $timeout(element.addClass.bind(element, 'md-tab-themed'), 0, false);\n\n      scope.$watch(\n          function () { return attr.label; },\n          function () { $timeout(function () { tabsCtrl.scope.$broadcast('$mdTabsChanged'); }, 0, false); }\n      );\n\n      transcludeTabContent();\n      configureAria();\n\n      $mdInkRipple.attachTabBehavior(scope, element, {\n        colorElement: tabsCtrl.inkBarElement\n      });\n      tabsCtrl.add(tabItemCtrl);\n      scope.$on('$destroy', function() {\n        tabsCtrl.remove(tabItemCtrl);\n      });\n      element.on('$destroy', function () {\n        //-- wait for item to be removed from the dom\n        $timeout(function () {\n          tabsCtrl.scope.$broadcast('$mdTabsChanged');\n        }, 0, false);\n      });\n\n      if (!angular.isDefined(attr.ngClick)) {\n        element.on('click', defaultClickListener);\n      }\n      element.on('keydown', keydownListener);\n\n      if (angular.isNumber(scope.$parent.$index)) {\n        watchNgRepeatIndex();\n      }\n      if (angular.isDefined(attr.mdActive)) {\n        watchActiveAttribute();\n      }\n      watchDisabled();\n\n      function transcludeTabContent() {\n        // Clone the label we found earlier, and $compile and append it\n        var label = tabLabel.clone();\n        element.append(label);\n        $compile(label)(scope.$parent);\n\n        // Clone the content we found earlier, and mark it for later placement into\n        // the proper content area.\n        tabItemCtrl.content = tabContent.clone();\n      }\n\n      //defaultClickListener isn't applied if the user provides an ngClick expression.\n      function defaultClickListener() {\n        scope.$apply(function() {\n          tabsCtrl.select(tabItemCtrl);\n          tabsCtrl.focus(tabItemCtrl);\n        });\n      }\n      function keydownListener(ev) {\n        if (ev.keyCode == $mdConstant.KEY_CODE.SPACE || ev.keyCode == $mdConstant.KEY_CODE.ENTER ) {\n          // Fire the click handler to do normal selection if space is pressed\n          element.triggerHandler('click');\n          ev.preventDefault();\n        } else if (ev.keyCode === $mdConstant.KEY_CODE.LEFT_ARROW) {\n          scope.$evalAsync(function() {\n            tabsCtrl.focus(tabsCtrl.previous(tabItemCtrl));\n          });\n        } else if (ev.keyCode === $mdConstant.KEY_CODE.RIGHT_ARROW) {\n          scope.$evalAsync(function() {\n            tabsCtrl.focus(tabsCtrl.next(tabItemCtrl));\n          });\n        }\n      }\n\n      // If tabItemCtrl is part of an ngRepeat, move the tabItemCtrl in our internal array\n      // when its $index changes\n      function watchNgRepeatIndex() {\n        // The tabItemCtrl has an isolate scope, so we watch the $index on the parent.\n        scope.$watch('$parent.$index', function $indexWatchAction(newIndex) {\n          tabsCtrl.move(tabItemCtrl, newIndex);\n        });\n      }\n\n      function watchActiveAttribute() {\n        var unwatch = scope.$parent.$watch('!!(' + attr.mdActive + ')', activeWatchAction);\n        scope.$on('$destroy', unwatch);\n\n        function activeWatchAction(isActive) {\n          var isSelected = tabsCtrl.getSelectedItem() === tabItemCtrl;\n\n          if (isActive && !isSelected) {\n            tabsCtrl.select(tabItemCtrl);\n          } else if (!isActive && isSelected) {\n            tabsCtrl.deselect(tabItemCtrl);\n          }\n        }\n      }\n\n      function watchDisabled() {\n        scope.$watch(tabItemCtrl.isDisabled, disabledWatchAction);\n\n        function disabledWatchAction(isDisabled) {\n          element.attr('aria-disabled', isDisabled);\n\n          // Auto select `next` tab when disabled\n          var isSelected = (tabsCtrl.getSelectedItem() === tabItemCtrl);\n          if (isSelected && isDisabled) {\n            tabsCtrl.select(tabsCtrl.next() || tabsCtrl.previous());\n          }\n\n        }\n      }\n\n      function configureAria() {\n        // Link together the content area and tabItemCtrl with an id\n        var tabId = attr.id || ('tab_' + $mdUtil.nextUid());\n\n        element.attr({\n          id: tabId,\n          role: 'tab',\n          tabIndex: -1 //this is also set on select/deselect in tabItemCtrl\n        });\n\n        // Only setup the contentContainer's aria attributes if tab content is provided\n        if (tabContent.length) {\n          var tabContentId = 'content_' + tabId;\n          if (!element.attr('aria-controls')) {\n            element.attr('aria-controls', tabContentId);\n          }\n          tabItemCtrl.contentContainer.attr({\n            id: tabContentId,\n            role: 'tabpanel',\n            'aria-labelledby': tabId\n          });\n        }\n      }\n\n    };\n\n  }\n\n}\nMdTabDirective.$inject = [\"$mdInkRipple\", \"$compile\", \"$mdUtil\", \"$mdConstant\", \"$timeout\"];\n\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\nangular.module('material.components.tabs')\n  .controller('$mdTabs', MdTabsController);\n\nfunction MdTabsController($scope, $element, $mdUtil, $timeout) {\n\n  var tabsList = $mdUtil.iterator([], false);\n  var self = this;\n\n  // Properties\n  self.$element = $element;\n  self.scope = $scope;\n  // The section containing the tab content $elements\n  var contentArea = self.contentArea = angular.element($element[0].querySelector('.md-tabs-content'));\n\n  // Methods from iterator\n  var inRange = self.inRange = tabsList.inRange;\n  var indexOf = self.indexOf = tabsList.indexOf;\n  var itemAt = self.itemAt = tabsList.itemAt;\n  self.count = tabsList.count;\n\n  self.getSelectedItem = getSelectedItem;\n  self.getSelectedIndex = getSelectedIndex;\n  self.add = add;\n  self.remove = remove;\n  self.move = move;\n  self.select = select;\n  self.focus = focus;\n  self.deselect = deselect;\n\n  self.next = next;\n  self.previous = previous;\n\n  $scope.$on('$destroy', function() {\n    deselect(getSelectedItem());\n    for (var i = tabsList.count() - 1; i >= 0; i--) {\n      remove(tabsList[i], true);\n    }\n  });\n\n  // Get the selected tab\n  function getSelectedItem() {\n    return itemAt($scope.selectedIndex);\n  }\n\n  function getSelectedIndex() {\n    return $scope.selectedIndex;\n  }\n\n  // Add a new tab.\n  // Returns a method to remove the tab from the list.\n  function add(tab, index) {\n    tabsList.add(tab, index);\n\n    // Select the new tab if we don't have a selectedIndex, or if the\n    // selectedIndex we've been waiting for is this tab\n    if (!angular.isDefined(tab.element.attr('md-active')) && ($scope.selectedIndex === -1 || !angular.isNumber($scope.selectedIndex) ||\n        $scope.selectedIndex === self.indexOf(tab))) {\n      tab.onAdd(self.contentArea, false);\n      self.select(tab);\n    } else {\n      tab.onAdd(self.contentArea, true);\n    }\n\n    $scope.$broadcast('$mdTabsChanged');\n  }\n\n  function remove(tab, noReselect) {\n    if (!tabsList.contains(tab)) return;\n    if (noReselect) return;\n    var isSelectedItem = getSelectedItem() === tab,\n        newTab = previous() || next();\n\n    deselect(tab);\n    tabsList.remove(tab);\n    tab.onRemove();\n\n    $scope.$broadcast('$mdTabsChanged');\n\n    if (isSelectedItem) { select(newTab); }\n  }\n\n  // Move a tab (used when ng-repeat order changes)\n  function move(tab, toIndex) {\n    var isSelected = getSelectedItem() === tab;\n\n    tabsList.remove(tab);\n    tabsList.add(tab, toIndex);\n    if (isSelected) select(tab);\n\n    $scope.$broadcast('$mdTabsChanged');\n  }\n\n  function select(tab, rightToLeft) {\n    if (!tab || tab.isSelected || tab.isDisabled()) return;\n    if (!tabsList.contains(tab)) return;\n\n    if (!angular.isDefined(rightToLeft)) {\n      rightToLeft = indexOf(tab) < $scope.selectedIndex;\n    }\n    deselect(getSelectedItem(), rightToLeft);\n\n    $scope.selectedIndex = indexOf(tab);\n    tab.isSelected = true;\n    tab.onSelect(rightToLeft);\n\n    $scope.$broadcast('$mdTabsChanged');\n  }\n\n  function focus(tab) {\n    // this variable is watched by pagination\n    self.tabToFocus = tab;\n  }\n\n  function deselect(tab, rightToLeft) {\n    if (!tab || !tab.isSelected) return;\n    if (!tabsList.contains(tab)) return;\n\n    $scope.selectedIndex = -1;\n    tab.isSelected = false;\n    tab.onDeselect(rightToLeft);\n  }\n\n  function next(tab, filterFn) {\n    return tabsList.next(tab || getSelectedItem(), filterFn || isTabEnabled);\n  }\n  function previous(tab, filterFn) {\n    return tabsList.previous(tab || getSelectedItem(), filterFn || isTabEnabled);\n  }\n\n  function isTabEnabled(tab) {\n    return tab && !tab.isDisabled();\n  }\n\n}\nMdTabsController.$inject = [\"$scope\", \"$element\", \"$mdUtil\", \"$timeout\"];\n})();\n\n/*!\n * Angular Material Design\n * https://github.com/angular/material\n * @license MIT\n * v0.8.3\n */\n(function() {\n'use strict';\n\nangular.module('material.components.tabs')\n  .directive('mdTabs', TabsDirective);\n\n/**\n * @ngdoc directive\n * @name mdTabs\n * @module material.components.tabs\n *\n * @restrict E\n *\n * @description\n * The `<md-tabs>` directive serves as the container for 1..n `<md-tab>` child directives to produces a Tabs components.\n * In turn, the nested `<md-tab>` directive is used to specify a tab label for the **header button** and a [optional] tab view\n * content that will be associated with each tab button.\n *\n * Below is the markup for its simplest usage:\n *\n *  <hljs lang=\"html\">\n *  <md-tabs>\n *    <md-tab label=\"Tab #1\"></md-tab>\n *    <md-tab label=\"Tab #2\"></md-tab>\n *    <md-tab label=\"Tab #3\"></md-tab>\n *  </md-tabs>\n *  </hljs>\n *\n * Tabs supports three (3) usage scenarios:\n *\n *  1. Tabs (buttons only)\n *  2. Tabs with internal view content\n *  3. Tabs with external view content\n *\n * **Tab-only** support is useful when tab buttons are used for custom navigation regardless of any other components, content, or views.\n * **Tabs with internal views** are the traditional usages where each tab has associated view content and the view switching is managed internally by the Tabs component.\n * **Tabs with external view content** is often useful when content associated with each tab is independently managed and data-binding notifications announce tab selection changes.\n *\n * > As a performance bonus, if the tab content is managed internally then the non-active (non-visible) tab contents are temporarily disconnected from the `$scope.$digest()` processes; which restricts and optimizes DOM updates to only the currently active tab.\n *\n * Additional features also include:\n *\n * *  Content can include any markup.\n * *  If a tab is disabled while active/selected, then the next tab will be auto-selected.\n * *  If the currently active tab is the last tab, then next() action will select the first tab.\n * *  Any markup (other than **`<md-tab>`** tags) will be transcluded into the tab header area BEFORE the tab buttons.\n *\n * ### Explanation of tab stretching\n *\n * Initially, tabs will have an inherent size.  This size will either be defined by how much space is needed to accommodate their text or set by the user through CSS.  Calculations will be based on this size.\n *\n * On mobile devices, tabs will be expanded to fill the available horizontal space.  When this happens, all tabs will become the same size.\n *\n * On desktops, by default, stretching will never occur.\n *\n * This default behavior can be overridden through the `md-stretch-tabs` attribute.  Here is a table showing when stretching will occur:\n *\n * `md-stretch-tabs` | mobile    | desktop\n * ------------------|-----------|--------\n * `auto`            | stretched | ---\n * `always`          | stretched | stretched\n * `never`           | ---       | ---\n *\n * @param {integer=} md-selected Index of the active/selected tab\n * @param {boolean=} md-no-ink If present, disables ink ripple effects.\n * @param {boolean=} md-no-bar If present, disables the selection ink bar.\n * @param {string=}  md-align-tabs Attribute to indicate position of tab buttons: `bottom` or `top`; default is `top`\n * @param {string=} md-stretch-tabs Attribute to indicate whether or not to stretch tabs: `auto`, `always`, or `never`; default is `auto`\n *\n * @usage\n * <hljs lang=\"html\">\n * <md-tabs md-selected=\"selectedIndex\" >\n *   <img ng-src=\"img/angular.png\" class=\"centered\">\n *\n *   <md-tab\n *      ng-repeat=\"tab in tabs | orderBy:predicate:reversed\"\n *      md-on-select=\"onTabSelected(tab)\"\n *      md-on-deselect=\"announceDeselected(tab)\"\n *      disabled=\"tab.disabled\" >\n *\n *       <md-tab-label>\n *           {{tab.title}}\n *           <img src=\"img/removeTab.png\"\n *                ng-click=\"removeTab(tab)\"\n *                class=\"delete\" >\n *       </md-tab-label>\n *\n *       {{tab.content}}\n *\n *   </md-tab>\n *\n * </md-tabs>\n * </hljs>\n *\n */\nfunction TabsDirective($mdTheming) {\n  return {\n    restrict: 'E',\n    controller: '$mdTabs',\n    require: 'mdTabs',\n    transclude: true,\n    scope: {\n      selectedIndex: '=?mdSelected'\n    },\n    template:\n      '<section class=\"md-header\" ' +\n        'ng-class=\"{\\'md-paginating\\': pagination.active}\">' +\n\n        '<button class=\"md-paginator md-prev\" ' +\n          'ng-if=\"pagination.active && pagination.hasPrev\" ' +\n          'ng-click=\"pagination.clickPrevious()\" ' +\n          'aria-hidden=\"true\">' +\n          '<md-icon md-svg-icon=\"tabs-arrow\"></md-icon>' +\n        '</button>' +\n\n        // overflow: hidden container when paginating\n        '<div class=\"md-header-items-container\" md-tabs-pagination>' +\n          // flex container for <md-tab> elements\n          '<div class=\"md-header-items\">' +\n            '<md-tabs-ink-bar></md-tabs-ink-bar>' +\n          '</div>' +\n        '</div>' +\n\n        '<button class=\"md-paginator md-next\" ' +\n          'ng-if=\"pagination.active && pagination.hasNext\" ' +\n          'ng-click=\"pagination.clickNext()\" ' +\n          'aria-hidden=\"true\">' +\n          '<md-icon md-svg-icon=\"tabs-arrow\"></md-icon>' +\n        '</button>' +\n\n      '</section>' +\n      '<section class=\"md-tabs-content\"></section>',\n    link: postLink\n  };\n\n  function postLink(scope, element, attr, tabsCtrl, transclude) {\n\n    scope.stretchTabs = attr.hasOwnProperty('mdStretchTabs') ? attr.mdStretchTabs || 'always' : 'auto';\n\n    $mdTheming(element);\n    configureAria();\n    watchSelected();\n\n    transclude(scope.$parent, function(clone) {\n      angular.element(element[0].querySelector('.md-header-items')).append(clone);\n    });\n\n    function configureAria() {\n      element.attr('role', 'tablist');\n    }\n\n    function watchSelected() {\n      scope.$watch('selectedIndex', function watchSelectedIndex(newIndex, oldIndex) {\n        if (oldIndex == newIndex) return;\n        var rightToLeft = oldIndex > newIndex;\n        tabsCtrl.deselect(tabsCtrl.itemAt(oldIndex), rightToLeft);\n\n        if (tabsCtrl.inRange(newIndex)) {\n          var newTab = tabsCtrl.itemAt(newIndex);\n          while (newTab && newTab.isDisabled()) {\n            newTab = newIndex > oldIndex \n                ? tabsCtrl.next(newTab)\n                : tabsCtrl.previous(newTab);\n          }\n          tabsCtrl.select(newTab, rightToLeft);\n        }\n      });\n    }\n  }\n}\nTabsDirective.$inject = [\"$mdTheming\"];\n})();\n\n(function(){ \n angular.module(\"material.core\").constant(\"$MD_THEME_CSS\", \"md-autocomplete {  background: '{{background-50}}'; }  md-autocomplete button md-icon path {    fill: '{{background-600}}'; }  md-autocomplete button:after {    background: '{{background-600-0.3}}'; }  md-autocomplete ul {    background: '{{background-50}}'; }    md-autocomplete ul li {      border-top: 1px solid '{{background-400}}';      color: '{{background-900}}'; }      md-autocomplete ul li .highlight {        color: '{{background-600}}'; }      md-autocomplete ul li:hover, md-autocomplete ul li.selected {        background: '{{background-200}}'; }md-backdrop.md-opaque.md-THEME_NAME-theme {  background-color: '{{foreground-4-0.5}}'; }md-bottom-sheet.md-THEME_NAME-theme {  background-color: '{{background-50}}';  border-top-color: '{{background-300}}'; }  md-bottom-sheet.md-THEME_NAME-theme.md-list md-item {    color: '{{foreground-1}}'; }  md-bottom-sheet.md-THEME_NAME-theme .md-subheader {    background-color: '{{background-50}}'; }  md-bottom-sheet.md-THEME_NAME-theme .md-subheader {    color: '{{foreground-1}}'; }md-toolbar .md-button.md-THEME_NAME-theme.md-fab {  background-color: white; }.md-button.md-THEME_NAME-theme {  border-radius: 3px; }  .md-button.md-THEME_NAME-theme:not([disabled]):hover, .md-button.md-THEME_NAME-theme:not([disabled]):focus {    background-color: '{{background-500-0.2}}'; }  .md-button.md-THEME_NAME-theme.md-primary {    color: '{{primary-color}}'; }    .md-button.md-THEME_NAME-theme.md-primary.md-raised, .md-button.md-THEME_NAME-theme.md-primary.md-fab {      color: '{{primary-contrast}}';      background-color: '{{primary-color}}'; }      .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]):focus, .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]):focus {        background-color: '{{primary-600}}'; }  .md-button.md-THEME_NAME-theme.md-fab {    border-radius: 50%;    background-color: '{{accent-color}}';    color: '{{accent-contrast}}'; }    .md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]):focus {      background-color: '{{accent-A700}}'; }  .md-button.md-THEME_NAME-theme.md-raised {    color: '{{background-contrast}}';    background-color: '{{background-50}}'; }    .md-button.md-THEME_NAME-theme.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-raised:not([disabled]):focus {      background-color: '{{background-200}}'; }  .md-button.md-THEME_NAME-theme.md-warn {    color: '{{warn-color}}'; }    .md-button.md-THEME_NAME-theme.md-warn.md-raised, .md-button.md-THEME_NAME-theme.md-warn.md-fab {      color: '{{warn-contrast}}';      background-color: '{{warn-color}}'; }      .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]):focus, .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]):focus {        background-color: '{{warn-700}}'; }  .md-button.md-THEME_NAME-theme.md-accent {    color: '{{accent-color}}'; }    .md-button.md-THEME_NAME-theme.md-accent.md-raised, .md-button.md-THEME_NAME-theme.md-accent.md-fab {      color: '{{accent-contrast}}';      background-color: '{{accent-color}}'; }      .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]):focus, .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]):focus {        background-color: '{{accent-700}}'; }  .md-button.md-THEME_NAME-theme[disabled], .md-button.md-THEME_NAME-theme.md-raised[disabled], .md-button.md-THEME_NAME-theme.md-fab[disabled] {    color: '{{foreground-3}}';    background-color: transparent;    cursor: not-allowed; }md-card.md-THEME_NAME-theme {  border-radius: 2px; }  md-card.md-THEME_NAME-theme .md-card-image {    border-radius: 2px 2px 0 0; }md-checkbox.md-THEME_NAME-theme .md-ripple {  color: '{{accent-600}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-ripple {  color: '{{background-600}}'; }md-checkbox.md-THEME_NAME-theme .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-icon {  background-color: '{{accent-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-ripple {  color: '{{primary-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ripple {  color: '{{background-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-icon {  background-color: '{{primary-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-ripple {  color: '{{warn-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-icon {  background-color: '{{warn-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme[disabled] .md-icon {  border-color: '{{foreground-3}}'; }md-checkbox.md-THEME_NAME-theme[disabled].md-checked .md-icon {  background-color: '{{foreground-3}}'; }md-content.md-THEME_NAME-theme {  background-color: '{{background-hue-3}}'; }md-dialog.md-THEME_NAME-theme {  border-radius: 4px;  background-color: '{{background-hue-3}}'; }  md-dialog.md-THEME_NAME-theme.md-content-overflow .md-actions {    border-top-color: '{{foreground-4}}'; }md-divider.md-THEME_NAME-theme {  border-top-color: '{{foreground-4}}'; }md-icon.md-THEME_NAME-theme.md-primary {  color: '{{primary-color}}'; }md-icon.md-THEME_NAME-theme.md-accent {  color: '{{accent-color}}'; }md-icon.md-THEME_NAME-theme.md-warn {  color: '{{warn-color}}'; }md-icon.md-THEME_NAME-theme.md-danger {  color: '{{danger-color}}'; }md-input-container.md-THEME_NAME-theme .md-input {  color: '{{foreground-1}}';  border-color: '{{foreground-4}}';  text-shadow: '{{foreground-shadow}}'; }  md-input-container.md-THEME_NAME-theme .md-input::-webkit-input-placeholder, md-input-container.md-THEME_NAME-theme .md-input::-moz-placeholder, md-input-container.md-THEME_NAME-theme .md-input:-moz-placeholder, md-input-container.md-THEME_NAME-theme .md-input:-ms-input-placeholder {    color: '{{foreground-3}}'; }md-input-container.md-THEME_NAME-theme > md-icon {  fill: '{{foreground-1}}'; }md-input-container.md-THEME_NAME-theme label, md-input-container.md-THEME_NAME-theme .md-placeholder {  text-shadow: '{{foreground-shadow}}';  color: '{{foreground-3}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-has-value label {  color: '{{foreground-2}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused .md-input {  border-color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused label {  color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused md-icon {  fill: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-accent .md-input {  border-color: '{{accent-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-accent label {  color: '{{accent-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-warn .md-input {  border-color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-warn label {  color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid .md-input {  border-color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid label {  color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid data-ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid x-ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid [ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid [data-ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid [x-ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid .md-char-counter {  color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme .md-input[disabled], [disabled] md-input-container.md-THEME_NAME-theme .md-input {  border-bottom-color: transparent;  color: '{{foreground-3}}';  background-image: linear-gradient(to right, '{{foreground-4}}' 0%, '{{foreground-4}}' 33%, transparent 0%);  background-image: -ms-linear-gradient(left, transparent 0%, '{{foreground-4}}' 100%); }md-progress-circular.md-THEME_NAME-theme {  background-color: transparent; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-gap {    border-top-color: '{{primary-color}}';    border-bottom-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme .md-inner .md-right .md-half-circle {    border-top-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-right .md-half-circle {    border-right-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-left .md-half-circle {    border-left-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-gap {    border-top-color: '{{warn-color}}';    border-bottom-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-right .md-half-circle {    border-top-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-right .md-half-circle {    border-right-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-left .md-half-circle {    border-left-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-gap {    border-top-color: '{{accent-color}}';    border-bottom-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-right .md-half-circle {    border-top-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-right .md-half-circle {    border-right-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-left .md-half-circle {    border-left-color: '{{accent-color}}'; }md-progress-linear.md-THEME_NAME-theme .md-container {  background-color: '{{primary-100}}'; }md-progress-linear.md-THEME_NAME-theme .md-bar {  background-color: '{{primary-color}}'; }md-progress-linear.md-THEME_NAME-theme.md-warn .md-container {  background-color: '{{warn-100}}'; }md-progress-linear.md-THEME_NAME-theme.md-warn .md-bar {  background-color: '{{warn-color}}'; }md-progress-linear.md-THEME_NAME-theme.md-accent .md-container {  background-color: '{{accent-100}}'; }md-progress-linear.md-THEME_NAME-theme.md-accent .md-bar {  background-color: '{{accent-color}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-warn .md-bar1 {  background-color: '{{warn-100}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-warn .md-dashed:before {  background: radial-gradient('{{warn-100}}' 0%, '{{warn-100}}' 16%, transparent 42%); }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-accent .md-bar1 {  background-color: '{{accent-100}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-accent .md-dashed:before {  background: radial-gradient('{{accent-100}}' 0%, '{{accent-100}}' 16%, transparent 42%); }md-radio-button.md-THEME_NAME-theme .md-off {  border-color: '{{foreground-2}}'; }md-radio-button.md-THEME_NAME-theme .md-on {  background-color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme.md-checked .md-off {  border-color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme.md-checked .md-ink-ripple {  color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme .md-container .md-ripple {  color: '{{accent-600}}'; }md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-on {  background-color: '{{primary-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-off {  border-color: '{{primary-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ink-ripple {  color: '{{primary-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-container .md-ripple {  color: '{{primary-600}}'; }md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-on {  background-color: '{{warn-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-off {  border-color: '{{warn-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-ink-ripple {  color: '{{warn-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-container .md-ripple {  color: '{{warn-600}}'; }md-radio-button.md-THEME_NAME-theme[disabled] .md-container .md-off {  border-color: '{{foreground-3}}'; }md-radio-button.md-THEME_NAME-theme[disabled] .md-container .md-on {  border-color: '{{foreground-3}}'; }md-radio-group.md-THEME_NAME-theme:focus:not(:empty) {  border-color: '{{foreground-1}}'; }md-select.md-THEME_NAME-theme:not([disabled]):focus .md-select-label {  border-bottom-color: '{{primary-color}}';  color: '{{ foreground-1 }}'; }  md-select.md-THEME_NAME-theme:not([disabled]):focus .md-select-label.md-placeholder {    color: '{{ foreground-1 }}'; }md-select.md-THEME_NAME-theme:not([disabled]):focus.md-accent .md-select-label {  border-bottom-color: '{{accent-color}}'; }md-select.md-THEME_NAME-theme:not([disabled]):focus.md-warn .md-select-label {  border-bottom-color: '{{warn-color}}'; }md-select.md-THEME_NAME-theme[disabled] .md-select-label {  color: '{{foreground-3}}'; }  md-select.md-THEME_NAME-theme[disabled] .md-select-label.md-placeholder {    color: '{{foreground-3}}'; }md-select.md-THEME_NAME-theme .md-select-label {  border-bottom-color: '{{foreground-4}}'; }  md-select.md-THEME_NAME-theme .md-select-label.md-placeholder {    color: '{{foreground-2}}'; }md-select-menu.md-THEME_NAME-theme md-optgroup {  color: '{{foreground-2}}'; }  md-select-menu.md-THEME_NAME-theme md-optgroup md-option {    color: '{{foreground-1}}'; }md-select-menu.md-THEME_NAME-theme md-option[selected] {  background-color: '{{primary-50}}'; }  md-select-menu.md-THEME_NAME-theme md-option[selected]:focus {    background-color: '{{primary-100}}'; }  md-select-menu.md-THEME_NAME-theme md-option[selected].md-accent {    background-color: '{{accent-50}}'; }    md-select-menu.md-THEME_NAME-theme md-option[selected].md-accent:focus {      background-color: '{{accent-100}}'; }md-select-menu.md-THEME_NAME-theme md-option:focus:not([selected]) {  background: '{{background-200}}'; }md-sidenav.md-THEME_NAME-theme {  background-color: '{{background-hue-3}}'; }md-slider.md-THEME_NAME-theme .md-track {  background-color: '{{foreground-3}}'; }md-slider.md-THEME_NAME-theme .md-track-ticks {  background-color: '{{foreground-4}}'; }md-slider.md-THEME_NAME-theme .md-focus-thumb {  background-color: '{{foreground-2}}'; }md-slider.md-THEME_NAME-theme .md-focus-ring {  border-color: '{{foreground-4}}'; }md-slider.md-THEME_NAME-theme .md-disabled-thumb {  border-color: '{{background-hue-3}}'; }md-slider.md-THEME_NAME-theme.md-min .md-thumb:after {  background-color: '{{background-hue-3}}'; }md-slider.md-THEME_NAME-theme .md-track.md-track-fill {  background-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-thumb:after {  border-color: '{{accent-color}}';  background-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-sign {  background-color: '{{accent-color}}'; }  md-slider.md-THEME_NAME-theme .md-sign:after {    border-top-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-thumb-text {  color: '{{accent-contrast}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-track.md-track-fill {  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-thumb:after {  border-color: '{{warn-color}}';  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-sign {  background-color: '{{warn-color}}'; }  md-slider.md-THEME_NAME-theme.md-warn .md-sign:after {    border-top-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-thumb-text {  color: '{{warn-contrast}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-track.md-track-fill {  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-thumb:after {  border-color: '{{primary-color}}';  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-sign {  background-color: '{{primary-color}}'; }  md-slider.md-THEME_NAME-theme.md-primary .md-sign:after {    border-top-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-thumb-text {  color: '{{primary-contrast}}'; }md-slider.md-THEME_NAME-theme[disabled] .md-thumb:after {  border-color: '{{foreground-3}}'; }md-slider.md-THEME_NAME-theme[disabled]:not(.md-min) .md-thumb:after {  background-color: '{{foreground-3}}'; }.md-subheader.md-THEME_NAME-theme {  color: '{{ foreground-2-0.23 }}';  background-color: '{{background-hue-3}}'; }  .md-subheader.md-THEME_NAME-theme.md-primary {    color: '{{primary-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-accent {    color: '{{accent-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-warn {    color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme .md-thumb {  background-color: '{{background-50}}'; }md-switch.md-THEME_NAME-theme .md-bar {  background-color: '{{background-500}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-thumb {  background-color: '{{accent-color}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-bar {  background-color: '{{accent-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-thumb {  background-color: '{{primary-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-bar {  background-color: '{{primary-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-thumb {  background-color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-bar {  background-color: '{{warn-color-0.5}}'; }md-switch.md-THEME_NAME-theme[disabled] .md-thumb {  background-color: '{{background-400}}'; }md-switch.md-THEME_NAME-theme[disabled] .md-bar {  background-color: '{{foreground-4}}'; }md-switch.md-THEME_NAME-theme:focus .md-label:not(:empty) {  border-color: '{{foreground-1}}';  border-style: dotted; }md-tabs.md-THEME_NAME-theme .md-header {  background-color: transparent; }md-tabs.md-THEME_NAME-theme .md-paginator md-icon {  color: '{{primary-color}}'; }md-tabs.md-THEME_NAME-theme.md-accent .md-header {  background-color: '{{accent-color}}'; }md-tabs.md-THEME_NAME-theme.md-accent md-tab:not([disabled]) {  color: '{{accent-100}}'; }  md-tabs.md-THEME_NAME-theme.md-accent md-tab:not([disabled]).active {    color: '{{accent-contrast}}'; }md-tabs.md-THEME_NAME-theme.md-primary .md-header {  background-color: '{{primary-color}}'; }md-tabs.md-THEME_NAME-theme.md-primary md-tab:not([disabled]) {  color: '{{primary-100}}'; }  md-tabs.md-THEME_NAME-theme.md-primary md-tab:not([disabled]).active {    color: '{{primary-contrast}}'; }md-tabs.md-THEME_NAME-theme.md-primary md-tab {  color: '{{primary-100}}'; }  md-tabs.md-THEME_NAME-theme.md-primary md-tab[disabled] {    color: '{{foreground-3}}'; }  md-tabs.md-THEME_NAME-theme.md-primary md-tab:focus {    color: '{{primary-contrast}}';    background-color: '{{primary-contrast-0.1}}'; }  md-tabs.md-THEME_NAME-theme.md-primary md-tab.active {    color: '{{primary-contrast}}'; }  md-tabs.md-THEME_NAME-theme.md-primary md-tab .md-ripple-container {    color: '{{primary-contrast}}'; }md-tabs.md-THEME_NAME-theme.md-warn .md-header {  background-color: '{{warn-color}}'; }md-tabs.md-THEME_NAME-theme.md-warn md-tab:not([disabled]) {  color: '{{warn-100}}'; }  md-tabs.md-THEME_NAME-theme.md-warn md-tab:not([disabled]).active {    color: '{{warn-contrast}}'; }md-tabs.md-THEME_NAME-theme md-tabs-ink-bar {  color: '{{accent-color}}';  background: '{{accent-color}}'; }md-tabs.md-THEME_NAME-theme md-tab {  color: '{{foreground-2}}'; }  md-tabs.md-THEME_NAME-theme md-tab[disabled] {    color: '{{foreground-3}}'; }  md-tabs.md-THEME_NAME-theme md-tab:focus {    color: '{{foreground-1}}'; }  md-tabs.md-THEME_NAME-theme md-tab.active {    color: '{{primary-color}}'; }  md-tabs.md-THEME_NAME-theme md-tab .md-ripple-container {    color: '{{accent-100}}'; }md-input-group.md-THEME_NAME-theme input, md-input-group.md-THEME_NAME-theme textarea {  text-shadow: '{{foreground-shadow}}'; }  md-input-group.md-THEME_NAME-theme input::-webkit-input-placeholder, md-input-group.md-THEME_NAME-theme input::-moz-placeholder, md-input-group.md-THEME_NAME-theme input:-moz-placeholder, md-input-group.md-THEME_NAME-theme input:-ms-input-placeholder, md-input-group.md-THEME_NAME-theme textarea::-webkit-input-placeholder, md-input-group.md-THEME_NAME-theme textarea::-moz-placeholder, md-input-group.md-THEME_NAME-theme textarea:-moz-placeholder, md-input-group.md-THEME_NAME-theme textarea:-ms-input-placeholder {    color: '{{foreground-3}}'; }md-input-group.md-THEME_NAME-theme label {  text-shadow: '{{foreground-shadow}}';  color: '{{foreground-3}}'; }md-input-group.md-THEME_NAME-theme input, md-input-group.md-THEME_NAME-theme textarea {  color: '{{foreground-1}}';  border-color: '{{foreground-4}}'; }md-input-group.md-THEME_NAME-theme.md-input-focused input, md-input-group.md-THEME_NAME-theme.md-input-focused textarea {  border-color: '{{primary-500}}'; }md-input-group.md-THEME_NAME-theme.md-input-focused label {  color: '{{primary-500}}'; }md-input-group.md-THEME_NAME-theme.md-input-focused.md-accent input, md-input-group.md-THEME_NAME-theme.md-input-focused.md-accent textarea {  border-color: '{{accent-500}}'; }md-input-group.md-THEME_NAME-theme.md-input-focused.md-accent label {  color: '{{accent-500}}'; }md-input-group.md-THEME_NAME-theme.md-input-has-value:not(.md-input-focused) label {  color: '{{foreground-2}}'; }md-input-group.md-THEME_NAME-theme .md-input[disabled] {  border-bottom-color: '{{foreground-4}}';  color: '{{foreground-3}}'; }md-toast.md-THEME_NAME-theme {  background-color: '{{foreground-1}}';  color: '{{background-50}}'; }  md-toast.md-THEME_NAME-theme .md-button {    color: '{{background-50}}'; }    md-toast.md-THEME_NAME-theme .md-button.md-highlight {      color: '{{primary-A200}}'; }      md-toast.md-THEME_NAME-theme .md-button.md-highlight.md-accent {        color: '{{accent-A200}}'; }      md-toast.md-THEME_NAME-theme .md-button.md-highlight.md-warn {        color: '{{warn-A200}}'; }md-toolbar.md-THEME_NAME-theme {  background-color: '{{primary-color}}';  color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme .md-button {    color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme.md-accent {    background-color: '{{accent-color}}';    color: '{{accent-contrast}}'; }  md-toolbar.md-THEME_NAME-theme.md-warn {    background-color: '{{warn-color}}';    color: '{{warn-contrast}}'; }md-tooltip.md-THEME_NAME-theme {  color: '{{background-A100}}'; }  md-tooltip.md-THEME_NAME-theme .md-background {    background-color: '{{foreground-2}}'; }\"); \n})();","/**\n * @license AngularJS v1.3.18\n * (c) 2010-2014 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular, undefined) {'use strict';\n\n/**\n * @ngdoc module\n * @name ngRoute\n * @description\n *\n * # ngRoute\n *\n * The `ngRoute` module provides routing and deeplinking services and directives for angular apps.\n *\n * ## Example\n * See {@link ngRoute.$route#example $route} for an example of configuring and using `ngRoute`.\n *\n *\n * <div doc-module-components=\"ngRoute\"></div>\n */\n /* global -ngRouteModule */\nvar ngRouteModule = angular.module('ngRoute', ['ng']).\n                        provider('$route', $RouteProvider),\n    $routeMinErr = angular.$$minErr('ngRoute');\n\n/**\n * @ngdoc provider\n * @name $routeProvider\n *\n * @description\n *\n * Used for configuring routes.\n *\n * ## Example\n * See {@link ngRoute.$route#example $route} for an example of configuring and using `ngRoute`.\n *\n * ## Dependencies\n * Requires the {@link ngRoute `ngRoute`} module to be installed.\n */\nfunction $RouteProvider() {\n  function inherit(parent, extra) {\n    return angular.extend(Object.create(parent), extra);\n  }\n\n  var routes = {};\n\n  /**\n   * @ngdoc method\n   * @name $routeProvider#when\n   *\n   * @param {string} path Route path (matched against `$location.path`). If `$location.path`\n   *    contains redundant trailing slash or is missing one, the route will still match and the\n   *    `$location.path` will be updated to add or drop the trailing slash to exactly match the\n   *    route definition.\n   *\n   *    * `path` can contain named groups starting with a colon: e.g. `:name`. All characters up\n   *        to the next slash are matched and stored in `$routeParams` under the given `name`\n   *        when the route matches.\n   *    * `path` can contain named groups starting with a colon and ending with a star:\n   *        e.g.`:name*`. All characters are eagerly stored in `$routeParams` under the given `name`\n   *        when the route matches.\n   *    * `path` can contain optional named groups with a question mark: e.g.`:name?`.\n   *\n   *    For example, routes like `/color/:color/largecode/:largecode*\\/edit` will match\n   *    `/color/brown/largecode/code/with/slashes/edit` and extract:\n   *\n   *    * `color: brown`\n   *    * `largecode: code/with/slashes`.\n   *\n   *\n   * @param {Object} route Mapping information to be assigned to `$route.current` on route\n   *    match.\n   *\n   *    Object properties:\n   *\n   *    - `controller` – `{(string|function()=}` – Controller fn that should be associated with\n   *      newly created scope or the name of a {@link angular.Module#controller registered\n   *      controller} if passed as a string.\n   *    - `controllerAs` – `{string=}` – A controller alias name. If present the controller will be\n   *      published to scope under the `controllerAs` name.\n   *    - `template` – `{string=|function()=}` – html template as a string or a function that\n   *      returns an html template as a string which should be used by {@link\n   *      ngRoute.directive:ngView ngView} or {@link ng.directive:ngInclude ngInclude} directives.\n   *      This property takes precedence over `templateUrl`.\n   *\n   *      If `template` is a function, it will be called with the following parameters:\n   *\n   *      - `{Array.<Object>}` - route parameters extracted from the current\n   *        `$location.path()` by applying the current route\n   *\n   *    - `templateUrl` – `{string=|function()=}` – path or function that returns a path to an html\n   *      template that should be used by {@link ngRoute.directive:ngView ngView}.\n   *\n   *      If `templateUrl` is a function, it will be called with the following parameters:\n   *\n   *      - `{Array.<Object>}` - route parameters extracted from the current\n   *        `$location.path()` by applying the current route\n   *\n   *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n   *      be injected into the controller. If any of these dependencies are promises, the router\n   *      will wait for them all to be resolved or one to be rejected before the controller is\n   *      instantiated.\n   *      If all the promises are resolved successfully, the values of the resolved promises are\n   *      injected and {@link ngRoute.$route#$routeChangeSuccess $routeChangeSuccess} event is\n   *      fired. If any of the promises are rejected the\n   *      {@link ngRoute.$route#$routeChangeError $routeChangeError} event is fired. The map object\n   *      is:\n   *\n   *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n   *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n   *        Otherwise if function, then it is {@link auto.$injector#invoke injected}\n   *        and the return value is treated as the dependency. If the result is a promise, it is\n   *        resolved before its value is injected into the controller. Be aware that\n   *        `ngRoute.$routeParams` will still refer to the previous route within these resolve\n   *        functions.  Use `$route.current.params` to access the new route parameters, instead.\n   *\n   *    - `redirectTo` – {(string|function())=} – value to update\n   *      {@link ng.$location $location} path with and trigger route redirection.\n   *\n   *      If `redirectTo` is a function, it will be called with the following parameters:\n   *\n   *      - `{Object.<string>}` - route parameters extracted from the current\n   *        `$location.path()` by applying the current route templateUrl.\n   *      - `{string}` - current `$location.path()`\n   *      - `{Object}` - current `$location.search()`\n   *\n   *      The custom `redirectTo` function is expected to return a string which will be used\n   *      to update `$location.path()` and `$location.search()`.\n   *\n   *    - `[reloadOnSearch=true]` - {boolean=} - reload route when only `$location.search()`\n   *      or `$location.hash()` changes.\n   *\n   *      If the option is set to `false` and url in the browser changes, then\n   *      `$routeUpdate` event is broadcasted on the root scope.\n   *\n   *    - `[caseInsensitiveMatch=false]` - {boolean=} - match routes without being case sensitive\n   *\n   *      If the option is set to `true`, then the particular route can be matched without being\n   *      case sensitive\n   *\n   * @returns {Object} self\n   *\n   * @description\n   * Adds a new route definition to the `$route` service.\n   */\n  this.when = function(path, route) {\n    //copy original route object to preserve params inherited from proto chain\n    var routeCopy = angular.copy(route);\n    if (angular.isUndefined(routeCopy.reloadOnSearch)) {\n      routeCopy.reloadOnSearch = true;\n    }\n    if (angular.isUndefined(routeCopy.caseInsensitiveMatch)) {\n      routeCopy.caseInsensitiveMatch = this.caseInsensitiveMatch;\n    }\n    routes[path] = angular.extend(\n      routeCopy,\n      path && pathRegExp(path, routeCopy)\n    );\n\n    // create redirection for trailing slashes\n    if (path) {\n      var redirectPath = (path[path.length - 1] == '/')\n            ? path.substr(0, path.length - 1)\n            : path + '/';\n\n      routes[redirectPath] = angular.extend(\n        {redirectTo: path},\n        pathRegExp(redirectPath, routeCopy)\n      );\n    }\n\n    return this;\n  };\n\n  /**\n   * @ngdoc property\n   * @name $routeProvider#caseInsensitiveMatch\n   * @description\n   *\n   * A boolean property indicating if routes defined\n   * using this provider should be matched using a case insensitive\n   * algorithm. Defaults to `false`.\n   */\n  this.caseInsensitiveMatch = false;\n\n   /**\n    * @param path {string} path\n    * @param opts {Object} options\n    * @return {?Object}\n    *\n    * @description\n    * Normalizes the given path, returning a regular expression\n    * and the original path.\n    *\n    * Inspired by pathRexp in visionmedia/express/lib/utils.js.\n    */\n  function pathRegExp(path, opts) {\n    var insensitive = opts.caseInsensitiveMatch,\n        ret = {\n          originalPath: path,\n          regexp: path\n        },\n        keys = ret.keys = [];\n\n    path = path\n      .replace(/([().])/g, '\\\\$1')\n      .replace(/(\\/)?:(\\w+)([\\?\\*])?/g, function(_, slash, key, option) {\n        var optional = option === '?' ? option : null;\n        var star = option === '*' ? option : null;\n        keys.push({ name: key, optional: !!optional });\n        slash = slash || '';\n        return ''\n          + (optional ? '' : slash)\n          + '(?:'\n          + (optional ? slash : '')\n          + (star && '(.+?)' || '([^/]+)')\n          + (optional || '')\n          + ')'\n          + (optional || '');\n      })\n      .replace(/([\\/$\\*])/g, '\\\\$1');\n\n    ret.regexp = new RegExp('^' + path + '$', insensitive ? 'i' : '');\n    return ret;\n  }\n\n  /**\n   * @ngdoc method\n   * @name $routeProvider#otherwise\n   *\n   * @description\n   * Sets route definition that will be used on route change when no other route definition\n   * is matched.\n   *\n   * @param {Object|string} params Mapping information to be assigned to `$route.current`.\n   * If called with a string, the value maps to `redirectTo`.\n   * @returns {Object} self\n   */\n  this.otherwise = function(params) {\n    if (typeof params === 'string') {\n      params = {redirectTo: params};\n    }\n    this.when(null, params);\n    return this;\n  };\n\n\n  this.$get = ['$rootScope',\n               '$location',\n               '$routeParams',\n               '$q',\n               '$injector',\n               '$templateRequest',\n               '$sce',\n      function($rootScope, $location, $routeParams, $q, $injector, $templateRequest, $sce) {\n\n    /**\n     * @ngdoc service\n     * @name $route\n     * @requires $location\n     * @requires $routeParams\n     *\n     * @property {Object} current Reference to the current route definition.\n     * The route definition contains:\n     *\n     *   - `controller`: The controller constructor as define in route definition.\n     *   - `locals`: A map of locals which is used by {@link ng.$controller $controller} service for\n     *     controller instantiation. The `locals` contain\n     *     the resolved values of the `resolve` map. Additionally the `locals` also contain:\n     *\n     *     - `$scope` - The current route scope.\n     *     - `$template` - The current route template HTML.\n     *\n     * @property {Object} routes Object with all route configuration Objects as its properties.\n     *\n     * @description\n     * `$route` is used for deep-linking URLs to controllers and views (HTML partials).\n     * It watches `$location.url()` and tries to map the path to an existing route definition.\n     *\n     * Requires the {@link ngRoute `ngRoute`} module to be installed.\n     *\n     * You can define routes through {@link ngRoute.$routeProvider $routeProvider}'s API.\n     *\n     * The `$route` service is typically used in conjunction with the\n     * {@link ngRoute.directive:ngView `ngView`} directive and the\n     * {@link ngRoute.$routeParams `$routeParams`} service.\n     *\n     * @example\n     * This example shows how changing the URL hash causes the `$route` to match a route against the\n     * URL, and the `ngView` pulls in the partial.\n     *\n     * <example name=\"$route-service\" module=\"ngRouteExample\"\n     *          deps=\"angular-route.js\" fixBase=\"true\">\n     *   <file name=\"index.html\">\n     *     <div ng-controller=\"MainController\">\n     *       Choose:\n     *       <a href=\"Book/Moby\">Moby</a> |\n     *       <a href=\"Book/Moby/ch/1\">Moby: Ch1</a> |\n     *       <a href=\"Book/Gatsby\">Gatsby</a> |\n     *       <a href=\"Book/Gatsby/ch/4?key=value\">Gatsby: Ch4</a> |\n     *       <a href=\"Book/Scarlet\">Scarlet Letter</a><br/>\n     *\n     *       <div ng-view></div>\n     *\n     *       <hr />\n     *\n     *       <pre>$location.path() = {{$location.path()}}</pre>\n     *       <pre>$route.current.templateUrl = {{$route.current.templateUrl}}</pre>\n     *       <pre>$route.current.params = {{$route.current.params}}</pre>\n     *       <pre>$route.current.scope.name = {{$route.current.scope.name}}</pre>\n     *       <pre>$routeParams = {{$routeParams}}</pre>\n     *     </div>\n     *   </file>\n     *\n     *   <file name=\"book.html\">\n     *     controller: {{name}}<br />\n     *     Book Id: {{params.bookId}}<br />\n     *   </file>\n     *\n     *   <file name=\"chapter.html\">\n     *     controller: {{name}}<br />\n     *     Book Id: {{params.bookId}}<br />\n     *     Chapter Id: {{params.chapterId}}\n     *   </file>\n     *\n     *   <file name=\"script.js\">\n     *     angular.module('ngRouteExample', ['ngRoute'])\n     *\n     *      .controller('MainController', function($scope, $route, $routeParams, $location) {\n     *          $scope.$route = $route;\n     *          $scope.$location = $location;\n     *          $scope.$routeParams = $routeParams;\n     *      })\n     *\n     *      .controller('BookController', function($scope, $routeParams) {\n     *          $scope.name = \"BookController\";\n     *          $scope.params = $routeParams;\n     *      })\n     *\n     *      .controller('ChapterController', function($scope, $routeParams) {\n     *          $scope.name = \"ChapterController\";\n     *          $scope.params = $routeParams;\n     *      })\n     *\n     *     .config(function($routeProvider, $locationProvider) {\n     *       $routeProvider\n     *        .when('/Book/:bookId', {\n     *         templateUrl: 'book.html',\n     *         controller: 'BookController',\n     *         resolve: {\n     *           // I will cause a 1 second delay\n     *           delay: function($q, $timeout) {\n     *             var delay = $q.defer();\n     *             $timeout(delay.resolve, 1000);\n     *             return delay.promise;\n     *           }\n     *         }\n     *       })\n     *       .when('/Book/:bookId/ch/:chapterId', {\n     *         templateUrl: 'chapter.html',\n     *         controller: 'ChapterController'\n     *       });\n     *\n     *       // configure html5 to get links working on jsfiddle\n     *       $locationProvider.html5Mode(true);\n     *     });\n     *\n     *   </file>\n     *\n     *   <file name=\"protractor.js\" type=\"protractor\">\n     *     it('should load and compile correct template', function() {\n     *       element(by.linkText('Moby: Ch1')).click();\n     *       var content = element(by.css('[ng-view]')).getText();\n     *       expect(content).toMatch(/controller\\: ChapterController/);\n     *       expect(content).toMatch(/Book Id\\: Moby/);\n     *       expect(content).toMatch(/Chapter Id\\: 1/);\n     *\n     *       element(by.partialLinkText('Scarlet')).click();\n     *\n     *       content = element(by.css('[ng-view]')).getText();\n     *       expect(content).toMatch(/controller\\: BookController/);\n     *       expect(content).toMatch(/Book Id\\: Scarlet/);\n     *     });\n     *   </file>\n     * </example>\n     */\n\n    /**\n     * @ngdoc event\n     * @name $route#$routeChangeStart\n     * @eventType broadcast on root scope\n     * @description\n     * Broadcasted before a route change. At this  point the route services starts\n     * resolving all of the dependencies needed for the route change to occur.\n     * Typically this involves fetching the view template as well as any dependencies\n     * defined in `resolve` route property. Once  all of the dependencies are resolved\n     * `$routeChangeSuccess` is fired.\n     *\n     * The route change (and the `$location` change that triggered it) can be prevented\n     * by calling `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on}\n     * for more details about event object.\n     *\n     * @param {Object} angularEvent Synthetic event object.\n     * @param {Route} next Future route information.\n     * @param {Route} current Current route information.\n     */\n\n    /**\n     * @ngdoc event\n     * @name $route#$routeChangeSuccess\n     * @eventType broadcast on root scope\n     * @description\n     * Broadcasted after a route change has happened successfully.\n     * The `resolve` dependencies are now available in the `current.locals` property.\n     *\n     * {@link ngRoute.directive:ngView ngView} listens for the directive\n     * to instantiate the controller and render the view.\n     *\n     * @param {Object} angularEvent Synthetic event object.\n     * @param {Route} current Current route information.\n     * @param {Route|Undefined} previous Previous route information, or undefined if current is\n     * first route entered.\n     */\n\n    /**\n     * @ngdoc event\n     * @name $route#$routeChangeError\n     * @eventType broadcast on root scope\n     * @description\n     * Broadcasted if any of the resolve promises are rejected.\n     *\n     * @param {Object} angularEvent Synthetic event object\n     * @param {Route} current Current route information.\n     * @param {Route} previous Previous route information.\n     * @param {Route} rejection Rejection of the promise. Usually the error of the failed promise.\n     */\n\n    /**\n     * @ngdoc event\n     * @name $route#$routeUpdate\n     * @eventType broadcast on root scope\n     * @description\n     * The `reloadOnSearch` property has been set to false, and we are reusing the same\n     * instance of the Controller.\n     *\n     * @param {Object} angularEvent Synthetic event object\n     * @param {Route} current Current/previous route information.\n     */\n\n    var forceReload = false,\n        preparedRoute,\n        preparedRouteIsUpdateOnly,\n        $route = {\n          routes: routes,\n\n          /**\n           * @ngdoc method\n           * @name $route#reload\n           *\n           * @description\n           * Causes `$route` service to reload the current route even if\n           * {@link ng.$location $location} hasn't changed.\n           *\n           * As a result of that, {@link ngRoute.directive:ngView ngView}\n           * creates new scope and reinstantiates the controller.\n           */\n          reload: function() {\n            forceReload = true;\n            $rootScope.$evalAsync(function() {\n              // Don't support cancellation of a reload for now...\n              prepareRoute();\n              commitRoute();\n            });\n          },\n\n          /**\n           * @ngdoc method\n           * @name $route#updateParams\n           *\n           * @description\n           * Causes `$route` service to update the current URL, replacing\n           * current route parameters with those specified in `newParams`.\n           * Provided property names that match the route's path segment\n           * definitions will be interpolated into the location's path, while\n           * remaining properties will be treated as query params.\n           *\n           * @param {!Object<string, string>} newParams mapping of URL parameter names to values\n           */\n          updateParams: function(newParams) {\n            if (this.current && this.current.$$route) {\n              newParams = angular.extend({}, this.current.params, newParams);\n              $location.path(interpolate(this.current.$$route.originalPath, newParams));\n              // interpolate modifies newParams, only query params are left\n              $location.search(newParams);\n            } else {\n              throw $routeMinErr('norout', 'Tried updating route when with no current route');\n            }\n          }\n        };\n\n    $rootScope.$on('$locationChangeStart', prepareRoute);\n    $rootScope.$on('$locationChangeSuccess', commitRoute);\n\n    return $route;\n\n    /////////////////////////////////////////////////////\n\n    /**\n     * @param on {string} current url\n     * @param route {Object} route regexp to match the url against\n     * @return {?Object}\n     *\n     * @description\n     * Check if the route matches the current url.\n     *\n     * Inspired by match in\n     * visionmedia/express/lib/router/router.js.\n     */\n    function switchRouteMatcher(on, route) {\n      var keys = route.keys,\n          params = {};\n\n      if (!route.regexp) return null;\n\n      var m = route.regexp.exec(on);\n      if (!m) return null;\n\n      for (var i = 1, len = m.length; i < len; ++i) {\n        var key = keys[i - 1];\n\n        var val = m[i];\n\n        if (key && val) {\n          params[key.name] = val;\n        }\n      }\n      return params;\n    }\n\n    function prepareRoute($locationEvent) {\n      var lastRoute = $route.current;\n\n      preparedRoute = parseRoute();\n      preparedRouteIsUpdateOnly = preparedRoute && lastRoute && preparedRoute.$$route === lastRoute.$$route\n          && angular.equals(preparedRoute.pathParams, lastRoute.pathParams)\n          && !preparedRoute.reloadOnSearch && !forceReload;\n\n      if (!preparedRouteIsUpdateOnly && (lastRoute || preparedRoute)) {\n        if ($rootScope.$broadcast('$routeChangeStart', preparedRoute, lastRoute).defaultPrevented) {\n          if ($locationEvent) {\n            $locationEvent.preventDefault();\n          }\n        }\n      }\n    }\n\n    function commitRoute() {\n      var lastRoute = $route.current;\n      var nextRoute = preparedRoute;\n\n      if (preparedRouteIsUpdateOnly) {\n        lastRoute.params = nextRoute.params;\n        angular.copy(lastRoute.params, $routeParams);\n        $rootScope.$broadcast('$routeUpdate', lastRoute);\n      } else if (nextRoute || lastRoute) {\n        forceReload = false;\n        $route.current = nextRoute;\n        if (nextRoute) {\n          if (nextRoute.redirectTo) {\n            if (angular.isString(nextRoute.redirectTo)) {\n              $location.path(interpolate(nextRoute.redirectTo, nextRoute.params)).search(nextRoute.params)\n                       .replace();\n            } else {\n              $location.url(nextRoute.redirectTo(nextRoute.pathParams, $location.path(), $location.search()))\n                       .replace();\n            }\n          }\n        }\n\n        $q.when(nextRoute).\n          then(function() {\n            if (nextRoute) {\n              var locals = angular.extend({}, nextRoute.resolve),\n                  template, templateUrl;\n\n              angular.forEach(locals, function(value, key) {\n                locals[key] = angular.isString(value) ?\n                    $injector.get(value) : $injector.invoke(value, null, null, key);\n              });\n\n              if (angular.isDefined(template = nextRoute.template)) {\n                if (angular.isFunction(template)) {\n                  template = template(nextRoute.params);\n                }\n              } else if (angular.isDefined(templateUrl = nextRoute.templateUrl)) {\n                if (angular.isFunction(templateUrl)) {\n                  templateUrl = templateUrl(nextRoute.params);\n                }\n                if (angular.isDefined(templateUrl)) {\n                  nextRoute.loadedTemplateUrl = $sce.valueOf(templateUrl);\n                  template = $templateRequest(templateUrl);\n                }\n              }\n              if (angular.isDefined(template)) {\n                locals['$template'] = template;\n              }\n              return $q.all(locals);\n            }\n          }).\n          // after route change\n          then(function(locals) {\n            if (nextRoute == $route.current) {\n              if (nextRoute) {\n                nextRoute.locals = locals;\n                angular.copy(nextRoute.params, $routeParams);\n              }\n              $rootScope.$broadcast('$routeChangeSuccess', nextRoute, lastRoute);\n            }\n          }, function(error) {\n            if (nextRoute == $route.current) {\n              $rootScope.$broadcast('$routeChangeError', nextRoute, lastRoute, error);\n            }\n          });\n      }\n    }\n\n\n    /**\n     * @returns {Object} the current active route, by matching it against the URL\n     */\n    function parseRoute() {\n      // Match a route\n      var params, match;\n      angular.forEach(routes, function(route, path) {\n        if (!match && (params = switchRouteMatcher($location.path(), route))) {\n          match = inherit(route, {\n            params: angular.extend({}, $location.search(), params),\n            pathParams: params});\n          match.$$route = route;\n        }\n      });\n      // No route matched; fallback to \"otherwise\" route\n      return match || routes[null] && inherit(routes[null], {params: {}, pathParams:{}});\n    }\n\n    /**\n     * @returns {string} interpolation of the redirect path with the parameters\n     */\n    function interpolate(string, params) {\n      var result = [];\n      angular.forEach((string || '').split(':'), function(segment, i) {\n        if (i === 0) {\n          result.push(segment);\n        } else {\n          var segmentMatch = segment.match(/(\\w+)(?:[?*])?(.*)/);\n          var key = segmentMatch[1];\n          result.push(params[key]);\n          result.push(segmentMatch[2] || '');\n          delete params[key];\n        }\n      });\n      return result.join('');\n    }\n  }];\n}\n\nngRouteModule.provider('$routeParams', $RouteParamsProvider);\n\n\n/**\n * @ngdoc service\n * @name $routeParams\n * @requires $route\n *\n * @description\n * The `$routeParams` service allows you to retrieve the current set of route parameters.\n *\n * Requires the {@link ngRoute `ngRoute`} module to be installed.\n *\n * The route parameters are a combination of {@link ng.$location `$location`}'s\n * {@link ng.$location#search `search()`} and {@link ng.$location#path `path()`}.\n * The `path` parameters are extracted when the {@link ngRoute.$route `$route`} path is matched.\n *\n * In case of parameter name collision, `path` params take precedence over `search` params.\n *\n * The service guarantees that the identity of the `$routeParams` object will remain unchanged\n * (but its properties will likely change) even when a route change occurs.\n *\n * Note that the `$routeParams` are only updated *after* a route change completes successfully.\n * This means that you cannot rely on `$routeParams` being correct in route resolve functions.\n * Instead you can use `$route.current.params` to access the new route's parameters.\n *\n * @example\n * ```js\n *  // Given:\n *  // URL: http://server.com/index.html#/Chapter/1/Section/2?search=moby\n *  // Route: /Chapter/:chapterId/Section/:sectionId\n *  //\n *  // Then\n *  $routeParams ==> {chapterId:'1', sectionId:'2', search:'moby'}\n * ```\n */\nfunction $RouteParamsProvider() {\n  this.$get = function() { return {}; };\n}\n\nngRouteModule.directive('ngView', ngViewFactory);\nngRouteModule.directive('ngView', ngViewFillContentFactory);\n\n\n/**\n * @ngdoc directive\n * @name ngView\n * @restrict ECA\n *\n * @description\n * # Overview\n * `ngView` is a directive that complements the {@link ngRoute.$route $route} service by\n * including the rendered template of the current route into the main layout (`index.html`) file.\n * Every time the current route changes, the included view changes with it according to the\n * configuration of the `$route` service.\n *\n * Requires the {@link ngRoute `ngRoute`} module to be installed.\n *\n * @animations\n * enter - animation is used to bring new content into the browser.\n * leave - animation is used to animate existing content away.\n *\n * The enter and leave animation occur concurrently.\n *\n * @scope\n * @priority 400\n * @param {string=} onload Expression to evaluate whenever the view updates.\n *\n * @param {string=} autoscroll Whether `ngView` should call {@link ng.$anchorScroll\n *                  $anchorScroll} to scroll the viewport after the view is updated.\n *\n *                  - If the attribute is not set, disable scrolling.\n *                  - If the attribute is set without value, enable scrolling.\n *                  - Otherwise enable scrolling only if the `autoscroll` attribute value evaluated\n *                    as an expression yields a truthy value.\n * @example\n    <example name=\"ngView-directive\" module=\"ngViewExample\"\n             deps=\"angular-route.js;angular-animate.js\"\n             animations=\"true\" fixBase=\"true\">\n      <file name=\"index.html\">\n        <div ng-controller=\"MainCtrl as main\">\n          Choose:\n          <a href=\"Book/Moby\">Moby</a> |\n          <a href=\"Book/Moby/ch/1\">Moby: Ch1</a> |\n          <a href=\"Book/Gatsby\">Gatsby</a> |\n          <a href=\"Book/Gatsby/ch/4?key=value\">Gatsby: Ch4</a> |\n          <a href=\"Book/Scarlet\">Scarlet Letter</a><br/>\n\n          <div class=\"view-animate-container\">\n            <div ng-view class=\"view-animate\"></div>\n          </div>\n          <hr />\n\n          <pre>$location.path() = {{main.$location.path()}}</pre>\n          <pre>$route.current.templateUrl = {{main.$route.current.templateUrl}}</pre>\n          <pre>$route.current.params = {{main.$route.current.params}}</pre>\n          <pre>$routeParams = {{main.$routeParams}}</pre>\n        </div>\n      </file>\n\n      <file name=\"book.html\">\n        <div>\n          controller: {{book.name}}<br />\n          Book Id: {{book.params.bookId}}<br />\n        </div>\n      </file>\n\n      <file name=\"chapter.html\">\n        <div>\n          controller: {{chapter.name}}<br />\n          Book Id: {{chapter.params.bookId}}<br />\n          Chapter Id: {{chapter.params.chapterId}}\n        </div>\n      </file>\n\n      <file name=\"animations.css\">\n        .view-animate-container {\n          position:relative;\n          height:100px!important;\n          background:white;\n          border:1px solid black;\n          height:40px;\n          overflow:hidden;\n        }\n\n        .view-animate {\n          padding:10px;\n        }\n\n        .view-animate.ng-enter, .view-animate.ng-leave {\n          -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 1.5s;\n          transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 1.5s;\n\n          display:block;\n          width:100%;\n          border-left:1px solid black;\n\n          position:absolute;\n          top:0;\n          left:0;\n          right:0;\n          bottom:0;\n          padding:10px;\n        }\n\n        .view-animate.ng-enter {\n          left:100%;\n        }\n        .view-animate.ng-enter.ng-enter-active {\n          left:0;\n        }\n        .view-animate.ng-leave.ng-leave-active {\n          left:-100%;\n        }\n      </file>\n\n      <file name=\"script.js\">\n        angular.module('ngViewExample', ['ngRoute', 'ngAnimate'])\n          .config(['$routeProvider', '$locationProvider',\n            function($routeProvider, $locationProvider) {\n              $routeProvider\n                .when('/Book/:bookId', {\n                  templateUrl: 'book.html',\n                  controller: 'BookCtrl',\n                  controllerAs: 'book'\n                })\n                .when('/Book/:bookId/ch/:chapterId', {\n                  templateUrl: 'chapter.html',\n                  controller: 'ChapterCtrl',\n                  controllerAs: 'chapter'\n                });\n\n              $locationProvider.html5Mode(true);\n          }])\n          .controller('MainCtrl', ['$route', '$routeParams', '$location',\n            function($route, $routeParams, $location) {\n              this.$route = $route;\n              this.$location = $location;\n              this.$routeParams = $routeParams;\n          }])\n          .controller('BookCtrl', ['$routeParams', function($routeParams) {\n            this.name = \"BookCtrl\";\n            this.params = $routeParams;\n          }])\n          .controller('ChapterCtrl', ['$routeParams', function($routeParams) {\n            this.name = \"ChapterCtrl\";\n            this.params = $routeParams;\n          }]);\n\n      </file>\n\n      <file name=\"protractor.js\" type=\"protractor\">\n        it('should load and compile correct template', function() {\n          element(by.linkText('Moby: Ch1')).click();\n          var content = element(by.css('[ng-view]')).getText();\n          expect(content).toMatch(/controller\\: ChapterCtrl/);\n          expect(content).toMatch(/Book Id\\: Moby/);\n          expect(content).toMatch(/Chapter Id\\: 1/);\n\n          element(by.partialLinkText('Scarlet')).click();\n\n          content = element(by.css('[ng-view]')).getText();\n          expect(content).toMatch(/controller\\: BookCtrl/);\n          expect(content).toMatch(/Book Id\\: Scarlet/);\n        });\n      </file>\n    </example>\n */\n\n\n/**\n * @ngdoc event\n * @name ngView#$viewContentLoaded\n * @eventType emit on the current ngView scope\n * @description\n * Emitted every time the ngView content is reloaded.\n */\nngViewFactory.$inject = ['$route', '$anchorScroll', '$animate'];\nfunction ngViewFactory($route, $anchorScroll, $animate) {\n  return {\n    restrict: 'ECA',\n    terminal: true,\n    priority: 400,\n    transclude: 'element',\n    link: function(scope, $element, attr, ctrl, $transclude) {\n        var currentScope,\n            currentElement,\n            previousLeaveAnimation,\n            autoScrollExp = attr.autoscroll,\n            onloadExp = attr.onload || '';\n\n        scope.$on('$routeChangeSuccess', update);\n        update();\n\n        function cleanupLastView() {\n          if (previousLeaveAnimation) {\n            $animate.cancel(previousLeaveAnimation);\n            previousLeaveAnimation = null;\n          }\n\n          if (currentScope) {\n            currentScope.$destroy();\n            currentScope = null;\n          }\n          if (currentElement) {\n            previousLeaveAnimation = $animate.leave(currentElement);\n            previousLeaveAnimation.then(function() {\n              previousLeaveAnimation = null;\n            });\n            currentElement = null;\n          }\n        }\n\n        function update() {\n          var locals = $route.current && $route.current.locals,\n              template = locals && locals.$template;\n\n          if (angular.isDefined(template)) {\n            var newScope = scope.$new();\n            var current = $route.current;\n\n            // Note: This will also link all children of ng-view that were contained in the original\n            // html. If that content contains controllers, ... they could pollute/change the scope.\n            // However, using ng-view on an element with additional content does not make sense...\n            // Note: We can't remove them in the cloneAttchFn of $transclude as that\n            // function is called before linking the content, which would apply child\n            // directives to non existing elements.\n            var clone = $transclude(newScope, function(clone) {\n              $animate.enter(clone, null, currentElement || $element).then(function onNgViewEnter() {\n                if (angular.isDefined(autoScrollExp)\n                  && (!autoScrollExp || scope.$eval(autoScrollExp))) {\n                  $anchorScroll();\n                }\n              });\n              cleanupLastView();\n            });\n\n            currentElement = clone;\n            currentScope = current.scope = newScope;\n            currentScope.$emit('$viewContentLoaded');\n            currentScope.$eval(onloadExp);\n          } else {\n            cleanupLastView();\n          }\n        }\n    }\n  };\n}\n\n// This directive is called during the $transclude call of the first `ngView` directive.\n// It will replace and compile the content of the element with the loaded template.\n// We need this directive so that the element content is already filled when\n// the link function of another directive on the same element as ngView\n// is called.\nngViewFillContentFactory.$inject = ['$compile', '$controller', '$route'];\nfunction ngViewFillContentFactory($compile, $controller, $route) {\n  return {\n    restrict: 'ECA',\n    priority: -400,\n    link: function(scope, $element) {\n      var current = $route.current,\n          locals = current.locals;\n\n      $element.html(locals.$template);\n\n      var link = $compile($element.contents());\n\n      if (current.controller) {\n        locals.$scope = scope;\n        var controller = $controller(current.controller, locals);\n        if (current.controllerAs) {\n          scope[current.controllerAs] = controller;\n        }\n        $element.data('$ngControllerController', controller);\n        $element.children().data('$ngControllerController', controller);\n      }\n\n      link(scope);\n    }\n  };\n}\n\n\n})(window, window.angular);\n","/**\n * @license AngularJS v1.3.18\n * (c) 2010-2014 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular, undefined) {'use strict';\n\n/**\n * @ngdoc module\n * @name ngAria\n * @description\n *\n * The `ngAria` module provides support for common\n * [<abbr title=\"Accessible Rich Internet Applications\">ARIA</abbr>](http://www.w3.org/TR/wai-aria/)\n * attributes that convey state or semantic information about the application for users\n * of assistive technologies, such as screen readers.\n *\n * <div doc-module-components=\"ngAria\"></div>\n *\n * ## Usage\n *\n * For ngAria to do its magic, simply include the module as a dependency. The directives supported\n * by ngAria are:\n * `ngModel`, `ngDisabled`, `ngShow`, `ngHide`, `ngClick`, `ngDblClick`, and `ngMessages`.\n *\n * Below is a more detailed breakdown of the attributes handled by ngAria:\n *\n * | Directive                                   | Supported Attributes                                                                   |\n * |---------------------------------------------|----------------------------------------------------------------------------------------|\n * | {@link ng.directive:ngDisabled ngDisabled}  | aria-disabled                                                                          |\n * | {@link ng.directive:ngShow ngShow}          | aria-hidden                                                                            |\n * | {@link ng.directive:ngHide ngHide}          | aria-hidden                                                                            |\n * | {@link ng.directive:ngDblclick ngDblclick}  | tabindex                                                                               |\n * | {@link module:ngMessages ngMessages}        | aria-live                                                                              |\n * | {@link ng.directive:ngModel ngModel}        | aria-checked, aria-valuemin, aria-valuemax, aria-valuenow, aria-invalid, aria-required, input roles |\n * | {@link ng.directive:ngClick ngClick}        | tabindex, keypress event, button role                                                               |\n *\n * Find out more information about each directive by reading the\n * {@link guide/accessibility ngAria Developer Guide}.\n *\n * ##Example\n * Using ngDisabled with ngAria:\n * ```html\n * <md-checkbox ng-disabled=\"disabled\">\n * ```\n * Becomes:\n * ```html\n * <md-checkbox ng-disabled=\"disabled\" aria-disabled=\"true\">\n * ```\n *\n * ##Disabling Attributes\n * It's possible to disable individual attributes added by ngAria with the\n * {@link ngAria.$ariaProvider#config config} method. For more details, see the\n * {@link guide/accessibility Developer Guide}.\n */\n /* global -ngAriaModule */\nvar ngAriaModule = angular.module('ngAria', ['ng']).\n                        provider('$aria', $AriaProvider);\n\n/**\n * @ngdoc provider\n * @name $ariaProvider\n *\n * @description\n *\n * Used for configuring the ARIA attributes injected and managed by ngAria.\n *\n * ```js\n * angular.module('myApp', ['ngAria'], function config($ariaProvider) {\n *   $ariaProvider.config({\n *     ariaValue: true,\n *     tabindex: false\n *   });\n * });\n *```\n *\n * ## Dependencies\n * Requires the {@link ngAria} module to be installed.\n *\n */\nfunction $AriaProvider() {\n  var config = {\n    ariaHidden: true,\n    ariaChecked: true,\n    ariaDisabled: true,\n    ariaRequired: true,\n    ariaInvalid: true,\n    ariaMultiline: true,\n    ariaValue: true,\n    tabindex: true,\n    bindKeypress: true\n  };\n\n  /**\n   * @ngdoc method\n   * @name $ariaProvider#config\n   *\n   * @param {object} config object to enable/disable specific ARIA attributes\n   *\n   *  - **ariaHidden** – `{boolean}` – Enables/disables aria-hidden tags\n   *  - **ariaChecked** – `{boolean}` – Enables/disables aria-checked tags\n   *  - **ariaDisabled** – `{boolean}` – Enables/disables aria-disabled tags\n   *  - **ariaRequired** – `{boolean}` – Enables/disables aria-required tags\n   *  - **ariaInvalid** – `{boolean}` – Enables/disables aria-invalid tags\n   *  - **ariaMultiline** – `{boolean}` – Enables/disables aria-multiline tags\n   *  - **ariaValue** – `{boolean}` – Enables/disables aria-valuemin, aria-valuemax and aria-valuenow tags\n   *  - **tabindex** – `{boolean}` – Enables/disables tabindex tags\n   *  - **bindKeypress** – `{boolean}` – Enables/disables keypress event binding on `&lt;div&gt;` and\n   *    `&lt;li&gt;` elements with ng-click\n   *\n   * @description\n   * Enables/disables various ARIA attributes\n   */\n  this.config = function(newConfig) {\n    config = angular.extend(config, newConfig);\n  };\n\n  function watchExpr(attrName, ariaAttr, negate) {\n    return function(scope, elem, attr) {\n      var ariaCamelName = attr.$normalize(ariaAttr);\n      if (config[ariaCamelName] && !attr[ariaCamelName]) {\n        scope.$watch(attr[attrName], function(boolVal) {\n          if (negate) {\n            boolVal = !boolVal;\n          }\n          elem.attr(ariaAttr, boolVal);\n        });\n      }\n    };\n  }\n\n  /**\n   * @ngdoc service\n   * @name $aria\n   *\n   * @description\n   * @priority 200\n   *\n   * The $aria service contains helper methods for applying common\n   * [ARIA](http://www.w3.org/TR/wai-aria/) attributes to HTML directives.\n   *\n   * ngAria injects common accessibility attributes that tell assistive technologies when HTML\n   * elements are enabled, selected, hidden, and more. To see how this is performed with ngAria,\n   * let's review a code snippet from ngAria itself:\n   *\n   *```js\n   * ngAriaModule.directive('ngDisabled', ['$aria', function($aria) {\n   *   return $aria.$$watchExpr('ngDisabled', 'aria-disabled');\n   * }])\n   *```\n   * Shown above, the ngAria module creates a directive with the same signature as the\n   * traditional `ng-disabled` directive. But this ngAria version is dedicated to\n   * solely managing accessibility attributes. The internal `$aria` service is used to watch the\n   * boolean attribute `ngDisabled`. If it has not been explicitly set by the developer,\n   * `aria-disabled` is injected as an attribute with its value synchronized to the value in\n   * `ngDisabled`.\n   *\n   * Because ngAria hooks into the `ng-disabled` directive, developers do not have to do\n   * anything to enable this feature. The `aria-disabled` attribute is automatically managed\n   * simply as a silent side-effect of using `ng-disabled` with the ngAria module.\n   *\n   * The full list of directives that interface with ngAria:\n   * * **ngModel**\n   * * **ngShow**\n   * * **ngHide**\n   * * **ngClick**\n   * * **ngDblclick**\n   * * **ngMessages**\n   * * **ngDisabled**\n   *\n   * Read the {@link guide/accessibility ngAria Developer Guide} for a thorough explanation of each\n   * directive.\n   *\n   *\n   * ## Dependencies\n   * Requires the {@link ngAria} module to be installed.\n   */\n  this.$get = function() {\n    return {\n      config: function(key) {\n        return config[key];\n      },\n      $$watchExpr: watchExpr\n    };\n  };\n}\n\n\nngAriaModule.directive('ngShow', ['$aria', function($aria) {\n  return $aria.$$watchExpr('ngShow', 'aria-hidden', true);\n}])\n.directive('ngHide', ['$aria', function($aria) {\n  return $aria.$$watchExpr('ngHide', 'aria-hidden', false);\n}])\n.directive('ngModel', ['$aria', function($aria) {\n\n  function shouldAttachAttr(attr, normalizedAttr, elem) {\n    return $aria.config(normalizedAttr) && !elem.attr(attr);\n  }\n\n  function shouldAttachRole(role, elem) {\n    return !elem.attr('role') && (elem.attr('type') === role) && (elem[0].nodeName !== 'INPUT');\n  }\n\n  function getShape(attr, elem) {\n    var type = attr.type,\n        role = attr.role;\n\n    return ((type || role) === 'checkbox' || role === 'menuitemcheckbox') ? 'checkbox' :\n           ((type || role) === 'radio'    || role === 'menuitemradio') ? 'radio' :\n           (type === 'range'              || role === 'progressbar' || role === 'slider') ? 'range' :\n           (type || role) === 'textbox'   || elem[0].nodeName === 'TEXTAREA' ? 'multiline' : '';\n  }\n\n  return {\n    restrict: 'A',\n    require: '?ngModel',\n    priority: 200, //Make sure watches are fired after any other directives that affect the ngModel value\n    compile: function(elem, attr) {\n      var shape = getShape(attr, elem);\n\n      return {\n        pre: function(scope, elem, attr, ngModel) {\n          if (shape === 'checkbox' && attr.type !== 'checkbox') {\n            //Use the input[checkbox] $isEmpty implementation for elements with checkbox roles\n            ngModel.$isEmpty = function(value) {\n              return value === false;\n            };\n          }\n        },\n        post: function(scope, elem, attr, ngModel) {\n          var needsTabIndex = shouldAttachAttr('tabindex', 'tabindex', elem);\n\n          function ngAriaWatchModelValue() {\n            return ngModel.$modelValue;\n          }\n\n          function getRadioReaction() {\n            if (needsTabIndex) {\n              needsTabIndex = false;\n              return function ngAriaRadioReaction(newVal) {\n                var boolVal = (attr.value == ngModel.$viewValue);\n                elem.attr('aria-checked', boolVal);\n                elem.attr('tabindex', 0 - !boolVal);\n              };\n            } else {\n              return function ngAriaRadioReaction(newVal) {\n                elem.attr('aria-checked', (attr.value == ngModel.$viewValue));\n              };\n            }\n          }\n\n          function ngAriaCheckboxReaction() {\n            elem.attr('aria-checked', !ngModel.$isEmpty(ngModel.$viewValue));\n          }\n\n          switch (shape) {\n            case 'radio':\n            case 'checkbox':\n              if (shouldAttachRole(shape, elem)) {\n                elem.attr('role', shape);\n              }\n              if (shouldAttachAttr('aria-checked', 'ariaChecked', elem)) {\n                scope.$watch(ngAriaWatchModelValue, shape === 'radio' ?\n                    getRadioReaction() : ngAriaCheckboxReaction);\n              }\n              break;\n            case 'range':\n              if (shouldAttachRole(shape, elem)) {\n                elem.attr('role', 'slider');\n              }\n              if ($aria.config('ariaValue')) {\n                if (attr.min && !elem.attr('aria-valuemin')) {\n                  elem.attr('aria-valuemin', attr.min);\n                }\n                if (attr.max && !elem.attr('aria-valuemax')) {\n                  elem.attr('aria-valuemax', attr.max);\n                }\n                if (!elem.attr('aria-valuenow')) {\n                  scope.$watch(ngAriaWatchModelValue, function ngAriaValueNowReaction(newVal) {\n                    elem.attr('aria-valuenow', newVal);\n                  });\n                }\n              }\n              break;\n            case 'multiline':\n              if (shouldAttachAttr('aria-multiline', 'ariaMultiline', elem)) {\n                elem.attr('aria-multiline', true);\n              }\n              break;\n          }\n\n          if (needsTabIndex) {\n            elem.attr('tabindex', 0);\n          }\n\n          if (ngModel.$validators.required && shouldAttachAttr('aria-required', 'ariaRequired', elem)) {\n            scope.$watch(function ngAriaRequiredWatch() {\n              return ngModel.$error.required;\n            }, function ngAriaRequiredReaction(newVal) {\n              elem.attr('aria-required', !!newVal);\n            });\n          }\n\n          if (shouldAttachAttr('aria-invalid', 'ariaInvalid', elem)) {\n            scope.$watch(function ngAriaInvalidWatch() {\n              return ngModel.$invalid;\n            }, function ngAriaInvalidReaction(newVal) {\n              elem.attr('aria-invalid', !!newVal);\n            });\n          }\n        }\n      };\n    }\n  };\n}])\n.directive('ngDisabled', ['$aria', function($aria) {\n  return $aria.$$watchExpr('ngDisabled', 'aria-disabled');\n}])\n.directive('ngMessages', function() {\n  return {\n    restrict: 'A',\n    require: '?ngMessages',\n    link: function(scope, elem, attr, ngMessages) {\n      if (!elem.attr('aria-live')) {\n        elem.attr('aria-live', 'assertive');\n      }\n    }\n  };\n})\n.directive('ngClick',['$aria', '$parse', function($aria, $parse) {\n  return {\n    restrict: 'A',\n    compile: function(elem, attr) {\n      var fn = $parse(attr.ngClick, /* interceptorFn */ null, /* expensiveChecks */ true);\n      return function(scope, elem, attr) {\n\n        var nodeBlackList = ['BUTTON', 'A', 'INPUT', 'TEXTAREA'];\n\n        function isNodeOneOf(elem, nodeTypeArray) {\n          if (nodeTypeArray.indexOf(elem[0].nodeName) !== -1) {\n            return true;\n          }\n        }\n        if (!elem.attr('role') && !isNodeOneOf(elem, nodeBlackList)) {\n          elem.attr('role', 'button');\n        }\n\n        if ($aria.config('tabindex') && !elem.attr('tabindex')) {\n          elem.attr('tabindex', 0);\n        }\n\n        if ($aria.config('bindKeypress') && !attr.ngKeypress && !isNodeOneOf(elem, nodeBlackList)) {\n          elem.on('keypress', function(event) {\n            if (event.keyCode === 32 || event.keyCode === 13) {\n              scope.$apply(callback);\n            }\n\n            function callback() {\n              fn(scope, { $event: event });\n            }\n          });\n        }\n      };\n    }\n  };\n}])\n.directive('ngDblclick', ['$aria', function($aria) {\n  return function(scope, elem, attr) {\n    if ($aria.config('tabindex') && !elem.attr('tabindex')) {\n      elem.attr('tabindex', 0);\n    }\n  };\n}]);\n\n\n})(window, window.angular);\n","/*!\n * angular-translate - v2.4.2 - 2014-10-21\n * http://github.com/angular-translate/angular-translate\n * Copyright (c) 2014 ; Licensed MIT\n */\nangular.module('pascalprecht.translate', ['ng']).run([\n  '$translate',\n  function ($translate) {\n    var key = $translate.storageKey(), storage = $translate.storage();\n    if (storage) {\n      if (!storage.get(key)) {\n        if (angular.isString($translate.preferredLanguage())) {\n          $translate.use($translate.preferredLanguage());\n        } else {\n          storage.set(key, $translate.use());\n        }\n      } else {\n        $translate.use(storage.get(key));\n      }\n    } else if (angular.isString($translate.preferredLanguage())) {\n      $translate.use($translate.preferredLanguage());\n    }\n  }\n]);\nangular.module('pascalprecht.translate').provider('$translate', [\n  '$STORAGE_KEY',\n  function ($STORAGE_KEY) {\n    var $translationTable = {}, $preferredLanguage, $availableLanguageKeys = [], $languageKeyAliases, $fallbackLanguage, $fallbackWasString, $uses, $nextLang, $storageFactory, $storageKey = $STORAGE_KEY, $storagePrefix, $missingTranslationHandlerFactory, $interpolationFactory, $interpolatorFactories = [], $interpolationSanitizationStrategy = false, $loaderFactory, $cloakClassName = 'translate-cloak', $loaderOptions, $notFoundIndicatorLeft, $notFoundIndicatorRight, $postCompilingEnabled = false, NESTED_OBJECT_DELIMITER = '.', loaderCache;\n    var version = '2.4.2';\n    var getLocale = function () {\n      var nav = window.navigator;\n      return ((angular.isArray(nav.languages) ? nav.languages[0] : nav.language || nav.browserLanguage || nav.systemLanguage || nav.userLanguage) || '').split('-').join('_');\n    };\n    var indexOf = function (array, searchElement) {\n      for (var i = 0, len = array.length; i < len; i++) {\n        if (array[i] === searchElement) {\n          return i;\n        }\n      }\n      return -1;\n    };\n    var trim = function () {\n      return this.replace(/^\\s+|\\s+$/g, '');\n    };\n    var negotiateLocale = function (preferred) {\n      var avail = [], locale = angular.lowercase(preferred), i = 0, n = $availableLanguageKeys.length;\n      for (; i < n; i++) {\n        avail.push(angular.lowercase($availableLanguageKeys[i]));\n      }\n      if (indexOf(avail, locale) > -1) {\n        return preferred;\n      }\n      if ($languageKeyAliases) {\n        var alias;\n        for (var langKeyAlias in $languageKeyAliases) {\n          var hasWildcardKey = false;\n          var hasExactKey = Object.prototype.hasOwnProperty.call($languageKeyAliases, langKeyAlias) && angular.lowercase(langKeyAlias) === angular.lowercase(preferred);\n          if (langKeyAlias.slice(-1) === '*') {\n            hasWildcardKey = langKeyAlias.slice(0, -1) === preferred.slice(0, langKeyAlias.length - 1);\n          }\n          if (hasExactKey || hasWildcardKey) {\n            alias = $languageKeyAliases[langKeyAlias];\n            if (indexOf(avail, angular.lowercase(alias)) > -1) {\n              return alias;\n            }\n          }\n        }\n      }\n      var parts = preferred.split('_');\n      if (parts.length > 1 && indexOf(avail, angular.lowercase(parts[0])) > -1) {\n        return parts[0];\n      }\n      return preferred;\n    };\n    var translations = function (langKey, translationTable) {\n      if (!langKey && !translationTable) {\n        return $translationTable;\n      }\n      if (langKey && !translationTable) {\n        if (angular.isString(langKey)) {\n          return $translationTable[langKey];\n        }\n      } else {\n        if (!angular.isObject($translationTable[langKey])) {\n          $translationTable[langKey] = {};\n        }\n        angular.extend($translationTable[langKey], flatObject(translationTable));\n      }\n      return this;\n    };\n    this.translations = translations;\n    this.cloakClassName = function (name) {\n      if (!name) {\n        return $cloakClassName;\n      }\n      $cloakClassName = name;\n      return this;\n    };\n    var flatObject = function (data, path, result, prevKey) {\n      var key, keyWithPath, keyWithShortPath, val;\n      if (!path) {\n        path = [];\n      }\n      if (!result) {\n        result = {};\n      }\n      for (key in data) {\n        if (!Object.prototype.hasOwnProperty.call(data, key)) {\n          continue;\n        }\n        val = data[key];\n        if (angular.isObject(val)) {\n          flatObject(val, path.concat(key), result, key);\n        } else {\n          keyWithPath = path.length ? '' + path.join(NESTED_OBJECT_DELIMITER) + NESTED_OBJECT_DELIMITER + key : key;\n          if (path.length && key === prevKey) {\n            keyWithShortPath = '' + path.join(NESTED_OBJECT_DELIMITER);\n            result[keyWithShortPath] = '@:' + keyWithPath;\n          }\n          result[keyWithPath] = val;\n        }\n      }\n      return result;\n    };\n    this.addInterpolation = function (factory) {\n      $interpolatorFactories.push(factory);\n      return this;\n    };\n    this.useMessageFormatInterpolation = function () {\n      return this.useInterpolation('$translateMessageFormatInterpolation');\n    };\n    this.useInterpolation = function (factory) {\n      $interpolationFactory = factory;\n      return this;\n    };\n    this.useSanitizeValueStrategy = function (value) {\n      $interpolationSanitizationStrategy = value;\n      return this;\n    };\n    this.preferredLanguage = function (langKey) {\n      setupPreferredLanguage(langKey);\n      return this;\n    };\n    var setupPreferredLanguage = function (langKey) {\n      if (langKey) {\n        $preferredLanguage = langKey;\n      }\n      return $preferredLanguage;\n    };\n    this.translationNotFoundIndicator = function (indicator) {\n      this.translationNotFoundIndicatorLeft(indicator);\n      this.translationNotFoundIndicatorRight(indicator);\n      return this;\n    };\n    this.translationNotFoundIndicatorLeft = function (indicator) {\n      if (!indicator) {\n        return $notFoundIndicatorLeft;\n      }\n      $notFoundIndicatorLeft = indicator;\n      return this;\n    };\n    this.translationNotFoundIndicatorRight = function (indicator) {\n      if (!indicator) {\n        return $notFoundIndicatorRight;\n      }\n      $notFoundIndicatorRight = indicator;\n      return this;\n    };\n    this.fallbackLanguage = function (langKey) {\n      fallbackStack(langKey);\n      return this;\n    };\n    var fallbackStack = function (langKey) {\n      if (langKey) {\n        if (angular.isString(langKey)) {\n          $fallbackWasString = true;\n          $fallbackLanguage = [langKey];\n        } else if (angular.isArray(langKey)) {\n          $fallbackWasString = false;\n          $fallbackLanguage = langKey;\n        }\n        if (angular.isString($preferredLanguage) && indexOf($fallbackLanguage, $preferredLanguage) < 0) {\n          $fallbackLanguage.push($preferredLanguage);\n        }\n        return this;\n      } else {\n        if ($fallbackWasString) {\n          return $fallbackLanguage[0];\n        } else {\n          return $fallbackLanguage;\n        }\n      }\n    };\n    this.use = function (langKey) {\n      if (langKey) {\n        if (!$translationTable[langKey] && !$loaderFactory) {\n          throw new Error('$translateProvider couldn\\'t find translationTable for langKey: \\'' + langKey + '\\'');\n        }\n        $uses = langKey;\n        return this;\n      }\n      return $uses;\n    };\n    var storageKey = function (key) {\n      if (!key) {\n        if ($storagePrefix) {\n          return $storagePrefix + $storageKey;\n        }\n        return $storageKey;\n      }\n      $storageKey = key;\n    };\n    this.storageKey = storageKey;\n    this.useUrlLoader = function (url, options) {\n      return this.useLoader('$translateUrlLoader', angular.extend({ url: url }, options));\n    };\n    this.useStaticFilesLoader = function (options) {\n      return this.useLoader('$translateStaticFilesLoader', options);\n    };\n    this.useLoader = function (loaderFactory, options) {\n      $loaderFactory = loaderFactory;\n      $loaderOptions = options || {};\n      return this;\n    };\n    this.useLocalStorage = function () {\n      return this.useStorage('$translateLocalStorage');\n    };\n    this.useCookieStorage = function () {\n      return this.useStorage('$translateCookieStorage');\n    };\n    this.useStorage = function (storageFactory) {\n      $storageFactory = storageFactory;\n      return this;\n    };\n    this.storagePrefix = function (prefix) {\n      if (!prefix) {\n        return prefix;\n      }\n      $storagePrefix = prefix;\n      return this;\n    };\n    this.useMissingTranslationHandlerLog = function () {\n      return this.useMissingTranslationHandler('$translateMissingTranslationHandlerLog');\n    };\n    this.useMissingTranslationHandler = function (factory) {\n      $missingTranslationHandlerFactory = factory;\n      return this;\n    };\n    this.usePostCompiling = function (value) {\n      $postCompilingEnabled = !!value;\n      return this;\n    };\n    this.determinePreferredLanguage = function (fn) {\n      var locale = fn && angular.isFunction(fn) ? fn() : getLocale();\n      if (!$availableLanguageKeys.length) {\n        $preferredLanguage = locale;\n      } else {\n        $preferredLanguage = negotiateLocale(locale);\n      }\n      return this;\n    };\n    this.registerAvailableLanguageKeys = function (languageKeys, aliases) {\n      if (languageKeys) {\n        $availableLanguageKeys = languageKeys;\n        if (aliases) {\n          $languageKeyAliases = aliases;\n        }\n        return this;\n      }\n      return $availableLanguageKeys;\n    };\n    this.useLoaderCache = function (cache) {\n      if (cache === false) {\n        loaderCache = undefined;\n      } else if (cache === true) {\n        loaderCache = true;\n      } else if (typeof cache === 'undefined') {\n        loaderCache = '$translationCache';\n      } else if (cache) {\n        loaderCache = cache;\n      }\n      return this;\n    };\n    this.$get = [\n      '$log',\n      '$injector',\n      '$rootScope',\n      '$q',\n      function ($log, $injector, $rootScope, $q) {\n        var Storage, defaultInterpolator = $injector.get($interpolationFactory || '$translateDefaultInterpolation'), pendingLoader = false, interpolatorHashMap = {}, langPromises = {}, fallbackIndex, startFallbackIteration;\n        var $translate = function (translationId, interpolateParams, interpolationId) {\n          if (angular.isArray(translationId)) {\n            var translateAll = function (translationIds) {\n              var results = {};\n              var promises = [];\n              var translate = function (translationId) {\n                var deferred = $q.defer();\n                var regardless = function (value) {\n                  results[translationId] = value;\n                  deferred.resolve([\n                    translationId,\n                    value\n                  ]);\n                };\n                $translate(translationId, interpolateParams, interpolationId).then(regardless, regardless);\n                return deferred.promise;\n              };\n              for (var i = 0, c = translationIds.length; i < c; i++) {\n                promises.push(translate(translationIds[i]));\n              }\n              return $q.all(promises).then(function () {\n                return results;\n              });\n            };\n            return translateAll(translationId);\n          }\n          var deferred = $q.defer();\n          if (translationId) {\n            translationId = trim.apply(translationId);\n          }\n          var promiseToWaitFor = function () {\n              var promise = $preferredLanguage ? langPromises[$preferredLanguage] : langPromises[$uses];\n              fallbackIndex = 0;\n              if ($storageFactory && !promise) {\n                var langKey = Storage.get($storageKey);\n                promise = langPromises[langKey];\n                if ($fallbackLanguage && $fallbackLanguage.length) {\n                  var index = indexOf($fallbackLanguage, langKey);\n                  fallbackIndex = index === 0 ? 1 : 0;\n                  if (indexOf($fallbackLanguage, $preferredLanguage) < 0) {\n                    $fallbackLanguage.push($preferredLanguage);\n                  }\n                }\n              }\n              return promise;\n            }();\n          if (!promiseToWaitFor) {\n            determineTranslation(translationId, interpolateParams, interpolationId).then(deferred.resolve, deferred.reject);\n          } else {\n            promiseToWaitFor.then(function () {\n              determineTranslation(translationId, interpolateParams, interpolationId).then(deferred.resolve, deferred.reject);\n            }, deferred.reject);\n          }\n          return deferred.promise;\n        };\n        var applyNotFoundIndicators = function (translationId) {\n          if ($notFoundIndicatorLeft) {\n            translationId = [\n              $notFoundIndicatorLeft,\n              translationId\n            ].join(' ');\n          }\n          if ($notFoundIndicatorRight) {\n            translationId = [\n              translationId,\n              $notFoundIndicatorRight\n            ].join(' ');\n          }\n          return translationId;\n        };\n        var useLanguage = function (key) {\n          $uses = key;\n          $rootScope.$emit('$translateChangeSuccess', { language: key });\n          if ($storageFactory) {\n            Storage.set($translate.storageKey(), $uses);\n          }\n          defaultInterpolator.setLocale($uses);\n          angular.forEach(interpolatorHashMap, function (interpolator, id) {\n            interpolatorHashMap[id].setLocale($uses);\n          });\n          $rootScope.$emit('$translateChangeEnd', { language: key });\n        };\n        var loadAsync = function (key) {\n          if (!key) {\n            throw 'No language key specified for loading.';\n          }\n          var deferred = $q.defer();\n          $rootScope.$emit('$translateLoadingStart', { language: key });\n          pendingLoader = true;\n          var cache = loaderCache;\n          if (typeof cache === 'string') {\n            cache = $injector.get(cache);\n          }\n          var loaderOptions = angular.extend({}, $loaderOptions, {\n              key: key,\n              $http: angular.extend({}, { cache: cache }, $loaderOptions.$http)\n            });\n          $injector.get($loaderFactory)(loaderOptions).then(function (data) {\n            var translationTable = {};\n            $rootScope.$emit('$translateLoadingSuccess', { language: key });\n            if (angular.isArray(data)) {\n              angular.forEach(data, function (table) {\n                angular.extend(translationTable, flatObject(table));\n              });\n            } else {\n              angular.extend(translationTable, flatObject(data));\n            }\n            pendingLoader = false;\n            deferred.resolve({\n              key: key,\n              table: translationTable\n            });\n            $rootScope.$emit('$translateLoadingEnd', { language: key });\n          }, function (key) {\n            $rootScope.$emit('$translateLoadingError', { language: key });\n            deferred.reject(key);\n            $rootScope.$emit('$translateLoadingEnd', { language: key });\n          });\n          return deferred.promise;\n        };\n        if ($storageFactory) {\n          Storage = $injector.get($storageFactory);\n          if (!Storage.get || !Storage.set) {\n            throw new Error('Couldn\\'t use storage \\'' + $storageFactory + '\\', missing get() or set() method!');\n          }\n        }\n        if (angular.isFunction(defaultInterpolator.useSanitizeValueStrategy)) {\n          defaultInterpolator.useSanitizeValueStrategy($interpolationSanitizationStrategy);\n        }\n        if ($interpolatorFactories.length) {\n          angular.forEach($interpolatorFactories, function (interpolatorFactory) {\n            var interpolator = $injector.get(interpolatorFactory);\n            interpolator.setLocale($preferredLanguage || $uses);\n            if (angular.isFunction(interpolator.useSanitizeValueStrategy)) {\n              interpolator.useSanitizeValueStrategy($interpolationSanitizationStrategy);\n            }\n            interpolatorHashMap[interpolator.getInterpolationIdentifier()] = interpolator;\n          });\n        }\n        var getTranslationTable = function (langKey) {\n          var deferred = $q.defer();\n          if (Object.prototype.hasOwnProperty.call($translationTable, langKey)) {\n            deferred.resolve($translationTable[langKey]);\n          } else if (langPromises[langKey]) {\n            langPromises[langKey].then(function (data) {\n              translations(data.key, data.table);\n              deferred.resolve(data.table);\n            }, deferred.reject);\n          } else {\n            deferred.reject();\n          }\n          return deferred.promise;\n        };\n        var getFallbackTranslation = function (langKey, translationId, interpolateParams, Interpolator) {\n          var deferred = $q.defer();\n          getTranslationTable(langKey).then(function (translationTable) {\n            if (Object.prototype.hasOwnProperty.call(translationTable, translationId)) {\n              Interpolator.setLocale(langKey);\n              deferred.resolve(Interpolator.interpolate(translationTable[translationId], interpolateParams));\n              Interpolator.setLocale($uses);\n            } else {\n              deferred.reject();\n            }\n          }, deferred.reject);\n          return deferred.promise;\n        };\n        var getFallbackTranslationInstant = function (langKey, translationId, interpolateParams, Interpolator) {\n          var result, translationTable = $translationTable[langKey];\n          if (Object.prototype.hasOwnProperty.call(translationTable, translationId)) {\n            Interpolator.setLocale(langKey);\n            result = Interpolator.interpolate(translationTable[translationId], interpolateParams);\n            Interpolator.setLocale($uses);\n          }\n          return result;\n        };\n        var translateByHandler = function (translationId) {\n          if ($missingTranslationHandlerFactory) {\n            var resultString = $injector.get($missingTranslationHandlerFactory)(translationId, $uses);\n            if (resultString !== undefined) {\n              return resultString;\n            } else {\n              return translationId;\n            }\n          } else {\n            return translationId;\n          }\n        };\n        var resolveForFallbackLanguage = function (fallbackLanguageIndex, translationId, interpolateParams, Interpolator) {\n          var deferred = $q.defer();\n          if (fallbackLanguageIndex < $fallbackLanguage.length) {\n            var langKey = $fallbackLanguage[fallbackLanguageIndex];\n            getFallbackTranslation(langKey, translationId, interpolateParams, Interpolator).then(deferred.resolve, function () {\n              resolveForFallbackLanguage(fallbackLanguageIndex + 1, translationId, interpolateParams, Interpolator).then(deferred.resolve);\n            });\n          } else {\n            deferred.resolve(translateByHandler(translationId));\n          }\n          return deferred.promise;\n        };\n        var resolveForFallbackLanguageInstant = function (fallbackLanguageIndex, translationId, interpolateParams, Interpolator) {\n          var result;\n          if (fallbackLanguageIndex < $fallbackLanguage.length) {\n            var langKey = $fallbackLanguage[fallbackLanguageIndex];\n            result = getFallbackTranslationInstant(langKey, translationId, interpolateParams, Interpolator);\n            if (!result) {\n              result = resolveForFallbackLanguageInstant(fallbackLanguageIndex + 1, translationId, interpolateParams, Interpolator);\n            }\n          }\n          return result;\n        };\n        var fallbackTranslation = function (translationId, interpolateParams, Interpolator) {\n          return resolveForFallbackLanguage(startFallbackIteration > 0 ? startFallbackIteration : fallbackIndex, translationId, interpolateParams, Interpolator);\n        };\n        var fallbackTranslationInstant = function (translationId, interpolateParams, Interpolator) {\n          return resolveForFallbackLanguageInstant(startFallbackIteration > 0 ? startFallbackIteration : fallbackIndex, translationId, interpolateParams, Interpolator);\n        };\n        var determineTranslation = function (translationId, interpolateParams, interpolationId) {\n          var deferred = $q.defer();\n          var table = $uses ? $translationTable[$uses] : $translationTable, Interpolator = interpolationId ? interpolatorHashMap[interpolationId] : defaultInterpolator;\n          if (table && Object.prototype.hasOwnProperty.call(table, translationId)) {\n            var translation = table[translationId];\n            if (translation.substr(0, 2) === '@:') {\n              $translate(translation.substr(2), interpolateParams, interpolationId).then(deferred.resolve, deferred.reject);\n            } else {\n              deferred.resolve(Interpolator.interpolate(translation, interpolateParams));\n            }\n          } else {\n            var missingTranslationHandlerTranslation;\n            if ($missingTranslationHandlerFactory && !pendingLoader) {\n              missingTranslationHandlerTranslation = translateByHandler(translationId);\n            }\n            if ($uses && $fallbackLanguage && $fallbackLanguage.length) {\n              fallbackTranslation(translationId, interpolateParams, Interpolator).then(function (translation) {\n                deferred.resolve(translation);\n              }, function (_translationId) {\n                deferred.reject(applyNotFoundIndicators(_translationId));\n              });\n            } else if ($missingTranslationHandlerFactory && !pendingLoader && missingTranslationHandlerTranslation) {\n              deferred.resolve(missingTranslationHandlerTranslation);\n            } else {\n              deferred.reject(applyNotFoundIndicators(translationId));\n            }\n          }\n          return deferred.promise;\n        };\n        var determineTranslationInstant = function (translationId, interpolateParams, interpolationId) {\n          var result, table = $uses ? $translationTable[$uses] : $translationTable, Interpolator = interpolationId ? interpolatorHashMap[interpolationId] : defaultInterpolator;\n          if (table && Object.prototype.hasOwnProperty.call(table, translationId)) {\n            var translation = table[translationId];\n            if (translation.substr(0, 2) === '@:') {\n              result = determineTranslationInstant(translation.substr(2), interpolateParams, interpolationId);\n            } else {\n              result = Interpolator.interpolate(translation, interpolateParams);\n            }\n          } else {\n            var missingTranslationHandlerTranslation;\n            if ($missingTranslationHandlerFactory && !pendingLoader) {\n              missingTranslationHandlerTranslation = translateByHandler(translationId);\n            }\n            if ($uses && $fallbackLanguage && $fallbackLanguage.length) {\n              fallbackIndex = 0;\n              result = fallbackTranslationInstant(translationId, interpolateParams, Interpolator);\n            } else if ($missingTranslationHandlerFactory && !pendingLoader && missingTranslationHandlerTranslation) {\n              result = missingTranslationHandlerTranslation;\n            } else {\n              result = applyNotFoundIndicators(translationId);\n            }\n          }\n          return result;\n        };\n        $translate.preferredLanguage = function (langKey) {\n          if (langKey) {\n            setupPreferredLanguage(langKey);\n          }\n          return $preferredLanguage;\n        };\n        $translate.cloakClassName = function () {\n          return $cloakClassName;\n        };\n        $translate.fallbackLanguage = function (langKey) {\n          if (langKey !== undefined && langKey !== null) {\n            fallbackStack(langKey);\n            if ($loaderFactory) {\n              if ($fallbackLanguage && $fallbackLanguage.length) {\n                for (var i = 0, len = $fallbackLanguage.length; i < len; i++) {\n                  if (!langPromises[$fallbackLanguage[i]]) {\n                    langPromises[$fallbackLanguage[i]] = loadAsync($fallbackLanguage[i]);\n                  }\n                }\n              }\n            }\n            $translate.use($translate.use());\n          }\n          if ($fallbackWasString) {\n            return $fallbackLanguage[0];\n          } else {\n            return $fallbackLanguage;\n          }\n        };\n        $translate.useFallbackLanguage = function (langKey) {\n          if (langKey !== undefined && langKey !== null) {\n            if (!langKey) {\n              startFallbackIteration = 0;\n            } else {\n              var langKeyPosition = indexOf($fallbackLanguage, langKey);\n              if (langKeyPosition > -1) {\n                startFallbackIteration = langKeyPosition;\n              }\n            }\n          }\n        };\n        $translate.proposedLanguage = function () {\n          return $nextLang;\n        };\n        $translate.storage = function () {\n          return Storage;\n        };\n        $translate.use = function (key) {\n          if (!key) {\n            return $uses;\n          }\n          var deferred = $q.defer();\n          $rootScope.$emit('$translateChangeStart', { language: key });\n          var aliasedKey = negotiateLocale(key);\n          if (aliasedKey) {\n            key = aliasedKey;\n          }\n          if (!$translationTable[key] && $loaderFactory && !langPromises[key]) {\n            $nextLang = key;\n            langPromises[key] = loadAsync(key).then(function (translation) {\n              translations(translation.key, translation.table);\n              deferred.resolve(translation.key);\n              useLanguage(translation.key);\n              if ($nextLang === key) {\n                $nextLang = undefined;\n              }\n            }, function (key) {\n              if ($nextLang === key) {\n                $nextLang = undefined;\n              }\n              $rootScope.$emit('$translateChangeError', { language: key });\n              deferred.reject(key);\n              $rootScope.$emit('$translateChangeEnd', { language: key });\n            });\n          } else {\n            deferred.resolve(key);\n            useLanguage(key);\n          }\n          return deferred.promise;\n        };\n        $translate.storageKey = function () {\n          return storageKey();\n        };\n        $translate.isPostCompilingEnabled = function () {\n          return $postCompilingEnabled;\n        };\n        $translate.refresh = function (langKey) {\n          if (!$loaderFactory) {\n            throw new Error('Couldn\\'t refresh translation table, no loader registered!');\n          }\n          var deferred = $q.defer();\n          function resolve() {\n            deferred.resolve();\n            $rootScope.$emit('$translateRefreshEnd', { language: langKey });\n          }\n          function reject() {\n            deferred.reject();\n            $rootScope.$emit('$translateRefreshEnd', { language: langKey });\n          }\n          $rootScope.$emit('$translateRefreshStart', { language: langKey });\n          if (!langKey) {\n            var tables = [], loadingKeys = {};\n            if ($fallbackLanguage && $fallbackLanguage.length) {\n              for (var i = 0, len = $fallbackLanguage.length; i < len; i++) {\n                tables.push(loadAsync($fallbackLanguage[i]));\n                loadingKeys[$fallbackLanguage[i]] = true;\n              }\n            }\n            if ($uses && !loadingKeys[$uses]) {\n              tables.push(loadAsync($uses));\n            }\n            $q.all(tables).then(function (tableData) {\n              angular.forEach(tableData, function (data) {\n                if ($translationTable[data.key]) {\n                  delete $translationTable[data.key];\n                }\n                translations(data.key, data.table);\n              });\n              if ($uses) {\n                useLanguage($uses);\n              }\n              resolve();\n            });\n          } else if ($translationTable[langKey]) {\n            loadAsync(langKey).then(function (data) {\n              translations(data.key, data.table);\n              if (langKey === $uses) {\n                useLanguage($uses);\n              }\n              resolve();\n            }, reject);\n          } else {\n            reject();\n          }\n          return deferred.promise;\n        };\n        $translate.instant = function (translationId, interpolateParams, interpolationId) {\n          if (translationId === null || angular.isUndefined(translationId)) {\n            return translationId;\n          }\n          if (angular.isArray(translationId)) {\n            var results = {};\n            for (var i = 0, c = translationId.length; i < c; i++) {\n              results[translationId[i]] = $translate.instant(translationId[i], interpolateParams, interpolationId);\n            }\n            return results;\n          }\n          if (angular.isString(translationId) && translationId.length < 1) {\n            return translationId;\n          }\n          if (translationId) {\n            translationId = trim.apply(translationId);\n          }\n          var result, possibleLangKeys = [];\n          if ($preferredLanguage) {\n            possibleLangKeys.push($preferredLanguage);\n          }\n          if ($uses) {\n            possibleLangKeys.push($uses);\n          }\n          if ($fallbackLanguage && $fallbackLanguage.length) {\n            possibleLangKeys = possibleLangKeys.concat($fallbackLanguage);\n          }\n          for (var j = 0, d = possibleLangKeys.length; j < d; j++) {\n            var possibleLangKey = possibleLangKeys[j];\n            if ($translationTable[possibleLangKey]) {\n              if (typeof $translationTable[possibleLangKey][translationId] !== 'undefined') {\n                result = determineTranslationInstant(translationId, interpolateParams, interpolationId);\n              }\n            }\n            if (typeof result !== 'undefined') {\n              break;\n            }\n          }\n          if (!result && result !== '') {\n            result = defaultInterpolator.interpolate(translationId, interpolateParams);\n            if ($missingTranslationHandlerFactory && !pendingLoader) {\n              result = translateByHandler(translationId);\n            }\n          }\n          return result;\n        };\n        $translate.versionInfo = function () {\n          return version;\n        };\n        $translate.loaderCache = function () {\n          return loaderCache;\n        };\n        if ($loaderFactory) {\n          if (angular.equals($translationTable, {})) {\n            $translate.use($translate.use());\n          }\n          if ($fallbackLanguage && $fallbackLanguage.length) {\n            var processAsyncResult = function (translation) {\n              translations(translation.key, translation.table);\n              $rootScope.$emit('$translateChangeEnd', { language: translation.key });\n            };\n            for (var i = 0, len = $fallbackLanguage.length; i < len; i++) {\n              langPromises[$fallbackLanguage[i]] = loadAsync($fallbackLanguage[i]).then(processAsyncResult);\n            }\n          }\n        }\n        return $translate;\n      }\n    ];\n  }\n]);\nangular.module('pascalprecht.translate').factory('$translateDefaultInterpolation', [\n  '$interpolate',\n  function ($interpolate) {\n    var $translateInterpolator = {}, $locale, $identifier = 'default', $sanitizeValueStrategy = null, sanitizeValueStrategies = {\n        escaped: function (params) {\n          var result = {};\n          for (var key in params) {\n            if (Object.prototype.hasOwnProperty.call(params, key)) {\n              result[key] = angular.element('<div></div>').text(params[key]).html();\n            }\n          }\n          return result;\n        }\n      };\n    var sanitizeParams = function (params) {\n      var result;\n      if (angular.isFunction(sanitizeValueStrategies[$sanitizeValueStrategy])) {\n        result = sanitizeValueStrategies[$sanitizeValueStrategy](params);\n      } else {\n        result = params;\n      }\n      return result;\n    };\n    $translateInterpolator.setLocale = function (locale) {\n      $locale = locale;\n    };\n    $translateInterpolator.getInterpolationIdentifier = function () {\n      return $identifier;\n    };\n    $translateInterpolator.useSanitizeValueStrategy = function (value) {\n      $sanitizeValueStrategy = value;\n      return this;\n    };\n    $translateInterpolator.interpolate = function (string, interpolateParams) {\n      if ($sanitizeValueStrategy) {\n        interpolateParams = sanitizeParams(interpolateParams);\n      }\n      return $interpolate(string)(interpolateParams || {});\n    };\n    return $translateInterpolator;\n  }\n]);\nangular.module('pascalprecht.translate').constant('$STORAGE_KEY', 'NG_TRANSLATE_LANG_KEY');\nangular.module('pascalprecht.translate').directive('translate', [\n  '$translate',\n  '$q',\n  '$interpolate',\n  '$compile',\n  '$parse',\n  '$rootScope',\n  function ($translate, $q, $interpolate, $compile, $parse, $rootScope) {\n    return {\n      restrict: 'AE',\n      scope: true,\n      compile: function (tElement, tAttr) {\n        var translateValuesExist = tAttr.translateValues ? tAttr.translateValues : undefined;\n        var translateInterpolation = tAttr.translateInterpolation ? tAttr.translateInterpolation : undefined;\n        var translateValueExist = tElement[0].outerHTML.match(/translate-value-+/i);\n        var interpolateRegExp = '^(.*)(' + $interpolate.startSymbol() + '.*' + $interpolate.endSymbol() + ')(.*)';\n        return function linkFn(scope, iElement, iAttr) {\n          scope.interpolateParams = {};\n          scope.preText = '';\n          scope.postText = '';\n          iAttr.$observe('translate', function (translationId) {\n            if (angular.equals(translationId, '') || !angular.isDefined(translationId)) {\n              var interpolateMatches = iElement.text().match(interpolateRegExp);\n              if (angular.isArray(interpolateMatches)) {\n                scope.preText = interpolateMatches[1];\n                scope.postText = interpolateMatches[3];\n                scope.translationId = $interpolate(interpolateMatches[2])(scope.$parent);\n              } else {\n                scope.translationId = iElement.text().replace(/^\\s+|\\s+$/g, '');\n              }\n            } else {\n              scope.translationId = translationId;\n            }\n          });\n          iAttr.$observe('translateDefault', function (value) {\n            scope.defaultText = value;\n          });\n          if (translateValuesExist) {\n            iAttr.$observe('translateValues', function (interpolateParams) {\n              if (interpolateParams) {\n                scope.$parent.$watch(function () {\n                  angular.extend(scope.interpolateParams, $parse(interpolateParams)(scope.$parent));\n                });\n              }\n            });\n          }\n          if (translateValueExist) {\n            var fn = function (attrName) {\n              iAttr.$observe(attrName, function (value) {\n                scope.interpolateParams[angular.lowercase(attrName.substr(14, 1)) + attrName.substr(15)] = value;\n              });\n            };\n            for (var attr in iAttr) {\n              if (Object.prototype.hasOwnProperty.call(iAttr, attr) && attr.substr(0, 14) === 'translateValue' && attr !== 'translateValues') {\n                fn(attr);\n              }\n            }\n          }\n          var applyElementContent = function (value, scope, successful) {\n            if (!successful && typeof scope.defaultText !== 'undefined') {\n              value = scope.defaultText;\n            }\n            iElement.html(scope.preText + value + scope.postText);\n            var globallyEnabled = $translate.isPostCompilingEnabled();\n            var locallyDefined = typeof tAttr.translateCompile !== 'undefined';\n            var locallyEnabled = locallyDefined && tAttr.translateCompile !== 'false';\n            if (globallyEnabled && !locallyDefined || locallyEnabled) {\n              $compile(iElement.contents())(scope);\n            }\n          };\n          var updateTranslationFn = function () {\n              if (!translateValuesExist && !translateValueExist) {\n                return function () {\n                  var unwatch = scope.$watch('translationId', function (value) {\n                      if (scope.translationId && value) {\n                        $translate(value, {}, translateInterpolation).then(function (translation) {\n                          applyElementContent(translation, scope, true);\n                          unwatch();\n                        }, function (translationId) {\n                          applyElementContent(translationId, scope, false);\n                          unwatch();\n                        });\n                      }\n                    }, true);\n                };\n              } else {\n                return function () {\n                  var updateTranslations = function () {\n                    if (scope.translationId && scope.interpolateParams) {\n                      $translate(scope.translationId, scope.interpolateParams, translateInterpolation).then(function (translation) {\n                        applyElementContent(translation, scope, true);\n                      }, function (translationId) {\n                        applyElementContent(translationId, scope, false);\n                      });\n                    }\n                  };\n                  scope.$watch('interpolateParams', updateTranslations, true);\n                  scope.$watch('translationId', updateTranslations);\n                };\n              }\n            }();\n          var unbind = $rootScope.$on('$translateChangeSuccess', updateTranslationFn);\n          updateTranslationFn();\n          scope.$on('$destroy', unbind);\n        };\n      }\n    };\n  }\n]);\nangular.module('pascalprecht.translate').directive('translateCloak', [\n  '$rootScope',\n  '$translate',\n  function ($rootScope, $translate) {\n    return {\n      compile: function (tElement) {\n        var applyCloak = function () {\n            tElement.addClass($translate.cloakClassName());\n          }, removeCloak = function () {\n            tElement.removeClass($translate.cloakClassName());\n          }, removeListener = $rootScope.$on('$translateChangeEnd', function () {\n            removeCloak();\n            removeListener();\n            removeListener = null;\n          });\n        applyCloak();\n        return function linkFn(scope, iElement, iAttr) {\n          if (iAttr.translateCloak && iAttr.translateCloak.length) {\n            iAttr.$observe('translateCloak', function (translationId) {\n              $translate(translationId).then(removeCloak, applyCloak);\n            });\n          }\n        };\n      }\n    };\n  }\n]);\nangular.module('pascalprecht.translate').filter('translate', [\n  '$parse',\n  '$translate',\n  function ($parse, $translate) {\n    var translateFilter = function (translationId, interpolateParams, interpolation) {\n      if (!angular.isObject(interpolateParams)) {\n        interpolateParams = $parse(interpolateParams)(this);\n      }\n      return $translate.instant(translationId, interpolateParams, interpolation);\n    };\n    translateFilter.$stateful = true;\n    return translateFilter;\n  }\n]);","/**\n * @license\n * Lo-Dash 2.4.2 (Custom Build) <https://lodash.com/>\n * Build: `lodash -o ./dist/lodash.compat.js`\n * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n;(function() {\n\n  /** Used as a safe reference for `undefined` in pre ES5 environments */\n  var undefined;\n\n  /** Used to pool arrays and objects used internally */\n  var arrayPool = [],\n      objectPool = [];\n\n  /** Used to generate unique IDs */\n  var idCounter = 0;\n\n  /** Used internally to indicate various things */\n  var indicatorObject = {};\n\n  /** Used to prefix keys to avoid issues with `__proto__` and properties on `Object.prototype` */\n  var keyPrefix = +new Date + '';\n\n  /** Used as the size when optimizations are enabled for large arrays */\n  var largeArraySize = 75;\n\n  /** Used as the max size of the `arrayPool` and `objectPool` */\n  var maxPoolSize = 40;\n\n  /** Used to detect and test whitespace */\n  var whitespace = (\n    // whitespace\n    ' \\t\\x0B\\f\\xA0\\ufeff' +\n\n    // line terminators\n    '\\n\\r\\u2028\\u2029' +\n\n    // unicode category \"Zs\" space separators\n    '\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000'\n  );\n\n  /** Used to match empty string literals in compiled template source */\n  var reEmptyStringLeading = /\\b__p \\+= '';/g,\n      reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n      reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n\n  /**\n   * Used to match ES6 template delimiters\n   * http://people.mozilla.org/~jorendorff/es6-draft.html#sec-literals-string-literals\n   */\n  var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n\n  /** Used to match regexp flags from their coerced string values */\n  var reFlags = /\\w*$/;\n\n  /** Used to detected named functions */\n  var reFuncName = /^\\s*function[ \\n\\r\\t]+\\w/;\n\n  /** Used to match \"interpolate\" template delimiters */\n  var reInterpolate = /<%=([\\s\\S]+?)%>/g;\n\n  /** Used to match leading whitespace and zeros to be removed */\n  var reLeadingSpacesAndZeros = RegExp('^[' + whitespace + ']*0+(?=.$)');\n\n  /** Used to ensure capturing order of template delimiters */\n  var reNoMatch = /($^)/;\n\n  /** Used to detect functions containing a `this` reference */\n  var reThis = /\\bthis\\b/;\n\n  /** Used to match unescaped characters in compiled string literals */\n  var reUnescapedString = /['\\n\\r\\t\\u2028\\u2029\\\\]/g;\n\n  /** Used to assign default `context` object properties */\n  var contextProps = [\n    'Array', 'Boolean', 'Date', 'Error', 'Function', 'Math', 'Number', 'Object',\n    'RegExp', 'String', '_', 'attachEvent', 'clearTimeout', 'isFinite', 'isNaN',\n    'parseInt', 'setTimeout'\n  ];\n\n  /** Used to fix the JScript [[DontEnum]] bug */\n  var shadowedProps = [\n    'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable',\n    'toLocaleString', 'toString', 'valueOf'\n  ];\n\n  /** Used to make template sourceURLs easier to identify */\n  var templateCounter = 0;\n\n  /** `Object#toString` result shortcuts */\n  var argsClass = '[object Arguments]',\n      arrayClass = '[object Array]',\n      boolClass = '[object Boolean]',\n      dateClass = '[object Date]',\n      errorClass = '[object Error]',\n      funcClass = '[object Function]',\n      numberClass = '[object Number]',\n      objectClass = '[object Object]',\n      regexpClass = '[object RegExp]',\n      stringClass = '[object String]';\n\n  /** Used to identify object classifications that `_.clone` supports */\n  var cloneableClasses = {};\n  cloneableClasses[funcClass] = false;\n  cloneableClasses[argsClass] = cloneableClasses[arrayClass] =\n  cloneableClasses[boolClass] = cloneableClasses[dateClass] =\n  cloneableClasses[numberClass] = cloneableClasses[objectClass] =\n  cloneableClasses[regexpClass] = cloneableClasses[stringClass] = true;\n\n  /** Used as an internal `_.debounce` options object */\n  var debounceOptions = {\n    'leading': false,\n    'maxWait': 0,\n    'trailing': false\n  };\n\n  /** Used as the property descriptor for `__bindData__` */\n  var descriptor = {\n    'configurable': false,\n    'enumerable': false,\n    'value': null,\n    'writable': false\n  };\n\n  /** Used as the data object for `iteratorTemplate` */\n  var iteratorData = {\n    'args': '',\n    'array': null,\n    'bottom': '',\n    'firstArg': '',\n    'init': '',\n    'keys': null,\n    'loop': '',\n    'shadowedProps': null,\n    'support': null,\n    'top': '',\n    'useHas': false\n  };\n\n  /** Used to determine if values are of the language type Object */\n  var objectTypes = {\n    'boolean': false,\n    'function': true,\n    'object': true,\n    'number': false,\n    'string': false,\n    'undefined': false\n  };\n\n  /** Used to escape characters for inclusion in compiled string literals */\n  var stringEscapes = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\\n': 'n',\n    '\\r': 'r',\n    '\\t': 't',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  /** Used as a reference to the global object */\n  var root = (objectTypes[typeof window] && window) || this;\n\n  /** Detect free variable `exports` */\n  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module` */\n  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;\n\n  /** Detect the popular CommonJS extension `module.exports` */\n  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;\n\n  /** Detect free variable `global` from Node.js or Browserified code and use it as `root` */\n  var freeGlobal = objectTypes[typeof global] && global;\n  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {\n    root = freeGlobal;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * The base implementation of `_.indexOf` without support for binary searches\n   * or `fromIndex` constraints.\n   *\n   * @private\n   * @param {Array} array The array to search.\n   * @param {*} value The value to search for.\n   * @param {number} [fromIndex=0] The index to search from.\n   * @returns {number} Returns the index of the matched value or `-1`.\n   */\n  function baseIndexOf(array, value, fromIndex) {\n    var index = (fromIndex || 0) - 1,\n        length = array ? array.length : 0;\n\n    while (++index < length) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * An implementation of `_.contains` for cache objects that mimics the return\n   * signature of `_.indexOf` by returning `0` if the value is found, else `-1`.\n   *\n   * @private\n   * @param {Object} cache The cache object to inspect.\n   * @param {*} value The value to search for.\n   * @returns {number} Returns `0` if `value` is found, else `-1`.\n   */\n  function cacheIndexOf(cache, value) {\n    var type = typeof value;\n    cache = cache.cache;\n\n    if (type == 'boolean' || value == null) {\n      return cache[value] ? 0 : -1;\n    }\n    if (type != 'number' && type != 'string') {\n      type = 'object';\n    }\n    var key = type == 'number' ? value : keyPrefix + value;\n    cache = (cache = cache[type]) && cache[key];\n\n    return type == 'object'\n      ? (cache && baseIndexOf(cache, value) > -1 ? 0 : -1)\n      : (cache ? 0 : -1);\n  }\n\n  /**\n   * Adds a given value to the corresponding cache object.\n   *\n   * @private\n   * @param {*} value The value to add to the cache.\n   */\n  function cachePush(value) {\n    var cache = this.cache,\n        type = typeof value;\n\n    if (type == 'boolean' || value == null) {\n      cache[value] = true;\n    } else {\n      if (type != 'number' && type != 'string') {\n        type = 'object';\n      }\n      var key = type == 'number' ? value : keyPrefix + value,\n          typeCache = cache[type] || (cache[type] = {});\n\n      if (type == 'object') {\n        (typeCache[key] || (typeCache[key] = [])).push(value);\n      } else {\n        typeCache[key] = true;\n      }\n    }\n  }\n\n  /**\n   * Used by `_.max` and `_.min` as the default callback when a given\n   * collection is a string value.\n   *\n   * @private\n   * @param {string} value The character to inspect.\n   * @returns {number} Returns the code unit of given character.\n   */\n  function charAtCallback(value) {\n    return value.charCodeAt(0);\n  }\n\n  /**\n   * Used by `sortBy` to compare transformed `collection` elements, stable sorting\n   * them in ascending order.\n   *\n   * @private\n   * @param {Object} a The object to compare to `b`.\n   * @param {Object} b The object to compare to `a`.\n   * @returns {number} Returns the sort order indicator of `1` or `-1`.\n   */\n  function compareAscending(a, b) {\n    var ac = a.criteria,\n        bc = b.criteria,\n        index = -1,\n        length = ac.length;\n\n    while (++index < length) {\n      var value = ac[index],\n          other = bc[index];\n\n      if (value !== other) {\n        if (value > other || typeof value == 'undefined') {\n          return 1;\n        }\n        if (value < other || typeof other == 'undefined') {\n          return -1;\n        }\n      }\n    }\n    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n    // that causes it, under certain circumstances, to return the same value for\n    // `a` and `b`. See https://github.com/jashkenas/underscore/pull/1247\n    //\n    // This also ensures a stable sort in V8 and other engines.\n    // See http://code.google.com/p/v8/issues/detail?id=90\n    return a.index - b.index;\n  }\n\n  /**\n   * Creates a cache object to optimize linear searches of large arrays.\n   *\n   * @private\n   * @param {Array} [array=[]] The array to search.\n   * @returns {null|Object} Returns the cache object or `null` if caching should not be used.\n   */\n  function createCache(array) {\n    var index = -1,\n        length = array.length,\n        first = array[0],\n        mid = array[(length / 2) | 0],\n        last = array[length - 1];\n\n    if (first && typeof first == 'object' &&\n        mid && typeof mid == 'object' && last && typeof last == 'object') {\n      return false;\n    }\n    var cache = getObject();\n    cache['false'] = cache['null'] = cache['true'] = cache['undefined'] = false;\n\n    var result = getObject();\n    result.array = array;\n    result.cache = cache;\n    result.push = cachePush;\n\n    while (++index < length) {\n      result.push(array[index]);\n    }\n    return result;\n  }\n\n  /**\n   * Used by `template` to escape characters for inclusion in compiled\n   * string literals.\n   *\n   * @private\n   * @param {string} match The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  function escapeStringChar(match) {\n    return '\\\\' + stringEscapes[match];\n  }\n\n  /**\n   * Gets an array from the array pool or creates a new one if the pool is empty.\n   *\n   * @private\n   * @returns {Array} The array from the pool.\n   */\n  function getArray() {\n    return arrayPool.pop() || [];\n  }\n\n  /**\n   * Gets an object from the object pool or creates a new one if the pool is empty.\n   *\n   * @private\n   * @returns {Object} The object from the pool.\n   */\n  function getObject() {\n    return objectPool.pop() || {\n      'array': null,\n      'cache': null,\n      'criteria': null,\n      'false': false,\n      'index': 0,\n      'null': false,\n      'number': null,\n      'object': null,\n      'push': null,\n      'string': null,\n      'true': false,\n      'undefined': false,\n      'value': null\n    };\n  }\n\n  /**\n   * Checks if `value` is a DOM node in IE < 9.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if the `value` is a DOM node, else `false`.\n   */\n  function isNode(value) {\n    // IE < 9 presents DOM nodes as `Object` objects except they have `toString`\n    // methods that are `typeof` \"string\" and still can coerce nodes to strings\n    return typeof value.toString != 'function' && typeof (value + '') == 'string';\n  }\n\n  /**\n   * Releases the given array back to the array pool.\n   *\n   * @private\n   * @param {Array} [array] The array to release.\n   */\n  function releaseArray(array) {\n    array.length = 0;\n    if (arrayPool.length < maxPoolSize) {\n      arrayPool.push(array);\n    }\n  }\n\n  /**\n   * Releases the given object back to the object pool.\n   *\n   * @private\n   * @param {Object} [object] The object to release.\n   */\n  function releaseObject(object) {\n    var cache = object.cache;\n    if (cache) {\n      releaseObject(cache);\n    }\n    object.array = object.cache = object.criteria = object.object = object.number = object.string = object.value = null;\n    if (objectPool.length < maxPoolSize) {\n      objectPool.push(object);\n    }\n  }\n\n  /**\n   * Slices the `collection` from the `start` index up to, but not including,\n   * the `end` index.\n   *\n   * Note: This function is used instead of `Array#slice` to support node lists\n   * in IE < 9 and to ensure dense arrays are returned.\n   *\n   * @private\n   * @param {Array|Object|string} collection The collection to slice.\n   * @param {number} start The start index.\n   * @param {number} end The end index.\n   * @returns {Array} Returns the new array.\n   */\n  function slice(array, start, end) {\n    start || (start = 0);\n    if (typeof end == 'undefined') {\n      end = array ? array.length : 0;\n    }\n    var index = -1,\n        length = end - start || 0,\n        result = Array(length < 0 ? 0 : length);\n\n    while (++index < length) {\n      result[index] = array[start + index];\n    }\n    return result;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Create a new `lodash` function using the given context object.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {Object} [context=root] The context object.\n   * @returns {Function} Returns the `lodash` function.\n   */\n  function runInContext(context) {\n    // Avoid issues with some ES3 environments that attempt to use values, named\n    // after built-in constructors like `Object`, for the creation of literals.\n    // ES5 clears this up by stating that literals must use built-in constructors.\n    // See http://es5.github.io/#x11.1.5.\n    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;\n\n    /** Native constructor references */\n    var Array = context.Array,\n        Boolean = context.Boolean,\n        Date = context.Date,\n        Error = context.Error,\n        Function = context.Function,\n        Math = context.Math,\n        Number = context.Number,\n        Object = context.Object,\n        RegExp = context.RegExp,\n        String = context.String,\n        TypeError = context.TypeError;\n\n    /**\n     * Used for `Array` method references.\n     *\n     * Normally `Array.prototype` would suffice, however, using an array literal\n     * avoids issues in Narwhal.\n     */\n    var arrayRef = [];\n\n    /** Used for native method references */\n    var errorProto = Error.prototype,\n        objectProto = Object.prototype,\n        stringProto = String.prototype;\n\n    /** Used to restore the original `_` reference in `noConflict` */\n    var oldDash = context._;\n\n    /** Used to resolve the internal [[Class]] of values */\n    var toString = objectProto.toString;\n\n    /** Used to detect if a method is native */\n    var reNative = RegExp('^' +\n      String(toString)\n        .replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n        .replace(/toString| for [^\\]]+/g, '.*?') + '$'\n    );\n\n    /** Native method shortcuts */\n    var ceil = Math.ceil,\n        clearTimeout = context.clearTimeout,\n        floor = Math.floor,\n        fnToString = Function.prototype.toString,\n        getPrototypeOf = isNative(getPrototypeOf = Object.getPrototypeOf) && getPrototypeOf,\n        hasOwnProperty = objectProto.hasOwnProperty,\n        push = arrayRef.push,\n        propertyIsEnumerable = objectProto.propertyIsEnumerable,\n        setTimeout = context.setTimeout,\n        splice = arrayRef.splice,\n        unshift = arrayRef.unshift;\n\n    /** Used to set meta data on functions */\n    var defineProperty = (function() {\n      // IE 8 only accepts DOM elements\n      try {\n        var o = {},\n            func = isNative(func = Object.defineProperty) && func,\n            result = func(o, o, o) && func;\n      } catch(e) { }\n      return result;\n    }());\n\n    /* Native method shortcuts for methods with the same name as other `lodash` methods */\n    var nativeCreate = isNative(nativeCreate = Object.create) && nativeCreate,\n        nativeIsArray = isNative(nativeIsArray = Array.isArray) && nativeIsArray,\n        nativeIsFinite = context.isFinite,\n        nativeIsNaN = context.isNaN,\n        nativeKeys = isNative(nativeKeys = Object.keys) && nativeKeys,\n        nativeMax = Math.max,\n        nativeMin = Math.min,\n        nativeParseInt = context.parseInt,\n        nativeRandom = Math.random;\n\n    /** Used to lookup a built-in constructor by [[Class]] */\n    var ctorByClass = {};\n    ctorByClass[arrayClass] = Array;\n    ctorByClass[boolClass] = Boolean;\n    ctorByClass[dateClass] = Date;\n    ctorByClass[funcClass] = Function;\n    ctorByClass[objectClass] = Object;\n    ctorByClass[numberClass] = Number;\n    ctorByClass[regexpClass] = RegExp;\n    ctorByClass[stringClass] = String;\n\n    /** Used to avoid iterating non-enumerable properties in IE < 9 */\n    var nonEnumProps = {};\n    nonEnumProps[arrayClass] = nonEnumProps[dateClass] = nonEnumProps[numberClass] = { 'constructor': true, 'toLocaleString': true, 'toString': true, 'valueOf': true };\n    nonEnumProps[boolClass] = nonEnumProps[stringClass] = { 'constructor': true, 'toString': true, 'valueOf': true };\n    nonEnumProps[errorClass] = nonEnumProps[funcClass] = nonEnumProps[regexpClass] = { 'constructor': true, 'toString': true };\n    nonEnumProps[objectClass] = { 'constructor': true };\n\n    (function() {\n      var length = shadowedProps.length;\n      while (length--) {\n        var key = shadowedProps[length];\n        for (var className in nonEnumProps) {\n          if (hasOwnProperty.call(nonEnumProps, className) && !hasOwnProperty.call(nonEnumProps[className], key)) {\n            nonEnumProps[className][key] = false;\n          }\n        }\n      }\n    }());\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` object which wraps the given value to enable intuitive\n     * method chaining.\n     *\n     * In addition to Lo-Dash methods, wrappers also have the following `Array` methods:\n     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`, `splice`,\n     * and `unshift`\n     *\n     * Chaining is supported in custom builds as long as the `value` method is\n     * implicitly or explicitly included in the build.\n     *\n     * The chainable wrapper functions are:\n     * `after`, `assign`, `bind`, `bindAll`, `bindKey`, `chain`, `compact`,\n     * `compose`, `concat`, `countBy`, `create`, `createCallback`, `curry`,\n     * `debounce`, `defaults`, `defer`, `delay`, `difference`, `filter`, `flatten`,\n     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,\n     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,\n     * `invoke`, `keys`, `map`, `max`, `memoize`, `merge`, `min`, `object`, `omit`,\n     * `once`, `pairs`, `partial`, `partialRight`, `pick`, `pluck`, `pull`, `push`,\n     * `range`, `reject`, `remove`, `rest`, `reverse`, `shuffle`, `slice`, `sort`,\n     * `sortBy`, `splice`, `tap`, `throttle`, `times`, `toArray`, `transform`,\n     * `union`, `uniq`, `unshift`, `unzip`, `values`, `where`, `without`, `wrap`,\n     * and `zip`\n     *\n     * The non-chainable wrapper functions are:\n     * `clone`, `cloneDeep`, `contains`, `escape`, `every`, `find`, `findIndex`,\n     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `has`, `identity`,\n     * `indexOf`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,\n     * `isEmpty`, `isEqual`, `isFinite`, `isFunction`, `isNaN`, `isNull`, `isNumber`,\n     * `isObject`, `isPlainObject`, `isRegExp`, `isString`, `isUndefined`, `join`,\n     * `lastIndexOf`, `mixin`, `noConflict`, `parseInt`, `pop`, `random`, `reduce`,\n     * `reduceRight`, `result`, `shift`, `size`, `some`, `sortedIndex`, `runInContext`,\n     * `template`, `unescape`, `uniqueId`, and `value`\n     *\n     * The wrapper functions `first` and `last` return wrapped values when `n` is\n     * provided, otherwise they return unwrapped values.\n     *\n     * Explicit chaining can be enabled by using the `_.chain` method.\n     *\n     * @name _\n     * @constructor\n     * @category Chaining\n     * @param {*} value The value to wrap in a `lodash` instance.\n     * @returns {Object} Returns a `lodash` instance.\n     * @example\n     *\n     * var wrapped = _([1, 2, 3]);\n     *\n     * // returns an unwrapped value\n     * wrapped.reduce(function(sum, num) {\n     *   return sum + num;\n     * });\n     * // => 6\n     *\n     * // returns a wrapped value\n     * var squares = wrapped.map(function(num) {\n     *   return num * num;\n     * });\n     *\n     * _.isArray(squares);\n     * // => false\n     *\n     * _.isArray(squares.value());\n     * // => true\n     */\n    function lodash(value) {\n      // don't wrap if already wrapped, even if wrapped by a different `lodash` constructor\n      return (value && typeof value == 'object' && !isArray(value) && hasOwnProperty.call(value, '__wrapped__'))\n       ? value\n       : new lodashWrapper(value);\n    }\n\n    /**\n     * A fast path for creating `lodash` wrapper objects.\n     *\n     * @private\n     * @param {*} value The value to wrap in a `lodash` instance.\n     * @param {boolean} chainAll A flag to enable chaining for all methods\n     * @returns {Object} Returns a `lodash` instance.\n     */\n    function lodashWrapper(value, chainAll) {\n      this.__chain__ = !!chainAll;\n      this.__wrapped__ = value;\n    }\n    // ensure `new lodashWrapper` is an instance of `lodash`\n    lodashWrapper.prototype = lodash.prototype;\n\n    /**\n     * An object used to flag environments features.\n     *\n     * @static\n     * @memberOf _\n     * @type Object\n     */\n    var support = lodash.support = {};\n\n    (function() {\n      var ctor = function() { this.x = 1; },\n          object = { '0': 1, 'length': 1 },\n          props = [];\n\n      ctor.prototype = { 'valueOf': 1, 'y': 1 };\n      for (var key in new ctor) { props.push(key); }\n      for (key in arguments) { }\n\n      /**\n       * Detect if an `arguments` object's [[Class]] is resolvable (all but Firefox < 4, IE < 9).\n       *\n       * @memberOf _.support\n       * @type boolean\n       */\n      support.argsClass = toString.call(arguments) == argsClass;\n\n      /**\n       * Detect if `arguments` objects are `Object` objects (all but Narwhal and Opera < 10.5).\n       *\n       * @memberOf _.support\n       * @type boolean\n       */\n      support.argsObject = arguments.constructor == Object && !(arguments instanceof Array);\n\n      /**\n       * Detect if `name` or `message` properties of `Error.prototype` are\n       * enumerable by default. (IE < 9, Safari < 5.1)\n       *\n       * @memberOf _.support\n       * @type boolean\n       */\n      support.enumErrorProps = propertyIsEnumerable.call(errorProto, 'message') || propertyIsEnumerable.call(errorProto, 'name');\n\n      /**\n       * Detect if `prototype` properties are enumerable by default.\n       *\n       * Firefox < 3.6, Opera > 9.50 - Opera < 11.60, and Safari < 5.1\n       * (if the prototype or a property on the prototype has been set)\n       * incorrectly sets a function's `prototype` property [[Enumerable]]\n       * value to `true`.\n       *\n       * @memberOf _.support\n       * @type boolean\n       */\n      support.enumPrototypes = propertyIsEnumerable.call(ctor, 'prototype');\n\n      /**\n       * Detect if functions can be decompiled by `Function#toString`\n       * (all but PS3 and older Opera mobile browsers & avoided in Windows 8 apps).\n       *\n       * @memberOf _.support\n       * @type boolean\n       */\n      support.funcDecomp = !isNative(context.WinRTError) && reThis.test(runInContext);\n\n      /**\n       * Detect if `Function#name` is supported (all but IE).\n       *\n       * @memberOf _.support\n       * @type boolean\n       */\n      support.funcNames = typeof Function.name == 'string';\n\n      /**\n       * Detect if `arguments` object indexes are non-enumerable\n       * (Firefox < 4, IE < 9, PhantomJS, Safari < 5.1).\n       *\n       * @memberOf _.support\n       * @type boolean\n       */\n      support.nonEnumArgs = key != 0;\n\n      /**\n       * Detect if properties shadowing those on `Object.prototype` are non-enumerable.\n       *\n       * In IE < 9 an objects own properties, shadowing non-enumerable ones, are\n       * made non-enumerable as well (a.k.a the JScript [[DontEnum]] bug).\n       *\n       * @memberOf _.support\n       * @type boolean\n       */\n      support.nonEnumShadows = !/valueOf/.test(props);\n\n      /**\n       * Detect if own properties are iterated after inherited properties (all but IE < 9).\n       *\n       * @memberOf _.support\n       * @type boolean\n       */\n      support.ownLast = props[0] != 'x';\n\n      /**\n       * Detect if `Array#shift` and `Array#splice` augment array-like objects correctly.\n       *\n       * Firefox < 10, IE compatibility mode, and IE < 9 have buggy Array `shift()`\n       * and `splice()` functions that fail to remove the last element, `value[0]`,\n       * of array-like objects even though the `length` property is set to `0`.\n       * The `shift()` method is buggy in IE 8 compatibility mode, while `splice()`\n       * is buggy regardless of mode in IE < 9 and buggy in compatibility mode in IE 9.\n       *\n       * @memberOf _.support\n       * @type boolean\n       */\n      support.spliceObjects = (arrayRef.splice.call(object, 0, 1), !object[0]);\n\n      /**\n       * Detect lack of support for accessing string characters by index.\n       *\n       * IE < 8 can't access characters by index and IE 8 can only access\n       * characters by index on string literals.\n       *\n       * @memberOf _.support\n       * @type boolean\n       */\n      support.unindexedChars = ('x'[0] + Object('x')[0]) != 'xx';\n\n      /**\n       * Detect if a DOM node's [[Class]] is resolvable (all but IE < 9)\n       * and that the JS engine errors when attempting to coerce an object to\n       * a string without a `toString` function.\n       *\n       * @memberOf _.support\n       * @type boolean\n       */\n      try {\n        support.nodeClass = !(toString.call(document) == objectClass && !({ 'toString': 0 } + ''));\n      } catch(e) {\n        support.nodeClass = true;\n      }\n    }(1));\n\n    /**\n     * By default, the template delimiters used by Lo-Dash are similar to those in\n     * embedded Ruby (ERB). Change the following template settings to use alternative\n     * delimiters.\n     *\n     * @static\n     * @memberOf _\n     * @type Object\n     */\n    lodash.templateSettings = {\n\n      /**\n       * Used to detect `data` property values to be HTML-escaped.\n       *\n       * @memberOf _.templateSettings\n       * @type RegExp\n       */\n      'escape': /<%-([\\s\\S]+?)%>/g,\n\n      /**\n       * Used to detect code to be evaluated.\n       *\n       * @memberOf _.templateSettings\n       * @type RegExp\n       */\n      'evaluate': /<%([\\s\\S]+?)%>/g,\n\n      /**\n       * Used to detect `data` property values to inject.\n       *\n       * @memberOf _.templateSettings\n       * @type RegExp\n       */\n      'interpolate': reInterpolate,\n\n      /**\n       * Used to reference the data object in the template text.\n       *\n       * @memberOf _.templateSettings\n       * @type string\n       */\n      'variable': '',\n\n      /**\n       * Used to import variables into the compiled template.\n       *\n       * @memberOf _.templateSettings\n       * @type Object\n       */\n      'imports': {\n\n        /**\n         * A reference to the `lodash` function.\n         *\n         * @memberOf _.templateSettings.imports\n         * @type Function\n         */\n        '_': lodash\n      }\n    };\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * The template used to create iterator functions.\n     *\n     * @private\n     * @param {Object} data The data object used to populate the text.\n     * @returns {string} Returns the interpolated text.\n     */\n    var iteratorTemplate = function(obj) {\n\n      var __p = 'var index, iterable = ' +\n      (obj.firstArg) +\n      ', result = ' +\n      (obj.init) +\n      ';\\nif (!iterable) return result;\\n' +\n      (obj.top) +\n      ';';\n       if (obj.array) {\n      __p += '\\nvar length = iterable.length; index = -1;\\nif (' +\n      (obj.array) +\n      ') {  ';\n       if (support.unindexedChars) {\n      __p += '\\n  if (isString(iterable)) {\\n    iterable = iterable.split(\\'\\')\\n  }  ';\n       }\n      __p += '\\n  while (++index < length) {\\n    ' +\n      (obj.loop) +\n      ';\\n  }\\n}\\nelse {  ';\n       } else if (support.nonEnumArgs) {\n      __p += '\\n  var length = iterable.length; index = -1;\\n  if (length && isArguments(iterable)) {\\n    while (++index < length) {\\n      index += \\'\\';\\n      ' +\n      (obj.loop) +\n      ';\\n    }\\n  } else {  ';\n       }\n\n       if (support.enumPrototypes) {\n      __p += '\\n  var skipProto = typeof iterable == \\'function\\';\\n  ';\n       }\n\n       if (support.enumErrorProps) {\n      __p += '\\n  var skipErrorProps = iterable === errorProto || iterable instanceof Error;\\n  ';\n       }\n\n          var conditions = [];    if (support.enumPrototypes) { conditions.push('!(skipProto && index == \"prototype\")'); }    if (support.enumErrorProps)  { conditions.push('!(skipErrorProps && (index == \"message\" || index == \"name\"))'); }\n\n       if (obj.useHas && obj.keys) {\n      __p += '\\n  var ownIndex = -1,\\n      ownProps = objectTypes[typeof iterable] && keys(iterable),\\n      length = ownProps ? ownProps.length : 0;\\n\\n  while (++ownIndex < length) {\\n    index = ownProps[ownIndex];\\n';\n          if (conditions.length) {\n      __p += '    if (' +\n      (conditions.join(' && ')) +\n      ') {\\n  ';\n       }\n      __p +=\n      (obj.loop) +\n      ';    ';\n       if (conditions.length) {\n      __p += '\\n    }';\n       }\n      __p += '\\n  }  ';\n       } else {\n      __p += '\\n  for (index in iterable) {\\n';\n          if (obj.useHas) { conditions.push(\"hasOwnProperty.call(iterable, index)\"); }    if (conditions.length) {\n      __p += '    if (' +\n      (conditions.join(' && ')) +\n      ') {\\n  ';\n       }\n      __p +=\n      (obj.loop) +\n      ';    ';\n       if (conditions.length) {\n      __p += '\\n    }';\n       }\n      __p += '\\n  }    ';\n       if (support.nonEnumShadows) {\n      __p += '\\n\\n  if (iterable !== objectProto) {\\n    var ctor = iterable.constructor,\\n        isProto = iterable === (ctor && ctor.prototype),\\n        className = iterable === stringProto ? stringClass : iterable === errorProto ? errorClass : toString.call(iterable),\\n        nonEnum = nonEnumProps[className];\\n      ';\n       for (k = 0; k < 7; k++) {\n      __p += '\\n    index = \\'' +\n      (obj.shadowedProps[k]) +\n      '\\';\\n    if ((!(isProto && nonEnum[index]) && hasOwnProperty.call(iterable, index))';\n              if (!obj.useHas) {\n      __p += ' || (!nonEnum[index] && iterable[index] !== objectProto[index])';\n       }\n      __p += ') {\\n      ' +\n      (obj.loop) +\n      ';\\n    }      ';\n       }\n      __p += '\\n  }    ';\n       }\n\n       }\n\n       if (obj.array || support.nonEnumArgs) {\n      __p += '\\n}';\n       }\n      __p +=\n      (obj.bottom) +\n      ';\\nreturn result';\n\n      return __p\n    };\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * The base implementation of `_.bind` that creates the bound function and\n     * sets its meta data.\n     *\n     * @private\n     * @param {Array} bindData The bind data array.\n     * @returns {Function} Returns the new bound function.\n     */\n    function baseBind(bindData) {\n      var func = bindData[0],\n          partialArgs = bindData[2],\n          thisArg = bindData[4];\n\n      function bound() {\n        // `Function#bind` spec\n        // http://es5.github.io/#x15.3.4.5\n        if (partialArgs) {\n          // avoid `arguments` object deoptimizations by using `slice` instead\n          // of `Array.prototype.slice.call` and not assigning `arguments` to a\n          // variable as a ternary expression\n          var args = slice(partialArgs);\n          push.apply(args, arguments);\n        }\n        // mimic the constructor's `return` behavior\n        // http://es5.github.io/#x13.2.2\n        if (this instanceof bound) {\n          // ensure `new bound` is an instance of `func`\n          var thisBinding = baseCreate(func.prototype),\n              result = func.apply(thisBinding, args || arguments);\n          return isObject(result) ? result : thisBinding;\n        }\n        return func.apply(thisArg, args || arguments);\n      }\n      setBindData(bound, bindData);\n      return bound;\n    }\n\n    /**\n     * The base implementation of `_.clone` without argument juggling or support\n     * for `thisArg` binding.\n     *\n     * @private\n     * @param {*} value The value to clone.\n     * @param {boolean} [isDeep=false] Specify a deep clone.\n     * @param {Function} [callback] The function to customize cloning values.\n     * @param {Array} [stackA=[]] Tracks traversed source objects.\n     * @param {Array} [stackB=[]] Associates clones with source counterparts.\n     * @returns {*} Returns the cloned value.\n     */\n    function baseClone(value, isDeep, callback, stackA, stackB) {\n      if (callback) {\n        var result = callback(value);\n        if (typeof result != 'undefined') {\n          return result;\n        }\n      }\n      // inspect [[Class]]\n      var isObj = isObject(value);\n      if (isObj) {\n        var className = toString.call(value);\n        if (!cloneableClasses[className] || (!support.nodeClass && isNode(value))) {\n          return value;\n        }\n        var ctor = ctorByClass[className];\n        switch (className) {\n          case boolClass:\n          case dateClass:\n            return new ctor(+value);\n\n          case numberClass:\n          case stringClass:\n            return new ctor(value);\n\n          case regexpClass:\n            result = ctor(value.source, reFlags.exec(value));\n            result.lastIndex = value.lastIndex;\n            return result;\n        }\n      } else {\n        return value;\n      }\n      var isArr = isArray(value);\n      if (isDeep) {\n        // check for circular references and return corresponding clone\n        var initedStack = !stackA;\n        stackA || (stackA = getArray());\n        stackB || (stackB = getArray());\n\n        var length = stackA.length;\n        while (length--) {\n          if (stackA[length] == value) {\n            return stackB[length];\n          }\n        }\n        result = isArr ? ctor(value.length) : {};\n      }\n      else {\n        result = isArr ? slice(value) : assign({}, value);\n      }\n      // add array properties assigned by `RegExp#exec`\n      if (isArr) {\n        if (hasOwnProperty.call(value, 'index')) {\n          result.index = value.index;\n        }\n        if (hasOwnProperty.call(value, 'input')) {\n          result.input = value.input;\n        }\n      }\n      // exit for shallow clone\n      if (!isDeep) {\n        return result;\n      }\n      // add the source value to the stack of traversed objects\n      // and associate it with its clone\n      stackA.push(value);\n      stackB.push(result);\n\n      // recursively populate clone (susceptible to call stack limits)\n      (isArr ? baseEach : forOwn)(value, function(objValue, key) {\n        result[key] = baseClone(objValue, isDeep, callback, stackA, stackB);\n      });\n\n      if (initedStack) {\n        releaseArray(stackA);\n        releaseArray(stackB);\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.create` without support for assigning\n     * properties to the created object.\n     *\n     * @private\n     * @param {Object} prototype The object to inherit from.\n     * @returns {Object} Returns the new object.\n     */\n    function baseCreate(prototype, properties) {\n      return isObject(prototype) ? nativeCreate(prototype) : {};\n    }\n    // fallback for browsers without `Object.create`\n    if (!nativeCreate) {\n      baseCreate = (function() {\n        function Object() {}\n        return function(prototype) {\n          if (isObject(prototype)) {\n            Object.prototype = prototype;\n            var result = new Object;\n            Object.prototype = null;\n          }\n          return result || context.Object();\n        };\n      }());\n    }\n\n    /**\n     * The base implementation of `_.createCallback` without support for creating\n     * \"_.pluck\" or \"_.where\" style callbacks.\n     *\n     * @private\n     * @param {*} [func=identity] The value to convert to a callback.\n     * @param {*} [thisArg] The `this` binding of the created callback.\n     * @param {number} [argCount] The number of arguments the callback accepts.\n     * @returns {Function} Returns a callback function.\n     */\n    function baseCreateCallback(func, thisArg, argCount) {\n      if (typeof func != 'function') {\n        return identity;\n      }\n      // exit early for no `thisArg` or already bound by `Function#bind`\n      if (typeof thisArg == 'undefined' || !('prototype' in func)) {\n        return func;\n      }\n      var bindData = func.__bindData__;\n      if (typeof bindData == 'undefined') {\n        if (support.funcNames) {\n          bindData = !func.name;\n        }\n        bindData = bindData || !support.funcDecomp;\n        if (!bindData) {\n          var source = fnToString.call(func);\n          if (!support.funcNames) {\n            bindData = !reFuncName.test(source);\n          }\n          if (!bindData) {\n            // checks if `func` references the `this` keyword and stores the result\n            bindData = reThis.test(source);\n            setBindData(func, bindData);\n          }\n        }\n      }\n      // exit early if there are no `this` references or `func` is bound\n      if (bindData === false || (bindData !== true && bindData[1] & 1)) {\n        return func;\n      }\n      switch (argCount) {\n        case 1: return function(value) {\n          return func.call(thisArg, value);\n        };\n        case 2: return function(a, b) {\n          return func.call(thisArg, a, b);\n        };\n        case 3: return function(value, index, collection) {\n          return func.call(thisArg, value, index, collection);\n        };\n        case 4: return function(accumulator, value, index, collection) {\n          return func.call(thisArg, accumulator, value, index, collection);\n        };\n      }\n      return bind(func, thisArg);\n    }\n\n    /**\n     * The base implementation of `createWrapper` that creates the wrapper and\n     * sets its meta data.\n     *\n     * @private\n     * @param {Array} bindData The bind data array.\n     * @returns {Function} Returns the new function.\n     */\n    function baseCreateWrapper(bindData) {\n      var func = bindData[0],\n          bitmask = bindData[1],\n          partialArgs = bindData[2],\n          partialRightArgs = bindData[3],\n          thisArg = bindData[4],\n          arity = bindData[5];\n\n      var isBind = bitmask & 1,\n          isBindKey = bitmask & 2,\n          isCurry = bitmask & 4,\n          isCurryBound = bitmask & 8,\n          key = func;\n\n      function bound() {\n        var thisBinding = isBind ? thisArg : this;\n        if (partialArgs) {\n          var args = slice(partialArgs);\n          push.apply(args, arguments);\n        }\n        if (partialRightArgs || isCurry) {\n          args || (args = slice(arguments));\n          if (partialRightArgs) {\n            push.apply(args, partialRightArgs);\n          }\n          if (isCurry && args.length < arity) {\n            bitmask |= 16 & ~32;\n            return baseCreateWrapper([func, (isCurryBound ? bitmask : bitmask & ~3), args, null, thisArg, arity]);\n          }\n        }\n        args || (args = arguments);\n        if (isBindKey) {\n          func = thisBinding[key];\n        }\n        if (this instanceof bound) {\n          thisBinding = baseCreate(func.prototype);\n          var result = func.apply(thisBinding, args);\n          return isObject(result) ? result : thisBinding;\n        }\n        return func.apply(thisBinding, args);\n      }\n      setBindData(bound, bindData);\n      return bound;\n    }\n\n    /**\n     * The base implementation of `_.difference` that accepts a single array\n     * of values to exclude.\n     *\n     * @private\n     * @param {Array} array The array to process.\n     * @param {Array} [values] The array of values to exclude.\n     * @returns {Array} Returns a new array of filtered values.\n     */\n    function baseDifference(array, values) {\n      var index = -1,\n          indexOf = getIndexOf(),\n          length = array ? array.length : 0,\n          isLarge = length >= largeArraySize && indexOf === baseIndexOf,\n          result = [];\n\n      if (isLarge) {\n        var cache = createCache(values);\n        if (cache) {\n          indexOf = cacheIndexOf;\n          values = cache;\n        } else {\n          isLarge = false;\n        }\n      }\n      while (++index < length) {\n        var value = array[index];\n        if (indexOf(values, value) < 0) {\n          result.push(value);\n        }\n      }\n      if (isLarge) {\n        releaseObject(values);\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.flatten` without support for callback\n     * shorthands or `thisArg` binding.\n     *\n     * @private\n     * @param {Array} array The array to flatten.\n     * @param {boolean} [isShallow=false] A flag to restrict flattening to a single level.\n     * @param {boolean} [isStrict=false] A flag to restrict flattening to arrays and `arguments` objects.\n     * @param {number} [fromIndex=0] The index to start from.\n     * @returns {Array} Returns a new flattened array.\n     */\n    function baseFlatten(array, isShallow, isStrict, fromIndex) {\n      var index = (fromIndex || 0) - 1,\n          length = array ? array.length : 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index];\n\n        if (value && typeof value == 'object' && typeof value.length == 'number'\n            && (isArray(value) || isArguments(value))) {\n          // recursively flatten arrays (susceptible to call stack limits)\n          if (!isShallow) {\n            value = baseFlatten(value, isShallow, isStrict);\n          }\n          var valIndex = -1,\n              valLength = value.length,\n              resIndex = result.length;\n\n          result.length += valLength;\n          while (++valIndex < valLength) {\n            result[resIndex++] = value[valIndex];\n          }\n        } else if (!isStrict) {\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.isEqual`, without support for `thisArg` binding,\n     * that allows partial \"_.where\" style comparisons.\n     *\n     * @private\n     * @param {*} a The value to compare.\n     * @param {*} b The other value to compare.\n     * @param {Function} [callback] The function to customize comparing values.\n     * @param {Function} [isWhere=false] A flag to indicate performing partial comparisons.\n     * @param {Array} [stackA=[]] Tracks traversed `a` objects.\n     * @param {Array} [stackB=[]] Tracks traversed `b` objects.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     */\n    function baseIsEqual(a, b, callback, isWhere, stackA, stackB) {\n      // used to indicate that when comparing objects, `a` has at least the properties of `b`\n      if (callback) {\n        var result = callback(a, b);\n        if (typeof result != 'undefined') {\n          return !!result;\n        }\n      }\n      // exit early for identical values\n      if (a === b) {\n        // treat `+0` vs. `-0` as not equal\n        return a !== 0 || (1 / a == 1 / b);\n      }\n      var type = typeof a,\n          otherType = typeof b;\n\n      // exit early for unlike primitive values\n      if (a === a &&\n          !(a && objectTypes[type]) &&\n          !(b && objectTypes[otherType])) {\n        return false;\n      }\n      // exit early for `null` and `undefined` avoiding ES3's Function#call behavior\n      // http://es5.github.io/#x15.3.4.4\n      if (a == null || b == null) {\n        return a === b;\n      }\n      // compare [[Class]] names\n      var className = toString.call(a),\n          otherClass = toString.call(b);\n\n      if (className == argsClass) {\n        className = objectClass;\n      }\n      if (otherClass == argsClass) {\n        otherClass = objectClass;\n      }\n      if (className != otherClass) {\n        return false;\n      }\n      switch (className) {\n        case boolClass:\n        case dateClass:\n          // coerce dates and booleans to numbers, dates to milliseconds and booleans\n          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal\n          return +a == +b;\n\n        case numberClass:\n          // treat `NaN` vs. `NaN` as equal\n          return (a != +a)\n            ? b != +b\n            // but treat `+0` vs. `-0` as not equal\n            : (a == 0 ? (1 / a == 1 / b) : a == +b);\n\n        case regexpClass:\n        case stringClass:\n          // coerce regexes to strings (http://es5.github.io/#x15.10.6.4)\n          // treat string primitives and their corresponding object instances as equal\n          return a == String(b);\n      }\n      var isArr = className == arrayClass;\n      if (!isArr) {\n        // unwrap any `lodash` wrapped values\n        var aWrapped = hasOwnProperty.call(a, '__wrapped__'),\n            bWrapped = hasOwnProperty.call(b, '__wrapped__');\n\n        if (aWrapped || bWrapped) {\n          return baseIsEqual(aWrapped ? a.__wrapped__ : a, bWrapped ? b.__wrapped__ : b, callback, isWhere, stackA, stackB);\n        }\n        // exit for functions and DOM nodes\n        if (className != objectClass || (!support.nodeClass && (isNode(a) || isNode(b)))) {\n          return false;\n        }\n        // in older versions of Opera, `arguments` objects have `Array` constructors\n        var ctorA = !support.argsObject && isArguments(a) ? Object : a.constructor,\n            ctorB = !support.argsObject && isArguments(b) ? Object : b.constructor;\n\n        // non `Object` object instances with different constructors are not equal\n        if (ctorA != ctorB &&\n              !(isFunction(ctorA) && ctorA instanceof ctorA && isFunction(ctorB) && ctorB instanceof ctorB) &&\n              ('constructor' in a && 'constructor' in b)\n            ) {\n          return false;\n        }\n      }\n      // assume cyclic structures are equal\n      // the algorithm for detecting cyclic structures is adapted from ES 5.1\n      // section 15.12.3, abstract operation `JO` (http://es5.github.io/#x15.12.3)\n      var initedStack = !stackA;\n      stackA || (stackA = getArray());\n      stackB || (stackB = getArray());\n\n      var length = stackA.length;\n      while (length--) {\n        if (stackA[length] == a) {\n          return stackB[length] == b;\n        }\n      }\n      var size = 0;\n      result = true;\n\n      // add `a` and `b` to the stack of traversed objects\n      stackA.push(a);\n      stackB.push(b);\n\n      // recursively compare objects and arrays (susceptible to call stack limits)\n      if (isArr) {\n        // compare lengths to determine if a deep comparison is necessary\n        length = a.length;\n        size = b.length;\n        result = size == length;\n\n        if (result || isWhere) {\n          // deep compare the contents, ignoring non-numeric properties\n          while (size--) {\n            var index = length,\n                value = b[size];\n\n            if (isWhere) {\n              while (index--) {\n                if ((result = baseIsEqual(a[index], value, callback, isWhere, stackA, stackB))) {\n                  break;\n                }\n              }\n            } else if (!(result = baseIsEqual(a[size], value, callback, isWhere, stackA, stackB))) {\n              break;\n            }\n          }\n        }\n      }\n      else {\n        // deep compare objects using `forIn`, instead of `forOwn`, to avoid `Object.keys`\n        // which, in this case, is more costly\n        forIn(b, function(value, key, b) {\n          if (hasOwnProperty.call(b, key)) {\n            // count the number of properties.\n            size++;\n            // deep compare each property value.\n            return (result = hasOwnProperty.call(a, key) && baseIsEqual(a[key], value, callback, isWhere, stackA, stackB));\n          }\n        });\n\n        if (result && !isWhere) {\n          // ensure both objects have the same number of properties\n          forIn(a, function(value, key, a) {\n            if (hasOwnProperty.call(a, key)) {\n              // `size` will be `-1` if `a` has more properties than `b`\n              return (result = --size > -1);\n            }\n          });\n        }\n      }\n      stackA.pop();\n      stackB.pop();\n\n      if (initedStack) {\n        releaseArray(stackA);\n        releaseArray(stackB);\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.merge` without argument juggling or support\n     * for `thisArg` binding.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {Function} [callback] The function to customize merging properties.\n     * @param {Array} [stackA=[]] Tracks traversed source objects.\n     * @param {Array} [stackB=[]] Associates values with source counterparts.\n     */\n    function baseMerge(object, source, callback, stackA, stackB) {\n      (isArray(source) ? forEach : forOwn)(source, function(source, key) {\n        var found,\n            isArr,\n            result = source,\n            value = object[key];\n\n        if (source && ((isArr = isArray(source)) || isPlainObject(source))) {\n          // avoid merging previously merged cyclic sources\n          var stackLength = stackA.length;\n          while (stackLength--) {\n            if ((found = stackA[stackLength] == source)) {\n              value = stackB[stackLength];\n              break;\n            }\n          }\n          if (!found) {\n            var isShallow;\n            if (callback) {\n              result = callback(value, source);\n              if ((isShallow = typeof result != 'undefined')) {\n                value = result;\n              }\n            }\n            if (!isShallow) {\n              value = isArr\n                ? (isArray(value) ? value : [])\n                : (isPlainObject(value) ? value : {});\n            }\n            // add `source` and associated `value` to the stack of traversed objects\n            stackA.push(source);\n            stackB.push(value);\n\n            // recursively merge objects and arrays (susceptible to call stack limits)\n            if (!isShallow) {\n              baseMerge(value, source, callback, stackA, stackB);\n            }\n          }\n        }\n        else {\n          if (callback) {\n            result = callback(value, source);\n            if (typeof result == 'undefined') {\n              result = source;\n            }\n          }\n          if (typeof result != 'undefined') {\n            value = result;\n          }\n        }\n        object[key] = value;\n      });\n    }\n\n    /**\n     * The base implementation of `_.random` without argument juggling or support\n     * for returning floating-point numbers.\n     *\n     * @private\n     * @param {number} min The minimum possible value.\n     * @param {number} max The maximum possible value.\n     * @returns {number} Returns a random number.\n     */\n    function baseRandom(min, max) {\n      return min + floor(nativeRandom() * (max - min + 1));\n    }\n\n    /**\n     * The base implementation of `_.uniq` without support for callback shorthands\n     * or `thisArg` binding.\n     *\n     * @private\n     * @param {Array} array The array to process.\n     * @param {boolean} [isSorted=false] A flag to indicate that `array` is sorted.\n     * @param {Function} [callback] The function called per iteration.\n     * @returns {Array} Returns a duplicate-value-free array.\n     */\n    function baseUniq(array, isSorted, callback) {\n      var index = -1,\n          indexOf = getIndexOf(),\n          length = array ? array.length : 0,\n          result = [];\n\n      var isLarge = !isSorted && length >= largeArraySize && indexOf === baseIndexOf,\n          seen = (callback || isLarge) ? getArray() : result;\n\n      if (isLarge) {\n        var cache = createCache(seen);\n        indexOf = cacheIndexOf;\n        seen = cache;\n      }\n      while (++index < length) {\n        var value = array[index],\n            computed = callback ? callback(value, index, array) : value;\n\n        if (isSorted\n              ? !index || seen[seen.length - 1] !== computed\n              : indexOf(seen, computed) < 0\n            ) {\n          if (callback || isLarge) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      if (isLarge) {\n        releaseArray(seen.array);\n        releaseObject(seen);\n      } else if (callback) {\n        releaseArray(seen);\n      }\n      return result;\n    }\n\n    /**\n     * Creates a function that aggregates a collection, creating an object composed\n     * of keys generated from the results of running each element of the collection\n     * through a callback. The given `setter` function sets the keys and values\n     * of the composed object.\n     *\n     * @private\n     * @param {Function} setter The setter function.\n     * @returns {Function} Returns the new aggregator function.\n     */\n    function createAggregator(setter) {\n      return function(collection, callback, thisArg) {\n        var result = {};\n        callback = lodash.createCallback(callback, thisArg, 3);\n\n        if (isArray(collection)) {\n          var index = -1,\n              length = collection.length;\n\n          while (++index < length) {\n            var value = collection[index];\n            setter(result, value, callback(value, index, collection), collection);\n          }\n        } else {\n          baseEach(collection, function(value, key, collection) {\n            setter(result, value, callback(value, key, collection), collection);\n          });\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function that, when called, either curries or invokes `func`\n     * with an optional `this` binding and partially applied arguments.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to reference.\n     * @param {number} bitmask The bitmask of method flags to compose.\n     *  The bitmask may be composed of the following flags:\n     *  1 - `_.bind`\n     *  2 - `_.bindKey`\n     *  4 - `_.curry`\n     *  8 - `_.curry` (bound)\n     *  16 - `_.partial`\n     *  32 - `_.partialRight`\n     * @param {Array} [partialArgs] An array of arguments to prepend to those\n     *  provided to the new function.\n     * @param {Array} [partialRightArgs] An array of arguments to append to those\n     *  provided to the new function.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new function.\n     */\n    function createWrapper(func, bitmask, partialArgs, partialRightArgs, thisArg, arity) {\n      var isBind = bitmask & 1,\n          isBindKey = bitmask & 2,\n          isCurry = bitmask & 4,\n          isCurryBound = bitmask & 8,\n          isPartial = bitmask & 16,\n          isPartialRight = bitmask & 32;\n\n      if (!isBindKey && !isFunction(func)) {\n        throw new TypeError;\n      }\n      if (isPartial && !partialArgs.length) {\n        bitmask &= ~16;\n        isPartial = partialArgs = false;\n      }\n      if (isPartialRight && !partialRightArgs.length) {\n        bitmask &= ~32;\n        isPartialRight = partialRightArgs = false;\n      }\n      var bindData = func && func.__bindData__;\n      if (bindData && bindData !== true) {\n        // clone `bindData`\n        bindData = slice(bindData);\n        if (bindData[2]) {\n          bindData[2] = slice(bindData[2]);\n        }\n        if (bindData[3]) {\n          bindData[3] = slice(bindData[3]);\n        }\n        // set `thisBinding` is not previously bound\n        if (isBind && !(bindData[1] & 1)) {\n          bindData[4] = thisArg;\n        }\n        // set if previously bound but not currently (subsequent curried functions)\n        if (!isBind && bindData[1] & 1) {\n          bitmask |= 8;\n        }\n        // set curried arity if not yet set\n        if (isCurry && !(bindData[1] & 4)) {\n          bindData[5] = arity;\n        }\n        // append partial left arguments\n        if (isPartial) {\n          push.apply(bindData[2] || (bindData[2] = []), partialArgs);\n        }\n        // append partial right arguments\n        if (isPartialRight) {\n          unshift.apply(bindData[3] || (bindData[3] = []), partialRightArgs);\n        }\n        // merge flags\n        bindData[1] |= bitmask;\n        return createWrapper.apply(null, bindData);\n      }\n      // fast path for `_.bind`\n      var creater = (bitmask == 1 || bitmask === 17) ? baseBind : baseCreateWrapper;\n      return creater([func, bitmask, partialArgs, partialRightArgs, thisArg, arity]);\n    }\n\n    /**\n     * Creates compiled iteration functions.\n     *\n     * @private\n     * @param {...Object} [options] The compile options object(s).\n     * @param {string} [options.array] Code to determine if the iterable is an array or array-like.\n     * @param {boolean} [options.useHas] Specify using `hasOwnProperty` checks in the object loop.\n     * @param {Function} [options.keys] A reference to `_.keys` for use in own property iteration.\n     * @param {string} [options.args] A comma separated string of iteration function arguments.\n     * @param {string} [options.top] Code to execute before the iteration branches.\n     * @param {string} [options.loop] Code to execute in the object loop.\n     * @param {string} [options.bottom] Code to execute after the iteration branches.\n     * @returns {Function} Returns the compiled function.\n     */\n    function createIterator() {\n      // data properties\n      iteratorData.shadowedProps = shadowedProps;\n\n      // iterator options\n      iteratorData.array = iteratorData.bottom = iteratorData.loop = iteratorData.top = '';\n      iteratorData.init = 'iterable';\n      iteratorData.useHas = true;\n\n      // merge options into a template data object\n      for (var object, index = 0; object = arguments[index]; index++) {\n        for (var key in object) {\n          iteratorData[key] = object[key];\n        }\n      }\n      var args = iteratorData.args;\n      iteratorData.firstArg = /^[^,]+/.exec(args)[0];\n\n      // create the function factory\n      var factory = Function(\n          'baseCreateCallback, errorClass, errorProto, hasOwnProperty, ' +\n          'indicatorObject, isArguments, isArray, isString, keys, objectProto, ' +\n          'objectTypes, nonEnumProps, stringClass, stringProto, toString',\n        'return function(' + args + ') {\\n' + iteratorTemplate(iteratorData) + '\\n}'\n      );\n\n      // return the compiled function\n      return factory(\n        baseCreateCallback, errorClass, errorProto, hasOwnProperty,\n        indicatorObject, isArguments, isArray, isString, iteratorData.keys, objectProto,\n        objectTypes, nonEnumProps, stringClass, stringProto, toString\n      );\n    }\n\n    /**\n     * Used by `escape` to convert characters to HTML entities.\n     *\n     * @private\n     * @param {string} match The matched character to escape.\n     * @returns {string} Returns the escaped character.\n     */\n    function escapeHtmlChar(match) {\n      return htmlEscapes[match];\n    }\n\n    /**\n     * Gets the appropriate \"indexOf\" function. If the `_.indexOf` method is\n     * customized, this method returns the custom method, otherwise it returns\n     * the `baseIndexOf` function.\n     *\n     * @private\n     * @returns {Function} Returns the \"indexOf\" function.\n     */\n    function getIndexOf() {\n      var result = (result = lodash.indexOf) === indexOf ? baseIndexOf : result;\n      return result;\n    }\n\n    /**\n     * Checks if `value` is a native function.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is a native function, else `false`.\n     */\n    function isNative(value) {\n      return typeof value == 'function' && reNative.test(value);\n    }\n\n    /**\n     * Sets `this` binding data on a given function.\n     *\n     * @private\n     * @param {Function} func The function to set data on.\n     * @param {Array} value The data array to set.\n     */\n    var setBindData = !defineProperty ? noop : function(func, value) {\n      descriptor.value = value;\n      defineProperty(func, '__bindData__', descriptor);\n      descriptor.value = null;\n    };\n\n    /**\n     * A fallback implementation of `isPlainObject` which checks if a given value\n     * is an object created by the `Object` constructor, assuming objects created\n     * by the `Object` constructor have no inherited enumerable properties and that\n     * there are no `Object.prototype` extensions.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n     */\n    function shimIsPlainObject(value) {\n      var ctor,\n          result;\n\n      // avoid non Object objects, `arguments` objects, and DOM elements\n      if (!(value && toString.call(value) == objectClass) ||\n          (ctor = value.constructor, isFunction(ctor) && !(ctor instanceof ctor)) ||\n          (!support.argsClass && isArguments(value)) ||\n          (!support.nodeClass && isNode(value))) {\n        return false;\n      }\n      // IE < 9 iterates inherited properties before own properties. If the first\n      // iterated property is an object's own property then there are no inherited\n      // enumerable properties.\n      if (support.ownLast) {\n        forIn(value, function(value, key, object) {\n          result = hasOwnProperty.call(object, key);\n          return false;\n        });\n        return result !== false;\n      }\n      // In most environments an object's own properties are iterated before\n      // its inherited properties. If the last iterated property is an object's\n      // own property then there are no inherited enumerable properties.\n      forIn(value, function(value, key) {\n        result = key;\n      });\n      return typeof result == 'undefined' || hasOwnProperty.call(value, result);\n    }\n\n    /**\n     * Used by `unescape` to convert HTML entities to characters.\n     *\n     * @private\n     * @param {string} match The matched character to unescape.\n     * @returns {string} Returns the unescaped character.\n     */\n    function unescapeHtmlChar(match) {\n      return htmlUnescapes[match];\n    }\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * Checks if `value` is an `arguments` object.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is an `arguments` object, else `false`.\n     * @example\n     *\n     * (function() { return _.isArguments(arguments); })(1, 2, 3);\n     * // => true\n     *\n     * _.isArguments([1, 2, 3]);\n     * // => false\n     */\n    function isArguments(value) {\n      return value && typeof value == 'object' && typeof value.length == 'number' &&\n        toString.call(value) == argsClass || false;\n    }\n    // fallback for browsers that can't detect `arguments` objects by [[Class]]\n    if (!support.argsClass) {\n      isArguments = function(value) {\n        return value && typeof value == 'object' && typeof value.length == 'number' &&\n          hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee') || false;\n      };\n    }\n\n    /**\n     * Checks if `value` is an array.\n     *\n     * @static\n     * @memberOf _\n     * @type Function\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is an array, else `false`.\n     * @example\n     *\n     * (function() { return _.isArray(arguments); })();\n     * // => false\n     *\n     * _.isArray([1, 2, 3]);\n     * // => true\n     */\n    var isArray = nativeIsArray || function(value) {\n      return value && typeof value == 'object' && typeof value.length == 'number' &&\n        toString.call(value) == arrayClass || false;\n    };\n\n    /**\n     * A fallback implementation of `Object.keys` which produces an array of the\n     * given object's own enumerable property names.\n     *\n     * @private\n     * @type Function\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns an array of property names.\n     */\n    var shimKeys = createIterator({\n      'args': 'object',\n      'init': '[]',\n      'top': 'if (!(objectTypes[typeof object])) return result',\n      'loop': 'result.push(index)'\n    });\n\n    /**\n     * Creates an array composed of the own enumerable property names of an object.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns an array of property names.\n     * @example\n     *\n     * _.keys({ 'one': 1, 'two': 2, 'three': 3 });\n     * // => ['one', 'two', 'three'] (property order is not guaranteed across environments)\n     */\n    var keys = !nativeKeys ? shimKeys : function(object) {\n      if (!isObject(object)) {\n        return [];\n      }\n      if ((support.enumPrototypes && typeof object == 'function') ||\n          (support.nonEnumArgs && object.length && isArguments(object))) {\n        return shimKeys(object);\n      }\n      return nativeKeys(object);\n    };\n\n    /** Reusable iterator options shared by `each`, `forIn`, and `forOwn` */\n    var eachIteratorOptions = {\n      'args': 'collection, callback, thisArg',\n      'top': \"callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3)\",\n      'array': \"typeof length == 'number'\",\n      'keys': keys,\n      'loop': 'if (callback(iterable[index], index, collection) === false) return result'\n    };\n\n    /** Reusable iterator options for `assign` and `defaults` */\n    var defaultsIteratorOptions = {\n      'args': 'object, source, guard',\n      'top':\n        'var args = arguments,\\n' +\n        '    argsIndex = 0,\\n' +\n        \"    argsLength = typeof guard == 'number' ? 2 : args.length;\\n\" +\n        'while (++argsIndex < argsLength) {\\n' +\n        '  iterable = args[argsIndex];\\n' +\n        '  if (iterable && objectTypes[typeof iterable]) {',\n      'keys': keys,\n      'loop': \"if (typeof result[index] == 'undefined') result[index] = iterable[index]\",\n      'bottom': '  }\\n}'\n    };\n\n    /** Reusable iterator options for `forIn` and `forOwn` */\n    var forOwnIteratorOptions = {\n      'top': 'if (!objectTypes[typeof iterable]) return result;\\n' + eachIteratorOptions.top,\n      'array': false\n    };\n\n    /**\n     * Used to convert characters to HTML entities:\n     *\n     * Though the `>` character is escaped for symmetry, characters like `>` and `/`\n     * don't require escaping in HTML and have no special meaning unless they're part\n     * of a tag or an unquoted attribute value.\n     * http://mathiasbynens.be/notes/ambiguous-ampersands (under \"semi-related fun fact\")\n     */\n    var htmlEscapes = {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '\"': '&quot;',\n      \"'\": '&#39;'\n    };\n\n    /** Used to convert HTML entities to characters */\n    var htmlUnescapes = invert(htmlEscapes);\n\n    /** Used to match HTML entities and HTML characters */\n    var reEscapedHtml = RegExp('(' + keys(htmlUnescapes).join('|') + ')', 'g'),\n        reUnescapedHtml = RegExp('[' + keys(htmlEscapes).join('') + ']', 'g');\n\n    /**\n     * A function compiled to iterate `arguments` objects, arrays, objects, and\n     * strings consistenly across environments, executing the callback for each\n     * element in the collection. The callback is bound to `thisArg` and invoked\n     * with three arguments; (value, index|key, collection). Callbacks may exit\n     * iteration early by explicitly returning `false`.\n     *\n     * @private\n     * @type Function\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} [callback=identity] The function called per iteration.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array|Object|string} Returns `collection`.\n     */\n    var baseEach = createIterator(eachIteratorOptions);\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * Assigns own enumerable properties of source object(s) to the destination\n     * object. Subsequent sources will overwrite property assignments of previous\n     * sources. If a callback is provided it will be executed to produce the\n     * assigned values. The callback is bound to `thisArg` and invoked with two\n     * arguments; (objectValue, sourceValue).\n     *\n     * @static\n     * @memberOf _\n     * @type Function\n     * @alias extend\n     * @category Objects\n     * @param {Object} object The destination object.\n     * @param {...Object} [source] The source objects.\n     * @param {Function} [callback] The function to customize assigning values.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns the destination object.\n     * @example\n     *\n     * _.assign({ 'name': 'fred' }, { 'employer': 'slate' });\n     * // => { 'name': 'fred', 'employer': 'slate' }\n     *\n     * var defaults = _.partialRight(_.assign, function(a, b) {\n     *   return typeof a == 'undefined' ? b : a;\n     * });\n     *\n     * var object = { 'name': 'barney' };\n     * defaults(object, { 'name': 'fred', 'employer': 'slate' });\n     * // => { 'name': 'barney', 'employer': 'slate' }\n     */\n    var assign = createIterator(defaultsIteratorOptions, {\n      'top':\n        defaultsIteratorOptions.top.replace(';',\n          ';\\n' +\n          \"if (argsLength > 3 && typeof args[argsLength - 2] == 'function') {\\n\" +\n          '  var callback = baseCreateCallback(args[--argsLength - 1], args[argsLength--], 2);\\n' +\n          \"} else if (argsLength > 2 && typeof args[argsLength - 1] == 'function') {\\n\" +\n          '  callback = args[--argsLength];\\n' +\n          '}'\n        ),\n      'loop': 'result[index] = callback ? callback(result[index], iterable[index]) : iterable[index]'\n    });\n\n    /**\n     * Creates a clone of `value`. If `isDeep` is `true` nested objects will also\n     * be cloned, otherwise they will be assigned by reference. If a callback\n     * is provided it will be executed to produce the cloned values. If the\n     * callback returns `undefined` cloning will be handled by the method instead.\n     * The callback is bound to `thisArg` and invoked with one argument; (value).\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to clone.\n     * @param {boolean} [isDeep=false] Specify a deep clone.\n     * @param {Function} [callback] The function to customize cloning values.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {*} Returns the cloned value.\n     * @example\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36 },\n     *   { 'name': 'fred',   'age': 40 }\n     * ];\n     *\n     * var shallow = _.clone(characters);\n     * shallow[0] === characters[0];\n     * // => true\n     *\n     * var deep = _.clone(characters, true);\n     * deep[0] === characters[0];\n     * // => false\n     *\n     * _.mixin({\n     *   'clone': _.partialRight(_.clone, function(value) {\n     *     return _.isElement(value) ? value.cloneNode(false) : undefined;\n     *   })\n     * });\n     *\n     * var clone = _.clone(document.body);\n     * clone.childNodes.length;\n     * // => 0\n     */\n    function clone(value, isDeep, callback, thisArg) {\n      // allows working with \"Collections\" methods without using their `index`\n      // and `collection` arguments for `isDeep` and `callback`\n      if (typeof isDeep != 'boolean' && isDeep != null) {\n        thisArg = callback;\n        callback = isDeep;\n        isDeep = false;\n      }\n      return baseClone(value, isDeep, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 1));\n    }\n\n    /**\n     * Creates a deep clone of `value`. If a callback is provided it will be\n     * executed to produce the cloned values. If the callback returns `undefined`\n     * cloning will be handled by the method instead. The callback is bound to\n     * `thisArg` and invoked with one argument; (value).\n     *\n     * Note: This method is loosely based on the structured clone algorithm. Functions\n     * and DOM nodes are **not** cloned. The enumerable properties of `arguments` objects and\n     * objects created by constructors other than `Object` are cloned to plain `Object` objects.\n     * See http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to deep clone.\n     * @param {Function} [callback] The function to customize cloning values.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {*} Returns the deep cloned value.\n     * @example\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36 },\n     *   { 'name': 'fred',   'age': 40 }\n     * ];\n     *\n     * var deep = _.cloneDeep(characters);\n     * deep[0] === characters[0];\n     * // => false\n     *\n     * var view = {\n     *   'label': 'docs',\n     *   'node': element\n     * };\n     *\n     * var clone = _.cloneDeep(view, function(value) {\n     *   return _.isElement(value) ? value.cloneNode(true) : undefined;\n     * });\n     *\n     * clone.node == view.node;\n     * // => false\n     */\n    function cloneDeep(value, callback, thisArg) {\n      return baseClone(value, true, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 1));\n    }\n\n    /**\n     * Creates an object that inherits from the given `prototype` object. If a\n     * `properties` object is provided its own enumerable properties are assigned\n     * to the created object.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} prototype The object to inherit from.\n     * @param {Object} [properties] The properties to assign to the object.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * function Shape() {\n     *   this.x = 0;\n     *   this.y = 0;\n     * }\n     *\n     * function Circle() {\n     *   Shape.call(this);\n     * }\n     *\n     * Circle.prototype = _.create(Shape.prototype, { 'constructor': Circle });\n     *\n     * var circle = new Circle;\n     * circle instanceof Circle;\n     * // => true\n     *\n     * circle instanceof Shape;\n     * // => true\n     */\n    function create(prototype, properties) {\n      var result = baseCreate(prototype);\n      return properties ? assign(result, properties) : result;\n    }\n\n    /**\n     * Assigns own enumerable properties of source object(s) to the destination\n     * object for all destination properties that resolve to `undefined`. Once a\n     * property is set, additional defaults of the same property will be ignored.\n     *\n     * @static\n     * @memberOf _\n     * @type Function\n     * @category Objects\n     * @param {Object} object The destination object.\n     * @param {...Object} [source] The source objects.\n     * @param- {Object} [guard] Allows working with `_.reduce` without using its\n     *  `key` and `object` arguments as sources.\n     * @returns {Object} Returns the destination object.\n     * @example\n     *\n     * var object = { 'name': 'barney' };\n     * _.defaults(object, { 'name': 'fred', 'employer': 'slate' });\n     * // => { 'name': 'barney', 'employer': 'slate' }\n     */\n    var defaults = createIterator(defaultsIteratorOptions);\n\n    /**\n     * This method is like `_.findIndex` except that it returns the key of the\n     * first element that passes the callback check, instead of the element itself.\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The object to search.\n     * @param {Function|Object|string} [callback=identity] The function called per\n     *  iteration. If a property name or object is provided it will be used to\n     *  create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {string|undefined} Returns the key of the found element, else `undefined`.\n     * @example\n     *\n     * var characters = {\n     *   'barney': {  'age': 36, 'blocked': false },\n     *   'fred': {    'age': 40, 'blocked': true },\n     *   'pebbles': { 'age': 1,  'blocked': false }\n     * };\n     *\n     * _.findKey(characters, function(chr) {\n     *   return chr.age < 40;\n     * });\n     * // => 'barney' (property order is not guaranteed across environments)\n     *\n     * // using \"_.where\" callback shorthand\n     * _.findKey(characters, { 'age': 1 });\n     * // => 'pebbles'\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.findKey(characters, 'blocked');\n     * // => 'fred'\n     */\n    function findKey(object, callback, thisArg) {\n      var result;\n      callback = lodash.createCallback(callback, thisArg, 3);\n      forOwn(object, function(value, key, object) {\n        if (callback(value, key, object)) {\n          result = key;\n          return false;\n        }\n      });\n      return result;\n    }\n\n    /**\n     * This method is like `_.findKey` except that it iterates over elements\n     * of a `collection` in the opposite order.\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The object to search.\n     * @param {Function|Object|string} [callback=identity] The function called per\n     *  iteration. If a property name or object is provided it will be used to\n     *  create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {string|undefined} Returns the key of the found element, else `undefined`.\n     * @example\n     *\n     * var characters = {\n     *   'barney': {  'age': 36, 'blocked': true },\n     *   'fred': {    'age': 40, 'blocked': false },\n     *   'pebbles': { 'age': 1,  'blocked': true }\n     * };\n     *\n     * _.findLastKey(characters, function(chr) {\n     *   return chr.age < 40;\n     * });\n     * // => returns `pebbles`, assuming `_.findKey` returns `barney`\n     *\n     * // using \"_.where\" callback shorthand\n     * _.findLastKey(characters, { 'age': 40 });\n     * // => 'fred'\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.findLastKey(characters, 'blocked');\n     * // => 'pebbles'\n     */\n    function findLastKey(object, callback, thisArg) {\n      var result;\n      callback = lodash.createCallback(callback, thisArg, 3);\n      forOwnRight(object, function(value, key, object) {\n        if (callback(value, key, object)) {\n          result = key;\n          return false;\n        }\n      });\n      return result;\n    }\n\n    /**\n     * Iterates over own and inherited enumerable properties of an object,\n     * executing the callback for each property. The callback is bound to `thisArg`\n     * and invoked with three arguments; (value, key, object). Callbacks may exit\n     * iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @type Function\n     * @category Objects\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [callback=identity] The function called per iteration.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * function Shape() {\n     *   this.x = 0;\n     *   this.y = 0;\n     * }\n     *\n     * Shape.prototype.move = function(x, y) {\n     *   this.x += x;\n     *   this.y += y;\n     * };\n     *\n     * _.forIn(new Shape, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => logs 'x', 'y', and 'move' (property order is not guaranteed across environments)\n     */\n    var forIn = createIterator(eachIteratorOptions, forOwnIteratorOptions, {\n      'useHas': false\n    });\n\n    /**\n     * This method is like `_.forIn` except that it iterates over elements\n     * of a `collection` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [callback=identity] The function called per iteration.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * function Shape() {\n     *   this.x = 0;\n     *   this.y = 0;\n     * }\n     *\n     * Shape.prototype.move = function(x, y) {\n     *   this.x += x;\n     *   this.y += y;\n     * };\n     *\n     * _.forInRight(new Shape, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => logs 'move', 'y', and 'x' assuming `_.forIn ` logs 'x', 'y', and 'move'\n     */\n    function forInRight(object, callback, thisArg) {\n      var pairs = [];\n\n      forIn(object, function(value, key) {\n        pairs.push(key, value);\n      });\n\n      var length = pairs.length;\n      callback = baseCreateCallback(callback, thisArg, 3);\n      while (length--) {\n        if (callback(pairs[length--], pairs[length], object) === false) {\n          break;\n        }\n      }\n      return object;\n    }\n\n    /**\n     * Iterates over own enumerable properties of an object, executing the callback\n     * for each property. The callback is bound to `thisArg` and invoked with three\n     * arguments; (value, key, object). Callbacks may exit iteration early by\n     * explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @type Function\n     * @category Objects\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [callback=identity] The function called per iteration.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * _.forOwn({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {\n     *   console.log(key);\n     * });\n     * // => logs '0', '1', and 'length' (property order is not guaranteed across environments)\n     */\n    var forOwn = createIterator(eachIteratorOptions, forOwnIteratorOptions);\n\n    /**\n     * This method is like `_.forOwn` except that it iterates over elements\n     * of a `collection` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [callback=identity] The function called per iteration.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * _.forOwnRight({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {\n     *   console.log(key);\n     * });\n     * // => logs 'length', '1', and '0' assuming `_.forOwn` logs '0', '1', and 'length'\n     */\n    function forOwnRight(object, callback, thisArg) {\n      var props = keys(object),\n          length = props.length;\n\n      callback = baseCreateCallback(callback, thisArg, 3);\n      while (length--) {\n        var key = props[length];\n        if (callback(object[key], key, object) === false) {\n          break;\n        }\n      }\n      return object;\n    }\n\n    /**\n     * Creates a sorted array of property names of all enumerable properties,\n     * own and inherited, of `object` that have function values.\n     *\n     * @static\n     * @memberOf _\n     * @alias methods\n     * @category Objects\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns an array of property names that have function values.\n     * @example\n     *\n     * _.functions(_);\n     * // => ['all', 'any', 'bind', 'bindAll', 'clone', 'compact', 'compose', ...]\n     */\n    function functions(object) {\n      var result = [];\n      forIn(object, function(value, key) {\n        if (isFunction(value)) {\n          result.push(key);\n        }\n      });\n      return result.sort();\n    }\n\n    /**\n     * Checks if the specified property name exists as a direct property of `object`,\n     * instead of an inherited property.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The object to inspect.\n     * @param {string} key The name of the property to check.\n     * @returns {boolean} Returns `true` if key is a direct property, else `false`.\n     * @example\n     *\n     * _.has({ 'a': 1, 'b': 2, 'c': 3 }, 'b');\n     * // => true\n     */\n    function has(object, key) {\n      return object ? hasOwnProperty.call(object, key) : false;\n    }\n\n    /**\n     * Creates an object composed of the inverted keys and values of the given object.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The object to invert.\n     * @returns {Object} Returns the created inverted object.\n     * @example\n     *\n     * _.invert({ 'first': 'fred', 'second': 'barney' });\n     * // => { 'fred': 'first', 'barney': 'second' }\n     */\n    function invert(object) {\n      var index = -1,\n          props = keys(object),\n          length = props.length,\n          result = {};\n\n      while (++index < length) {\n        var key = props[index];\n        result[object[key]] = key;\n      }\n      return result;\n    }\n\n    /**\n     * Checks if `value` is a boolean value.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is a boolean value, else `false`.\n     * @example\n     *\n     * _.isBoolean(null);\n     * // => false\n     */\n    function isBoolean(value) {\n      return value === true || value === false ||\n        value && typeof value == 'object' && toString.call(value) == boolClass || false;\n    }\n\n    /**\n     * Checks if `value` is a date.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is a date, else `false`.\n     * @example\n     *\n     * _.isDate(new Date);\n     * // => true\n     */\n    function isDate(value) {\n      return value && typeof value == 'object' && toString.call(value) == dateClass || false;\n    }\n\n    /**\n     * Checks if `value` is a DOM element.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is a DOM element, else `false`.\n     * @example\n     *\n     * _.isElement(document.body);\n     * // => true\n     */\n    function isElement(value) {\n      return value && value.nodeType === 1 || false;\n    }\n\n    /**\n     * Checks if `value` is empty. Arrays, strings, or `arguments` objects with a\n     * length of `0` and objects with no own enumerable properties are considered\n     * \"empty\".\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Array|Object|string} value The value to inspect.\n     * @returns {boolean} Returns `true` if the `value` is empty, else `false`.\n     * @example\n     *\n     * _.isEmpty([1, 2, 3]);\n     * // => false\n     *\n     * _.isEmpty({});\n     * // => true\n     *\n     * _.isEmpty('');\n     * // => true\n     */\n    function isEmpty(value) {\n      var result = true;\n      if (!value) {\n        return result;\n      }\n      var className = toString.call(value),\n          length = value.length;\n\n      if ((className == arrayClass || className == stringClass ||\n          (support.argsClass ? className == argsClass : isArguments(value))) ||\n          (className == objectClass && typeof length == 'number' && isFunction(value.splice))) {\n        return !length;\n      }\n      forOwn(value, function() {\n        return (result = false);\n      });\n      return result;\n    }\n\n    /**\n     * Performs a deep comparison between two values to determine if they are\n     * equivalent to each other. If a callback is provided it will be executed\n     * to compare values. If the callback returns `undefined` comparisons will\n     * be handled by the method instead. The callback is bound to `thisArg` and\n     * invoked with two arguments; (a, b).\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} a The value to compare.\n     * @param {*} b The other value to compare.\n     * @param {Function} [callback] The function to customize comparing values.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'name': 'fred' };\n     * var copy = { 'name': 'fred' };\n     *\n     * object == copy;\n     * // => false\n     *\n     * _.isEqual(object, copy);\n     * // => true\n     *\n     * var words = ['hello', 'goodbye'];\n     * var otherWords = ['hi', 'goodbye'];\n     *\n     * _.isEqual(words, otherWords, function(a, b) {\n     *   var reGreet = /^(?:hello|hi)$/i,\n     *       aGreet = _.isString(a) && reGreet.test(a),\n     *       bGreet = _.isString(b) && reGreet.test(b);\n     *\n     *   return (aGreet || bGreet) ? (aGreet == bGreet) : undefined;\n     * });\n     * // => true\n     */\n    function isEqual(a, b, callback, thisArg) {\n      return baseIsEqual(a, b, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 2));\n    }\n\n    /**\n     * Checks if `value` is, or can be coerced to, a finite number.\n     *\n     * Note: This is not the same as native `isFinite` which will return true for\n     * booleans and empty strings. See http://es5.github.io/#x15.1.2.5.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is finite, else `false`.\n     * @example\n     *\n     * _.isFinite(-101);\n     * // => true\n     *\n     * _.isFinite('10');\n     * // => true\n     *\n     * _.isFinite(true);\n     * // => false\n     *\n     * _.isFinite('');\n     * // => false\n     *\n     * _.isFinite(Infinity);\n     * // => false\n     */\n    function isFinite(value) {\n      return nativeIsFinite(value) && !nativeIsNaN(parseFloat(value));\n    }\n\n    /**\n     * Checks if `value` is a function.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is a function, else `false`.\n     * @example\n     *\n     * _.isFunction(_);\n     * // => true\n     */\n    function isFunction(value) {\n      return typeof value == 'function';\n    }\n    // fallback for older versions of Chrome and Safari\n    if (isFunction(/x/)) {\n      isFunction = function(value) {\n        return typeof value == 'function' && toString.call(value) == funcClass;\n      };\n    }\n\n    /**\n     * Checks if `value` is the language type of Object.\n     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is an object, else `false`.\n     * @example\n     *\n     * _.isObject({});\n     * // => true\n     *\n     * _.isObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isObject(1);\n     * // => false\n     */\n    function isObject(value) {\n      // check if the value is the ECMAScript language type of Object\n      // http://es5.github.io/#x8\n      // and avoid a V8 bug\n      // http://code.google.com/p/v8/issues/detail?id=2291\n      return !!(value && objectTypes[typeof value]);\n    }\n\n    /**\n     * Checks if `value` is `NaN`.\n     *\n     * Note: This is not the same as native `isNaN` which will return `true` for\n     * `undefined` and other non-numeric values. See http://es5.github.io/#x15.1.2.4.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is `NaN`, else `false`.\n     * @example\n     *\n     * _.isNaN(NaN);\n     * // => true\n     *\n     * _.isNaN(new Number(NaN));\n     * // => true\n     *\n     * isNaN(undefined);\n     * // => true\n     *\n     * _.isNaN(undefined);\n     * // => false\n     */\n    function isNaN(value) {\n      // `NaN` as a primitive is the only value that is not equal to itself\n      // (perform the [[Class]] check first to avoid errors with some host objects in IE)\n      return isNumber(value) && value != +value;\n    }\n\n    /**\n     * Checks if `value` is `null`.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is `null`, else `false`.\n     * @example\n     *\n     * _.isNull(null);\n     * // => true\n     *\n     * _.isNull(undefined);\n     * // => false\n     */\n    function isNull(value) {\n      return value === null;\n    }\n\n    /**\n     * Checks if `value` is a number.\n     *\n     * Note: `NaN` is considered a number. See http://es5.github.io/#x8.5.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is a number, else `false`.\n     * @example\n     *\n     * _.isNumber(8.4 * 5);\n     * // => true\n     */\n    function isNumber(value) {\n      return typeof value == 'number' ||\n        value && typeof value == 'object' && toString.call(value) == numberClass || false;\n    }\n\n    /**\n     * Checks if `value` is an object created by the `Object` constructor.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n     * @example\n     *\n     * function Shape() {\n     *   this.x = 0;\n     *   this.y = 0;\n     * }\n     *\n     * _.isPlainObject(new Shape);\n     * // => false\n     *\n     * _.isPlainObject([1, 2, 3]);\n     * // => false\n     *\n     * _.isPlainObject({ 'x': 0, 'y': 0 });\n     * // => true\n     */\n    var isPlainObject = !getPrototypeOf ? shimIsPlainObject : function(value) {\n      if (!(value && toString.call(value) == objectClass) || (!support.argsClass && isArguments(value))) {\n        return false;\n      }\n      var valueOf = value.valueOf,\n          objProto = isNative(valueOf) && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);\n\n      return objProto\n        ? (value == objProto || getPrototypeOf(value) == objProto)\n        : shimIsPlainObject(value);\n    };\n\n    /**\n     * Checks if `value` is a regular expression.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is a regular expression, else `false`.\n     * @example\n     *\n     * _.isRegExp(/fred/);\n     * // => true\n     */\n    function isRegExp(value) {\n      return value && objectTypes[typeof value] && toString.call(value) == regexpClass || false;\n    }\n\n    /**\n     * Checks if `value` is a string.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is a string, else `false`.\n     * @example\n     *\n     * _.isString('fred');\n     * // => true\n     */\n    function isString(value) {\n      return typeof value == 'string' ||\n        value && typeof value == 'object' && toString.call(value) == stringClass || false;\n    }\n\n    /**\n     * Checks if `value` is `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is `undefined`, else `false`.\n     * @example\n     *\n     * _.isUndefined(void 0);\n     * // => true\n     */\n    function isUndefined(value) {\n      return typeof value == 'undefined';\n    }\n\n    /**\n     * Creates an object with the same keys as `object` and values generated by\n     * running each own enumerable property of `object` through the callback.\n     * The callback is bound to `thisArg` and invoked with three arguments;\n     * (value, key, object).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The object to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a new object with values of the results of each `callback` execution.\n     * @example\n     *\n     * _.mapValues({ 'a': 1, 'b': 2, 'c': 3} , function(num) { return num * 3; });\n     * // => { 'a': 3, 'b': 6, 'c': 9 }\n     *\n     * var characters = {\n     *   'fred': { 'name': 'fred', 'age': 40 },\n     *   'pebbles': { 'name': 'pebbles', 'age': 1 }\n     * };\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.mapValues(characters, 'age');\n     * // => { 'fred': 40, 'pebbles': 1 }\n     */\n    function mapValues(object, callback, thisArg) {\n      var result = {};\n      callback = lodash.createCallback(callback, thisArg, 3);\n\n      forOwn(object, function(value, key, object) {\n        result[key] = callback(value, key, object);\n      });\n      return result;\n    }\n\n    /**\n     * Recursively merges own enumerable properties of the source object(s), that\n     * don't resolve to `undefined` into the destination object. Subsequent sources\n     * will overwrite property assignments of previous sources. If a callback is\n     * provided it will be executed to produce the merged values of the destination\n     * and source properties. If the callback returns `undefined` merging will\n     * be handled by the method instead. The callback is bound to `thisArg` and\n     * invoked with two arguments; (objectValue, sourceValue).\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The destination object.\n     * @param {...Object} [source] The source objects.\n     * @param {Function} [callback] The function to customize merging properties.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns the destination object.\n     * @example\n     *\n     * var names = {\n     *   'characters': [\n     *     { 'name': 'barney' },\n     *     { 'name': 'fred' }\n     *   ]\n     * };\n     *\n     * var ages = {\n     *   'characters': [\n     *     { 'age': 36 },\n     *     { 'age': 40 }\n     *   ]\n     * };\n     *\n     * _.merge(names, ages);\n     * // => { 'characters': [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred', 'age': 40 }] }\n     *\n     * var food = {\n     *   'fruits': ['apple'],\n     *   'vegetables': ['beet']\n     * };\n     *\n     * var otherFood = {\n     *   'fruits': ['banana'],\n     *   'vegetables': ['carrot']\n     * };\n     *\n     * _.merge(food, otherFood, function(a, b) {\n     *   return _.isArray(a) ? a.concat(b) : undefined;\n     * });\n     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot] }\n     */\n    function merge(object) {\n      var args = arguments,\n          length = 2;\n\n      if (!isObject(object)) {\n        return object;\n      }\n      // allows working with `_.reduce` and `_.reduceRight` without using\n      // their `index` and `collection` arguments\n      if (typeof args[2] != 'number') {\n        length = args.length;\n      }\n      if (length > 3 && typeof args[length - 2] == 'function') {\n        var callback = baseCreateCallback(args[--length - 1], args[length--], 2);\n      } else if (length > 2 && typeof args[length - 1] == 'function') {\n        callback = args[--length];\n      }\n      var sources = slice(arguments, 1, length),\n          index = -1,\n          stackA = getArray(),\n          stackB = getArray();\n\n      while (++index < length) {\n        baseMerge(object, sources[index], callback, stackA, stackB);\n      }\n      releaseArray(stackA);\n      releaseArray(stackB);\n      return object;\n    }\n\n    /**\n     * Creates a shallow clone of `object` excluding the specified properties.\n     * Property names may be specified as individual arguments or as arrays of\n     * property names. If a callback is provided it will be executed for each\n     * property of `object` omitting the properties the callback returns truey\n     * for. The callback is bound to `thisArg` and invoked with three arguments;\n     * (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The source object.\n     * @param {Function|...string|string[]} [callback] The properties to omit or the\n     *  function called per iteration.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns an object without the omitted properties.\n     * @example\n     *\n     * _.omit({ 'name': 'fred', 'age': 40 }, 'age');\n     * // => { 'name': 'fred' }\n     *\n     * _.omit({ 'name': 'fred', 'age': 40 }, function(value) {\n     *   return typeof value == 'number';\n     * });\n     * // => { 'name': 'fred' }\n     */\n    function omit(object, callback, thisArg) {\n      var result = {};\n      if (typeof callback != 'function') {\n        var props = [];\n        forIn(object, function(value, key) {\n          props.push(key);\n        });\n        props = baseDifference(props, baseFlatten(arguments, true, false, 1));\n\n        var index = -1,\n            length = props.length;\n\n        while (++index < length) {\n          var key = props[index];\n          result[key] = object[key];\n        }\n      } else {\n        callback = lodash.createCallback(callback, thisArg, 3);\n        forIn(object, function(value, key, object) {\n          if (!callback(value, key, object)) {\n            result[key] = value;\n          }\n        });\n      }\n      return result;\n    }\n\n    /**\n     * Creates a two dimensional array of an object's key-value pairs,\n     * i.e. `[[key1, value1], [key2, value2]]`.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns new array of key-value pairs.\n     * @example\n     *\n     * _.pairs({ 'barney': 36, 'fred': 40 });\n     * // => [['barney', 36], ['fred', 40]] (property order is not guaranteed across environments)\n     */\n    function pairs(object) {\n      var index = -1,\n          props = keys(object),\n          length = props.length,\n          result = Array(length);\n\n      while (++index < length) {\n        var key = props[index];\n        result[index] = [key, object[key]];\n      }\n      return result;\n    }\n\n    /**\n     * Creates a shallow clone of `object` composed of the specified properties.\n     * Property names may be specified as individual arguments or as arrays of\n     * property names. If a callback is provided it will be executed for each\n     * property of `object` picking the properties the callback returns truey\n     * for. The callback is bound to `thisArg` and invoked with three arguments;\n     * (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The source object.\n     * @param {Function|...string|string[]} [callback] The function called per\n     *  iteration or property names to pick, specified as individual property\n     *  names or arrays of property names.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns an object composed of the picked properties.\n     * @example\n     *\n     * _.pick({ 'name': 'fred', '_userid': 'fred1' }, 'name');\n     * // => { 'name': 'fred' }\n     *\n     * _.pick({ 'name': 'fred', '_userid': 'fred1' }, function(value, key) {\n     *   return key.charAt(0) != '_';\n     * });\n     * // => { 'name': 'fred' }\n     */\n    function pick(object, callback, thisArg) {\n      var result = {};\n      if (typeof callback != 'function') {\n        var index = -1,\n            props = baseFlatten(arguments, true, false, 1),\n            length = isObject(object) ? props.length : 0;\n\n        while (++index < length) {\n          var key = props[index];\n          if (key in object) {\n            result[key] = object[key];\n          }\n        }\n      } else {\n        callback = lodash.createCallback(callback, thisArg, 3);\n        forIn(object, function(value, key, object) {\n          if (callback(value, key, object)) {\n            result[key] = value;\n          }\n        });\n      }\n      return result;\n    }\n\n    /**\n     * An alternative to `_.reduce` this method transforms `object` to a new\n     * `accumulator` object which is the result of running each of its own\n     * enumerable properties through a callback, with each callback execution\n     * potentially mutating the `accumulator` object. The callback is bound to\n     * `thisArg` and invoked with four arguments; (accumulator, value, key, object).\n     * Callbacks may exit iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Array|Object} object The object to iterate over.\n     * @param {Function} [callback=identity] The function called per iteration.\n     * @param {*} [accumulator] The custom accumulator value.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {*} Returns the accumulated value.\n     * @example\n     *\n     * var squares = _.transform([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], function(result, num) {\n     *   num *= num;\n     *   if (num % 2) {\n     *     return result.push(num) < 3;\n     *   }\n     * });\n     * // => [1, 9, 25]\n     *\n     * var mapped = _.transform({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {\n     *   result[key] = num * 3;\n     * });\n     * // => { 'a': 3, 'b': 6, 'c': 9 }\n     */\n    function transform(object, callback, accumulator, thisArg) {\n      var isArr = isArray(object);\n      if (accumulator == null) {\n        if (isArr) {\n          accumulator = [];\n        } else {\n          var ctor = object && object.constructor,\n              proto = ctor && ctor.prototype;\n\n          accumulator = baseCreate(proto);\n        }\n      }\n      if (callback) {\n        callback = lodash.createCallback(callback, thisArg, 4);\n        (isArr ? baseEach : forOwn)(object, function(value, index, object) {\n          return callback(accumulator, value, index, object);\n        });\n      }\n      return accumulator;\n    }\n\n    /**\n     * Creates an array composed of the own enumerable property values of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns an array of property values.\n     * @example\n     *\n     * _.values({ 'one': 1, 'two': 2, 'three': 3 });\n     * // => [1, 2, 3] (property order is not guaranteed across environments)\n     */\n    function values(object) {\n      var index = -1,\n          props = keys(object),\n          length = props.length,\n          result = Array(length);\n\n      while (++index < length) {\n        result[index] = object[props[index]];\n      }\n      return result;\n    }\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of elements from the specified indexes, or keys, of the\n     * `collection`. Indexes may be specified as individual arguments or as arrays\n     * of indexes.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {...(number|number[]|string|string[])} [index] The indexes of `collection`\n     *   to retrieve, specified as individual indexes or arrays of indexes.\n     * @returns {Array} Returns a new array of elements corresponding to the\n     *  provided indexes.\n     * @example\n     *\n     * _.at(['a', 'b', 'c', 'd', 'e'], [0, 2, 4]);\n     * // => ['a', 'c', 'e']\n     *\n     * _.at(['fred', 'barney', 'pebbles'], 0, 2);\n     * // => ['fred', 'pebbles']\n     */\n    function at(collection) {\n      var args = arguments,\n          index = -1,\n          props = baseFlatten(args, true, false, 1),\n          length = (args[2] && args[2][args[1]] === collection) ? 1 : props.length,\n          result = Array(length);\n\n      if (support.unindexedChars && isString(collection)) {\n        collection = collection.split('');\n      }\n      while(++index < length) {\n        result[index] = collection[props[index]];\n      }\n      return result;\n    }\n\n    /**\n     * Checks if a given value is present in a collection using strict equality\n     * for comparisons, i.e. `===`. If `fromIndex` is negative, it is used as the\n     * offset from the end of the collection.\n     *\n     * @static\n     * @memberOf _\n     * @alias include\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {*} target The value to check for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {boolean} Returns `true` if the `target` element is found, else `false`.\n     * @example\n     *\n     * _.contains([1, 2, 3], 1);\n     * // => true\n     *\n     * _.contains([1, 2, 3], 1, 2);\n     * // => false\n     *\n     * _.contains({ 'name': 'fred', 'age': 40 }, 'fred');\n     * // => true\n     *\n     * _.contains('pebbles', 'eb');\n     * // => true\n     */\n    function contains(collection, target, fromIndex) {\n      var index = -1,\n          indexOf = getIndexOf(),\n          length = collection ? collection.length : 0,\n          result = false;\n\n      fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex) || 0;\n      if (isArray(collection)) {\n        result = indexOf(collection, target, fromIndex) > -1;\n      } else if (typeof length == 'number') {\n        result = (isString(collection) ? collection.indexOf(target, fromIndex) : indexOf(collection, target, fromIndex)) > -1;\n      } else {\n        baseEach(collection, function(value) {\n          if (++index >= fromIndex) {\n            return !(result = value === target);\n          }\n        });\n      }\n      return result;\n    }\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` through the callback. The corresponding value\n     * of each key is the number of times the key was returned by the callback.\n     * The callback is bound to `thisArg` and invoked with three arguments;\n     * (value, index|key, collection).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.countBy([4.3, 6.1, 6.4], function(num) { return Math.floor(num); });\n     * // => { '4': 1, '6': 2 }\n     *\n     * _.countBy([4.3, 6.1, 6.4], function(num) { return this.floor(num); }, Math);\n     * // => { '4': 1, '6': 2 }\n     *\n     * _.countBy(['one', 'two', 'three'], 'length');\n     * // => { '3': 2, '5': 1 }\n     */\n    var countBy = createAggregator(function(result, value, key) {\n      (hasOwnProperty.call(result, key) ? result[key]++ : result[key] = 1);\n    });\n\n    /**\n     * Checks if the given callback returns truey value for **all** elements of\n     * a collection. The callback is bound to `thisArg` and invoked with three\n     * arguments; (value, index|key, collection).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias all\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {boolean} Returns `true` if all elements passed the callback check,\n     *  else `false`.\n     * @example\n     *\n     * _.every([true, 1, null, 'yes']);\n     * // => false\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36 },\n     *   { 'name': 'fred',   'age': 40 }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.every(characters, 'age');\n     * // => true\n     *\n     * // using \"_.where\" callback shorthand\n     * _.every(characters, { 'age': 36 });\n     * // => false\n     */\n    function every(collection, callback, thisArg) {\n      var result = true;\n      callback = lodash.createCallback(callback, thisArg, 3);\n\n      if (isArray(collection)) {\n        var index = -1,\n            length = collection.length;\n\n        while (++index < length) {\n          if (!(result = !!callback(collection[index], index, collection))) {\n            break;\n          }\n        }\n      } else {\n        baseEach(collection, function(value, index, collection) {\n          return (result = !!callback(value, index, collection));\n        });\n      }\n      return result;\n    }\n\n    /**\n     * Iterates over elements of a collection, returning an array of all elements\n     * the callback returns truey for. The callback is bound to `thisArg` and\n     * invoked with three arguments; (value, index|key, collection).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias select\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a new array of elements that passed the callback check.\n     * @example\n     *\n     * var evens = _.filter([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });\n     * // => [2, 4, 6]\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36, 'blocked': false },\n     *   { 'name': 'fred',   'age': 40, 'blocked': true }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.filter(characters, 'blocked');\n     * // => [{ 'name': 'fred', 'age': 40, 'blocked': true }]\n     *\n     * // using \"_.where\" callback shorthand\n     * _.filter(characters, { 'age': 36 });\n     * // => [{ 'name': 'barney', 'age': 36, 'blocked': false }]\n     */\n    function filter(collection, callback, thisArg) {\n      var result = [];\n      callback = lodash.createCallback(callback, thisArg, 3);\n\n      if (isArray(collection)) {\n        var index = -1,\n            length = collection.length;\n\n        while (++index < length) {\n          var value = collection[index];\n          if (callback(value, index, collection)) {\n            result.push(value);\n          }\n        }\n      } else {\n        baseEach(collection, function(value, index, collection) {\n          if (callback(value, index, collection)) {\n            result.push(value);\n          }\n        });\n      }\n      return result;\n    }\n\n    /**\n     * Iterates over elements of a collection, returning the first element that\n     * the callback returns truey for. The callback is bound to `thisArg` and\n     * invoked with three arguments; (value, index|key, collection).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias detect, findWhere\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {*} Returns the found element, else `undefined`.\n     * @example\n     *\n     * var characters = [\n     *   { 'name': 'barney',  'age': 36, 'blocked': false },\n     *   { 'name': 'fred',    'age': 40, 'blocked': true },\n     *   { 'name': 'pebbles', 'age': 1,  'blocked': false }\n     * ];\n     *\n     * _.find(characters, function(chr) {\n     *   return chr.age < 40;\n     * });\n     * // => { 'name': 'barney', 'age': 36, 'blocked': false }\n     *\n     * // using \"_.where\" callback shorthand\n     * _.find(characters, { 'age': 1 });\n     * // =>  { 'name': 'pebbles', 'age': 1, 'blocked': false }\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.find(characters, 'blocked');\n     * // => { 'name': 'fred', 'age': 40, 'blocked': true }\n     */\n    function find(collection, callback, thisArg) {\n      callback = lodash.createCallback(callback, thisArg, 3);\n\n      if (isArray(collection)) {\n        var index = -1,\n            length = collection.length;\n\n        while (++index < length) {\n          var value = collection[index];\n          if (callback(value, index, collection)) {\n            return value;\n          }\n        }\n      } else {\n        var result;\n        baseEach(collection, function(value, index, collection) {\n          if (callback(value, index, collection)) {\n            result = value;\n            return false;\n          }\n        });\n        return result;\n      }\n    }\n\n    /**\n     * This method is like `_.find` except that it iterates over elements\n     * of a `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {*} Returns the found element, else `undefined`.\n     * @example\n     *\n     * _.findLast([1, 2, 3, 4], function(num) {\n     *   return num % 2 == 1;\n     * });\n     * // => 3\n     */\n    function findLast(collection, callback, thisArg) {\n      var result;\n      callback = lodash.createCallback(callback, thisArg, 3);\n      forEachRight(collection, function(value, index, collection) {\n        if (callback(value, index, collection)) {\n          result = value;\n          return false;\n        }\n      });\n      return result;\n    }\n\n    /**\n     * Iterates over elements of a collection, executing the callback for each\n     * element. The callback is bound to `thisArg` and invoked with three arguments;\n     * (value, index|key, collection). Callbacks may exit iteration early by\n     * explicitly returning `false`.\n     *\n     * Note: As with other \"Collections\" methods, objects with a `length` property\n     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`\n     * may be used for object iteration.\n     *\n     * @static\n     * @memberOf _\n     * @alias each\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} [callback=identity] The function called per iteration.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array|Object|string} Returns `collection`.\n     * @example\n     *\n     * _([1, 2, 3]).forEach(function(num) { console.log(num); }).join(',');\n     * // => logs each number and returns '1,2,3'\n     *\n     * _.forEach({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { console.log(num); });\n     * // => logs each number and returns the object (property order is not guaranteed across environments)\n     */\n    function forEach(collection, callback, thisArg) {\n      if (callback && typeof thisArg == 'undefined' && isArray(collection)) {\n        var index = -1,\n            length = collection.length;\n\n        while (++index < length) {\n          if (callback(collection[index], index, collection) === false) {\n            break;\n          }\n        }\n      } else {\n        baseEach(collection, callback, thisArg);\n      }\n      return collection;\n    }\n\n    /**\n     * This method is like `_.forEach` except that it iterates over elements\n     * of a `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @alias eachRight\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} [callback=identity] The function called per iteration.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array|Object|string} Returns `collection`.\n     * @example\n     *\n     * _([1, 2, 3]).forEachRight(function(num) { console.log(num); }).join(',');\n     * // => logs each number from right to left and returns '3,2,1'\n     */\n    function forEachRight(collection, callback, thisArg) {\n      var iterable = collection,\n          length = collection ? collection.length : 0;\n\n      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);\n      if (isArray(collection)) {\n        while (length--) {\n          if (callback(collection[length], length, collection) === false) {\n            break;\n          }\n        }\n      } else {\n        if (typeof length != 'number') {\n          var props = keys(collection);\n          length = props.length;\n        } else if (support.unindexedChars && isString(collection)) {\n          iterable = collection.split('');\n        }\n        baseEach(collection, function(value, key, collection) {\n          key = props ? props[--length] : --length;\n          return callback(iterable[key], key, collection);\n        });\n      }\n      return collection;\n    }\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of a collection through the callback. The corresponding value\n     * of each key is an array of the elements responsible for generating the key.\n     * The callback is bound to `thisArg` and invoked with three arguments;\n     * (value, index|key, collection).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.groupBy([4.2, 6.1, 6.4], function(num) { return Math.floor(num); });\n     * // => { '4': [4.2], '6': [6.1, 6.4] }\n     *\n     * _.groupBy([4.2, 6.1, 6.4], function(num) { return this.floor(num); }, Math);\n     * // => { '4': [4.2], '6': [6.1, 6.4] }\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.groupBy(['one', 'two', 'three'], 'length');\n     * // => { '3': ['one', 'two'], '5': ['three'] }\n     */\n    var groupBy = createAggregator(function(result, value, key) {\n      (hasOwnProperty.call(result, key) ? result[key] : result[key] = []).push(value);\n    });\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of the collection through the given callback. The corresponding\n     * value of each key is the last element responsible for generating the key.\n     * The callback is bound to `thisArg` and invoked with three arguments;\n     * (value, index|key, collection).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * var keys = [\n     *   { 'dir': 'left', 'code': 97 },\n     *   { 'dir': 'right', 'code': 100 }\n     * ];\n     *\n     * _.indexBy(keys, 'dir');\n     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n     *\n     * _.indexBy(keys, function(key) { return String.fromCharCode(key.code); });\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n     *\n     * _.indexBy(characters, function(key) { this.fromCharCode(key.code); }, String);\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n     */\n    var indexBy = createAggregator(function(result, value, key) {\n      result[key] = value;\n    });\n\n    /**\n     * Invokes the method named by `methodName` on each element in the `collection`\n     * returning an array of the results of each invoked method. Additional arguments\n     * will be provided to each invoked method. If `methodName` is a function it\n     * will be invoked for, and `this` bound to, each element in the `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|string} methodName The name of the method to invoke or\n     *  the function invoked per iteration.\n     * @param {...*} [arg] Arguments to invoke the method with.\n     * @returns {Array} Returns a new array of the results of each invoked method.\n     * @example\n     *\n     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');\n     * // => [[1, 5, 7], [1, 2, 3]]\n     *\n     * _.invoke([123, 456], String.prototype.split, '');\n     * // => [['1', '2', '3'], ['4', '5', '6']]\n     */\n    function invoke(collection, methodName) {\n      var args = slice(arguments, 2),\n          index = -1,\n          isFunc = typeof methodName == 'function',\n          length = collection ? collection.length : 0,\n          result = Array(typeof length == 'number' ? length : 0);\n\n      forEach(collection, function(value) {\n        result[++index] = (isFunc ? methodName : value[methodName]).apply(value, args);\n      });\n      return result;\n    }\n\n    /**\n     * Creates an array of values by running each element in the collection\n     * through the callback. The callback is bound to `thisArg` and invoked with\n     * three arguments; (value, index|key, collection).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias collect\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a new array of the results of each `callback` execution.\n     * @example\n     *\n     * _.map([1, 2, 3], function(num) { return num * 3; });\n     * // => [3, 6, 9]\n     *\n     * _.map({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { return num * 3; });\n     * // => [3, 6, 9] (property order is not guaranteed across environments)\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36 },\n     *   { 'name': 'fred',   'age': 40 }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.map(characters, 'name');\n     * // => ['barney', 'fred']\n     */\n    function map(collection, callback, thisArg) {\n      var index = -1,\n          length = collection ? collection.length : 0,\n          result = Array(typeof length == 'number' ? length : 0);\n\n      callback = lodash.createCallback(callback, thisArg, 3);\n      if (isArray(collection)) {\n        while (++index < length) {\n          result[index] = callback(collection[index], index, collection);\n        }\n      } else {\n        baseEach(collection, function(value, key, collection) {\n          result[++index] = callback(value, key, collection);\n        });\n      }\n      return result;\n    }\n\n    /**\n     * Retrieves the maximum value of a collection. If the collection is empty or\n     * falsey `-Infinity` is returned. If a callback is provided it will be executed\n     * for each value in the collection to generate the criterion by which the value\n     * is ranked. The callback is bound to `thisArg` and invoked with three\n     * arguments; (value, index, collection).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * _.max([4, 2, 8, 6]);\n     * // => 8\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36 },\n     *   { 'name': 'fred',   'age': 40 }\n     * ];\n     *\n     * _.max(characters, function(chr) { return chr.age; });\n     * // => { 'name': 'fred', 'age': 40 };\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.max(characters, 'age');\n     * // => { 'name': 'fred', 'age': 40 };\n     */\n    function max(collection, callback, thisArg) {\n      var computed = -Infinity,\n          result = computed;\n\n      // allows working with functions like `_.map` without using\n      // their `index` argument as a callback\n      if (typeof callback != 'function' && thisArg && thisArg[callback] === collection) {\n        callback = null;\n      }\n      if (callback == null && isArray(collection)) {\n        var index = -1,\n            length = collection.length;\n\n        while (++index < length) {\n          var value = collection[index];\n          if (value > result) {\n            result = value;\n          }\n        }\n      } else {\n        callback = (callback == null && isString(collection))\n          ? charAtCallback\n          : lodash.createCallback(callback, thisArg, 3);\n\n        baseEach(collection, function(value, index, collection) {\n          var current = callback(value, index, collection);\n          if (current > computed) {\n            computed = current;\n            result = value;\n          }\n        });\n      }\n      return result;\n    }\n\n    /**\n     * Retrieves the minimum value of a collection. If the collection is empty or\n     * falsey `Infinity` is returned. If a callback is provided it will be executed\n     * for each value in the collection to generate the criterion by which the value\n     * is ranked. The callback is bound to `thisArg` and invoked with three\n     * arguments; (value, index, collection).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * _.min([4, 2, 8, 6]);\n     * // => 2\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36 },\n     *   { 'name': 'fred',   'age': 40 }\n     * ];\n     *\n     * _.min(characters, function(chr) { return chr.age; });\n     * // => { 'name': 'barney', 'age': 36 };\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.min(characters, 'age');\n     * // => { 'name': 'barney', 'age': 36 };\n     */\n    function min(collection, callback, thisArg) {\n      var computed = Infinity,\n          result = computed;\n\n      // allows working with functions like `_.map` without using\n      // their `index` argument as a callback\n      if (typeof callback != 'function' && thisArg && thisArg[callback] === collection) {\n        callback = null;\n      }\n      if (callback == null && isArray(collection)) {\n        var index = -1,\n            length = collection.length;\n\n        while (++index < length) {\n          var value = collection[index];\n          if (value < result) {\n            result = value;\n          }\n        }\n      } else {\n        callback = (callback == null && isString(collection))\n          ? charAtCallback\n          : lodash.createCallback(callback, thisArg, 3);\n\n        baseEach(collection, function(value, index, collection) {\n          var current = callback(value, index, collection);\n          if (current < computed) {\n            computed = current;\n            result = value;\n          }\n        });\n      }\n      return result;\n    }\n\n    /**\n     * Retrieves the value of a specified property from all elements in the collection.\n     *\n     * @static\n     * @memberOf _\n     * @type Function\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {string} property The name of the property to pluck.\n     * @returns {Array} Returns a new array of property values.\n     * @example\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36 },\n     *   { 'name': 'fred',   'age': 40 }\n     * ];\n     *\n     * _.pluck(characters, 'name');\n     * // => ['barney', 'fred']\n     */\n    var pluck = map;\n\n    /**\n     * Reduces a collection to a value which is the accumulated result of running\n     * each element in the collection through the callback, where each successive\n     * callback execution consumes the return value of the previous execution. If\n     * `accumulator` is not provided the first element of the collection will be\n     * used as the initial `accumulator` value. The callback is bound to `thisArg`\n     * and invoked with four arguments; (accumulator, value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @alias foldl, inject\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} [callback=identity] The function called per iteration.\n     * @param {*} [accumulator] Initial value of the accumulator.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {*} Returns the accumulated value.\n     * @example\n     *\n     * var sum = _.reduce([1, 2, 3], function(sum, num) {\n     *   return sum + num;\n     * });\n     * // => 6\n     *\n     * var mapped = _.reduce({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {\n     *   result[key] = num * 3;\n     *   return result;\n     * }, {});\n     * // => { 'a': 3, 'b': 6, 'c': 9 }\n     */\n    function reduce(collection, callback, accumulator, thisArg) {\n      var noaccum = arguments.length < 3;\n      callback = lodash.createCallback(callback, thisArg, 4);\n\n      if (isArray(collection)) {\n        var index = -1,\n            length = collection.length;\n\n        if (noaccum) {\n          accumulator = collection[++index];\n        }\n        while (++index < length) {\n          accumulator = callback(accumulator, collection[index], index, collection);\n        }\n      } else {\n        baseEach(collection, function(value, index, collection) {\n          accumulator = noaccum\n            ? (noaccum = false, value)\n            : callback(accumulator, value, index, collection)\n        });\n      }\n      return accumulator;\n    }\n\n    /**\n     * This method is like `_.reduce` except that it iterates over elements\n     * of a `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @alias foldr\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} [callback=identity] The function called per iteration.\n     * @param {*} [accumulator] Initial value of the accumulator.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {*} Returns the accumulated value.\n     * @example\n     *\n     * var list = [[0, 1], [2, 3], [4, 5]];\n     * var flat = _.reduceRight(list, function(a, b) { return a.concat(b); }, []);\n     * // => [4, 5, 2, 3, 0, 1]\n     */\n    function reduceRight(collection, callback, accumulator, thisArg) {\n      var noaccum = arguments.length < 3;\n      callback = lodash.createCallback(callback, thisArg, 4);\n      forEachRight(collection, function(value, index, collection) {\n        accumulator = noaccum\n          ? (noaccum = false, value)\n          : callback(accumulator, value, index, collection);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The opposite of `_.filter` this method returns the elements of a\n     * collection that the callback does **not** return truey for.\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a new array of elements that failed the callback check.\n     * @example\n     *\n     * var odds = _.reject([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });\n     * // => [1, 3, 5]\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36, 'blocked': false },\n     *   { 'name': 'fred',   'age': 40, 'blocked': true }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.reject(characters, 'blocked');\n     * // => [{ 'name': 'barney', 'age': 36, 'blocked': false }]\n     *\n     * // using \"_.where\" callback shorthand\n     * _.reject(characters, { 'age': 36 });\n     * // => [{ 'name': 'fred', 'age': 40, 'blocked': true }]\n     */\n    function reject(collection, callback, thisArg) {\n      callback = lodash.createCallback(callback, thisArg, 3);\n      return filter(collection, function(value, index, collection) {\n        return !callback(value, index, collection);\n      });\n    }\n\n    /**\n     * Retrieves a random element or `n` random elements from a collection.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to sample.\n     * @param {number} [n] The number of elements to sample.\n     * @param- {Object} [guard] Allows working with functions like `_.map`\n     *  without using their `index` arguments as `n`.\n     * @returns {Array} Returns the random sample(s) of `collection`.\n     * @example\n     *\n     * _.sample([1, 2, 3, 4]);\n     * // => 2\n     *\n     * _.sample([1, 2, 3, 4], 2);\n     * // => [3, 1]\n     */\n    function sample(collection, n, guard) {\n      if (collection && typeof collection.length != 'number') {\n        collection = values(collection);\n      } else if (support.unindexedChars && isString(collection)) {\n        collection = collection.split('');\n      }\n      if (n == null || guard) {\n        return collection ? collection[baseRandom(0, collection.length - 1)] : undefined;\n      }\n      var result = shuffle(collection);\n      result.length = nativeMin(nativeMax(0, n), result.length);\n      return result;\n    }\n\n    /**\n     * Creates an array of shuffled values, using a version of the Fisher-Yates\n     * shuffle. See http://en.wikipedia.org/wiki/Fisher-Yates_shuffle.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to shuffle.\n     * @returns {Array} Returns a new shuffled collection.\n     * @example\n     *\n     * _.shuffle([1, 2, 3, 4, 5, 6]);\n     * // => [4, 1, 6, 3, 5, 2]\n     */\n    function shuffle(collection) {\n      var index = -1,\n          length = collection ? collection.length : 0,\n          result = Array(typeof length == 'number' ? length : 0);\n\n      forEach(collection, function(value) {\n        var rand = baseRandom(0, ++index);\n        result[index] = result[rand];\n        result[rand] = value;\n      });\n      return result;\n    }\n\n    /**\n     * Gets the size of the `collection` by returning `collection.length` for arrays\n     * and array-like objects or the number of own enumerable properties for objects.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @returns {number} Returns `collection.length` or number of own enumerable properties.\n     * @example\n     *\n     * _.size([1, 2]);\n     * // => 2\n     *\n     * _.size({ 'one': 1, 'two': 2, 'three': 3 });\n     * // => 3\n     *\n     * _.size('pebbles');\n     * // => 7\n     */\n    function size(collection) {\n      var length = collection ? collection.length : 0;\n      return typeof length == 'number' ? length : keys(collection).length;\n    }\n\n    /**\n     * Checks if the callback returns a truey value for **any** element of a\n     * collection. The function returns as soon as it finds a passing value and\n     * does not iterate over the entire collection. The callback is bound to\n     * `thisArg` and invoked with three arguments; (value, index|key, collection).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias any\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {boolean} Returns `true` if any element passed the callback check,\n     *  else `false`.\n     * @example\n     *\n     * _.some([null, 0, 'yes', false], Boolean);\n     * // => true\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36, 'blocked': false },\n     *   { 'name': 'fred',   'age': 40, 'blocked': true }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.some(characters, 'blocked');\n     * // => true\n     *\n     * // using \"_.where\" callback shorthand\n     * _.some(characters, { 'age': 1 });\n     * // => false\n     */\n    function some(collection, callback, thisArg) {\n      var result;\n      callback = lodash.createCallback(callback, thisArg, 3);\n\n      if (isArray(collection)) {\n        var index = -1,\n            length = collection.length;\n\n        while (++index < length) {\n          if ((result = callback(collection[index], index, collection))) {\n            break;\n          }\n        }\n      } else {\n        baseEach(collection, function(value, index, collection) {\n          return !(result = callback(value, index, collection));\n        });\n      }\n      return !!result;\n    }\n\n    /**\n     * Creates an array of elements, sorted in ascending order by the results of\n     * running each element in a collection through the callback. This method\n     * performs a stable sort, that is, it will preserve the original sort order\n     * of equal elements. The callback is bound to `thisArg` and invoked with\n     * three arguments; (value, index|key, collection).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an array of property names is provided for `callback` the collection\n     * will be sorted by each property value.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Array|Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a new array of sorted elements.\n     * @example\n     *\n     * _.sortBy([1, 2, 3], function(num) { return Math.sin(num); });\n     * // => [3, 1, 2]\n     *\n     * _.sortBy([1, 2, 3], function(num) { return this.sin(num); }, Math);\n     * // => [3, 1, 2]\n     *\n     * var characters = [\n     *   { 'name': 'barney',  'age': 36 },\n     *   { 'name': 'fred',    'age': 40 },\n     *   { 'name': 'barney',  'age': 26 },\n     *   { 'name': 'fred',    'age': 30 }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.map(_.sortBy(characters, 'age'), _.values);\n     * // => [['barney', 26], ['fred', 30], ['barney', 36], ['fred', 40]]\n     *\n     * // sorting by multiple properties\n     * _.map(_.sortBy(characters, ['name', 'age']), _.values);\n     * // = > [['barney', 26], ['barney', 36], ['fred', 30], ['fred', 40]]\n     */\n    function sortBy(collection, callback, thisArg) {\n      var index = -1,\n          isArr = isArray(callback),\n          length = collection ? collection.length : 0,\n          result = Array(typeof length == 'number' ? length : 0);\n\n      if (!isArr) {\n        callback = lodash.createCallback(callback, thisArg, 3);\n      }\n      forEach(collection, function(value, key, collection) {\n        var object = result[++index] = getObject();\n        if (isArr) {\n          object.criteria = map(callback, function(key) { return value[key]; });\n        } else {\n          (object.criteria = getArray())[0] = callback(value, key, collection);\n        }\n        object.index = index;\n        object.value = value;\n      });\n\n      length = result.length;\n      result.sort(compareAscending);\n      while (length--) {\n        var object = result[length];\n        result[length] = object.value;\n        if (!isArr) {\n          releaseArray(object.criteria);\n        }\n        releaseObject(object);\n      }\n      return result;\n    }\n\n    /**\n     * Converts the `collection` to an array.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to convert.\n     * @returns {Array} Returns the new converted array.\n     * @example\n     *\n     * (function() { return _.toArray(arguments).slice(1); })(1, 2, 3, 4);\n     * // => [2, 3, 4]\n     */\n    function toArray(collection) {\n      if (collection && typeof collection.length == 'number') {\n        return (support.unindexedChars && isString(collection))\n          ? collection.split('')\n          : slice(collection);\n      }\n      return values(collection);\n    }\n\n    /**\n     * Performs a deep comparison of each element in a `collection` to the given\n     * `properties` object, returning an array of all elements that have equivalent\n     * property values.\n     *\n     * @static\n     * @memberOf _\n     * @type Function\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Object} props The object of property values to filter by.\n     * @returns {Array} Returns a new array of elements that have the given properties.\n     * @example\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36, 'pets': ['hoppy'] },\n     *   { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }\n     * ];\n     *\n     * _.where(characters, { 'age': 36 });\n     * // => [{ 'name': 'barney', 'age': 36, 'pets': ['hoppy'] }]\n     *\n     * _.where(characters, { 'pets': ['dino'] });\n     * // => [{ 'name': 'fred', 'age': 40, 'pets': ['baby puss', 'dino'] }]\n     */\n    var where = filter;\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array with all falsey values removed. The values `false`, `null`,\n     * `0`, `\"\"`, `undefined`, and `NaN` are all falsey.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to compact.\n     * @returns {Array} Returns a new array of filtered values.\n     * @example\n     *\n     * _.compact([0, 1, false, 2, '', 3]);\n     * // => [1, 2, 3]\n     */\n    function compact(array) {\n      var index = -1,\n          length = array ? array.length : 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index];\n        if (value) {\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array excluding all values of the provided arrays using strict\n     * equality for comparisons, i.e. `===`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to process.\n     * @param {...Array} [values] The arrays of values to exclude.\n     * @returns {Array} Returns a new array of filtered values.\n     * @example\n     *\n     * _.difference([1, 2, 3, 4, 5], [5, 2, 10]);\n     * // => [1, 3, 4]\n     */\n    function difference(array) {\n      return baseDifference(array, baseFlatten(arguments, true, true, 1));\n    }\n\n    /**\n     * This method is like `_.find` except that it returns the index of the first\n     * element that passes the callback check, instead of the element itself.\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to search.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var characters = [\n     *   { 'name': 'barney',  'age': 36, 'blocked': false },\n     *   { 'name': 'fred',    'age': 40, 'blocked': true },\n     *   { 'name': 'pebbles', 'age': 1,  'blocked': false }\n     * ];\n     *\n     * _.findIndex(characters, function(chr) {\n     *   return chr.age < 20;\n     * });\n     * // => 2\n     *\n     * // using \"_.where\" callback shorthand\n     * _.findIndex(characters, { 'age': 36 });\n     * // => 0\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.findIndex(characters, 'blocked');\n     * // => 1\n     */\n    function findIndex(array, callback, thisArg) {\n      var index = -1,\n          length = array ? array.length : 0;\n\n      callback = lodash.createCallback(callback, thisArg, 3);\n      while (++index < length) {\n        if (callback(array[index], index, array)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.findIndex` except that it iterates over elements\n     * of a `collection` from right to left.\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to search.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var characters = [\n     *   { 'name': 'barney',  'age': 36, 'blocked': true },\n     *   { 'name': 'fred',    'age': 40, 'blocked': false },\n     *   { 'name': 'pebbles', 'age': 1,  'blocked': true }\n     * ];\n     *\n     * _.findLastIndex(characters, function(chr) {\n     *   return chr.age > 30;\n     * });\n     * // => 1\n     *\n     * // using \"_.where\" callback shorthand\n     * _.findLastIndex(characters, { 'age': 36 });\n     * // => 0\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.findLastIndex(characters, 'blocked');\n     * // => 2\n     */\n    function findLastIndex(array, callback, thisArg) {\n      var length = array ? array.length : 0;\n      callback = lodash.createCallback(callback, thisArg, 3);\n      while (length--) {\n        if (callback(array[length], length, array)) {\n          return length;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * Gets the first element or first `n` elements of an array. If a callback\n     * is provided elements at the beginning of the array are returned as long\n     * as the callback returns truey. The callback is bound to `thisArg` and\n     * invoked with three arguments; (value, index, array).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias head, take\n     * @category Arrays\n     * @param {Array} array The array to query.\n     * @param {Function|Object|number|string} [callback] The function called\n     *  per element or the number of elements to return. If a property name or\n     *  object is provided it will be used to create a \"_.pluck\" or \"_.where\"\n     *  style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {*} Returns the first element(s) of `array`.\n     * @example\n     *\n     * _.first([1, 2, 3]);\n     * // => 1\n     *\n     * _.first([1, 2, 3], 2);\n     * // => [1, 2]\n     *\n     * _.first([1, 2, 3], function(num) {\n     *   return num < 3;\n     * });\n     * // => [1, 2]\n     *\n     * var characters = [\n     *   { 'name': 'barney',  'blocked': true,  'employer': 'slate' },\n     *   { 'name': 'fred',    'blocked': false, 'employer': 'slate' },\n     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.first(characters, 'blocked');\n     * // => [{ 'name': 'barney', 'blocked': true, 'employer': 'slate' }]\n     *\n     * // using \"_.where\" callback shorthand\n     * _.pluck(_.first(characters, { 'employer': 'slate' }), 'name');\n     * // => ['barney', 'fred']\n     */\n    function first(array, callback, thisArg) {\n      var n = 0,\n          length = array ? array.length : 0;\n\n      if (typeof callback != 'number' && callback != null) {\n        var index = -1;\n        callback = lodash.createCallback(callback, thisArg, 3);\n        while (++index < length && callback(array[index], index, array)) {\n          n++;\n        }\n      } else {\n        n = callback;\n        if (n == null || thisArg) {\n          return array ? array[0] : undefined;\n        }\n      }\n      return slice(array, 0, nativeMin(nativeMax(0, n), length));\n    }\n\n    /**\n     * Flattens a nested array (the nesting can be to any depth). If `isShallow`\n     * is truey, the array will only be flattened a single level. If a callback\n     * is provided each element of the array is passed through the callback before\n     * flattening. The callback is bound to `thisArg` and invoked with three\n     * arguments; (value, index, array).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to flatten.\n     * @param {boolean} [isShallow=false] A flag to restrict flattening to a single level.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a new flattened array.\n     * @example\n     *\n     * _.flatten([1, [2], [3, [[4]]]]);\n     * // => [1, 2, 3, 4];\n     *\n     * _.flatten([1, [2], [3, [[4]]]], true);\n     * // => [1, 2, 3, [[4]]];\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 30, 'pets': ['hoppy'] },\n     *   { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.flatten(characters, 'pets');\n     * // => ['hoppy', 'baby puss', 'dino']\n     */\n    function flatten(array, isShallow, callback, thisArg) {\n      // juggle arguments\n      if (typeof isShallow != 'boolean' && isShallow != null) {\n        thisArg = callback;\n        callback = (typeof isShallow != 'function' && thisArg && thisArg[isShallow] === array) ? null : isShallow;\n        isShallow = false;\n      }\n      if (callback != null) {\n        array = map(array, callback, thisArg);\n      }\n      return baseFlatten(array, isShallow);\n    }\n\n    /**\n     * Gets the index at which the first occurrence of `value` is found using\n     * strict equality for comparisons, i.e. `===`. If the array is already sorted\n     * providing `true` for `fromIndex` will run a faster binary search.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to search.\n     * @param {*} value The value to search for.\n     * @param {boolean|number} [fromIndex=0] The index to search from or `true`\n     *  to perform a binary search on a sorted array.\n     * @returns {number} Returns the index of the matched value or `-1`.\n     * @example\n     *\n     * _.indexOf([1, 2, 3, 1, 2, 3], 2);\n     * // => 1\n     *\n     * _.indexOf([1, 2, 3, 1, 2, 3], 2, 3);\n     * // => 4\n     *\n     * _.indexOf([1, 1, 2, 2, 3, 3], 2, true);\n     * // => 2\n     */\n    function indexOf(array, value, fromIndex) {\n      if (typeof fromIndex == 'number') {\n        var length = array ? array.length : 0;\n        fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex || 0);\n      } else if (fromIndex) {\n        var index = sortedIndex(array, value);\n        return array[index] === value ? index : -1;\n      }\n      return baseIndexOf(array, value, fromIndex);\n    }\n\n    /**\n     * Gets all but the last element or last `n` elements of an array. If a\n     * callback is provided elements at the end of the array are excluded from\n     * the result as long as the callback returns truey. The callback is bound\n     * to `thisArg` and invoked with three arguments; (value, index, array).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to query.\n     * @param {Function|Object|number|string} [callback=1] The function called\n     *  per element or the number of elements to exclude. If a property name or\n     *  object is provided it will be used to create a \"_.pluck\" or \"_.where\"\n     *  style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a slice of `array`.\n     * @example\n     *\n     * _.initial([1, 2, 3]);\n     * // => [1, 2]\n     *\n     * _.initial([1, 2, 3], 2);\n     * // => [1]\n     *\n     * _.initial([1, 2, 3], function(num) {\n     *   return num > 1;\n     * });\n     * // => [1]\n     *\n     * var characters = [\n     *   { 'name': 'barney',  'blocked': false, 'employer': 'slate' },\n     *   { 'name': 'fred',    'blocked': true,  'employer': 'slate' },\n     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.initial(characters, 'blocked');\n     * // => [{ 'name': 'barney',  'blocked': false, 'employer': 'slate' }]\n     *\n     * // using \"_.where\" callback shorthand\n     * _.pluck(_.initial(characters, { 'employer': 'na' }), 'name');\n     * // => ['barney', 'fred']\n     */\n    function initial(array, callback, thisArg) {\n      var n = 0,\n          length = array ? array.length : 0;\n\n      if (typeof callback != 'number' && callback != null) {\n        var index = length;\n        callback = lodash.createCallback(callback, thisArg, 3);\n        while (index-- && callback(array[index], index, array)) {\n          n++;\n        }\n      } else {\n        n = (callback == null || thisArg) ? 1 : callback || n;\n      }\n      return slice(array, 0, nativeMin(nativeMax(0, length - n), length));\n    }\n\n    /**\n     * Creates an array of unique values present in all provided arrays using\n     * strict equality for comparisons, i.e. `===`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {...Array} [array] The arrays to inspect.\n     * @returns {Array} Returns an array of shared values.\n     * @example\n     *\n     * _.intersection([1, 2, 3], [5, 2, 1, 4], [2, 1]);\n     * // => [1, 2]\n     */\n    function intersection() {\n      var args = [],\n          argsIndex = -1,\n          argsLength = arguments.length,\n          caches = getArray(),\n          indexOf = getIndexOf(),\n          trustIndexOf = indexOf === baseIndexOf,\n          seen = getArray();\n\n      while (++argsIndex < argsLength) {\n        var value = arguments[argsIndex];\n        if (isArray(value) || isArguments(value)) {\n          args.push(value);\n          caches.push(trustIndexOf && value.length >= largeArraySize &&\n            createCache(argsIndex ? args[argsIndex] : seen));\n        }\n      }\n      var array = args[0],\n          index = -1,\n          length = array ? array.length : 0,\n          result = [];\n\n      outer:\n      while (++index < length) {\n        var cache = caches[0];\n        value = array[index];\n\n        if ((cache ? cacheIndexOf(cache, value) : indexOf(seen, value)) < 0) {\n          argsIndex = argsLength;\n          (cache || seen).push(value);\n          while (--argsIndex) {\n            cache = caches[argsIndex];\n            if ((cache ? cacheIndexOf(cache, value) : indexOf(args[argsIndex], value)) < 0) {\n              continue outer;\n            }\n          }\n          result.push(value);\n        }\n      }\n      while (argsLength--) {\n        cache = caches[argsLength];\n        if (cache) {\n          releaseObject(cache);\n        }\n      }\n      releaseArray(caches);\n      releaseArray(seen);\n      return result;\n    }\n\n    /**\n     * Gets the last element or last `n` elements of an array. If a callback is\n     * provided elements at the end of the array are returned as long as the\n     * callback returns truey. The callback is bound to `thisArg` and invoked\n     * with three arguments; (value, index, array).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to query.\n     * @param {Function|Object|number|string} [callback] The function called\n     *  per element or the number of elements to return. If a property name or\n     *  object is provided it will be used to create a \"_.pluck\" or \"_.where\"\n     *  style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {*} Returns the last element(s) of `array`.\n     * @example\n     *\n     * _.last([1, 2, 3]);\n     * // => 3\n     *\n     * _.last([1, 2, 3], 2);\n     * // => [2, 3]\n     *\n     * _.last([1, 2, 3], function(num) {\n     *   return num > 1;\n     * });\n     * // => [2, 3]\n     *\n     * var characters = [\n     *   { 'name': 'barney',  'blocked': false, 'employer': 'slate' },\n     *   { 'name': 'fred',    'blocked': true,  'employer': 'slate' },\n     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.pluck(_.last(characters, 'blocked'), 'name');\n     * // => ['fred', 'pebbles']\n     *\n     * // using \"_.where\" callback shorthand\n     * _.last(characters, { 'employer': 'na' });\n     * // => [{ 'name': 'pebbles', 'blocked': true, 'employer': 'na' }]\n     */\n    function last(array, callback, thisArg) {\n      var n = 0,\n          length = array ? array.length : 0;\n\n      if (typeof callback != 'number' && callback != null) {\n        var index = length;\n        callback = lodash.createCallback(callback, thisArg, 3);\n        while (index-- && callback(array[index], index, array)) {\n          n++;\n        }\n      } else {\n        n = callback;\n        if (n == null || thisArg) {\n          return array ? array[length - 1] : undefined;\n        }\n      }\n      return slice(array, nativeMax(0, length - n));\n    }\n\n    /**\n     * Gets the index at which the last occurrence of `value` is found using strict\n     * equality for comparisons, i.e. `===`. If `fromIndex` is negative, it is used\n     * as the offset from the end of the collection.\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to search.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the matched value or `-1`.\n     * @example\n     *\n     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2);\n     * // => 4\n     *\n     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2, 3);\n     * // => 1\n     */\n    function lastIndexOf(array, value, fromIndex) {\n      var index = array ? array.length : 0;\n      if (typeof fromIndex == 'number') {\n        index = (fromIndex < 0 ? nativeMax(0, index + fromIndex) : nativeMin(fromIndex, index - 1)) + 1;\n      }\n      while (index--) {\n        if (array[index] === value) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * Removes all provided values from the given array using strict equality for\n     * comparisons, i.e. `===`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to modify.\n     * @param {...*} [value] The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3, 1, 2, 3];\n     * _.pull(array, 2, 3);\n     * console.log(array);\n     * // => [1, 1]\n     */\n    function pull(array) {\n      var args = arguments,\n          argsIndex = 0,\n          argsLength = args.length,\n          length = array ? array.length : 0;\n\n      while (++argsIndex < argsLength) {\n        var index = -1,\n            value = args[argsIndex];\n        while (++index < length) {\n          if (array[index] === value) {\n            splice.call(array, index--, 1);\n            length--;\n          }\n        }\n      }\n      return array;\n    }\n\n    /**\n     * Creates an array of numbers (positive and/or negative) progressing from\n     * `start` up to but not including `end`. If `start` is less than `stop` a\n     * zero-length range is created unless a negative `step` is specified.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns a new range array.\n     * @example\n     *\n     * _.range(4);\n     * // => [0, 1, 2, 3]\n     *\n     * _.range(1, 5);\n     * // => [1, 2, 3, 4]\n     *\n     * _.range(0, 20, 5);\n     * // => [0, 5, 10, 15]\n     *\n     * _.range(0, -4, -1);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.range(0);\n     * // => []\n     */\n    function range(start, end, step) {\n      start = +start || 0;\n      step = typeof step == 'number' ? step : (+step || 1);\n\n      if (end == null) {\n        end = start;\n        start = 0;\n      }\n      // use `Array(length)` so engines like Chakra and V8 avoid slower modes\n      // http://youtu.be/XAqIpGU8ZZk#t=17m25s\n      var index = -1,\n          length = nativeMax(0, ceil((end - start) / (step || 1))),\n          result = Array(length);\n\n      while (++index < length) {\n        result[index] = start;\n        start += step;\n      }\n      return result;\n    }\n\n    /**\n     * Removes all elements from an array that the callback returns truey for\n     * and returns an array of removed elements. The callback is bound to `thisArg`\n     * and invoked with three arguments; (value, index, array).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to modify.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a new array of removed elements.\n     * @example\n     *\n     * var array = [1, 2, 3, 4, 5, 6];\n     * var evens = _.remove(array, function(num) { return num % 2 == 0; });\n     *\n     * console.log(array);\n     * // => [1, 3, 5]\n     *\n     * console.log(evens);\n     * // => [2, 4, 6]\n     */\n    function remove(array, callback, thisArg) {\n      var index = -1,\n          length = array ? array.length : 0,\n          result = [];\n\n      callback = lodash.createCallback(callback, thisArg, 3);\n      while (++index < length) {\n        var value = array[index];\n        if (callback(value, index, array)) {\n          result.push(value);\n          splice.call(array, index--, 1);\n          length--;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The opposite of `_.initial` this method gets all but the first element or\n     * first `n` elements of an array. If a callback function is provided elements\n     * at the beginning of the array are excluded from the result as long as the\n     * callback returns truey. The callback is bound to `thisArg` and invoked\n     * with three arguments; (value, index, array).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias drop, tail\n     * @category Arrays\n     * @param {Array} array The array to query.\n     * @param {Function|Object|number|string} [callback=1] The function called\n     *  per element or the number of elements to exclude. If a property name or\n     *  object is provided it will be used to create a \"_.pluck\" or \"_.where\"\n     *  style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a slice of `array`.\n     * @example\n     *\n     * _.rest([1, 2, 3]);\n     * // => [2, 3]\n     *\n     * _.rest([1, 2, 3], 2);\n     * // => [3]\n     *\n     * _.rest([1, 2, 3], function(num) {\n     *   return num < 3;\n     * });\n     * // => [3]\n     *\n     * var characters = [\n     *   { 'name': 'barney',  'blocked': true,  'employer': 'slate' },\n     *   { 'name': 'fred',    'blocked': false,  'employer': 'slate' },\n     *   { 'name': 'pebbles', 'blocked': true, 'employer': 'na' }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.pluck(_.rest(characters, 'blocked'), 'name');\n     * // => ['fred', 'pebbles']\n     *\n     * // using \"_.where\" callback shorthand\n     * _.rest(characters, { 'employer': 'slate' });\n     * // => [{ 'name': 'pebbles', 'blocked': true, 'employer': 'na' }]\n     */\n    function rest(array, callback, thisArg) {\n      if (typeof callback != 'number' && callback != null) {\n        var n = 0,\n            index = -1,\n            length = array ? array.length : 0;\n\n        callback = lodash.createCallback(callback, thisArg, 3);\n        while (++index < length && callback(array[index], index, array)) {\n          n++;\n        }\n      } else {\n        n = (callback == null || thisArg) ? 1 : nativeMax(0, callback);\n      }\n      return slice(array, n);\n    }\n\n    /**\n     * Uses a binary search to determine the smallest index at which a value\n     * should be inserted into a given sorted array in order to maintain the sort\n     * order of the array. If a callback is provided it will be executed for\n     * `value` and each element of `array` to compute their sort ranking. The\n     * callback is bound to `thisArg` and invoked with one argument; (value).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedIndex([20, 30, 50], 40);\n     * // => 2\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.sortedIndex([{ 'x': 20 }, { 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');\n     * // => 2\n     *\n     * var dict = {\n     *   'wordToNumber': { 'twenty': 20, 'thirty': 30, 'fourty': 40, 'fifty': 50 }\n     * };\n     *\n     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {\n     *   return dict.wordToNumber[word];\n     * });\n     * // => 2\n     *\n     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {\n     *   return this.wordToNumber[word];\n     * }, dict);\n     * // => 2\n     */\n    function sortedIndex(array, value, callback, thisArg) {\n      var low = 0,\n          high = array ? array.length : low;\n\n      // explicitly reference `identity` for better inlining in Firefox\n      callback = callback ? lodash.createCallback(callback, thisArg, 1) : identity;\n      value = callback(value);\n\n      while (low < high) {\n        var mid = (low + high) >>> 1;\n        (callback(array[mid]) < value)\n          ? low = mid + 1\n          : high = mid;\n      }\n      return low;\n    }\n\n    /**\n     * Creates an array of unique values, in order, of the provided arrays using\n     * strict equality for comparisons, i.e. `===`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {...Array} [array] The arrays to inspect.\n     * @returns {Array} Returns an array of combined values.\n     * @example\n     *\n     * _.union([1, 2, 3], [5, 2, 1, 4], [2, 1]);\n     * // => [1, 2, 3, 5, 4]\n     */\n    function union() {\n      return baseUniq(baseFlatten(arguments, true, true));\n    }\n\n    /**\n     * Creates a duplicate-value-free version of an array using strict equality\n     * for comparisons, i.e. `===`. If the array is sorted, providing\n     * `true` for `isSorted` will use a faster algorithm. If a callback is provided\n     * each element of `array` is passed through the callback before uniqueness\n     * is computed. The callback is bound to `thisArg` and invoked with three\n     * arguments; (value, index, array).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias unique\n     * @category Arrays\n     * @param {Array} array The array to process.\n     * @param {boolean} [isSorted=false] A flag to indicate that `array` is sorted.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a duplicate-value-free array.\n     * @example\n     *\n     * _.uniq([1, 2, 1, 3, 1]);\n     * // => [1, 2, 3]\n     *\n     * _.uniq([1, 1, 2, 2, 3], true);\n     * // => [1, 2, 3]\n     *\n     * _.uniq(['A', 'b', 'C', 'a', 'B', 'c'], function(letter) { return letter.toLowerCase(); });\n     * // => ['A', 'b', 'C']\n     *\n     * _.uniq([1, 2.5, 3, 1.5, 2, 3.5], function(num) { return this.floor(num); }, Math);\n     * // => [1, 2.5, 3]\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    function uniq(array, isSorted, callback, thisArg) {\n      // juggle arguments\n      if (typeof isSorted != 'boolean' && isSorted != null) {\n        thisArg = callback;\n        callback = (typeof isSorted != 'function' && thisArg && thisArg[isSorted] === array) ? null : isSorted;\n        isSorted = false;\n      }\n      if (callback != null) {\n        callback = lodash.createCallback(callback, thisArg, 3);\n      }\n      return baseUniq(array, isSorted, callback);\n    }\n\n    /**\n     * Creates an array excluding all provided values using strict equality for\n     * comparisons, i.e. `===`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to filter.\n     * @param {...*} [value] The values to exclude.\n     * @returns {Array} Returns a new array of filtered values.\n     * @example\n     *\n     * _.without([1, 2, 1, 0, 3, 1, 4], 0, 1);\n     * // => [2, 3, 4]\n     */\n    function without(array) {\n      return baseDifference(array, slice(arguments, 1));\n    }\n\n    /**\n     * Creates an array that is the symmetric difference of the provided arrays.\n     * See http://en.wikipedia.org/wiki/Symmetric_difference.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {...Array} [array] The arrays to inspect.\n     * @returns {Array} Returns an array of values.\n     * @example\n     *\n     * _.xor([1, 2, 3], [5, 2, 1, 4]);\n     * // => [3, 5, 4]\n     *\n     * _.xor([1, 2, 5], [2, 3, 5], [3, 4, 5]);\n     * // => [1, 4, 5]\n     */\n    function xor() {\n      var index = -1,\n          length = arguments.length;\n\n      while (++index < length) {\n        var array = arguments[index];\n        if (isArray(array) || isArguments(array)) {\n          var result = result\n            ? baseUniq(baseDifference(result, array).concat(baseDifference(array, result)))\n            : array;\n        }\n      }\n      return result || [];\n    }\n\n    /**\n     * Creates an array of grouped elements, the first of which contains the first\n     * elements of the given arrays, the second of which contains the second\n     * elements of the given arrays, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @alias unzip\n     * @category Arrays\n     * @param {...Array} [array] Arrays to process.\n     * @returns {Array} Returns a new array of grouped elements.\n     * @example\n     *\n     * _.zip(['fred', 'barney'], [30, 40], [true, false]);\n     * // => [['fred', 30, true], ['barney', 40, false]]\n     */\n    function zip() {\n      var array = arguments.length > 1 ? arguments : arguments[0],\n          index = -1,\n          length = array ? max(pluck(array, 'length')) : 0,\n          result = Array(length < 0 ? 0 : length);\n\n      while (++index < length) {\n        result[index] = pluck(array, index);\n      }\n      return result;\n    }\n\n    /**\n     * Creates an object composed from arrays of `keys` and `values`. Provide\n     * either a single two dimensional array, i.e. `[[key1, value1], [key2, value2]]`\n     * or two arrays, one of `keys` and one of corresponding `values`.\n     *\n     * @static\n     * @memberOf _\n     * @alias object\n     * @category Arrays\n     * @param {Array} keys The array of keys.\n     * @param {Array} [values=[]] The array of values.\n     * @returns {Object} Returns an object composed of the given keys and\n     *  corresponding values.\n     * @example\n     *\n     * _.zipObject(['fred', 'barney'], [30, 40]);\n     * // => { 'fred': 30, 'barney': 40 }\n     */\n    function zipObject(keys, values) {\n      var index = -1,\n          length = keys ? keys.length : 0,\n          result = {};\n\n      if (!values && length && !isArray(keys[0])) {\n        values = [];\n      }\n      while (++index < length) {\n        var key = keys[index];\n        if (values) {\n          result[key] = values[index];\n        } else if (key) {\n          result[key[0]] = key[1];\n        }\n      }\n      return result;\n    }\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * Creates a function that executes `func`, with  the `this` binding and\n     * arguments of the created function, only after being called `n` times.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {number} n The number of times the function must be called before\n     *  `func` is executed.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var saves = ['profile', 'settings'];\n     *\n     * var done = _.after(saves.length, function() {\n     *   console.log('Done saving!');\n     * });\n     *\n     * _.forEach(saves, function(type) {\n     *   asyncSave({ 'type': type, 'complete': done });\n     * });\n     * // => logs 'Done saving!', after all saves have completed\n     */\n    function after(n, func) {\n      if (!isFunction(func)) {\n        throw new TypeError;\n      }\n      return function() {\n        if (--n < 1) {\n          return func.apply(this, arguments);\n        }\n      };\n    }\n\n    /**\n     * Creates a function that, when called, invokes `func` with the `this`\n     * binding of `thisArg` and prepends any additional `bind` arguments to those\n     * provided to the bound function.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to bind.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {...*} [arg] Arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * var func = function(greeting) {\n     *   return greeting + ' ' + this.name;\n     * };\n     *\n     * func = _.bind(func, { 'name': 'fred' }, 'hi');\n     * func();\n     * // => 'hi fred'\n     */\n    function bind(func, thisArg) {\n      return arguments.length > 2\n        ? createWrapper(func, 17, slice(arguments, 2), null, thisArg)\n        : createWrapper(func, 1, null, null, thisArg);\n    }\n\n    /**\n     * Binds methods of an object to the object itself, overwriting the existing\n     * method. Method names may be specified as individual arguments or as arrays\n     * of method names. If no method names are provided all the function properties\n     * of `object` will be bound.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Object} object The object to bind and assign the bound methods to.\n     * @param {...string} [methodName] The object method names to\n     *  bind, specified as individual method names or arrays of method names.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var view = {\n     *   'label': 'docs',\n     *   'onClick': function() { console.log('clicked ' + this.label); }\n     * };\n     *\n     * _.bindAll(view);\n     * jQuery('#docs').on('click', view.onClick);\n     * // => logs 'clicked docs', when the button is clicked\n     */\n    function bindAll(object) {\n      var funcs = arguments.length > 1 ? baseFlatten(arguments, true, false, 1) : functions(object),\n          index = -1,\n          length = funcs.length;\n\n      while (++index < length) {\n        var key = funcs[index];\n        object[key] = createWrapper(object[key], 1, null, null, object);\n      }\n      return object;\n    }\n\n    /**\n     * Creates a function that, when called, invokes the method at `object[key]`\n     * and prepends any additional `bindKey` arguments to those provided to the bound\n     * function. This method differs from `_.bind` by allowing bound functions to\n     * reference methods that will be redefined or don't yet exist.\n     * See http://michaux.ca/articles/lazy-function-definition-pattern.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Object} object The object the method belongs to.\n     * @param {string} key The key of the method.\n     * @param {...*} [arg] Arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * var object = {\n     *   'name': 'fred',\n     *   'greet': function(greeting) {\n     *     return greeting + ' ' + this.name;\n     *   }\n     * };\n     *\n     * var func = _.bindKey(object, 'greet', 'hi');\n     * func();\n     * // => 'hi fred'\n     *\n     * object.greet = function(greeting) {\n     *   return greeting + 'ya ' + this.name + '!';\n     * };\n     *\n     * func();\n     * // => 'hiya fred!'\n     */\n    function bindKey(object, key) {\n      return arguments.length > 2\n        ? createWrapper(key, 19, slice(arguments, 2), null, object)\n        : createWrapper(key, 3, null, null, object);\n    }\n\n    /**\n     * Creates a function that is the composition of the provided functions,\n     * where each function consumes the return value of the function that follows.\n     * For example, composing the functions `f()`, `g()`, and `h()` produces `f(g(h()))`.\n     * Each function is executed with the `this` binding of the composed function.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {...Function} [func] Functions to compose.\n     * @returns {Function} Returns the new composed function.\n     * @example\n     *\n     * var realNameMap = {\n     *   'pebbles': 'penelope'\n     * };\n     *\n     * var format = function(name) {\n     *   name = realNameMap[name.toLowerCase()] || name;\n     *   return name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();\n     * };\n     *\n     * var greet = function(formatted) {\n     *   return 'Hiya ' + formatted + '!';\n     * };\n     *\n     * var welcome = _.compose(greet, format);\n     * welcome('pebbles');\n     * // => 'Hiya Penelope!'\n     */\n    function compose() {\n      var funcs = arguments,\n          length = funcs.length;\n\n      while (length--) {\n        if (!isFunction(funcs[length])) {\n          throw new TypeError;\n        }\n      }\n      return function() {\n        var args = arguments,\n            length = funcs.length;\n\n        while (length--) {\n          args = [funcs[length].apply(this, args)];\n        }\n        return args[0];\n      };\n    }\n\n    /**\n     * Creates a function which accepts one or more arguments of `func` that when\n     * invoked either executes `func` returning its result, if all `func` arguments\n     * have been provided, or returns a function that accepts one or more of the\n     * remaining `func` arguments, and so on. The arity of `func` can be specified\n     * if `func.length` is not sufficient.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var curried = _.curry(function(a, b, c) {\n     *   console.log(a + b + c);\n     * });\n     *\n     * curried(1)(2)(3);\n     * // => 6\n     *\n     * curried(1, 2)(3);\n     * // => 6\n     *\n     * curried(1, 2, 3);\n     * // => 6\n     */\n    function curry(func, arity) {\n      arity = typeof arity == 'number' ? arity : (+arity || func.length);\n      return createWrapper(func, 4, null, null, null, arity);\n    }\n\n    /**\n     * Creates a function that will delay the execution of `func` until after\n     * `wait` milliseconds have elapsed since the last time it was invoked.\n     * Provide an options object to indicate that `func` should be invoked on\n     * the leading and/or trailing edge of the `wait` timeout. Subsequent calls\n     * to the debounced function will return the result of the last `func` call.\n     *\n     * Note: If `leading` and `trailing` options are `true` `func` will be called\n     * on the trailing edge of the timeout only if the the debounced function is\n     * invoked more than once during the `wait` timeout.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to debounce.\n     * @param {number} wait The number of milliseconds to delay.\n     * @param {Object} [options] The options object.\n     * @param {boolean} [options.leading=false] Specify execution on the leading edge of the timeout.\n     * @param {number} [options.maxWait] The maximum time `func` is allowed to be delayed before it's called.\n     * @param {boolean} [options.trailing=true] Specify execution on the trailing edge of the timeout.\n     * @returns {Function} Returns the new debounced function.\n     * @example\n     *\n     * // avoid costly calculations while the window size is in flux\n     * var lazyLayout = _.debounce(calculateLayout, 150);\n     * jQuery(window).on('resize', lazyLayout);\n     *\n     * // execute `sendMail` when the click event is fired, debouncing subsequent calls\n     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {\n     *   'leading': true,\n     *   'trailing': false\n     * });\n     *\n     * // ensure `batchLog` is executed once after 1 second of debounced calls\n     * var source = new EventSource('/stream');\n     * source.addEventListener('message', _.debounce(batchLog, 250, {\n     *   'maxWait': 1000\n     * }, false);\n     */\n    function debounce(func, wait, options) {\n      var args,\n          maxTimeoutId,\n          result,\n          stamp,\n          thisArg,\n          timeoutId,\n          trailingCall,\n          lastCalled = 0,\n          maxWait = false,\n          trailing = true;\n\n      if (!isFunction(func)) {\n        throw new TypeError;\n      }\n      wait = nativeMax(0, wait) || 0;\n      if (options === true) {\n        var leading = true;\n        trailing = false;\n      } else if (isObject(options)) {\n        leading = options.leading;\n        maxWait = 'maxWait' in options && (nativeMax(wait, options.maxWait) || 0);\n        trailing = 'trailing' in options ? options.trailing : trailing;\n      }\n      var delayed = function() {\n        var remaining = wait - (now() - stamp);\n        if (remaining <= 0) {\n          if (maxTimeoutId) {\n            clearTimeout(maxTimeoutId);\n          }\n          var isCalled = trailingCall;\n          maxTimeoutId = timeoutId = trailingCall = undefined;\n          if (isCalled) {\n            lastCalled = now();\n            result = func.apply(thisArg, args);\n            if (!timeoutId && !maxTimeoutId) {\n              args = thisArg = null;\n            }\n          }\n        } else {\n          timeoutId = setTimeout(delayed, remaining);\n        }\n      };\n\n      var maxDelayed = function() {\n        if (timeoutId) {\n          clearTimeout(timeoutId);\n        }\n        maxTimeoutId = timeoutId = trailingCall = undefined;\n        if (trailing || (maxWait !== wait)) {\n          lastCalled = now();\n          result = func.apply(thisArg, args);\n          if (!timeoutId && !maxTimeoutId) {\n            args = thisArg = null;\n          }\n        }\n      };\n\n      return function() {\n        args = arguments;\n        stamp = now();\n        thisArg = this;\n        trailingCall = trailing && (timeoutId || !leading);\n\n        if (maxWait === false) {\n          var leadingCall = leading && !timeoutId;\n        } else {\n          if (!maxTimeoutId && !leading) {\n            lastCalled = stamp;\n          }\n          var remaining = maxWait - (stamp - lastCalled),\n              isCalled = remaining <= 0;\n\n          if (isCalled) {\n            if (maxTimeoutId) {\n              maxTimeoutId = clearTimeout(maxTimeoutId);\n            }\n            lastCalled = stamp;\n            result = func.apply(thisArg, args);\n          }\n          else if (!maxTimeoutId) {\n            maxTimeoutId = setTimeout(maxDelayed, remaining);\n          }\n        }\n        if (isCalled && timeoutId) {\n          timeoutId = clearTimeout(timeoutId);\n        }\n        else if (!timeoutId && wait !== maxWait) {\n          timeoutId = setTimeout(delayed, wait);\n        }\n        if (leadingCall) {\n          isCalled = true;\n          result = func.apply(thisArg, args);\n        }\n        if (isCalled && !timeoutId && !maxTimeoutId) {\n          args = thisArg = null;\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Defers executing the `func` function until the current call stack has cleared.\n     * Additional arguments will be provided to `func` when it is invoked.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to defer.\n     * @param {...*} [arg] Arguments to invoke the function with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.defer(function(text) { console.log(text); }, 'deferred');\n     * // logs 'deferred' after one or more milliseconds\n     */\n    function defer(func) {\n      if (!isFunction(func)) {\n        throw new TypeError;\n      }\n      var args = slice(arguments, 1);\n      return setTimeout(function() { func.apply(undefined, args); }, 1);\n    }\n\n    /**\n     * Executes the `func` function after `wait` milliseconds. Additional arguments\n     * will be provided to `func` when it is invoked.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay execution.\n     * @param {...*} [arg] Arguments to invoke the function with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.delay(function(text) { console.log(text); }, 1000, 'later');\n     * // => logs 'later' after one second\n     */\n    function delay(func, wait) {\n      if (!isFunction(func)) {\n        throw new TypeError;\n      }\n      var args = slice(arguments, 2);\n      return setTimeout(function() { func.apply(undefined, args); }, wait);\n    }\n\n    /**\n     * Creates a function that memoizes the result of `func`. If `resolver` is\n     * provided it will be used to determine the cache key for storing the result\n     * based on the arguments provided to the memoized function. By default, the\n     * first argument provided to the memoized function is used as the cache key.\n     * The `func` is executed with the `this` binding of the memoized function.\n     * The result cache is exposed as the `cache` property on the memoized function.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to have its output memoized.\n     * @param {Function} [resolver] A function used to resolve the cache key.\n     * @returns {Function} Returns the new memoizing function.\n     * @example\n     *\n     * var fibonacci = _.memoize(function(n) {\n     *   return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);\n     * });\n     *\n     * fibonacci(9)\n     * // => 34\n     *\n     * var data = {\n     *   'fred': { 'name': 'fred', 'age': 40 },\n     *   'pebbles': { 'name': 'pebbles', 'age': 1 }\n     * };\n     *\n     * // modifying the result cache\n     * var get = _.memoize(function(name) { return data[name]; }, _.identity);\n     * get('pebbles');\n     * // => { 'name': 'pebbles', 'age': 1 }\n     *\n     * get.cache.pebbles.name = 'penelope';\n     * get('pebbles');\n     * // => { 'name': 'penelope', 'age': 1 }\n     */\n    function memoize(func, resolver) {\n      if (!isFunction(func)) {\n        throw new TypeError;\n      }\n      var memoized = function() {\n        var cache = memoized.cache,\n            key = resolver ? resolver.apply(this, arguments) : keyPrefix + arguments[0];\n\n        return hasOwnProperty.call(cache, key)\n          ? cache[key]\n          : (cache[key] = func.apply(this, arguments));\n      }\n      memoized.cache = {};\n      return memoized;\n    }\n\n    /**\n     * Creates a function that is restricted to execute `func` once. Repeat calls to\n     * the function will return the value of the first call. The `func` is executed\n     * with the `this` binding of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var initialize = _.once(createApplication);\n     * initialize();\n     * initialize();\n     * // `initialize` executes `createApplication` once\n     */\n    function once(func) {\n      var ran,\n          result;\n\n      if (!isFunction(func)) {\n        throw new TypeError;\n      }\n      return function() {\n        if (ran) {\n          return result;\n        }\n        ran = true;\n        result = func.apply(this, arguments);\n\n        // clear the `func` variable so the function may be garbage collected\n        func = null;\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function that, when called, invokes `func` with any additional\n     * `partial` arguments prepended to those provided to the new function. This\n     * method is similar to `_.bind` except it does **not** alter the `this` binding.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [arg] Arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * var greet = function(greeting, name) { return greeting + ' ' + name; };\n     * var hi = _.partial(greet, 'hi');\n     * hi('fred');\n     * // => 'hi fred'\n     */\n    function partial(func) {\n      return createWrapper(func, 16, slice(arguments, 1));\n    }\n\n    /**\n     * This method is like `_.partial` except that `partial` arguments are\n     * appended to those provided to the new function.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [arg] Arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * var defaultsDeep = _.partialRight(_.merge, _.defaults);\n     *\n     * var options = {\n     *   'variable': 'data',\n     *   'imports': { 'jq': $ }\n     * };\n     *\n     * defaultsDeep(options, _.templateSettings);\n     *\n     * options.variable\n     * // => 'data'\n     *\n     * options.imports\n     * // => { '_': _, 'jq': $ }\n     */\n    function partialRight(func) {\n      return createWrapper(func, 32, null, slice(arguments, 1));\n    }\n\n    /**\n     * Creates a function that, when executed, will only call the `func` function\n     * at most once per every `wait` milliseconds. Provide an options object to\n     * indicate that `func` should be invoked on the leading and/or trailing edge\n     * of the `wait` timeout. Subsequent calls to the throttled function will\n     * return the result of the last `func` call.\n     *\n     * Note: If `leading` and `trailing` options are `true` `func` will be called\n     * on the trailing edge of the timeout only if the the throttled function is\n     * invoked more than once during the `wait` timeout.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to throttle.\n     * @param {number} wait The number of milliseconds to throttle executions to.\n     * @param {Object} [options] The options object.\n     * @param {boolean} [options.leading=true] Specify execution on the leading edge of the timeout.\n     * @param {boolean} [options.trailing=true] Specify execution on the trailing edge of the timeout.\n     * @returns {Function} Returns the new throttled function.\n     * @example\n     *\n     * // avoid excessively updating the position while scrolling\n     * var throttled = _.throttle(updatePosition, 100);\n     * jQuery(window).on('scroll', throttled);\n     *\n     * // execute `renewToken` when the click event is fired, but not more than once every 5 minutes\n     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {\n     *   'trailing': false\n     * }));\n     */\n    function throttle(func, wait, options) {\n      var leading = true,\n          trailing = true;\n\n      if (!isFunction(func)) {\n        throw new TypeError;\n      }\n      if (options === false) {\n        leading = false;\n      } else if (isObject(options)) {\n        leading = 'leading' in options ? options.leading : leading;\n        trailing = 'trailing' in options ? options.trailing : trailing;\n      }\n      debounceOptions.leading = leading;\n      debounceOptions.maxWait = wait;\n      debounceOptions.trailing = trailing;\n\n      return debounce(func, wait, debounceOptions);\n    }\n\n    /**\n     * Creates a function that provides `value` to the wrapper function as its\n     * first argument. Additional arguments provided to the function are appended\n     * to those provided to the wrapper function. The wrapper is executed with\n     * the `this` binding of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {*} value The value to wrap.\n     * @param {Function} wrapper The wrapper function.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var p = _.wrap(_.escape, function(func, text) {\n     *   return '<p>' + func(text) + '</p>';\n     * });\n     *\n     * p('Fred, Wilma, & Pebbles');\n     * // => '<p>Fred, Wilma, &amp; Pebbles</p>'\n     */\n    function wrap(value, wrapper) {\n      return createWrapper(wrapper, 16, [value]);\n    }\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * Creates a function that returns `value`.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {*} value The value to return from the new function.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var object = { 'name': 'fred' };\n     * var getter = _.constant(object);\n     * getter() === object;\n     * // => true\n     */\n    function constant(value) {\n      return function() {\n        return value;\n      };\n    }\n\n    /**\n     * Produces a callback bound to an optional `thisArg`. If `func` is a property\n     * name the created callback will return the property value for a given element.\n     * If `func` is an object the created callback will return `true` for elements\n     * that contain the equivalent object properties, otherwise it will return `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {*} [func=identity] The value to convert to a callback.\n     * @param {*} [thisArg] The `this` binding of the created callback.\n     * @param {number} [argCount] The number of arguments the callback accepts.\n     * @returns {Function} Returns a callback function.\n     * @example\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36 },\n     *   { 'name': 'fred',   'age': 40 }\n     * ];\n     *\n     * // wrap to create custom callback shorthands\n     * _.createCallback = _.wrap(_.createCallback, function(func, callback, thisArg) {\n     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(callback);\n     *   return !match ? func(callback, thisArg) : function(object) {\n     *     return match[2] == 'gt' ? object[match[1]] > match[3] : object[match[1]] < match[3];\n     *   };\n     * });\n     *\n     * _.filter(characters, 'age__gt38');\n     * // => [{ 'name': 'fred', 'age': 40 }]\n     */\n    function createCallback(func, thisArg, argCount) {\n      var type = typeof func;\n      if (func == null || type == 'function') {\n        return baseCreateCallback(func, thisArg, argCount);\n      }\n      // handle \"_.pluck\" style callback shorthands\n      if (type != 'object') {\n        return property(func);\n      }\n      var props = keys(func),\n          key = props[0],\n          a = func[key];\n\n      // handle \"_.where\" style callback shorthands\n      if (props.length == 1 && a === a && !isObject(a)) {\n        // fast path the common case of providing an object with a single\n        // property containing a primitive value\n        return function(object) {\n          var b = object[key];\n          return a === b && (a !== 0 || (1 / a == 1 / b));\n        };\n      }\n      return function(object) {\n        var length = props.length,\n            result = false;\n\n        while (length--) {\n          if (!(result = baseIsEqual(object[props[length]], func[props[length]], null, true))) {\n            break;\n          }\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Converts the characters `&`, `<`, `>`, `\"`, and `'` in `string` to their\n     * corresponding HTML entities.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {string} string The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escape('Fred, Wilma, & Pebbles');\n     * // => 'Fred, Wilma, &amp; Pebbles'\n     */\n    function escape(string) {\n      return string == null ? '' : String(string).replace(reUnescapedHtml, escapeHtmlChar);\n    }\n\n    /**\n     * This method returns the first argument provided to it.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {*} value Any value.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * var object = { 'name': 'fred' };\n     * _.identity(object) === object;\n     * // => true\n     */\n    function identity(value) {\n      return value;\n    }\n\n    /**\n     * Adds function properties of a source object to the destination object.\n     * If `object` is a function methods will be added to its prototype as well.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {Function|Object} [object=lodash] object The destination object.\n     * @param {Object} source The object of functions to add.\n     * @param {Object} [options] The options object.\n     * @param {boolean} [options.chain=true] Specify whether the functions added are chainable.\n     * @example\n     *\n     * function capitalize(string) {\n     *   return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n     * }\n     *\n     * _.mixin({ 'capitalize': capitalize });\n     * _.capitalize('fred');\n     * // => 'Fred'\n     *\n     * _('fred').capitalize().value();\n     * // => 'Fred'\n     *\n     * _.mixin({ 'capitalize': capitalize }, { 'chain': false });\n     * _('fred').capitalize();\n     * // => 'Fred'\n     */\n    function mixin(object, source, options) {\n      var chain = true,\n          methodNames = source && functions(source);\n\n      if (!source || (!options && !methodNames.length)) {\n        if (options == null) {\n          options = source;\n        }\n        ctor = lodashWrapper;\n        source = object;\n        object = lodash;\n        methodNames = functions(source);\n      }\n      if (options === false) {\n        chain = false;\n      } else if (isObject(options) && 'chain' in options) {\n        chain = options.chain;\n      }\n      var ctor = object,\n          isFunc = isFunction(ctor);\n\n      forEach(methodNames, function(methodName) {\n        var func = object[methodName] = source[methodName];\n        if (isFunc) {\n          ctor.prototype[methodName] = function() {\n            var chainAll = this.__chain__,\n                value = this.__wrapped__,\n                args = [value];\n\n            push.apply(args, arguments);\n            var result = func.apply(object, args);\n            if (chain || chainAll) {\n              if (value === result && isObject(result)) {\n                return this;\n              }\n              result = new ctor(result);\n              result.__chain__ = chainAll;\n            }\n            return result;\n          };\n        }\n      });\n    }\n\n    /**\n     * Reverts the '_' variable to its previous value and returns a reference to\n     * the `lodash` function.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @returns {Function} Returns the `lodash` function.\n     * @example\n     *\n     * var lodash = _.noConflict();\n     */\n    function noConflict() {\n      context._ = oldDash;\n      return this;\n    }\n\n    /**\n     * A no-operation function.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @example\n     *\n     * var object = { 'name': 'fred' };\n     * _.noop(object) === undefined;\n     * // => true\n     */\n    function noop() {\n      // no operation performed\n    }\n\n    /**\n     * Gets the number of milliseconds that have elapsed since the Unix epoch\n     * (1 January 1970 00:00:00 UTC).\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @example\n     *\n     * var stamp = _.now();\n     * _.defer(function() { console.log(_.now() - stamp); });\n     * // => logs the number of milliseconds it took for the deferred function to be called\n     */\n    var now = isNative(now = Date.now) && now || function() {\n      return new Date().getTime();\n    };\n\n    /**\n     * Converts the given value into an integer of the specified radix.\n     * If `radix` is `undefined` or `0` a `radix` of `10` is used unless the\n     * `value` is a hexadecimal, in which case a `radix` of `16` is used.\n     *\n     * Note: This method avoids differences in native ES3 and ES5 `parseInt`\n     * implementations. See http://es5.github.io/#E.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {string} value The value to parse.\n     * @param {number} [radix] The radix used to interpret the value to parse.\n     * @returns {number} Returns the new integer value.\n     * @example\n     *\n     * _.parseInt('08');\n     * // => 8\n     */\n    var parseInt = nativeParseInt(whitespace + '08') == 8 ? nativeParseInt : function(value, radix) {\n      // Firefox < 21 and Opera < 15 follow the ES3 specified implementation of `parseInt`\n      return nativeParseInt(isString(value) ? value.replace(reLeadingSpacesAndZeros, '') : value, radix || 0);\n    };\n\n    /**\n     * Creates a \"_.pluck\" style function, which returns the `key` value of a\n     * given object.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {string} key The name of the property to retrieve.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var characters = [\n     *   { 'name': 'fred',   'age': 40 },\n     *   { 'name': 'barney', 'age': 36 }\n     * ];\n     *\n     * var getName = _.property('name');\n     *\n     * _.map(characters, getName);\n     * // => ['barney', 'fred']\n     *\n     * _.sortBy(characters, getName);\n     * // => [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred',   'age': 40 }]\n     */\n    function property(key) {\n      return function(object) {\n        return object[key];\n      };\n    }\n\n    /**\n     * Produces a random number between `min` and `max` (inclusive). If only one\n     * argument is provided a number between `0` and the given number will be\n     * returned. If `floating` is truey or either `min` or `max` are floats a\n     * floating-point number will be returned instead of an integer.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {number} [min=0] The minimum possible value.\n     * @param {number} [max=1] The maximum possible value.\n     * @param {boolean} [floating=false] Specify returning a floating-point number.\n     * @returns {number} Returns a random number.\n     * @example\n     *\n     * _.random(0, 5);\n     * // => an integer between 0 and 5\n     *\n     * _.random(5);\n     * // => also an integer between 0 and 5\n     *\n     * _.random(5, true);\n     * // => a floating-point number between 0 and 5\n     *\n     * _.random(1.2, 5.2);\n     * // => a floating-point number between 1.2 and 5.2\n     */\n    function random(min, max, floating) {\n      var noMin = min == null,\n          noMax = max == null;\n\n      if (floating == null) {\n        if (typeof min == 'boolean' && noMax) {\n          floating = min;\n          min = 1;\n        }\n        else if (!noMax && typeof max == 'boolean') {\n          floating = max;\n          noMax = true;\n        }\n      }\n      if (noMin && noMax) {\n        max = 1;\n      }\n      min = +min || 0;\n      if (noMax) {\n        max = min;\n        min = 0;\n      } else {\n        max = +max || 0;\n      }\n      if (floating || min % 1 || max % 1) {\n        var rand = nativeRandom();\n        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand +'').length - 1)))), max);\n      }\n      return baseRandom(min, max);\n    }\n\n    /**\n     * Resolves the value of property `key` on `object`. If `key` is a function\n     * it will be invoked with the `this` binding of `object` and its result returned,\n     * else the property value is returned. If `object` is falsey then `undefined`\n     * is returned.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {Object} object The object to inspect.\n     * @param {string} key The name of the property to resolve.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = {\n     *   'cheese': 'crumpets',\n     *   'stuff': function() {\n     *     return 'nonsense';\n     *   }\n     * };\n     *\n     * _.result(object, 'cheese');\n     * // => 'crumpets'\n     *\n     * _.result(object, 'stuff');\n     * // => 'nonsense'\n     */\n    function result(object, key) {\n      if (object) {\n        var value = object[key];\n        return isFunction(value) ? object[key]() : value;\n      }\n    }\n\n    /**\n     * A micro-templating method that handles arbitrary delimiters, preserves\n     * whitespace, and correctly escapes quotes within interpolated code.\n     *\n     * Note: In the development build, `_.template` utilizes sourceURLs for easier\n     * debugging. See http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl\n     *\n     * For more information on precompiling templates see:\n     * https://lodash.com/custom-builds\n     *\n     * For more information on Chrome extension sandboxes see:\n     * http://developer.chrome.com/stable/extensions/sandboxingEval.html\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {string} text The template text.\n     * @param {Object} data The data object used to populate the text.\n     * @param {Object} [options] The options object.\n     * @param {RegExp} [options.escape] The \"escape\" delimiter.\n     * @param {RegExp} [options.evaluate] The \"evaluate\" delimiter.\n     * @param {Object} [options.imports] An object to import into the template as local variables.\n     * @param {RegExp} [options.interpolate] The \"interpolate\" delimiter.\n     * @param {string} [sourceURL] The sourceURL of the template's compiled source.\n     * @param {string} [variable] The data object variable name.\n     * @returns {Function|string} Returns a compiled function when no `data` object\n     *  is given, else it returns the interpolated text.\n     * @example\n     *\n     * // using the \"interpolate\" delimiter to create a compiled template\n     * var compiled = _.template('hello <%= name %>');\n     * compiled({ 'name': 'fred' });\n     * // => 'hello fred'\n     *\n     * // using the \"escape\" delimiter to escape HTML in data property values\n     * _.template('<b><%- value %></b>', { 'value': '<script>' });\n     * // => '<b>&lt;script&gt;</b>'\n     *\n     * // using the \"evaluate\" delimiter to generate HTML\n     * var list = '<% _.forEach(people, function(name) { %><li><%- name %></li><% }); %>';\n     * _.template(list, { 'people': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // using the ES6 delimiter as an alternative to the default \"interpolate\" delimiter\n     * _.template('hello ${ name }', { 'name': 'pebbles' });\n     * // => 'hello pebbles'\n     *\n     * // using the internal `print` function in \"evaluate\" delimiters\n     * _.template('<% print(\"hello \" + name); %>!', { 'name': 'barney' });\n     * // => 'hello barney!'\n     *\n     * // using a custom template delimiters\n     * _.templateSettings = {\n     *   'interpolate': /{{([\\s\\S]+?)}}/g\n     * };\n     *\n     * _.template('hello {{ name }}!', { 'name': 'mustache' });\n     * // => 'hello mustache!'\n     *\n     * // using the `imports` option to import jQuery\n     * var list = '<% jq.each(people, function(name) { %><li><%- name %></li><% }); %>';\n     * _.template(list, { 'people': ['fred', 'barney'] }, { 'imports': { 'jq': jQuery } });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // using the `sourceURL` option to specify a custom sourceURL for the template\n     * var compiled = _.template('hello <%= name %>', null, { 'sourceURL': '/basic/greeting.jst' });\n     * compiled(data);\n     * // => find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector\n     *\n     * // using the `variable` option to ensure a with-statement isn't used in the compiled template\n     * var compiled = _.template('hi <%= data.name %>!', null, { 'variable': 'data' });\n     * compiled.source;\n     * // => function(data) {\n     *   var __t, __p = '', __e = _.escape;\n     *   __p += 'hi ' + ((__t = ( data.name )) == null ? '' : __t) + '!';\n     *   return __p;\n     * }\n     *\n     * // using the `source` property to inline compiled templates for meaningful\n     * // line numbers in error messages and a stack trace\n     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\\\n     *   var JST = {\\\n     *     \"main\": ' + _.template(mainText).source + '\\\n     *   };\\\n     * ');\n     */\n    function template(text, data, options) {\n      // based on John Resig's `tmpl` implementation\n      // http://ejohn.org/blog/javascript-micro-templating/\n      // and Laura Doktorova's doT.js\n      // https://github.com/olado/doT\n      var settings = lodash.templateSettings;\n      text = String(text || '');\n\n      // avoid missing dependencies when `iteratorTemplate` is not defined\n      options = defaults({}, options, settings);\n\n      var imports = defaults({}, options.imports, settings.imports),\n          importsKeys = keys(imports),\n          importsValues = values(imports);\n\n      var isEvaluating,\n          index = 0,\n          interpolate = options.interpolate || reNoMatch,\n          source = \"__p += '\";\n\n      // compile the regexp to match each delimiter\n      var reDelimiters = RegExp(\n        (options.escape || reNoMatch).source + '|' +\n        interpolate.source + '|' +\n        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n        (options.evaluate || reNoMatch).source + '|$'\n      , 'g');\n\n      text.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n        interpolateValue || (interpolateValue = esTemplateValue);\n\n        // escape characters that cannot be included in string literals\n        source += text.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n\n        // replace delimiters with snippets\n        if (escapeValue) {\n          source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n        }\n        if (evaluateValue) {\n          isEvaluating = true;\n          source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n        }\n        if (interpolateValue) {\n          source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n        }\n        index = offset + match.length;\n\n        // the JS engine embedded in Adobe products requires returning the `match`\n        // string in order to produce the correct `offset` value\n        return match;\n      });\n\n      source += \"';\\n\";\n\n      // if `variable` is not specified, wrap a with-statement around the generated\n      // code to add the data object to the top of the scope chain\n      var variable = options.variable,\n          hasVariable = variable;\n\n      if (!hasVariable) {\n        variable = 'obj';\n        source = 'with (' + variable + ') {\\n' + source + '\\n}\\n';\n      }\n      // cleanup code by stripping empty strings\n      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n        .replace(reEmptyStringMiddle, '$1')\n        .replace(reEmptyStringTrailing, '$1;');\n\n      // frame code as the function body\n      source = 'function(' + variable + ') {\\n' +\n        (hasVariable ? '' : variable + ' || (' + variable + ' = {});\\n') +\n        \"var __t, __p = '', __e = _.escape\" +\n        (isEvaluating\n          ? ', __j = Array.prototype.join;\\n' +\n            \"function print() { __p += __j.call(arguments, '') }\\n\"\n          : ';\\n'\n        ) +\n        source +\n        'return __p\\n}';\n\n      // Use a sourceURL for easier debugging.\n      // http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl\n      var sourceURL = '\\n/*\\n//# sourceURL=' + (options.sourceURL || '/lodash/template/source[' + (templateCounter++) + ']') + '\\n*/';\n\n      try {\n        var result = Function(importsKeys, 'return ' + source + sourceURL).apply(undefined, importsValues);\n      } catch(e) {\n        e.source = source;\n        throw e;\n      }\n      if (data) {\n        return result(data);\n      }\n      // provide the compiled function's source by its `toString` method, in\n      // supported environments, or the `source` property as a convenience for\n      // inlining compiled templates during the build process\n      result.source = source;\n      return result;\n    }\n\n    /**\n     * Executes the callback `n` times, returning an array of the results\n     * of each callback execution. The callback is bound to `thisArg` and invoked\n     * with one argument; (index).\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {number} n The number of times to execute the callback.\n     * @param {Function} callback The function called per iteration.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns an array of the results of each `callback` execution.\n     * @example\n     *\n     * var diceRolls = _.times(3, _.partial(_.random, 1, 6));\n     * // => [3, 6, 4]\n     *\n     * _.times(3, function(n) { mage.castSpell(n); });\n     * // => calls `mage.castSpell(n)` three times, passing `n` of `0`, `1`, and `2` respectively\n     *\n     * _.times(3, function(n) { this.cast(n); }, mage);\n     * // => also calls `mage.castSpell(n)` three times\n     */\n    function times(n, callback, thisArg) {\n      n = (n = +n) > -1 ? n : 0;\n      var index = -1,\n          result = Array(n);\n\n      callback = baseCreateCallback(callback, thisArg, 1);\n      while (++index < n) {\n        result[index] = callback(index);\n      }\n      return result;\n    }\n\n    /**\n     * The inverse of `_.escape` this method converts the HTML entities\n     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to their\n     * corresponding characters.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {string} string The string to unescape.\n     * @returns {string} Returns the unescaped string.\n     * @example\n     *\n     * _.unescape('Fred, Barney &amp; Pebbles');\n     * // => 'Fred, Barney & Pebbles'\n     */\n    function unescape(string) {\n      return string == null ? '' : String(string).replace(reEscapedHtml, unescapeHtmlChar);\n    }\n\n    /**\n     * Generates a unique ID. If `prefix` is provided the ID will be appended to it.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {string} [prefix] The value to prefix the ID with.\n     * @returns {string} Returns the unique ID.\n     * @example\n     *\n     * _.uniqueId('contact_');\n     * // => 'contact_104'\n     *\n     * _.uniqueId();\n     * // => '105'\n     */\n    function uniqueId(prefix) {\n      var id = ++idCounter;\n      return String(prefix == null ? '' : prefix) + id;\n    }\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` object that wraps the given value with explicit\n     * method chaining enabled.\n     *\n     * @static\n     * @memberOf _\n     * @category Chaining\n     * @param {*} value The value to wrap.\n     * @returns {Object} Returns the wrapper object.\n     * @example\n     *\n     * var characters = [\n     *   { 'name': 'barney',  'age': 36 },\n     *   { 'name': 'fred',    'age': 40 },\n     *   { 'name': 'pebbles', 'age': 1 }\n     * ];\n     *\n     * var youngest = _.chain(characters)\n     *     .sortBy('age')\n     *     .map(function(chr) { return chr.name + ' is ' + chr.age; })\n     *     .first()\n     *     .value();\n     * // => 'pebbles is 1'\n     */\n    function chain(value) {\n      value = new lodashWrapper(value);\n      value.__chain__ = true;\n      return value;\n    }\n\n    /**\n     * Invokes `interceptor` with the `value` as the first argument and then\n     * returns `value`. The purpose of this method is to \"tap into\" a method\n     * chain in order to perform operations on intermediate results within\n     * the chain.\n     *\n     * @static\n     * @memberOf _\n     * @category Chaining\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * _([1, 2, 3, 4])\n     *  .tap(function(array) { array.pop(); })\n     *  .reverse()\n     *  .value();\n     * // => [3, 2, 1]\n     */\n    function tap(value, interceptor) {\n      interceptor(value);\n      return value;\n    }\n\n    /**\n     * Enables explicit method chaining on the wrapper object.\n     *\n     * @name chain\n     * @memberOf _\n     * @category Chaining\n     * @returns {*} Returns the wrapper object.\n     * @example\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36 },\n     *   { 'name': 'fred',   'age': 40 }\n     * ];\n     *\n     * // without explicit chaining\n     * _(characters).first();\n     * // => { 'name': 'barney', 'age': 36 }\n     *\n     * // with explicit chaining\n     * _(characters).chain()\n     *   .first()\n     *   .pick('age')\n     *   .value();\n     * // => { 'age': 36 }\n     */\n    function wrapperChain() {\n      this.__chain__ = true;\n      return this;\n    }\n\n    /**\n     * Produces the `toString` result of the wrapped value.\n     *\n     * @name toString\n     * @memberOf _\n     * @category Chaining\n     * @returns {string} Returns the string result.\n     * @example\n     *\n     * _([1, 2, 3]).toString();\n     * // => '1,2,3'\n     */\n    function wrapperToString() {\n      return String(this.__wrapped__);\n    }\n\n    /**\n     * Extracts the wrapped value.\n     *\n     * @name valueOf\n     * @memberOf _\n     * @alias value\n     * @category Chaining\n     * @returns {*} Returns the wrapped value.\n     * @example\n     *\n     * _([1, 2, 3]).valueOf();\n     * // => [1, 2, 3]\n     */\n    function wrapperValueOf() {\n      return this.__wrapped__;\n    }\n\n    /*--------------------------------------------------------------------------*/\n\n    // add functions that return wrapped values when chaining\n    lodash.after = after;\n    lodash.assign = assign;\n    lodash.at = at;\n    lodash.bind = bind;\n    lodash.bindAll = bindAll;\n    lodash.bindKey = bindKey;\n    lodash.chain = chain;\n    lodash.compact = compact;\n    lodash.compose = compose;\n    lodash.constant = constant;\n    lodash.countBy = countBy;\n    lodash.create = create;\n    lodash.createCallback = createCallback;\n    lodash.curry = curry;\n    lodash.debounce = debounce;\n    lodash.defaults = defaults;\n    lodash.defer = defer;\n    lodash.delay = delay;\n    lodash.difference = difference;\n    lodash.filter = filter;\n    lodash.flatten = flatten;\n    lodash.forEach = forEach;\n    lodash.forEachRight = forEachRight;\n    lodash.forIn = forIn;\n    lodash.forInRight = forInRight;\n    lodash.forOwn = forOwn;\n    lodash.forOwnRight = forOwnRight;\n    lodash.functions = functions;\n    lodash.groupBy = groupBy;\n    lodash.indexBy = indexBy;\n    lodash.initial = initial;\n    lodash.intersection = intersection;\n    lodash.invert = invert;\n    lodash.invoke = invoke;\n    lodash.keys = keys;\n    lodash.map = map;\n    lodash.mapValues = mapValues;\n    lodash.max = max;\n    lodash.memoize = memoize;\n    lodash.merge = merge;\n    lodash.min = min;\n    lodash.omit = omit;\n    lodash.once = once;\n    lodash.pairs = pairs;\n    lodash.partial = partial;\n    lodash.partialRight = partialRight;\n    lodash.pick = pick;\n    lodash.pluck = pluck;\n    lodash.property = property;\n    lodash.pull = pull;\n    lodash.range = range;\n    lodash.reject = reject;\n    lodash.remove = remove;\n    lodash.rest = rest;\n    lodash.shuffle = shuffle;\n    lodash.sortBy = sortBy;\n    lodash.tap = tap;\n    lodash.throttle = throttle;\n    lodash.times = times;\n    lodash.toArray = toArray;\n    lodash.transform = transform;\n    lodash.union = union;\n    lodash.uniq = uniq;\n    lodash.values = values;\n    lodash.where = where;\n    lodash.without = without;\n    lodash.wrap = wrap;\n    lodash.xor = xor;\n    lodash.zip = zip;\n    lodash.zipObject = zipObject;\n\n    // add aliases\n    lodash.collect = map;\n    lodash.drop = rest;\n    lodash.each = forEach;\n    lodash.eachRight = forEachRight;\n    lodash.extend = assign;\n    lodash.methods = functions;\n    lodash.object = zipObject;\n    lodash.select = filter;\n    lodash.tail = rest;\n    lodash.unique = uniq;\n    lodash.unzip = zip;\n\n    // add functions to `lodash.prototype`\n    mixin(lodash);\n\n    /*--------------------------------------------------------------------------*/\n\n    // add functions that return unwrapped values when chaining\n    lodash.clone = clone;\n    lodash.cloneDeep = cloneDeep;\n    lodash.contains = contains;\n    lodash.escape = escape;\n    lodash.every = every;\n    lodash.find = find;\n    lodash.findIndex = findIndex;\n    lodash.findKey = findKey;\n    lodash.findLast = findLast;\n    lodash.findLastIndex = findLastIndex;\n    lodash.findLastKey = findLastKey;\n    lodash.has = has;\n    lodash.identity = identity;\n    lodash.indexOf = indexOf;\n    lodash.isArguments = isArguments;\n    lodash.isArray = isArray;\n    lodash.isBoolean = isBoolean;\n    lodash.isDate = isDate;\n    lodash.isElement = isElement;\n    lodash.isEmpty = isEmpty;\n    lodash.isEqual = isEqual;\n    lodash.isFinite = isFinite;\n    lodash.isFunction = isFunction;\n    lodash.isNaN = isNaN;\n    lodash.isNull = isNull;\n    lodash.isNumber = isNumber;\n    lodash.isObject = isObject;\n    lodash.isPlainObject = isPlainObject;\n    lodash.isRegExp = isRegExp;\n    lodash.isString = isString;\n    lodash.isUndefined = isUndefined;\n    lodash.lastIndexOf = lastIndexOf;\n    lodash.mixin = mixin;\n    lodash.noConflict = noConflict;\n    lodash.noop = noop;\n    lodash.now = now;\n    lodash.parseInt = parseInt;\n    lodash.random = random;\n    lodash.reduce = reduce;\n    lodash.reduceRight = reduceRight;\n    lodash.result = result;\n    lodash.runInContext = runInContext;\n    lodash.size = size;\n    lodash.some = some;\n    lodash.sortedIndex = sortedIndex;\n    lodash.template = template;\n    lodash.unescape = unescape;\n    lodash.uniqueId = uniqueId;\n\n    // add aliases\n    lodash.all = every;\n    lodash.any = some;\n    lodash.detect = find;\n    lodash.findWhere = find;\n    lodash.foldl = reduce;\n    lodash.foldr = reduceRight;\n    lodash.include = contains;\n    lodash.inject = reduce;\n\n    mixin(function() {\n      var source = {}\n      forOwn(lodash, function(func, methodName) {\n        if (!lodash.prototype[methodName]) {\n          source[methodName] = func;\n        }\n      });\n      return source;\n    }(), false);\n\n    /*--------------------------------------------------------------------------*/\n\n    // add functions capable of returning wrapped and unwrapped values when chaining\n    lodash.first = first;\n    lodash.last = last;\n    lodash.sample = sample;\n\n    // add aliases\n    lodash.take = first;\n    lodash.head = first;\n\n    forOwn(lodash, function(func, methodName) {\n      var callbackable = methodName !== 'sample';\n      if (!lodash.prototype[methodName]) {\n        lodash.prototype[methodName]= function(n, guard) {\n          var chainAll = this.__chain__,\n              result = func(this.__wrapped__, n, guard);\n\n          return !chainAll && (n == null || (guard && !(callbackable && typeof n == 'function')))\n            ? result\n            : new lodashWrapper(result, chainAll);\n        };\n      }\n    });\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * The semantic version number.\n     *\n     * @static\n     * @memberOf _\n     * @type string\n     */\n    lodash.VERSION = '2.4.2';\n\n    // add \"Chaining\" functions to the wrapper\n    lodash.prototype.chain = wrapperChain;\n    lodash.prototype.toString = wrapperToString;\n    lodash.prototype.value = wrapperValueOf;\n    lodash.prototype.valueOf = wrapperValueOf;\n\n    // add `Array` functions that return unwrapped values\n    baseEach(['join', 'pop', 'shift'], function(methodName) {\n      var func = arrayRef[methodName];\n      lodash.prototype[methodName] = function() {\n        var chainAll = this.__chain__,\n            result = func.apply(this.__wrapped__, arguments);\n\n        return chainAll\n          ? new lodashWrapper(result, chainAll)\n          : result;\n      };\n    });\n\n    // add `Array` functions that return the existing wrapped value\n    baseEach(['push', 'reverse', 'sort', 'unshift'], function(methodName) {\n      var func = arrayRef[methodName];\n      lodash.prototype[methodName] = function() {\n        func.apply(this.__wrapped__, arguments);\n        return this;\n      };\n    });\n\n    // add `Array` functions that return new wrapped values\n    baseEach(['concat', 'slice', 'splice'], function(methodName) {\n      var func = arrayRef[methodName];\n      lodash.prototype[methodName] = function() {\n        return new lodashWrapper(func.apply(this.__wrapped__, arguments), this.__chain__);\n      };\n    });\n\n    // avoid array-like object bugs with `Array#shift` and `Array#splice`\n    // in IE < 9, Firefox < 10, Narwhal, and RingoJS\n    if (!support.spliceObjects) {\n      baseEach(['pop', 'shift', 'splice'], function(methodName) {\n        var func = arrayRef[methodName],\n            isSplice = methodName == 'splice';\n\n        lodash.prototype[methodName] = function() {\n          var chainAll = this.__chain__,\n              value = this.__wrapped__,\n              result = func.apply(value, arguments);\n\n          if (value.length === 0) {\n            delete value[0];\n          }\n          return (chainAll || isSplice)\n            ? new lodashWrapper(result, chainAll)\n            : result;\n        };\n      });\n    }\n\n    return lodash;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // expose Lo-Dash\n  var _ = runInContext();\n\n  // some AMD build optimizers like r.js check for condition patterns like the following:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // Expose Lo-Dash to the global object even when an AMD loader is present in\n    // case Lo-Dash is loaded with a RequireJS shim config.\n    // See http://requirejs.org/docs/api.html#config-shim\n    root._ = _;\n\n    // define as an anonymous module so, through path mapping, it can be\n    // referenced as the \"underscore\" module\n    define(function() {\n      return _;\n    });\n  }\n  // check for `exports` after `define` in case a build optimizer adds an `exports` object\n  else if (freeExports && freeModule) {\n    // in Node.js or RingoJS\n    if (moduleExports) {\n      (freeModule.exports = _)._ = _;\n    }\n    // in Narwhal or Rhino -require\n    else {\n      freeExports._ = _;\n    }\n  }\n  else {\n    // in a browser or Rhino\n    root._ = _;\n  }\n}.call(this));\n","/*\nAuthor: Geraint Luff and others\nYear: 2013\n\nThis code is released into the \"public domain\" by its author(s).  Anybody may use, alter and distribute the code without restriction.  The author makes no guarantees, and takes no liability of any kind for use of this code.\n\nIf you find a bug or make an improvement, it would be courteous to let the author know, but it is not compulsory.\n*/\n(function (global, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof module !== 'undefined' && module.exports){\n    // CommonJS. Define export.\n    module.exports = factory();\n  } else {\n    // Browser globals\n    global.tv4 = factory();\n  }\n}(this, function () {\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FObject%2Fkeys\nif (!Object.keys) {\n\tObject.keys = (function () {\n\t\tvar hasOwnProperty = Object.prototype.hasOwnProperty,\n\t\t\thasDontEnumBug = !({toString: null}).propertyIsEnumerable('toString'),\n\t\t\tdontEnums = [\n\t\t\t\t'toString',\n\t\t\t\t'toLocaleString',\n\t\t\t\t'valueOf',\n\t\t\t\t'hasOwnProperty',\n\t\t\t\t'isPrototypeOf',\n\t\t\t\t'propertyIsEnumerable',\n\t\t\t\t'constructor'\n\t\t\t],\n\t\t\tdontEnumsLength = dontEnums.length;\n\n\t\treturn function (obj) {\n\t\t\tif (typeof obj !== 'object' && typeof obj !== 'function' || obj === null) {\n\t\t\t\tthrow new TypeError('Object.keys called on non-object');\n\t\t\t}\n\n\t\t\tvar result = [];\n\n\t\t\tfor (var prop in obj) {\n\t\t\t\tif (hasOwnProperty.call(obj, prop)) {\n\t\t\t\t\tresult.push(prop);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (hasDontEnumBug) {\n\t\t\t\tfor (var i=0; i < dontEnumsLength; i++) {\n\t\t\t\t\tif (hasOwnProperty.call(obj, dontEnums[i])) {\n\t\t\t\t\t\tresult.push(dontEnums[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\t})();\n}\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\nif (!Object.create) {\n\tObject.create = (function(){\n\t\tfunction F(){}\n\n\t\treturn function(o){\n\t\t\tif (arguments.length !== 1) {\n\t\t\t\tthrow new Error('Object.create implementation only accepts one parameter.');\n\t\t\t}\n\t\t\tF.prototype = o;\n\t\t\treturn new F();\n\t\t};\n\t})();\n}\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray%2FisArray\nif(!Array.isArray) {\n\tArray.isArray = function (vArg) {\n\t\treturn Object.prototype.toString.call(vArg) === \"[object Array]\";\n\t};\n}\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray%2FindexOf\nif (!Array.prototype.indexOf) {\n\tArray.prototype.indexOf = function (searchElement /*, fromIndex */ ) {\n\t\tif (this === null) {\n\t\t\tthrow new TypeError();\n\t\t}\n\t\tvar t = Object(this);\n\t\tvar len = t.length >>> 0;\n\n\t\tif (len === 0) {\n\t\t\treturn -1;\n\t\t}\n\t\tvar n = 0;\n\t\tif (arguments.length > 1) {\n\t\t\tn = Number(arguments[1]);\n\t\t\tif (n !== n) { // shortcut for verifying if it's NaN\n\t\t\t\tn = 0;\n\t\t\t} else if (n !== 0 && n !== Infinity && n !== -Infinity) {\n\t\t\t\tn = (n > 0 || -1) * Math.floor(Math.abs(n));\n\t\t\t}\n\t\t}\n\t\tif (n >= len) {\n\t\t\treturn -1;\n\t\t}\n\t\tvar k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);\n\t\tfor (; k < len; k++) {\n\t\t\tif (k in t && t[k] === searchElement) {\n\t\t\t\treturn k;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t};\n}\n\n// Grungey Object.isFrozen hack\nif (!Object.isFrozen) {\n\tObject.isFrozen = function (obj) {\n\t\tvar key = \"tv4_test_frozen_key\";\n\t\twhile (obj.hasOwnProperty(key)) {\n\t\t\tkey += Math.random();\n\t\t}\n\t\ttry {\n\t\t\tobj[key] = true;\n\t\t\tdelete obj[key];\n\t\t\treturn false;\n\t\t} catch (e) {\n\t\t\treturn true;\n\t\t}\n\t};\n}\n// Based on: https://github.com/geraintluff/uri-templates, but with all the de-substitution stuff removed\n\nvar uriTemplateGlobalModifiers = {\n\t\"+\": true,\n\t\"#\": true,\n\t\".\": true,\n\t\"/\": true,\n\t\";\": true,\n\t\"?\": true,\n\t\"&\": true\n};\nvar uriTemplateSuffices = {\n\t\"*\": true\n};\n\nfunction notReallyPercentEncode(string) {\n\treturn encodeURI(string).replace(/%25[0-9][0-9]/g, function (doubleEncoded) {\n\t\treturn \"%\" + doubleEncoded.substring(3);\n\t});\n}\n\nfunction uriTemplateSubstitution(spec) {\n\tvar modifier = \"\";\n\tif (uriTemplateGlobalModifiers[spec.charAt(0)]) {\n\t\tmodifier = spec.charAt(0);\n\t\tspec = spec.substring(1);\n\t}\n\tvar separator = \"\";\n\tvar prefix = \"\";\n\tvar shouldEscape = true;\n\tvar showVariables = false;\n\tvar trimEmptyString = false;\n\tif (modifier === '+') {\n\t\tshouldEscape = false;\n\t} else if (modifier === \".\") {\n\t\tprefix = \".\";\n\t\tseparator = \".\";\n\t} else if (modifier === \"/\") {\n\t\tprefix = \"/\";\n\t\tseparator = \"/\";\n\t} else if (modifier === '#') {\n\t\tprefix = \"#\";\n\t\tshouldEscape = false;\n\t} else if (modifier === ';') {\n\t\tprefix = \";\";\n\t\tseparator = \";\";\n\t\tshowVariables = true;\n\t\ttrimEmptyString = true;\n\t} else if (modifier === '?') {\n\t\tprefix = \"?\";\n\t\tseparator = \"&\";\n\t\tshowVariables = true;\n\t} else if (modifier === '&') {\n\t\tprefix = \"&\";\n\t\tseparator = \"&\";\n\t\tshowVariables = true;\n\t}\n\n\tvar varNames = [];\n\tvar varList = spec.split(\",\");\n\tvar varSpecs = [];\n\tvar varSpecMap = {};\n\tfor (var i = 0; i < varList.length; i++) {\n\t\tvar varName = varList[i];\n\t\tvar truncate = null;\n\t\tif (varName.indexOf(\":\") !== -1) {\n\t\t\tvar parts = varName.split(\":\");\n\t\t\tvarName = parts[0];\n\t\t\ttruncate = parseInt(parts[1], 10);\n\t\t}\n\t\tvar suffices = {};\n\t\twhile (uriTemplateSuffices[varName.charAt(varName.length - 1)]) {\n\t\t\tsuffices[varName.charAt(varName.length - 1)] = true;\n\t\t\tvarName = varName.substring(0, varName.length - 1);\n\t\t}\n\t\tvar varSpec = {\n\t\t\ttruncate: truncate,\n\t\t\tname: varName,\n\t\t\tsuffices: suffices\n\t\t};\n\t\tvarSpecs.push(varSpec);\n\t\tvarSpecMap[varName] = varSpec;\n\t\tvarNames.push(varName);\n\t}\n\tvar subFunction = function (valueFunction) {\n\t\tvar result = \"\";\n\t\tvar startIndex = 0;\n\t\tfor (var i = 0; i < varSpecs.length; i++) {\n\t\t\tvar varSpec = varSpecs[i];\n\t\t\tvar value = valueFunction(varSpec.name);\n\t\t\tif (value === null || value === undefined || (Array.isArray(value) && value.length === 0) || (typeof value === 'object' && Object.keys(value).length === 0)) {\n\t\t\t\tstartIndex++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (i === startIndex) {\n\t\t\t\tresult += prefix;\n\t\t\t} else {\n\t\t\t\tresult += (separator || \",\");\n\t\t\t}\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\tif (showVariables) {\n\t\t\t\t\tresult += varSpec.name + \"=\";\n\t\t\t\t}\n\t\t\t\tfor (var j = 0; j < value.length; j++) {\n\t\t\t\t\tif (j > 0) {\n\t\t\t\t\t\tresult += varSpec.suffices['*'] ? (separator || \",\") : \",\";\n\t\t\t\t\t\tif (varSpec.suffices['*'] && showVariables) {\n\t\t\t\t\t\t\tresult += varSpec.name + \"=\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tresult += shouldEscape ? encodeURIComponent(value[j]).replace(/!/g, \"%21\") : notReallyPercentEncode(value[j]);\n\t\t\t\t}\n\t\t\t} else if (typeof value === \"object\") {\n\t\t\t\tif (showVariables && !varSpec.suffices['*']) {\n\t\t\t\t\tresult += varSpec.name + \"=\";\n\t\t\t\t}\n\t\t\t\tvar first = true;\n\t\t\t\tfor (var key in value) {\n\t\t\t\t\tif (!first) {\n\t\t\t\t\t\tresult += varSpec.suffices['*'] ? (separator || \",\") : \",\";\n\t\t\t\t\t}\n\t\t\t\t\tfirst = false;\n\t\t\t\t\tresult += shouldEscape ? encodeURIComponent(key).replace(/!/g, \"%21\") : notReallyPercentEncode(key);\n\t\t\t\t\tresult += varSpec.suffices['*'] ? '=' : \",\";\n\t\t\t\t\tresult += shouldEscape ? encodeURIComponent(value[key]).replace(/!/g, \"%21\") : notReallyPercentEncode(value[key]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (showVariables) {\n\t\t\t\t\tresult += varSpec.name;\n\t\t\t\t\tif (!trimEmptyString || value !== \"\") {\n\t\t\t\t\t\tresult += \"=\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (varSpec.truncate != null) {\n\t\t\t\t\tvalue = value.substring(0, varSpec.truncate);\n\t\t\t\t}\n\t\t\t\tresult += shouldEscape ? encodeURIComponent(value).replace(/!/g, \"%21\"): notReallyPercentEncode(value);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t};\n\tsubFunction.varNames = varNames;\n\treturn {\n\t\tprefix: prefix,\n\t\tsubstitution: subFunction\n\t};\n}\n\nfunction UriTemplate(template) {\n\tif (!(this instanceof UriTemplate)) {\n\t\treturn new UriTemplate(template);\n\t}\n\tvar parts = template.split(\"{\");\n\tvar textParts = [parts.shift()];\n\tvar prefixes = [];\n\tvar substitutions = [];\n\tvar varNames = [];\n\twhile (parts.length > 0) {\n\t\tvar part = parts.shift();\n\t\tvar spec = part.split(\"}\")[0];\n\t\tvar remainder = part.substring(spec.length + 1);\n\t\tvar funcs = uriTemplateSubstitution(spec);\n\t\tsubstitutions.push(funcs.substitution);\n\t\tprefixes.push(funcs.prefix);\n\t\ttextParts.push(remainder);\n\t\tvarNames = varNames.concat(funcs.substitution.varNames);\n\t}\n\tthis.fill = function (valueFunction) {\n\t\tvar result = textParts[0];\n\t\tfor (var i = 0; i < substitutions.length; i++) {\n\t\t\tvar substitution = substitutions[i];\n\t\t\tresult += substitution(valueFunction);\n\t\t\tresult += textParts[i + 1];\n\t\t}\n\t\treturn result;\n\t};\n\tthis.varNames = varNames;\n\tthis.template = template;\n}\nUriTemplate.prototype = {\n\ttoString: function () {\n\t\treturn this.template;\n\t},\n\tfillFromObject: function (obj) {\n\t\treturn this.fill(function (varName) {\n\t\t\treturn obj[varName];\n\t\t});\n\t}\n};\nvar ValidatorContext = function ValidatorContext(parent, collectMultiple, errorMessages, checkRecursive, trackUnknownProperties) {\n\tthis.missing = [];\n\tthis.missingMap = {};\n\tthis.formatValidators = parent ? Object.create(parent.formatValidators) : {};\n\tthis.schemas = parent ? Object.create(parent.schemas) : {};\n\tthis.collectMultiple = collectMultiple;\n\tthis.errors = [];\n\tthis.handleError = collectMultiple ? this.collectError : this.returnError;\n\tif (checkRecursive) {\n\t\tthis.checkRecursive = true;\n\t\tthis.scanned = [];\n\t\tthis.scannedFrozen = [];\n\t\tthis.scannedFrozenSchemas = [];\n\t\tthis.scannedFrozenValidationErrors = [];\n\t\tthis.validatedSchemasKey = 'tv4_validation_id';\n\t\tthis.validationErrorsKey = 'tv4_validation_errors_id';\n\t}\n\tif (trackUnknownProperties) {\n\t\tthis.trackUnknownProperties = true;\n\t\tthis.knownPropertyPaths = {};\n\t\tthis.unknownPropertyPaths = {};\n\t}\n\tthis.errorMessages = errorMessages;\n\tthis.definedKeywords = {};\n\tif (parent) {\n\t\tfor (var key in parent.definedKeywords) {\n\t\t\tthis.definedKeywords[key] = parent.definedKeywords[key].slice(0);\n\t\t}\n\t}\n};\nValidatorContext.prototype.defineKeyword = function (keyword, keywordFunction) {\n\tthis.definedKeywords[keyword] = this.definedKeywords[keyword] || [];\n\tthis.definedKeywords[keyword].push(keywordFunction);\n};\nValidatorContext.prototype.createError = function (code, messageParams, dataPath, schemaPath, subErrors) {\n\tvar messageTemplate = this.errorMessages[code] || ErrorMessagesDefault[code];\n\tif (typeof messageTemplate !== 'string') {\n\t\treturn new ValidationError(code, \"Unknown error code \" + code + \": \" + JSON.stringify(messageParams), messageParams, dataPath, schemaPath, subErrors);\n\t}\n\t// Adapted from Crockford's supplant()\n\tvar message = messageTemplate.replace(/\\{([^{}]*)\\}/g, function (whole, varName) {\n\t\tvar subValue = messageParams[varName];\n\t\treturn typeof subValue === 'string' || typeof subValue === 'number' ? subValue : whole;\n\t});\n\treturn new ValidationError(code, message, messageParams, dataPath, schemaPath, subErrors);\n};\nValidatorContext.prototype.returnError = function (error) {\n\treturn error;\n};\nValidatorContext.prototype.collectError = function (error) {\n\tif (error) {\n\t\tthis.errors.push(error);\n\t}\n\treturn null;\n};\nValidatorContext.prototype.prefixErrors = function (startIndex, dataPath, schemaPath) {\n\tfor (var i = startIndex; i < this.errors.length; i++) {\n\t\tthis.errors[i] = this.errors[i].prefixWith(dataPath, schemaPath);\n\t}\n\treturn this;\n};\nValidatorContext.prototype.banUnknownProperties = function () {\n\tfor (var unknownPath in this.unknownPropertyPaths) {\n\t\tvar error = this.createError(ErrorCodes.UNKNOWN_PROPERTY, {path: unknownPath}, unknownPath, \"\");\n\t\tvar result = this.handleError(error);\n\t\tif (result) {\n\t\t\treturn result;\n\t\t}\n\t}\n\treturn null;\n};\n\nValidatorContext.prototype.addFormat = function (format, validator) {\n\tif (typeof format === 'object') {\n\t\tfor (var key in format) {\n\t\t\tthis.addFormat(key, format[key]);\n\t\t}\n\t\treturn this;\n\t}\n\tthis.formatValidators[format] = validator;\n};\nValidatorContext.prototype.resolveRefs = function (schema, urlHistory) {\n\tif (schema['$ref'] !== undefined) {\n\t\turlHistory = urlHistory || {};\n\t\tif (urlHistory[schema['$ref']]) {\n\t\t\treturn this.createError(ErrorCodes.CIRCULAR_REFERENCE, {urls: Object.keys(urlHistory).join(', ')}, '', '');\n\t\t}\n\t\turlHistory[schema['$ref']] = true;\n\t\tschema = this.getSchema(schema['$ref'], urlHistory);\n\t}\n\treturn schema;\n};\nValidatorContext.prototype.getSchema = function (url, urlHistory) {\n\tvar schema;\n\tif (this.schemas[url] !== undefined) {\n\t\tschema = this.schemas[url];\n\t\treturn this.resolveRefs(schema, urlHistory);\n\t}\n\tvar baseUrl = url;\n\tvar fragment = \"\";\n\tif (url.indexOf('#') !== -1) {\n\t\tfragment = url.substring(url.indexOf(\"#\") + 1);\n\t\tbaseUrl = url.substring(0, url.indexOf(\"#\"));\n\t}\n\tif (typeof this.schemas[baseUrl] === 'object') {\n\t\tschema = this.schemas[baseUrl];\n\t\tvar pointerPath = decodeURIComponent(fragment);\n\t\tif (pointerPath === \"\") {\n\t\t\treturn this.resolveRefs(schema, urlHistory);\n\t\t} else if (pointerPath.charAt(0) !== \"/\") {\n\t\t\treturn undefined;\n\t\t}\n\t\tvar parts = pointerPath.split(\"/\").slice(1);\n\t\tfor (var i = 0; i < parts.length; i++) {\n\t\t\tvar component = parts[i].replace(/~1/g, \"/\").replace(/~0/g, \"~\");\n\t\t\tif (schema[component] === undefined) {\n\t\t\t\tschema = undefined;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tschema = schema[component];\n\t\t}\n\t\tif (schema !== undefined) {\n\t\t\treturn this.resolveRefs(schema, urlHistory);\n\t\t}\n\t}\n\tif (this.missing[baseUrl] === undefined) {\n\t\tthis.missing.push(baseUrl);\n\t\tthis.missing[baseUrl] = baseUrl;\n\t\tthis.missingMap[baseUrl] = baseUrl;\n\t}\n};\nValidatorContext.prototype.searchSchemas = function (schema, url) {\n\tif (Array.isArray(schema)) {\n\t\tfor (var i = 0; i < schema.length; i++) {\n\t\t\tthis.searchSchemas(schema[i], url);\n\t\t}\n\t} else if (schema && typeof schema === \"object\") {\n\t\tif (typeof schema.id === \"string\") {\n\t\t\tif (isTrustedUrl(url, schema.id)) {\n\t\t\t\tif (this.schemas[schema.id] === undefined) {\n\t\t\t\t\tthis.schemas[schema.id] = schema;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (var key in schema) {\n\t\t\tif (key !== \"enum\") {\n\t\t\t\tif (typeof schema[key] === \"object\") {\n\t\t\t\t\tthis.searchSchemas(schema[key], url);\n\t\t\t\t} else if (key === \"$ref\") {\n\t\t\t\t\tvar uri = getDocumentUri(schema[key]);\n\t\t\t\t\tif (uri && this.schemas[uri] === undefined && this.missingMap[uri] === undefined) {\n\t\t\t\t\t\tthis.missingMap[uri] = uri;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\nValidatorContext.prototype.addSchema = function (url, schema) {\n\t//overload\n\tif (typeof url !== 'string' || typeof schema === 'undefined') {\n\t\tif (typeof url === 'object' && typeof url.id === 'string') {\n\t\t\tschema = url;\n\t\t\turl = schema.id;\n\t\t}\n\t\telse {\n\t\t\treturn;\n\t\t}\n\t}\n\tif (url === getDocumentUri(url) + \"#\") {\n\t\t// Remove empty fragment\n\t\turl = getDocumentUri(url);\n\t}\n\tthis.schemas[url] = schema;\n\tdelete this.missingMap[url];\n\tnormSchema(schema, url);\n\tthis.searchSchemas(schema, url);\n};\n\nValidatorContext.prototype.getSchemaMap = function () {\n\tvar map = {};\n\tfor (var key in this.schemas) {\n\t\tmap[key] = this.schemas[key];\n\t}\n\treturn map;\n};\n\nValidatorContext.prototype.getSchemaUris = function (filterRegExp) {\n\tvar list = [];\n\tfor (var key in this.schemas) {\n\t\tif (!filterRegExp || filterRegExp.test(key)) {\n\t\t\tlist.push(key);\n\t\t}\n\t}\n\treturn list;\n};\n\nValidatorContext.prototype.getMissingUris = function (filterRegExp) {\n\tvar list = [];\n\tfor (var key in this.missingMap) {\n\t\tif (!filterRegExp || filterRegExp.test(key)) {\n\t\t\tlist.push(key);\n\t\t}\n\t}\n\treturn list;\n};\n\nValidatorContext.prototype.dropSchemas = function () {\n\tthis.schemas = {};\n\tthis.reset();\n};\nValidatorContext.prototype.reset = function () {\n\tthis.missing = [];\n\tthis.missingMap = {};\n\tthis.errors = [];\n};\n\nValidatorContext.prototype.validateAll = function (data, schema, dataPathParts, schemaPathParts, dataPointerPath) {\n\tvar topLevel;\n\tschema = this.resolveRefs(schema);\n\tif (!schema) {\n\t\treturn null;\n\t} else if (schema instanceof ValidationError) {\n\t\tthis.errors.push(schema);\n\t\treturn schema;\n\t}\n\n\tvar startErrorCount = this.errors.length;\n\tvar frozenIndex, scannedFrozenSchemaIndex = null, scannedSchemasIndex = null;\n\tif (this.checkRecursive && data && typeof data === 'object') {\n\t\ttopLevel = !this.scanned.length;\n\t\tif (data[this.validatedSchemasKey]) {\n\t\t\tvar schemaIndex = data[this.validatedSchemasKey].indexOf(schema);\n\t\t\tif (schemaIndex !== -1) {\n\t\t\t\tthis.errors = this.errors.concat(data[this.validationErrorsKey][schemaIndex]);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\tif (Object.isFrozen(data)) {\n\t\t\tfrozenIndex = this.scannedFrozen.indexOf(data);\n\t\t\tif (frozenIndex !== -1) {\n\t\t\t\tvar frozenSchemaIndex = this.scannedFrozenSchemas[frozenIndex].indexOf(schema);\n\t\t\t\tif (frozenSchemaIndex !== -1) {\n\t\t\t\t\tthis.errors = this.errors.concat(this.scannedFrozenValidationErrors[frozenIndex][frozenSchemaIndex]);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.scanned.push(data);\n\t\tif (Object.isFrozen(data)) {\n\t\t\tif (frozenIndex === -1) {\n\t\t\t\tfrozenIndex = this.scannedFrozen.length;\n\t\t\t\tthis.scannedFrozen.push(data);\n\t\t\t\tthis.scannedFrozenSchemas.push([]);\n\t\t\t}\n\t\t\tscannedFrozenSchemaIndex = this.scannedFrozenSchemas[frozenIndex].length;\n\t\t\tthis.scannedFrozenSchemas[frozenIndex][scannedFrozenSchemaIndex] = schema;\n\t\t\tthis.scannedFrozenValidationErrors[frozenIndex][scannedFrozenSchemaIndex] = [];\n\t\t} else {\n\t\t\tif (!data[this.validatedSchemasKey]) {\n\t\t\t\ttry {\n\t\t\t\t\tObject.defineProperty(data, this.validatedSchemasKey, {\n\t\t\t\t\t\tvalue: [],\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t});\n\t\t\t\t\tObject.defineProperty(data, this.validationErrorsKey, {\n\t\t\t\t\t\tvalue: [],\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t});\n\t\t\t\t} catch (e) {\n\t\t\t\t\t//IE 7/8 workaround\n\t\t\t\t\tdata[this.validatedSchemasKey] = [];\n\t\t\t\t\tdata[this.validationErrorsKey] = [];\n\t\t\t\t}\n\t\t\t}\n\t\t\tscannedSchemasIndex = data[this.validatedSchemasKey].length;\n\t\t\tdata[this.validatedSchemasKey][scannedSchemasIndex] = schema;\n\t\t\tdata[this.validationErrorsKey][scannedSchemasIndex] = [];\n\t\t}\n\t}\n\n\tvar errorCount = this.errors.length;\n\tvar error = this.validateBasic(data, schema, dataPointerPath)\n\t\t|| this.validateNumeric(data, schema, dataPointerPath)\n\t\t|| this.validateString(data, schema, dataPointerPath)\n\t\t|| this.validateArray(data, schema, dataPointerPath)\n\t\t|| this.validateObject(data, schema, dataPointerPath)\n\t\t|| this.validateCombinations(data, schema, dataPointerPath)\n\t\t|| this.validateHypermedia(data, schema, dataPointerPath)\n\t\t|| this.validateFormat(data, schema, dataPointerPath)\n\t\t|| this.validateDefinedKeywords(data, schema, dataPointerPath)\n\t\t|| null;\n\n\tif (topLevel) {\n\t\twhile (this.scanned.length) {\n\t\t\tvar item = this.scanned.pop();\n\t\t\tdelete item[this.validatedSchemasKey];\n\t\t}\n\t\tthis.scannedFrozen = [];\n\t\tthis.scannedFrozenSchemas = [];\n\t}\n\n\tif (error || errorCount !== this.errors.length) {\n\t\twhile ((dataPathParts && dataPathParts.length) || (schemaPathParts && schemaPathParts.length)) {\n\t\t\tvar dataPart = (dataPathParts && dataPathParts.length) ? \"\" + dataPathParts.pop() : null;\n\t\t\tvar schemaPart = (schemaPathParts && schemaPathParts.length) ? \"\" + schemaPathParts.pop() : null;\n\t\t\tif (error) {\n\t\t\t\terror = error.prefixWith(dataPart, schemaPart);\n\t\t\t}\n\t\t\tthis.prefixErrors(errorCount, dataPart, schemaPart);\n\t\t}\n\t}\n\n\tif (scannedFrozenSchemaIndex !== null) {\n\t\tthis.scannedFrozenValidationErrors[frozenIndex][scannedFrozenSchemaIndex] = this.errors.slice(startErrorCount);\n\t} else if (scannedSchemasIndex !== null) {\n\t\tdata[this.validationErrorsKey][scannedSchemasIndex] = this.errors.slice(startErrorCount);\n\t}\n\n\treturn this.handleError(error);\n};\nValidatorContext.prototype.validateFormat = function (data, schema) {\n\tif (typeof schema.format !== 'string' || !this.formatValidators[schema.format]) {\n\t\treturn null;\n\t}\n\tvar errorMessage = this.formatValidators[schema.format].call(null, data, schema);\n\tif (typeof errorMessage === 'string' || typeof errorMessage === 'number') {\n\t\treturn this.createError(ErrorCodes.FORMAT_CUSTOM, {message: errorMessage}).prefixWith(null, \"format\");\n\t} else if (errorMessage && typeof errorMessage === 'object') {\n\t\treturn this.createError(ErrorCodes.FORMAT_CUSTOM, {message: errorMessage.message || \"?\"}, errorMessage.dataPath || null, errorMessage.schemaPath || \"/format\");\n\t}\n\treturn null;\n};\nValidatorContext.prototype.validateDefinedKeywords = function (data, schema, dataPointerPath) {\n\tfor (var key in this.definedKeywords) {\n\t\tif (typeof schema[key] === 'undefined') {\n\t\t\tcontinue;\n\t\t}\n\t\tvar validationFunctions = this.definedKeywords[key];\n\t\tfor (var i = 0; i < validationFunctions.length; i++) {\n\t\t\tvar func = validationFunctions[i];\n\t\t\tvar result = func(data, schema[key], schema, dataPointerPath);\n\t\t\tif (typeof result === 'string' || typeof result === 'number') {\n\t\t\t\treturn this.createError(ErrorCodes.KEYWORD_CUSTOM, {key: key, message: result}).prefixWith(null, \"format\");\n\t\t\t} else if (result && typeof result === 'object') {\n\t\t\t\tvar code = result.code;\n\t\t\t\tif (typeof code === 'string') {\n\t\t\t\t\tif (!ErrorCodes[code]) {\n\t\t\t\t\t\tthrow new Error('Undefined error code (use defineError): ' + code);\n\t\t\t\t\t}\n\t\t\t\t\tcode = ErrorCodes[code];\n\t\t\t\t} else if (typeof code !== 'number') {\n\t\t\t\t\tcode = ErrorCodes.KEYWORD_CUSTOM;\n\t\t\t\t}\n\t\t\t\tvar messageParams = (typeof result.message === 'object') ? result.message : {key: key, message: result.message || \"?\"};\n\t\t\t\tvar schemaPath = result.schemaPath ||( \"/\" + key.replace(/~/g, '~0').replace(/\\//g, '~1'));\n\t\t\t\treturn this.createError(code, messageParams, result.dataPath || null, schemaPath);\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n};\n\nfunction recursiveCompare(A, B) {\n\tif (A === B) {\n\t\treturn true;\n\t}\n\tif (A && B && typeof A === \"object\" && typeof B === \"object\") {\n\t\tif (Array.isArray(A) !== Array.isArray(B)) {\n\t\t\treturn false;\n\t\t} else if (Array.isArray(A)) {\n\t\t\tif (A.length !== B.length) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (var i = 0; i < A.length; i++) {\n\t\t\t\tif (!recursiveCompare(A[i], B[i])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tvar key;\n\t\t\tfor (key in A) {\n\t\t\t\tif (B[key] === undefined && A[key] !== undefined) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (key in B) {\n\t\t\t\tif (A[key] === undefined && B[key] !== undefined) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (key in A) {\n\t\t\t\tif (!recursiveCompare(A[key], B[key])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nValidatorContext.prototype.validateBasic = function validateBasic(data, schema, dataPointerPath) {\n\tvar error;\n\tif (error = this.validateType(data, schema, dataPointerPath)) {\n\t\treturn error.prefixWith(null, \"type\");\n\t}\n\tif (error = this.validateEnum(data, schema, dataPointerPath)) {\n\t\treturn error.prefixWith(null, \"type\");\n\t}\n\treturn null;\n};\n\nValidatorContext.prototype.validateType = function validateType(data, schema) {\n\tif (schema.type === undefined) {\n\t\treturn null;\n\t}\n\tvar dataType = typeof data;\n\tif (data === null) {\n\t\tdataType = \"null\";\n\t} else if (Array.isArray(data)) {\n\t\tdataType = \"array\";\n\t}\n\tvar allowedTypes = schema.type;\n\tif (typeof allowedTypes !== \"object\") {\n\t\tallowedTypes = [allowedTypes];\n\t}\n\n\tfor (var i = 0; i < allowedTypes.length; i++) {\n\t\tvar type = allowedTypes[i];\n\t\tif (type === dataType || (type === \"integer\" && dataType === \"number\" && (data % 1 === 0))) {\n\t\t\treturn null;\n\t\t}\n\t}\n\treturn this.createError(ErrorCodes.INVALID_TYPE, {type: dataType, expected: allowedTypes.join(\"/\")});\n};\n\nValidatorContext.prototype.validateEnum = function validateEnum(data, schema) {\n\tif (schema[\"enum\"] === undefined) {\n\t\treturn null;\n\t}\n\tfor (var i = 0; i < schema[\"enum\"].length; i++) {\n\t\tvar enumVal = schema[\"enum\"][i];\n\t\tif (recursiveCompare(data, enumVal)) {\n\t\t\treturn null;\n\t\t}\n\t}\n\treturn this.createError(ErrorCodes.ENUM_MISMATCH, {value: (typeof JSON !== 'undefined') ? JSON.stringify(data) : data});\n};\n\nValidatorContext.prototype.validateNumeric = function validateNumeric(data, schema, dataPointerPath) {\n\treturn this.validateMultipleOf(data, schema, dataPointerPath)\n\t\t|| this.validateMinMax(data, schema, dataPointerPath)\n\t\t|| this.validateNaN(data, schema, dataPointerPath)\n\t\t|| null;\n};\n\nvar CLOSE_ENOUGH_LOW = Math.pow(2, -51);\nvar CLOSE_ENOUGH_HIGH = 1 - CLOSE_ENOUGH_LOW;\nValidatorContext.prototype.validateMultipleOf = function validateMultipleOf(data, schema) {\n\tvar multipleOf = schema.multipleOf || schema.divisibleBy;\n\tif (multipleOf === undefined) {\n\t\treturn null;\n\t}\n\tif (typeof data === \"number\") {\n\t\tvar remainder = (data/multipleOf)%1;\n\t\tif (remainder >= CLOSE_ENOUGH_LOW && remainder < CLOSE_ENOUGH_HIGH) {\n\t\t\treturn this.createError(ErrorCodes.NUMBER_MULTIPLE_OF, {value: data, multipleOf: multipleOf});\n\t\t}\n\t}\n\treturn null;\n};\n\nValidatorContext.prototype.validateMinMax = function validateMinMax(data, schema) {\n\tif (typeof data !== \"number\") {\n\t\treturn null;\n\t}\n\tif (schema.minimum !== undefined) {\n\t\tif (data < schema.minimum) {\n\t\t\treturn this.createError(ErrorCodes.NUMBER_MINIMUM, {value: data, minimum: schema.minimum}).prefixWith(null, \"minimum\");\n\t\t}\n\t\tif (schema.exclusiveMinimum && data === schema.minimum) {\n\t\t\treturn this.createError(ErrorCodes.NUMBER_MINIMUM_EXCLUSIVE, {value: data, minimum: schema.minimum}).prefixWith(null, \"exclusiveMinimum\");\n\t\t}\n\t}\n\tif (schema.maximum !== undefined) {\n\t\tif (data > schema.maximum) {\n\t\t\treturn this.createError(ErrorCodes.NUMBER_MAXIMUM, {value: data, maximum: schema.maximum}).prefixWith(null, \"maximum\");\n\t\t}\n\t\tif (schema.exclusiveMaximum && data === schema.maximum) {\n\t\t\treturn this.createError(ErrorCodes.NUMBER_MAXIMUM_EXCLUSIVE, {value: data, maximum: schema.maximum}).prefixWith(null, \"exclusiveMaximum\");\n\t\t}\n\t}\n\treturn null;\n};\n\nValidatorContext.prototype.validateNaN = function validateNaN(data) {\n\tif (typeof data !== \"number\") {\n\t\treturn null;\n\t}\n\tif (isNaN(data) === true || data === Infinity || data === -Infinity) {\n\t\treturn this.createError(ErrorCodes.NUMBER_NOT_A_NUMBER, {value: data}).prefixWith(null, \"type\");\n\t}\n\treturn null;\n};\n\nValidatorContext.prototype.validateString = function validateString(data, schema, dataPointerPath) {\n\treturn this.validateStringLength(data, schema, dataPointerPath)\n\t\t|| this.validateStringPattern(data, schema, dataPointerPath)\n\t\t|| null;\n};\n\nValidatorContext.prototype.validateStringLength = function validateStringLength(data, schema) {\n\tif (typeof data !== \"string\") {\n\t\treturn null;\n\t}\n\tif (schema.minLength !== undefined) {\n\t\tif (data.length < schema.minLength) {\n\t\t\treturn this.createError(ErrorCodes.STRING_LENGTH_SHORT, {length: data.length, minimum: schema.minLength}).prefixWith(null, \"minLength\");\n\t\t}\n\t}\n\tif (schema.maxLength !== undefined) {\n\t\tif (data.length > schema.maxLength) {\n\t\t\treturn this.createError(ErrorCodes.STRING_LENGTH_LONG, {length: data.length, maximum: schema.maxLength}).prefixWith(null, \"maxLength\");\n\t\t}\n\t}\n\treturn null;\n};\n\nValidatorContext.prototype.validateStringPattern = function validateStringPattern(data, schema) {\n\tif (typeof data !== \"string\" || schema.pattern === undefined) {\n\t\treturn null;\n\t}\n\tvar regexp = new RegExp(schema.pattern);\n\tif (!regexp.test(data)) {\n\t\treturn this.createError(ErrorCodes.STRING_PATTERN, {pattern: schema.pattern}).prefixWith(null, \"pattern\");\n\t}\n\treturn null;\n};\nValidatorContext.prototype.validateArray = function validateArray(data, schema, dataPointerPath) {\n\tif (!Array.isArray(data)) {\n\t\treturn null;\n\t}\n\treturn this.validateArrayLength(data, schema, dataPointerPath)\n\t\t|| this.validateArrayUniqueItems(data, schema, dataPointerPath)\n\t\t|| this.validateArrayItems(data, schema, dataPointerPath)\n\t\t|| null;\n};\n\nValidatorContext.prototype.validateArrayLength = function validateArrayLength(data, schema) {\n\tvar error;\n\tif (schema.minItems !== undefined) {\n\t\tif (data.length < schema.minItems) {\n\t\t\terror = (this.createError(ErrorCodes.ARRAY_LENGTH_SHORT, {length: data.length, minimum: schema.minItems})).prefixWith(null, \"minItems\");\n\t\t\tif (this.handleError(error)) {\n\t\t\t\treturn error;\n\t\t\t}\n\t\t}\n\t}\n\tif (schema.maxItems !== undefined) {\n\t\tif (data.length > schema.maxItems) {\n\t\t\terror = (this.createError(ErrorCodes.ARRAY_LENGTH_LONG, {length: data.length, maximum: schema.maxItems})).prefixWith(null, \"maxItems\");\n\t\t\tif (this.handleError(error)) {\n\t\t\t\treturn error;\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n};\n\nValidatorContext.prototype.validateArrayUniqueItems = function validateArrayUniqueItems(data, schema) {\n\tif (schema.uniqueItems) {\n\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\tfor (var j = i + 1; j < data.length; j++) {\n\t\t\t\tif (recursiveCompare(data[i], data[j])) {\n\t\t\t\t\tvar error = (this.createError(ErrorCodes.ARRAY_UNIQUE, {match1: i, match2: j})).prefixWith(null, \"uniqueItems\");\n\t\t\t\t\tif (this.handleError(error)) {\n\t\t\t\t\t\treturn error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n};\n\nValidatorContext.prototype.validateArrayItems = function validateArrayItems(data, schema, dataPointerPath) {\n\tif (schema.items === undefined) {\n\t\treturn null;\n\t}\n\tvar error, i;\n\tif (Array.isArray(schema.items)) {\n\t\tfor (i = 0; i < data.length; i++) {\n\t\t\tif (i < schema.items.length) {\n\t\t\t\tif (error = this.validateAll(data[i], schema.items[i], [i], [\"items\", i], dataPointerPath + \"/\" + i)) {\n\t\t\t\t\treturn error;\n\t\t\t\t}\n\t\t\t} else if (schema.additionalItems !== undefined) {\n\t\t\t\tif (typeof schema.additionalItems === \"boolean\") {\n\t\t\t\t\tif (!schema.additionalItems) {\n\t\t\t\t\t\terror = (this.createError(ErrorCodes.ARRAY_ADDITIONAL_ITEMS, {})).prefixWith(\"\" + i, \"additionalItems\");\n\t\t\t\t\t\tif (this.handleError(error)) {\n\t\t\t\t\t\t\treturn error;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (error = this.validateAll(data[i], schema.additionalItems, [i], [\"additionalItems\"], dataPointerPath + \"/\" + i)) {\n\t\t\t\t\treturn error;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfor (i = 0; i < data.length; i++) {\n\t\t\tif (error = this.validateAll(data[i], schema.items, [i], [\"items\"], dataPointerPath + \"/\" + i)) {\n\t\t\t\treturn error;\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n};\n\nValidatorContext.prototype.validateObject = function validateObject(data, schema, dataPointerPath) {\n\tif (typeof data !== \"object\" || data === null || Array.isArray(data)) {\n\t\treturn null;\n\t}\n\treturn this.validateObjectMinMaxProperties(data, schema, dataPointerPath)\n\t\t|| this.validateObjectRequiredProperties(data, schema, dataPointerPath)\n\t\t|| this.validateObjectProperties(data, schema, dataPointerPath)\n\t\t|| this.validateObjectDependencies(data, schema, dataPointerPath)\n\t\t|| null;\n};\n\nValidatorContext.prototype.validateObjectMinMaxProperties = function validateObjectMinMaxProperties(data, schema) {\n\tvar keys = Object.keys(data);\n\tvar error;\n\tif (schema.minProperties !== undefined) {\n\t\tif (keys.length < schema.minProperties) {\n\t\t\terror = this.createError(ErrorCodes.OBJECT_PROPERTIES_MINIMUM, {propertyCount: keys.length, minimum: schema.minProperties}).prefixWith(null, \"minProperties\");\n\t\t\tif (this.handleError(error)) {\n\t\t\t\treturn error;\n\t\t\t}\n\t\t}\n\t}\n\tif (schema.maxProperties !== undefined) {\n\t\tif (keys.length > schema.maxProperties) {\n\t\t\terror = this.createError(ErrorCodes.OBJECT_PROPERTIES_MAXIMUM, {propertyCount: keys.length, maximum: schema.maxProperties}).prefixWith(null, \"maxProperties\");\n\t\t\tif (this.handleError(error)) {\n\t\t\t\treturn error;\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n};\n\nValidatorContext.prototype.validateObjectRequiredProperties = function validateObjectRequiredProperties(data, schema) {\n\tif (schema.required !== undefined) {\n\t\tfor (var i = 0; i < schema.required.length; i++) {\n\t\t\tvar key = schema.required[i];\n\t\t\tif (data[key] === undefined) {\n\t\t\t\tvar error = this.createError(ErrorCodes.OBJECT_REQUIRED, {key: key}).prefixWith(null, \"\" + i).prefixWith(null, \"required\");\n\t\t\t\tif (this.handleError(error)) {\n\t\t\t\t\treturn error;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n};\n\nValidatorContext.prototype.validateObjectProperties = function validateObjectProperties(data, schema, dataPointerPath) {\n\tvar error;\n\tfor (var key in data) {\n\t\tvar keyPointerPath = dataPointerPath + \"/\" + key.replace(/~/g, '~0').replace(/\\//g, '~1');\n\t\tvar foundMatch = false;\n\t\tif (schema.properties !== undefined && schema.properties[key] !== undefined) {\n\t\t\tfoundMatch = true;\n\t\t\tif (error = this.validateAll(data[key], schema.properties[key], [key], [\"properties\", key], keyPointerPath)) {\n\t\t\t\treturn error;\n\t\t\t}\n\t\t}\n\t\tif (schema.patternProperties !== undefined) {\n\t\t\tfor (var patternKey in schema.patternProperties) {\n\t\t\t\tvar regexp = new RegExp(patternKey);\n\t\t\t\tif (regexp.test(key)) {\n\t\t\t\t\tfoundMatch = true;\n\t\t\t\t\tif (error = this.validateAll(data[key], schema.patternProperties[patternKey], [key], [\"patternProperties\", patternKey], keyPointerPath)) {\n\t\t\t\t\t\treturn error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!foundMatch) {\n\t\t\tif (schema.additionalProperties !== undefined) {\n\t\t\t\tif (this.trackUnknownProperties) {\n\t\t\t\t\tthis.knownPropertyPaths[keyPointerPath] = true;\n\t\t\t\t\tdelete this.unknownPropertyPaths[keyPointerPath];\n\t\t\t\t}\n\t\t\t\tif (typeof schema.additionalProperties === \"boolean\") {\n\t\t\t\t\tif (!schema.additionalProperties) {\n\t\t\t\t\t\terror = this.createError(ErrorCodes.OBJECT_ADDITIONAL_PROPERTIES, {}).prefixWith(key, \"additionalProperties\");\n\t\t\t\t\t\tif (this.handleError(error)) {\n\t\t\t\t\t\t\treturn error;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (error = this.validateAll(data[key], schema.additionalProperties, [key], [\"additionalProperties\"], keyPointerPath)) {\n\t\t\t\t\t\treturn error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (this.trackUnknownProperties && !this.knownPropertyPaths[keyPointerPath]) {\n\t\t\t\tthis.unknownPropertyPaths[keyPointerPath] = true;\n\t\t\t}\n\t\t} else if (this.trackUnknownProperties) {\n\t\t\tthis.knownPropertyPaths[keyPointerPath] = true;\n\t\t\tdelete this.unknownPropertyPaths[keyPointerPath];\n\t\t}\n\t}\n\treturn null;\n};\n\nValidatorContext.prototype.validateObjectDependencies = function validateObjectDependencies(data, schema, dataPointerPath) {\n\tvar error;\n\tif (schema.dependencies !== undefined) {\n\t\tfor (var depKey in schema.dependencies) {\n\t\t\tif (data[depKey] !== undefined) {\n\t\t\t\tvar dep = schema.dependencies[depKey];\n\t\t\t\tif (typeof dep === \"string\") {\n\t\t\t\t\tif (data[dep] === undefined) {\n\t\t\t\t\t\terror = this.createError(ErrorCodes.OBJECT_DEPENDENCY_KEY, {key: depKey, missing: dep}).prefixWith(null, depKey).prefixWith(null, \"dependencies\");\n\t\t\t\t\t\tif (this.handleError(error)) {\n\t\t\t\t\t\t\treturn error;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (Array.isArray(dep)) {\n\t\t\t\t\tfor (var i = 0; i < dep.length; i++) {\n\t\t\t\t\t\tvar requiredKey = dep[i];\n\t\t\t\t\t\tif (data[requiredKey] === undefined) {\n\t\t\t\t\t\t\terror = this.createError(ErrorCodes.OBJECT_DEPENDENCY_KEY, {key: depKey, missing: requiredKey}).prefixWith(null, \"\" + i).prefixWith(null, depKey).prefixWith(null, \"dependencies\");\n\t\t\t\t\t\t\tif (this.handleError(error)) {\n\t\t\t\t\t\t\t\treturn error;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (error = this.validateAll(data, dep, [], [\"dependencies\", depKey], dataPointerPath)) {\n\t\t\t\t\t\treturn error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n};\n\nValidatorContext.prototype.validateCombinations = function validateCombinations(data, schema, dataPointerPath) {\n\treturn this.validateAllOf(data, schema, dataPointerPath)\n\t\t|| this.validateAnyOf(data, schema, dataPointerPath)\n\t\t|| this.validateOneOf(data, schema, dataPointerPath)\n\t\t|| this.validateNot(data, schema, dataPointerPath)\n\t\t|| null;\n};\n\nValidatorContext.prototype.validateAllOf = function validateAllOf(data, schema, dataPointerPath) {\n\tif (schema.allOf === undefined) {\n\t\treturn null;\n\t}\n\tvar error;\n\tfor (var i = 0; i < schema.allOf.length; i++) {\n\t\tvar subSchema = schema.allOf[i];\n\t\tif (error = this.validateAll(data, subSchema, [], [\"allOf\", i], dataPointerPath)) {\n\t\t\treturn error;\n\t\t}\n\t}\n\treturn null;\n};\n\nValidatorContext.prototype.validateAnyOf = function validateAnyOf(data, schema, dataPointerPath) {\n\tif (schema.anyOf === undefined) {\n\t\treturn null;\n\t}\n\tvar errors = [];\n\tvar startErrorCount = this.errors.length;\n\tvar oldUnknownPropertyPaths, oldKnownPropertyPaths;\n\tif (this.trackUnknownProperties) {\n\t\toldUnknownPropertyPaths = this.unknownPropertyPaths;\n\t\toldKnownPropertyPaths = this.knownPropertyPaths;\n\t}\n\tvar errorAtEnd = true;\n\tfor (var i = 0; i < schema.anyOf.length; i++) {\n\t\tif (this.trackUnknownProperties) {\n\t\t\tthis.unknownPropertyPaths = {};\n\t\t\tthis.knownPropertyPaths = {};\n\t\t}\n\t\tvar subSchema = schema.anyOf[i];\n\n\t\tvar errorCount = this.errors.length;\n\t\tvar error = this.validateAll(data, subSchema, [], [\"anyOf\", i], dataPointerPath);\n\n\t\tif (error === null && errorCount === this.errors.length) {\n\t\t\tthis.errors = this.errors.slice(0, startErrorCount);\n\n\t\t\tif (this.trackUnknownProperties) {\n\t\t\t\tfor (var knownKey in this.knownPropertyPaths) {\n\t\t\t\t\toldKnownPropertyPaths[knownKey] = true;\n\t\t\t\t\tdelete oldUnknownPropertyPaths[knownKey];\n\t\t\t\t}\n\t\t\t\tfor (var unknownKey in this.unknownPropertyPaths) {\n\t\t\t\t\tif (!oldKnownPropertyPaths[unknownKey]) {\n\t\t\t\t\t\toldUnknownPropertyPaths[unknownKey] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// We need to continue looping so we catch all the property definitions, but we don't want to return an error\n\t\t\t\terrorAtEnd = false;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t\tif (error) {\n\t\t\terrors.push(error.prefixWith(null, \"\" + i).prefixWith(null, \"anyOf\"));\n\t\t}\n\t}\n\tif (this.trackUnknownProperties) {\n\t\tthis.unknownPropertyPaths = oldUnknownPropertyPaths;\n\t\tthis.knownPropertyPaths = oldKnownPropertyPaths;\n\t}\n\tif (errorAtEnd) {\n\t\terrors = errors.concat(this.errors.slice(startErrorCount));\n\t\tthis.errors = this.errors.slice(0, startErrorCount);\n\t\treturn this.createError(ErrorCodes.ANY_OF_MISSING, {}, \"\", \"/anyOf\", errors);\n\t}\n};\n\nValidatorContext.prototype.validateOneOf = function validateOneOf(data, schema, dataPointerPath) {\n\tif (schema.oneOf === undefined) {\n\t\treturn null;\n\t}\n\tvar validIndex = null;\n\tvar errors = [];\n\tvar startErrorCount = this.errors.length;\n\tvar oldUnknownPropertyPaths, oldKnownPropertyPaths;\n\tif (this.trackUnknownProperties) {\n\t\toldUnknownPropertyPaths = this.unknownPropertyPaths;\n\t\toldKnownPropertyPaths = this.knownPropertyPaths;\n\t}\n\tfor (var i = 0; i < schema.oneOf.length; i++) {\n\t\tif (this.trackUnknownProperties) {\n\t\t\tthis.unknownPropertyPaths = {};\n\t\t\tthis.knownPropertyPaths = {};\n\t\t}\n\t\tvar subSchema = schema.oneOf[i];\n\n\t\tvar errorCount = this.errors.length;\n\t\tvar error = this.validateAll(data, subSchema, [], [\"oneOf\", i], dataPointerPath);\n\n\t\tif (error === null && errorCount === this.errors.length) {\n\t\t\tif (validIndex === null) {\n\t\t\t\tvalidIndex = i;\n\t\t\t} else {\n\t\t\t\tthis.errors = this.errors.slice(0, startErrorCount);\n\t\t\t\treturn this.createError(ErrorCodes.ONE_OF_MULTIPLE, {index1: validIndex, index2: i}, \"\", \"/oneOf\");\n\t\t\t}\n\t\t\tif (this.trackUnknownProperties) {\n\t\t\t\tfor (var knownKey in this.knownPropertyPaths) {\n\t\t\t\t\toldKnownPropertyPaths[knownKey] = true;\n\t\t\t\t\tdelete oldUnknownPropertyPaths[knownKey];\n\t\t\t\t}\n\t\t\t\tfor (var unknownKey in this.unknownPropertyPaths) {\n\t\t\t\t\tif (!oldKnownPropertyPaths[unknownKey]) {\n\t\t\t\t\t\toldUnknownPropertyPaths[unknownKey] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (error) {\n\t\t\terrors.push(error);\n\t\t}\n\t}\n\tif (this.trackUnknownProperties) {\n\t\tthis.unknownPropertyPaths = oldUnknownPropertyPaths;\n\t\tthis.knownPropertyPaths = oldKnownPropertyPaths;\n\t}\n\tif (validIndex === null) {\n\t\terrors = errors.concat(this.errors.slice(startErrorCount));\n\t\tthis.errors = this.errors.slice(0, startErrorCount);\n\t\treturn this.createError(ErrorCodes.ONE_OF_MISSING, {}, \"\", \"/oneOf\", errors);\n\t} else {\n\t\tthis.errors = this.errors.slice(0, startErrorCount);\n\t}\n\treturn null;\n};\n\nValidatorContext.prototype.validateNot = function validateNot(data, schema, dataPointerPath) {\n\tif (schema.not === undefined) {\n\t\treturn null;\n\t}\n\tvar oldErrorCount = this.errors.length;\n\tvar oldUnknownPropertyPaths, oldKnownPropertyPaths;\n\tif (this.trackUnknownProperties) {\n\t\toldUnknownPropertyPaths = this.unknownPropertyPaths;\n\t\toldKnownPropertyPaths = this.knownPropertyPaths;\n\t\tthis.unknownPropertyPaths = {};\n\t\tthis.knownPropertyPaths = {};\n\t}\n\tvar error = this.validateAll(data, schema.not, null, null, dataPointerPath);\n\tvar notErrors = this.errors.slice(oldErrorCount);\n\tthis.errors = this.errors.slice(0, oldErrorCount);\n\tif (this.trackUnknownProperties) {\n\t\tthis.unknownPropertyPaths = oldUnknownPropertyPaths;\n\t\tthis.knownPropertyPaths = oldKnownPropertyPaths;\n\t}\n\tif (error === null && notErrors.length === 0) {\n\t\treturn this.createError(ErrorCodes.NOT_PASSED, {}, \"\", \"/not\");\n\t}\n\treturn null;\n};\n\nValidatorContext.prototype.validateHypermedia = function validateCombinations(data, schema, dataPointerPath) {\n\tif (!schema.links) {\n\t\treturn null;\n\t}\n\tvar error;\n\tfor (var i = 0; i < schema.links.length; i++) {\n\t\tvar ldo = schema.links[i];\n\t\tif (ldo.rel === \"describedby\") {\n\t\t\tvar template = new UriTemplate(ldo.href);\n\t\t\tvar allPresent = true;\n\t\t\tfor (var j = 0; j < template.varNames.length; j++) {\n\t\t\t\tif (!(template.varNames[j] in data)) {\n\t\t\t\t\tallPresent = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (allPresent) {\n\t\t\t\tvar schemaUrl = template.fillFromObject(data);\n\t\t\t\tvar subSchema = {\"$ref\": schemaUrl};\n\t\t\t\tif (error = this.validateAll(data, subSchema, [], [\"links\", i], dataPointerPath)) {\n\t\t\t\t\treturn error;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n// parseURI() and resolveUrl() are from https://gist.github.com/1088850\n//   -  released as public domain by author (\"Yaffle\") - see comments on gist\n\nfunction parseURI(url) {\n\tvar m = String(url).replace(/^\\s+|\\s+$/g, '').match(/^([^:\\/?#]+:)?(\\/\\/(?:[^:@]*(?::[^:@]*)?@)?(([^:\\/?#]*)(?::(\\d*))?))?([^?#]*)(\\?[^#]*)?(#[\\s\\S]*)?/);\n\t// authority = '//' + user + ':' + pass '@' + hostname + ':' port\n\treturn (m ? {\n\t\thref     : m[0] || '',\n\t\tprotocol : m[1] || '',\n\t\tauthority: m[2] || '',\n\t\thost     : m[3] || '',\n\t\thostname : m[4] || '',\n\t\tport     : m[5] || '',\n\t\tpathname : m[6] || '',\n\t\tsearch   : m[7] || '',\n\t\thash     : m[8] || ''\n\t} : null);\n}\n\nfunction resolveUrl(base, href) {// RFC 3986\n\n\tfunction removeDotSegments(input) {\n\t\tvar output = [];\n\t\tinput.replace(/^(\\.\\.?(\\/|$))+/, '')\n\t\t\t.replace(/\\/(\\.(\\/|$))+/g, '/')\n\t\t\t.replace(/\\/\\.\\.$/, '/../')\n\t\t\t.replace(/\\/?[^\\/]*/g, function (p) {\n\t\t\t\tif (p === '/..') {\n\t\t\t\t\toutput.pop();\n\t\t\t\t} else {\n\t\t\t\t\toutput.push(p);\n\t\t\t\t}\n\t\t});\n\t\treturn output.join('').replace(/^\\//, input.charAt(0) === '/' ? '/' : '');\n\t}\n\n\thref = parseURI(href || '');\n\tbase = parseURI(base || '');\n\n\treturn !href || !base ? null : (href.protocol || base.protocol) +\n\t\t(href.protocol || href.authority ? href.authority : base.authority) +\n\t\tremoveDotSegments(href.protocol || href.authority || href.pathname.charAt(0) === '/' ? href.pathname : (href.pathname ? ((base.authority && !base.pathname ? '/' : '') + base.pathname.slice(0, base.pathname.lastIndexOf('/') + 1) + href.pathname) : base.pathname)) +\n\t\t(href.protocol || href.authority || href.pathname ? href.search : (href.search || base.search)) +\n\t\thref.hash;\n}\n\nfunction getDocumentUri(uri) {\n\treturn uri.split('#')[0];\n}\nfunction normSchema(schema, baseUri) {\n\tif (schema && typeof schema === \"object\") {\n\t\tif (baseUri === undefined) {\n\t\t\tbaseUri = schema.id;\n\t\t} else if (typeof schema.id === \"string\") {\n\t\t\tbaseUri = resolveUrl(baseUri, schema.id);\n\t\t\tschema.id = baseUri;\n\t\t}\n\t\tif (Array.isArray(schema)) {\n\t\t\tfor (var i = 0; i < schema.length; i++) {\n\t\t\t\tnormSchema(schema[i], baseUri);\n\t\t\t}\n\t\t} else {\n\t\t\tif (typeof schema['$ref'] === \"string\") {\n\t\t\t\tschema['$ref'] = resolveUrl(baseUri, schema['$ref']);\n\t\t\t}\n\t\t\tfor (var key in schema) {\n\t\t\t\tif (key !== \"enum\") {\n\t\t\t\t\tnormSchema(schema[key], baseUri);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nvar ErrorCodes = {\n\tINVALID_TYPE: 0,\n\tENUM_MISMATCH: 1,\n\tANY_OF_MISSING: 10,\n\tONE_OF_MISSING: 11,\n\tONE_OF_MULTIPLE: 12,\n\tNOT_PASSED: 13,\n\t// Numeric errors\n\tNUMBER_MULTIPLE_OF: 100,\n\tNUMBER_MINIMUM: 101,\n\tNUMBER_MINIMUM_EXCLUSIVE: 102,\n\tNUMBER_MAXIMUM: 103,\n\tNUMBER_MAXIMUM_EXCLUSIVE: 104,\n\tNUMBER_NOT_A_NUMBER: 105,\n\t// String errors\n\tSTRING_LENGTH_SHORT: 200,\n\tSTRING_LENGTH_LONG: 201,\n\tSTRING_PATTERN: 202,\n\t// Object errors\n\tOBJECT_PROPERTIES_MINIMUM: 300,\n\tOBJECT_PROPERTIES_MAXIMUM: 301,\n\tOBJECT_REQUIRED: 302,\n\tOBJECT_ADDITIONAL_PROPERTIES: 303,\n\tOBJECT_DEPENDENCY_KEY: 304,\n\t// Array errors\n\tARRAY_LENGTH_SHORT: 400,\n\tARRAY_LENGTH_LONG: 401,\n\tARRAY_UNIQUE: 402,\n\tARRAY_ADDITIONAL_ITEMS: 403,\n\t// Custom/user-defined errors\n\tFORMAT_CUSTOM: 500,\n\tKEYWORD_CUSTOM: 501,\n\t// Schema structure\n\tCIRCULAR_REFERENCE: 600,\n\t// Non-standard validation options\n\tUNKNOWN_PROPERTY: 1000\n};\nvar ErrorCodeLookup = {};\nfor (var key in ErrorCodes) {\n\tErrorCodeLookup[ErrorCodes[key]] = key;\n}\nvar ErrorMessagesDefault = {\n\tINVALID_TYPE: \"Invalid type: {type} (expected {expected})\",\n\tENUM_MISMATCH: \"No enum match for: {value}\",\n\tANY_OF_MISSING: \"Data does not match any schemas from \\\"anyOf\\\"\",\n\tONE_OF_MISSING: \"Data does not match any schemas from \\\"oneOf\\\"\",\n\tONE_OF_MULTIPLE: \"Data is valid against more than one schema from \\\"oneOf\\\": indices {index1} and {index2}\",\n\tNOT_PASSED: \"Data matches schema from \\\"not\\\"\",\n\t// Numeric errors\n\tNUMBER_MULTIPLE_OF: \"Value {value} is not a multiple of {multipleOf}\",\n\tNUMBER_MINIMUM: \"Value {value} is less than minimum {minimum}\",\n\tNUMBER_MINIMUM_EXCLUSIVE: \"Value {value} is equal to exclusive minimum {minimum}\",\n\tNUMBER_MAXIMUM: \"Value {value} is greater than maximum {maximum}\",\n\tNUMBER_MAXIMUM_EXCLUSIVE: \"Value {value} is equal to exclusive maximum {maximum}\",\n\tNUMBER_NOT_A_NUMBER: \"Value {value} is not a valid number\",\n\t// String errors\n\tSTRING_LENGTH_SHORT: \"String is too short ({length} chars), minimum {minimum}\",\n\tSTRING_LENGTH_LONG: \"String is too long ({length} chars), maximum {maximum}\",\n\tSTRING_PATTERN: \"String does not match pattern: {pattern}\",\n\t// Object errors\n\tOBJECT_PROPERTIES_MINIMUM: \"Too few properties defined ({propertyCount}), minimum {minimum}\",\n\tOBJECT_PROPERTIES_MAXIMUM: \"Too many properties defined ({propertyCount}), maximum {maximum}\",\n\tOBJECT_REQUIRED: \"Missing required property: {key}\",\n\tOBJECT_ADDITIONAL_PROPERTIES: \"Additional properties not allowed\",\n\tOBJECT_DEPENDENCY_KEY: \"Dependency failed - key must exist: {missing} (due to key: {key})\",\n\t// Array errors\n\tARRAY_LENGTH_SHORT: \"Array is too short ({length}), minimum {minimum}\",\n\tARRAY_LENGTH_LONG: \"Array is too long ({length}), maximum {maximum}\",\n\tARRAY_UNIQUE: \"Array items are not unique (indices {match1} and {match2})\",\n\tARRAY_ADDITIONAL_ITEMS: \"Additional items not allowed\",\n\t// Format errors\n\tFORMAT_CUSTOM: \"Format validation failed ({message})\",\n\tKEYWORD_CUSTOM: \"Keyword failed: {key} ({message})\",\n\t// Schema structure\n\tCIRCULAR_REFERENCE: \"Circular $refs: {urls}\",\n\t// Non-standard validation options\n\tUNKNOWN_PROPERTY: \"Unknown property (not in schema)\"\n};\n\nfunction ValidationError(code, message, params, dataPath, schemaPath, subErrors) {\n\tError.call(this);\n\tif (code === undefined) {\n\t\tthrow new Error (\"No code supplied for error: \"+ message);\n\t}\n\tthis.message = message;\n\tthis.params = params;\n\tthis.code = code;\n\tthis.dataPath = dataPath || \"\";\n\tthis.schemaPath = schemaPath || \"\";\n\tthis.subErrors = subErrors || null;\n\n\tvar err = new Error(this.message);\n\tthis.stack = err.stack || err.stacktrace;\n\tif (!this.stack) {\n\t\ttry {\n\t\t\tthrow err;\n\t\t}\n\t\tcatch(err) {\n\t\t\tthis.stack = err.stack || err.stacktrace;\n\t\t}\n\t}\n}\nValidationError.prototype = Object.create(Error.prototype);\nValidationError.prototype.constructor = ValidationError;\nValidationError.prototype.name = 'ValidationError';\n\nValidationError.prototype.prefixWith = function (dataPrefix, schemaPrefix) {\n\tif (dataPrefix !== null) {\n\t\tdataPrefix = dataPrefix.replace(/~/g, \"~0\").replace(/\\//g, \"~1\");\n\t\tthis.dataPath = \"/\" + dataPrefix + this.dataPath;\n\t}\n\tif (schemaPrefix !== null) {\n\t\tschemaPrefix = schemaPrefix.replace(/~/g, \"~0\").replace(/\\//g, \"~1\");\n\t\tthis.schemaPath = \"/\" + schemaPrefix + this.schemaPath;\n\t}\n\tif (this.subErrors !== null) {\n\t\tfor (var i = 0; i < this.subErrors.length; i++) {\n\t\t\tthis.subErrors[i].prefixWith(dataPrefix, schemaPrefix);\n\t\t}\n\t}\n\treturn this;\n};\n\nfunction isTrustedUrl(baseUrl, testUrl) {\n\tif(testUrl.substring(0, baseUrl.length) === baseUrl){\n\t\tvar remainder = testUrl.substring(baseUrl.length);\n\t\tif ((testUrl.length > 0 && testUrl.charAt(baseUrl.length - 1) === \"/\")\n\t\t\t|| remainder.charAt(0) === \"#\"\n\t\t\t|| remainder.charAt(0) === \"?\") {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nvar languages = {};\nfunction createApi(language) {\n\tvar globalContext = new ValidatorContext();\n\tvar currentLanguage = language || 'en';\n\tvar api = {\n\t\taddFormat: function () {\n\t\t\tglobalContext.addFormat.apply(globalContext, arguments);\n\t\t},\n\t\tlanguage: function (code) {\n\t\t\tif (!code) {\n\t\t\t\treturn currentLanguage;\n\t\t\t}\n\t\t\tif (!languages[code]) {\n\t\t\t\tcode = code.split('-')[0]; // fall back to base language\n\t\t\t}\n\t\t\tif (languages[code]) {\n\t\t\t\tcurrentLanguage = code;\n\t\t\t\treturn code; // so you can tell if fall-back has happened\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\taddLanguage: function (code, messageMap) {\n\t\t\tvar key;\n\t\t\tfor (key in ErrorCodes) {\n\t\t\t\tif (messageMap[key] && !messageMap[ErrorCodes[key]]) {\n\t\t\t\t\tmessageMap[ErrorCodes[key]] = messageMap[key];\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar rootCode = code.split('-')[0];\n\t\t\tif (!languages[rootCode]) { // use for base language if not yet defined\n\t\t\t\tlanguages[code] = messageMap;\n\t\t\t\tlanguages[rootCode] = messageMap;\n\t\t\t} else {\n\t\t\t\tlanguages[code] = Object.create(languages[rootCode]);\n\t\t\t\tfor (key in messageMap) {\n\t\t\t\t\tif (typeof languages[rootCode][key] === 'undefined') {\n\t\t\t\t\t\tlanguages[rootCode][key] = messageMap[key];\n\t\t\t\t\t}\n\t\t\t\t\tlanguages[code][key] = messageMap[key];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\t\tfreshApi: function (language) {\n\t\t\tvar result = createApi();\n\t\t\tif (language) {\n\t\t\t\tresult.language(language);\n\t\t\t}\n\t\t\treturn result;\n\t\t},\n\t\tvalidate: function (data, schema, checkRecursive, banUnknownProperties) {\n\t\t\tvar context = new ValidatorContext(globalContext, false, languages[currentLanguage], checkRecursive, banUnknownProperties);\n\t\t\tif (typeof schema === \"string\") {\n\t\t\t\tschema = {\"$ref\": schema};\n\t\t\t}\n\t\t\tcontext.addSchema(\"\", schema);\n\t\t\tvar error = context.validateAll(data, schema, null, null, \"\");\n\t\t\tif (!error && banUnknownProperties) {\n\t\t\t\terror = context.banUnknownProperties();\n\t\t\t}\n\t\t\tthis.error = error;\n\t\t\tthis.missing = context.missing;\n\t\t\tthis.valid = (error === null);\n\t\t\treturn this.valid;\n\t\t},\n\t\tvalidateResult: function () {\n\t\t\tvar result = {};\n\t\t\tthis.validate.apply(result, arguments);\n\t\t\treturn result;\n\t\t},\n\t\tvalidateMultiple: function (data, schema, checkRecursive, banUnknownProperties) {\n\t\t\tvar context = new ValidatorContext(globalContext, true, languages[currentLanguage], checkRecursive, banUnknownProperties);\n\t\t\tif (typeof schema === \"string\") {\n\t\t\t\tschema = {\"$ref\": schema};\n\t\t\t}\n\t\t\tcontext.addSchema(\"\", schema);\n\t\t\tcontext.validateAll(data, schema, null, null, \"\");\n\t\t\tif (banUnknownProperties) {\n\t\t\t\tcontext.banUnknownProperties();\n\t\t\t}\n\t\t\tvar result = {};\n\t\t\tresult.errors = context.errors;\n\t\t\tresult.missing = context.missing;\n\t\t\tresult.valid = (result.errors.length === 0);\n\t\t\treturn result;\n\t\t},\n\t\taddSchema: function () {\n\t\t\treturn globalContext.addSchema.apply(globalContext, arguments);\n\t\t},\n\t\tgetSchema: function () {\n\t\t\treturn globalContext.getSchema.apply(globalContext, arguments);\n\t\t},\n\t\tgetSchemaMap: function () {\n\t\t\treturn globalContext.getSchemaMap.apply(globalContext, arguments);\n\t\t},\n\t\tgetSchemaUris: function () {\n\t\t\treturn globalContext.getSchemaUris.apply(globalContext, arguments);\n\t\t},\n\t\tgetMissingUris: function () {\n\t\t\treturn globalContext.getMissingUris.apply(globalContext, arguments);\n\t\t},\n\t\tdropSchemas: function () {\n\t\t\tglobalContext.dropSchemas.apply(globalContext, arguments);\n\t\t},\n\t\tdefineKeyword: function () {\n\t\t\tglobalContext.defineKeyword.apply(globalContext, arguments);\n\t\t},\n\t\tdefineError: function (codeName, codeNumber, defaultMessage) {\n\t\t\tif (typeof codeName !== 'string' || !/^[A-Z]+(_[A-Z]+)*$/.test(codeName)) {\n\t\t\t\tthrow new Error('Code name must be a string in UPPER_CASE_WITH_UNDERSCORES');\n\t\t\t}\n\t\t\tif (typeof codeNumber !== 'number' || codeNumber%1 !== 0 || codeNumber < 10000) {\n\t\t\t\tthrow new Error('Code number must be an integer > 10000');\n\t\t\t}\n\t\t\tif (typeof ErrorCodes[codeName] !== 'undefined') {\n\t\t\t\tthrow new Error('Error already defined: ' + codeName + ' as ' + ErrorCodes[codeName]);\n\t\t\t}\n\t\t\tif (typeof ErrorCodeLookup[codeNumber] !== 'undefined') {\n\t\t\t\tthrow new Error('Error code already used: ' + ErrorCodeLookup[codeNumber] + ' as ' + codeNumber);\n\t\t\t}\n\t\t\tErrorCodes[codeName] = codeNumber;\n\t\t\tErrorCodeLookup[codeNumber] = codeName;\n\t\t\tErrorMessagesDefault[codeName] = ErrorMessagesDefault[codeNumber] = defaultMessage;\n\t\t\tfor (var langCode in languages) {\n\t\t\t\tvar language = languages[langCode];\n\t\t\t\tif (language[codeName]) {\n\t\t\t\t\tlanguage[codeNumber] = language[codeNumber] || language[codeName];\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\treset: function () {\n\t\t\tglobalContext.reset();\n\t\t\tthis.error = null;\n\t\t\tthis.missing = [];\n\t\t\tthis.valid = true;\n\t\t},\n\t\tmissing: [],\n\t\terror: null,\n\t\tvalid: true,\n\t\tnormSchema: normSchema,\n\t\tresolveUrl: resolveUrl,\n\t\tgetDocumentUri: getDocumentUri,\n\t\terrorCodes: ErrorCodes\n\t};\n\treturn api;\n}\n\nvar tv4 = createApi();\ntv4.addLanguage('en-gb', ErrorMessagesDefault);\n\n//legacy property\ntv4.tv4 = tv4;\n\nreturn tv4; // used by _header.js to globalise.\n\n}));","/*\n AngularJS v1.3.18\n (c) 2010-2014 Google, Inc. http://angularjs.org\n License: MIT\n*/\n(function(p,g,n){'use strict';g.module(\"ngCookies\",[\"ng\"]).factory(\"$cookies\",[\"$rootScope\",\"$browser\",function(e,b){var c={},f={},h,k=!1,l=g.copy,m=g.isUndefined;b.addPollFn(function(){var a=b.cookies();h!=a&&(h=a,l(a,f),l(a,c),k&&e.$apply())})();k=!0;e.$watch(function(){var a,d,e;for(a in f)m(c[a])&&(b.cookies(a,n),delete f[a]);for(a in c)d=c[a],g.isString(d)||(d=\"\"+d,c[a]=d),d!==f[a]&&(b.cookies(a,d),f[a]=d,e=!0);if(e)for(a in d=b.cookies(),c)c[a]!==d[a]&&(m(d[a])?(delete c[a],delete f[a]):c[a]=\nf[a]=d[a])});return c}]).factory(\"$cookieStore\",[\"$cookies\",function(e){return{get:function(b){return(b=e[b])?g.fromJson(b):b},put:function(b,c){e[b]=g.toJson(c)},remove:function(b){delete e[b]}}}])})(window,window.angular);\n//# sourceMappingURL=angular-cookies.min.js.map\n","/*!\n * ngTagsInput v2.3.0\n * http://mbenford.github.io/ngTagsInput\n *\n * Copyright (c) 2013-2015 Michael Benford\n * License: MIT\n *\n * Generated at 2015-03-23 18:16:24 -0300\n */\n(function() {\n'use strict';\n\nvar KEYS = {\n    backspace: 8,\n    tab: 9,\n    enter: 13,\n    escape: 27,\n    space: 32,\n    up: 38,\n    down: 40,\n    left: 37,\n    right: 39,\n    delete: 46,\n    comma: 188\n};\n\nvar MAX_SAFE_INTEGER = 9007199254740991;\nvar SUPPORTED_INPUT_TYPES = ['text', 'email', 'url'];\n\nvar tagsInput = angular.module('ngTagsInput', []);\n\n/**\n * @ngdoc directive\n * @name tagsInput\n * @module ngTagsInput\n *\n * @description\n * Renders an input box with tag editing support.\n *\n * @param {string} ngModel Assignable angular expression to data-bind to.\n * @param {string=} [displayProperty=text] Property to be rendered as the tag label.\n * @param {string=} [keyProperty=text] Property to be used as a unique identifier for the tag.\n * @param {string=} [type=text] Type of the input element. Only 'text', 'email' and 'url' are supported values.\n * @param {number=} tabindex Tab order of the control.\n * @param {string=} [placeholder=Add a tag] Placeholder text for the control.\n * @param {number=} [minLength=3] Minimum length for a new tag.\n * @param {number=} [maxLength=MAX_SAFE_INTEGER] Maximum length allowed for a new tag.\n * @param {number=} [minTags=0] Sets minTags validation error key if the number of tags added is less than minTags.\n * @param {number=} [maxTags=MAX_SAFE_INTEGER] Sets maxTags validation error key if the number of tags added is greater than maxTags.\n * @param {boolean=} [allowLeftoverText=false] Sets leftoverText validation error key if there is any leftover text in\n *                                             the input element when the directive loses focus.\n * @param {string=} [removeTagSymbol=×] Symbol character for the remove tag button.\n * @param {boolean=} [addOnEnter=true] Flag indicating that a new tag will be added on pressing the ENTER key.\n * @param {boolean=} [addOnSpace=false] Flag indicating that a new tag will be added on pressing the SPACE key.\n * @param {boolean=} [addOnComma=true] Flag indicating that a new tag will be added on pressing the COMMA key.\n * @param {boolean=} [addOnBlur=true] Flag indicating that a new tag will be added when the input field loses focus.\n * @param {boolean=} [addOnPaste=false] Flag indicating that the text pasted into the input field will be split into tags.\n * @param {string=} [pasteSplitPattern=,] Regular expression used to split the pasted text into tags.\n * @param {boolean=} [replaceSpacesWithDashes=true] Flag indicating that spaces will be replaced with dashes.\n * @param {string=} [allowedTagsPattern=.+] Regular expression that determines whether a new tag is valid.\n * @param {boolean=} [enableEditingLastTag=false] Flag indicating that the last tag will be moved back into\n *                                                the new tag input box instead of being removed when the backspace key\n *                                                is pressed and the input box is empty.\n * @param {boolean=} [addFromAutocompleteOnly=false] Flag indicating that only tags coming from the autocomplete list will be allowed.\n *                                                   When this flag is true, addOnEnter, addOnComma, addOnSpace, addOnBlur and\n *                                                   allowLeftoverText values are ignored.\n * @param {boolean=} [spellcheck=true] Flag indicating whether the browser's spellcheck is enabled for the input field or not.\n * @param {expression} onTagAdding Expression to evaluate that will be invoked before adding a new tag. The new tag is available as $tag. This method must return either true or false. If false, the tag will not be added.\n * @param {expression} onTagAdded Expression to evaluate upon adding a new tag. The new tag is available as $tag.\n * @param {expression} onInvalidTag Expression to evaluate when a tag is invalid. The invalid tag is available as $tag.\n * @param {expression} onTagRemoving Expression to evaluate that will be invoked before removing a tag. The tag is available as $tag. This method must return either true or false. If false, the tag will not be removed.\n * @param {expression} onTagRemoved Expression to evaluate upon removing an existing tag. The removed tag is available as $tag.\n */\ntagsInput.directive('tagsInput', [\"$timeout\",\"$document\",\"$window\",\"tagsInputConfig\",\"tiUtil\", function($timeout, $document, $window, tagsInputConfig, tiUtil) {\n    function TagList(options, events, onTagAdding, onTagRemoving) {\n        var self = {}, getTagText, setTagText, tagIsValid;\n\n        getTagText = function(tag) {\n            return tiUtil.safeToString(tag[options.displayProperty]);\n        };\n\n        setTagText = function(tag, text) {\n            tag[options.displayProperty] = text;\n        };\n\n        tagIsValid = function(tag) {\n            var tagText = getTagText(tag);\n\n            return tagText &&\n                   tagText.length >= options.minLength &&\n                   tagText.length <= options.maxLength &&\n                   options.allowedTagsPattern.test(tagText) &&\n                   !tiUtil.findInObjectArray(self.items, tag, options.keyProperty || options.displayProperty) &&\n                   onTagAdding({ $tag: tag });\n        };\n\n        self.items = [];\n\n        self.addText = function(text) {\n            var tag = {};\n            setTagText(tag, text);\n            return self.add(tag);\n        };\n\n        self.add = function(tag) {\n            var tagText = getTagText(tag);\n\n            if (options.replaceSpacesWithDashes) {\n                tagText = tiUtil.replaceSpacesWithDashes(tagText);\n            }\n\n            setTagText(tag, tagText);\n\n            if (tagIsValid(tag)) {\n                self.items.push(tag);\n                events.trigger('tag-added', { $tag: tag });\n            }\n            else if (tagText) {\n                events.trigger('invalid-tag', { $tag: tag });\n            }\n\n            return tag;\n        };\n\n        self.remove = function(index) {\n            var tag = self.items[index];\n\n            if (onTagRemoving({ $tag: tag }))  {\n                self.items.splice(index, 1);\n                self.clearSelection();\n                events.trigger('tag-removed', { $tag: tag });\n                return tag;\n            }\n        };\n\n        self.select = function(index) {\n            if (index < 0) {\n                index = self.items.length - 1;\n            }\n            else if (index >= self.items.length) {\n                index = 0;\n            }\n\n            self.index = index;\n            self.selected = self.items[index];\n        };\n\n        self.selectPrior = function() {\n            self.select(--self.index);\n        };\n\n        self.selectNext = function() {\n            self.select(++self.index);\n        };\n\n        self.removeSelected = function() {\n            return self.remove(self.index);\n        };\n\n        self.clearSelection = function() {\n            self.selected = null;\n            self.index = -1;\n        };\n\n        self.clearSelection();\n\n        return self;\n    }\n\n    function validateType(type) {\n        return SUPPORTED_INPUT_TYPES.indexOf(type) !== -1;\n    }\n\n    return {\n        restrict: 'E',\n        require: 'ngModel',\n        scope: {\n            tags: '=ngModel',\n            onTagAdding: '&',\n            onTagAdded: '&',\n            onInvalidTag: '&',\n            onTagRemoving: '&',\n            onTagRemoved: '&'\n        },\n        replace: false,\n        transclude: true,\n        templateUrl: 'ngTagsInput/tags-input.html',\n        controller: [\"$scope\",\"$attrs\",\"$element\", function($scope, $attrs, $element) {\n            $scope.events = tiUtil.simplePubSub();\n\n            tagsInputConfig.load('tagsInput', $scope, $attrs, {\n                template: [String, 'ngTagsInput/tag-item.html'],\n                type: [String, 'text', validateType],\n                placeholder: [String, 'Add a tag'],\n                tabindex: [Number, null],\n                removeTagSymbol: [String, String.fromCharCode(215)],\n                replaceSpacesWithDashes: [Boolean, true],\n                minLength: [Number, 3],\n                maxLength: [Number, MAX_SAFE_INTEGER],\n                addOnEnter: [Boolean, true],\n                addOnSpace: [Boolean, false],\n                addOnComma: [Boolean, true],\n                addOnBlur: [Boolean, true],\n                addOnPaste: [Boolean, false],\n                pasteSplitPattern: [RegExp, /,/],\n                allowedTagsPattern: [RegExp, /.+/],\n                enableEditingLastTag: [Boolean, false],\n                minTags: [Number, 0],\n                maxTags: [Number, MAX_SAFE_INTEGER],\n                displayProperty: [String, 'text'],\n                keyProperty: [String, ''],\n                allowLeftoverText: [Boolean, false],\n                addFromAutocompleteOnly: [Boolean, false],\n                spellcheck: [Boolean, true]\n            });\n\n            $scope.tagList = new TagList($scope.options, $scope.events,\n                tiUtil.handleUndefinedResult($scope.onTagAdding, true),\n                tiUtil.handleUndefinedResult($scope.onTagRemoving, true));\n\n            this.registerAutocomplete = function() {\n                var input = $element.find('input');\n\n                return {\n                    addTag: function(tag) {\n                        return $scope.tagList.add(tag);\n                    },\n                    focusInput: function() {\n                        input[0].focus();\n                    },\n                    getTags: function() {\n                        return $scope.tags;\n                    },\n                    getCurrentTagText: function() {\n                        return $scope.newTag.text;\n                    },\n                    getOptions: function() {\n                        return $scope.options;\n                    },\n                    on: function(name, handler) {\n                        $scope.events.on(name, handler);\n                        return this;\n                    }\n                };\n            };\n\n            this.registerTagItem = function() {\n                return {\n                    getOptions: function() {\n                        return $scope.options;\n                    },\n                    removeTag: function(index) {\n                        if ($scope.disabled) {\n                            return;\n                        }\n                        $scope.tagList.remove(index);\n                    }\n                };\n            };\n        }],\n        link: function(scope, element, attrs, ngModelCtrl) {\n            var hotkeys = [KEYS.enter, KEYS.comma, KEYS.space, KEYS.backspace, KEYS.delete, KEYS.left, KEYS.right],\n                tagList = scope.tagList,\n                events = scope.events,\n                options = scope.options,\n                input = element.find('input'),\n                validationOptions = ['minTags', 'maxTags', 'allowLeftoverText'],\n                setElementValidity;\n\n            setElementValidity = function() {\n                ngModelCtrl.$setValidity('maxTags', scope.tags.length <= options.maxTags);\n                ngModelCtrl.$setValidity('minTags', scope.tags.length >= options.minTags);\n                ngModelCtrl.$setValidity('leftoverText', scope.hasFocus || options.allowLeftoverText ? true : !scope.newTag.text);\n            };\n\n            ngModelCtrl.$isEmpty = function(value) {\n                return !value || !value.length;\n            };\n\n            scope.newTag = {\n                text: '',\n                invalid: null,\n                setText: function(value) {\n                    this.text = value;\n                    events.trigger('input-change', value);\n                }\n            };\n\n            scope.track = function(tag) {\n                return tag[options.keyProperty || options.displayProperty];\n            };\n\n            scope.$watch('tags', function(value) {\n                scope.tags = tiUtil.makeObjectArray(value, options.displayProperty);\n                tagList.items = scope.tags;\n            });\n\n            scope.$watch('tags.length', function() {\n                setElementValidity();\n            });\n\n            attrs.$observe('disabled', function(value) {\n                scope.disabled = value;\n            });\n\n            scope.eventHandlers = {\n                input: {\n                    change: function(text) {\n                        events.trigger('input-change', text);\n                    },\n                    keydown: function($event) {\n                        events.trigger('input-keydown', $event);\n                    },\n                    focus: function() {\n                        if (scope.hasFocus) {\n                            return;\n                        }\n\n                        scope.hasFocus = true;\n                        events.trigger('input-focus');\n                    },\n                    blur: function() {\n                        $timeout(function() {\n                            var activeElement = $document.prop('activeElement'),\n                                lostFocusToBrowserWindow = activeElement === input[0],\n                                lostFocusToChildElement = element[0].contains(activeElement);\n\n                            if (lostFocusToBrowserWindow || !lostFocusToChildElement) {\n                                scope.hasFocus = false;\n                                events.trigger('input-blur');\n                            }\n                        });\n                    },\n                    paste: function($event) {\n                        $event.getTextData = function() {\n                            var clipboardData = $event.clipboardData || ($event.originalEvent && $event.originalEvent.clipboardData);\n                            return clipboardData ? clipboardData.getData('text/plain') : $window.clipboardData.getData('Text');\n                        };\n                        events.trigger('input-paste', $event);\n                    }\n                },\n                host: {\n                    click: function() {\n                        if (scope.disabled) {\n                            return;\n                        }\n                        input[0].focus();\n                    }\n                }\n            };\n\n            events\n                .on('tag-added', scope.onTagAdded)\n                .on('invalid-tag', scope.onInvalidTag)\n                .on('tag-removed', scope.onTagRemoved)\n                .on('tag-added', function() {\n                    scope.newTag.setText('');\n                })\n                .on('tag-added tag-removed', function() {\n                    // Sets the element to its dirty state\n                    // In Angular 1.3 this will be replaced with $setDirty.\n                    ngModelCtrl.$setViewValue(scope.tags);\n                })\n                .on('invalid-tag', function() {\n                    scope.newTag.invalid = true;\n                })\n                .on('option-change', function(e) {\n                    if (validationOptions.indexOf(e.name) !== -1) {\n                        setElementValidity();\n                    }\n                })\n                .on('input-change', function() {\n                    tagList.clearSelection();\n                    scope.newTag.invalid = null;\n                })\n                .on('input-focus', function() {\n                    element.triggerHandler('focus');\n                    ngModelCtrl.$setValidity('leftoverText', true);\n                })\n                .on('input-blur', function() {\n                    if (options.addOnBlur && !options.addFromAutocompleteOnly) {\n                        tagList.addText(scope.newTag.text);\n                    }\n                    element.triggerHandler('blur');\n                    setElementValidity();\n                })\n                .on('input-keydown', function(event) {\n                    var key = event.keyCode,\n                        isModifier = event.shiftKey || event.altKey || event.ctrlKey || event.metaKey,\n                        addKeys = {},\n                        shouldAdd, shouldRemove, shouldSelect, shouldEditLastTag;\n\n                    if (isModifier || hotkeys.indexOf(key) === -1) {\n                        return;\n                    }\n\n                    addKeys[KEYS.enter] = options.addOnEnter;\n                    addKeys[KEYS.comma] = options.addOnComma;\n                    addKeys[KEYS.space] = options.addOnSpace;\n\n                    shouldAdd = !options.addFromAutocompleteOnly && addKeys[key];\n                    shouldRemove = (key === KEYS.backspace || key === KEYS.delete) && tagList.selected;\n                    shouldEditLastTag = key === KEYS.backspace && scope.newTag.text.length === 0 && options.enableEditingLastTag;\n                    shouldSelect = (key === KEYS.backspace || key === KEYS.left || key === KEYS.right) && scope.newTag.text.length === 0 && !options.enableEditingLastTag;\n\n                    if (shouldAdd) {\n                        tagList.addText(scope.newTag.text);\n                    }\n                    else if (shouldEditLastTag) {\n                        var tag;\n\n                        tagList.selectPrior();\n                        tag = tagList.removeSelected();\n\n                        if (tag) {\n                            scope.newTag.setText(tag[options.displayProperty]);\n                        }\n                    }\n                    else if (shouldRemove) {\n                        tagList.removeSelected();\n                    }\n                    else if (shouldSelect) {\n                        if (key === KEYS.left || key === KEYS.backspace) {\n                            tagList.selectPrior();\n                        }\n                        else if (key === KEYS.right) {\n                            tagList.selectNext();\n                        }\n                    }\n\n                    if (shouldAdd || shouldSelect || shouldRemove || shouldEditLastTag) {\n                        event.preventDefault();\n                    }\n                })\n                .on('input-paste', function(event) {\n                    if (options.addOnPaste) {\n                        var data = event.getTextData();\n                        var tags = data.split(options.pasteSplitPattern);\n\n                        if (tags.length > 1) {\n                            tags.forEach(function(tag) {\n                                tagList.addText(tag);\n                            });\n                            event.preventDefault();\n                        }\n                    }\n                });\n        }\n    };\n}]);\n\n\n/**\n * @ngdoc directive\n * @name tiTagItem\n * @module ngTagsInput\n *\n * @description\n * Represents a tag item. Used internally by the tagsInput directive.\n */\ntagsInput.directive('tiTagItem', [\"tiUtil\", function(tiUtil) {\n    return {\n        restrict: 'E',\n        require: '^tagsInput',\n        template: '<ng-include src=\"$$template\"></ng-include>',\n        scope: { data: '=' },\n        link: function(scope, element, attrs, tagsInputCtrl) {\n            var tagsInput = tagsInputCtrl.registerTagItem(),\n                options = tagsInput.getOptions();\n\n            scope.$$template = options.template;\n            scope.$$removeTagSymbol = options.removeTagSymbol;\n\n            scope.$getDisplayText = function() {\n                return tiUtil.safeToString(scope.data[options.displayProperty]);\n            };\n            scope.$removeTag = function() {\n                tagsInput.removeTag(scope.$index);\n            };\n\n            scope.$watch('$parent.$index', function(value) {\n                scope.$index = value;\n            });\n        }\n    };\n}]);\n\n\n/**\n * @ngdoc directive\n * @name autoComplete\n * @module ngTagsInput\n *\n * @description\n * Provides autocomplete support for the tagsInput directive.\n *\n * @param {expression} source Expression to evaluate upon changing the input content. The input value is available as\n *                            $query. The result of the expression must be a promise that eventually resolves to an\n *                            array of strings.\n * @param {string=} [displayProperty=text] Property to be rendered as the autocomplete label.\n * @param {number=} [debounceDelay=100] Amount of time, in milliseconds, to wait before evaluating the expression in\n *                                      the source option after the last keystroke.\n * @param {number=} [minLength=3] Minimum number of characters that must be entered before evaluating the expression\n *                                 in the source option.\n * @param {boolean=} [highlightMatchedText=true] Flag indicating that the matched text will be highlighted in the\n *                                               suggestions list.\n * @param {number=} [maxResultsToShow=10] Maximum number of results to be displayed at a time.\n * @param {boolean=} [loadOnDownArrow=false] Flag indicating that the source option will be evaluated when the down arrow\n *                                           key is pressed and the suggestion list is closed. The current input value\n *                                           is available as $query.\n * @param {boolean=} {loadOnEmpty=false} Flag indicating that the source option will be evaluated when the input content\n *                                       becomes empty. The $query variable will be passed to the expression as an empty string.\n * @param {boolean=} {loadOnFocus=false} Flag indicating that the source option will be evaluated when the input element\n *                                       gains focus. The current input value is available as $query.\n * @param {boolean=} [selectFirstMatch=true] Flag indicating that the first match will be automatically selected once\n *                                           the suggestion list is shown.\n * @param {string=} [template=] URL or id of a custom template for rendering each element of the autocomplete list.\n */\ntagsInput.directive('autoComplete', [\"$document\",\"$timeout\",\"$sce\",\"$q\",\"tagsInputConfig\",\"tiUtil\", function($document, $timeout, $sce, $q, tagsInputConfig, tiUtil) {\n    function SuggestionList(loadFn, options, events) {\n        var self = {}, getDifference, lastPromise, getTagId;\n\n        getTagId = function() {\n            return options.tagsInput.keyProperty || options.tagsInput.displayProperty;\n        };\n\n        getDifference = function(array1, array2) {\n            return array1.filter(function(item) {\n                return !tiUtil.findInObjectArray(array2, item, getTagId(), function(a, b) {\n                    if (options.tagsInput.replaceSpacesWithDashes) {\n                        a = tiUtil.replaceSpacesWithDashes(a);\n                        b = tiUtil.replaceSpacesWithDashes(b);\n                    }\n                    return tiUtil.defaultComparer(a, b);\n                });\n            });\n        };\n\n        self.reset = function() {\n            lastPromise = null;\n\n            self.items = [];\n            self.visible = false;\n            self.index = -1;\n            self.selected = null;\n            self.query = null;\n        };\n        self.show = function() {\n            if (options.selectFirstMatch) {\n                self.select(0);\n            }\n            else {\n                self.selected = null;\n            }\n            self.visible = true;\n        };\n        self.load = tiUtil.debounce(function(query, tags) {\n            self.query = query;\n\n            var promise = $q.when(loadFn({ $query: query }));\n            lastPromise = promise;\n\n            promise.then(function(items) {\n                if (promise !== lastPromise) {\n                    return;\n                }\n\n                items = tiUtil.makeObjectArray(items.data || items, getTagId());\n                items = getDifference(items, tags);\n                self.items = items.slice(0, options.maxResultsToShow);\n\n                if (self.items.length > 0) {\n                    self.show();\n                }\n                else {\n                    self.reset();\n                }\n            });\n        }, options.debounceDelay);\n\n        self.selectNext = function() {\n            self.select(++self.index);\n        };\n        self.selectPrior = function() {\n            self.select(--self.index);\n        };\n        self.select = function(index) {\n            if (index < 0) {\n                index = self.items.length - 1;\n            }\n            else if (index >= self.items.length) {\n                index = 0;\n            }\n            self.index = index;\n            self.selected = self.items[index];\n            events.trigger('suggestion-selected', index);\n        };\n\n        self.reset();\n\n        return self;\n    }\n\n    function scrollToElement(root, index) {\n        var element = root.find('li').eq(index),\n            parent = element.parent(),\n            elementTop = element.prop('offsetTop'),\n            elementHeight = element.prop('offsetHeight'),\n            parentHeight = parent.prop('clientHeight'),\n            parentScrollTop = parent.prop('scrollTop');\n\n        if (elementTop < parentScrollTop) {\n            parent.prop('scrollTop', elementTop);\n        }\n        else if (elementTop + elementHeight > parentHeight + parentScrollTop) {\n            parent.prop('scrollTop', elementTop + elementHeight - parentHeight);\n        }\n    }\n\n    return {\n        restrict: 'E',\n        require: '^tagsInput',\n        scope: { source: '&' },\n        templateUrl: 'ngTagsInput/auto-complete.html',\n        controller: [\"$scope\",\"$element\",\"$attrs\", function($scope, $element, $attrs) {\n            $scope.events = tiUtil.simplePubSub();\n\n            tagsInputConfig.load('autoComplete', $scope, $attrs, {\n                template: [String, 'ngTagsInput/auto-complete-match.html'],\n                debounceDelay: [Number, 100],\n                minLength: [Number, 3],\n                highlightMatchedText: [Boolean, true],\n                maxResultsToShow: [Number, 10],\n                loadOnDownArrow: [Boolean, false],\n                loadOnEmpty: [Boolean, false],\n                loadOnFocus: [Boolean, false],\n                selectFirstMatch: [Boolean, true],\n                displayProperty: [String, '']\n            });\n\n            $scope.suggestionList = new SuggestionList($scope.source, $scope.options, $scope.events);\n\n            this.registerAutocompleteMatch = function() {\n                return {\n                    getOptions: function() {\n                        return $scope.options;\n                    },\n                    getQuery: function() {\n                        return $scope.suggestionList.query;\n                    }\n                };\n            };\n        }],\n        link: function(scope, element, attrs, tagsInputCtrl) {\n            var hotkeys = [KEYS.enter, KEYS.tab, KEYS.escape, KEYS.up, KEYS.down],\n                suggestionList = scope.suggestionList,\n                tagsInput = tagsInputCtrl.registerAutocomplete(),\n                options = scope.options,\n                events = scope.events,\n                shouldLoadSuggestions;\n\n            options.tagsInput = tagsInput.getOptions();\n\n            shouldLoadSuggestions = function(value) {\n                return value && value.length >= options.minLength || !value && options.loadOnEmpty;\n            };\n\n            scope.addSuggestionByIndex = function(index) {\n                suggestionList.select(index);\n                scope.addSuggestion();\n            };\n\n            scope.addSuggestion = function() {\n                var added = false;\n\n                if (suggestionList.selected) {\n                    tagsInput.addTag(angular.copy(suggestionList.selected));\n                    suggestionList.reset();\n                    tagsInput.focusInput();\n\n                    added = true;\n                }\n                return added;\n            };\n\n            scope.track = function(item) {\n                return item[options.tagsInput.keyProperty || options.tagsInput.displayProperty];\n            };\n\n            tagsInput\n                .on('tag-added invalid-tag input-blur', function() {\n                    suggestionList.reset();\n                })\n                .on('input-change', function(value) {\n                    if (shouldLoadSuggestions(value)) {\n                        suggestionList.load(value, tagsInput.getTags());\n                    }\n                    else {\n                        suggestionList.reset();\n                    }\n                })\n                .on('input-focus', function() {\n                    var value = tagsInput.getCurrentTagText();\n                    if (options.loadOnFocus && shouldLoadSuggestions(value)) {\n                        suggestionList.load(value, tagsInput.getTags());\n                    }\n                })\n                .on('input-keydown', function(event) {\n                    var key = event.keyCode,\n                        handled = false;\n\n                    if (hotkeys.indexOf(key) === -1) {\n                        return;\n                    }\n\n                    if (suggestionList.visible) {\n\n                        if (key === KEYS.down) {\n                            suggestionList.selectNext();\n                            handled = true;\n                        }\n                        else if (key === KEYS.up) {\n                            suggestionList.selectPrior();\n                            handled = true;\n                        }\n                        else if (key === KEYS.escape) {\n                            suggestionList.reset();\n                            handled = true;\n                        }\n                        else if (key === KEYS.enter || key === KEYS.tab) {\n                            handled = scope.addSuggestion();\n                        }\n                    }\n                    else {\n                        if (key === KEYS.down && scope.options.loadOnDownArrow) {\n                            suggestionList.load(tagsInput.getCurrentTagText(), tagsInput.getTags());\n                            handled = true;\n                        }\n                    }\n\n                    if (handled) {\n                        event.preventDefault();\n                        event.stopImmediatePropagation();\n                        return false;\n                    }\n                });\n\n            events.on('suggestion-selected', function(index) {\n                scrollToElement(element, index);\n            });\n        }\n    };\n}]);\n\n\n/**\n * @ngdoc directive\n * @name tiAutocompleteMatch\n * @module ngTagsInput\n *\n * @description\n * Represents an autocomplete match. Used internally by the autoComplete directive.\n */\ntagsInput.directive('tiAutocompleteMatch', [\"$sce\",\"tiUtil\", function($sce, tiUtil) {\n    return {\n        restrict: 'E',\n        require: '^autoComplete',\n        template: '<ng-include src=\"$$template\"></ng-include>',\n        scope: { data: '=' },\n        link: function(scope, element, attrs, autoCompleteCtrl) {\n            var autoComplete = autoCompleteCtrl.registerAutocompleteMatch(),\n                options = autoComplete.getOptions();\n\n            scope.$$template = options.template;\n            scope.$index = scope.$parent.$index;\n\n            scope.$highlight = function(text) {\n                if (options.highlightMatchedText) {\n                    text = tiUtil.safeHighlight(text, autoComplete.getQuery());\n                }\n                return $sce.trustAsHtml(text);\n            };\n            scope.$getDisplayText =  function() {\n                return tiUtil.safeToString(scope.data[options.displayProperty || options.tagsInput.displayProperty]);\n            };\n        }\n    };\n}]);\n\n\n/**\n * @ngdoc directive\n * @name tiTranscludeAppend\n * @module ngTagsInput\n *\n * @description\n * Re-creates the old behavior of ng-transclude. Used internally by tagsInput directive.\n */\ntagsInput.directive('tiTranscludeAppend', function() {\n    return function(scope, element, attrs, ctrl, transcludeFn) {\n        transcludeFn(function(clone) {\n            element.append(clone);\n        });\n    };\n});\n\n/**\n * @ngdoc directive\n * @name tiAutosize\n * @module ngTagsInput\n *\n * @description\n * Automatically sets the input's width so its content is always visible. Used internally by tagsInput directive.\n */\ntagsInput.directive('tiAutosize', [\"tagsInputConfig\", function(tagsInputConfig) {\n    return {\n        restrict: 'A',\n        require: 'ngModel',\n        link: function(scope, element, attrs, ctrl) {\n            var threshold = tagsInputConfig.getTextAutosizeThreshold(),\n                span, resize;\n\n            span = angular.element('<span class=\"input\"></span>');\n            span.css('display', 'none')\n                .css('visibility', 'hidden')\n                .css('width', 'auto')\n                .css('white-space', 'pre');\n\n            element.parent().append(span);\n\n            resize = function(originalValue) {\n                var value = originalValue, width;\n\n                if (angular.isString(value) && value.length === 0) {\n                    value = attrs.placeholder;\n                }\n\n                if (value) {\n                    span.text(value);\n                    span.css('display', '');\n                    width = span.prop('offsetWidth');\n                    span.css('display', 'none');\n                }\n\n                element.css('width', width ? width + threshold + 'px' : '');\n\n                return originalValue;\n            };\n\n            ctrl.$parsers.unshift(resize);\n            ctrl.$formatters.unshift(resize);\n\n            attrs.$observe('placeholder', function(value) {\n                if (!ctrl.$modelValue) {\n                    resize(value);\n                }\n            });\n        }\n    };\n}]);\n\n/**\n * @ngdoc directive\n * @name tiBindAttrs\n * @module ngTagsInput\n *\n * @description\n * Binds attributes to expressions. Used internally by tagsInput directive.\n */\ntagsInput.directive('tiBindAttrs', function() {\n    return function(scope, element, attrs) {\n        scope.$watch(attrs.tiBindAttrs, function(value) {\n            angular.forEach(value, function(value, key) {\n                attrs.$set(key, value);\n            });\n        }, true);\n    };\n});\n\n/**\n * @ngdoc service\n * @name tagsInputConfig\n * @module ngTagsInput\n *\n * @description\n * Sets global configuration settings for both tagsInput and autoComplete directives. It's also used internally to parse and\n * initialize options from HTML attributes.\n */\ntagsInput.provider('tagsInputConfig', function() {\n    var globalDefaults = {},\n        interpolationStatus = {},\n        autosizeThreshold = 3;\n\n    /**\n     * @ngdoc method\n     * @name setDefaults\n     * @description Sets the default configuration option for a directive.\n     * @methodOf tagsInputConfig\n     *\n     * @param {string} directive Name of the directive to be configured. Must be either 'tagsInput' or 'autoComplete'.\n     * @param {object} defaults Object containing options and their values.\n     *\n     * @returns {object} The service itself for chaining purposes.\n     */\n    this.setDefaults = function(directive, defaults) {\n        globalDefaults[directive] = defaults;\n        return this;\n    };\n\n    /***\n     * @ngdoc method\n     * @name setActiveInterpolation\n     * @description Sets active interpolation for a set of options.\n     * @methodOf tagsInputConfig\n     *\n     * @param {string} directive Name of the directive to be configured. Must be either 'tagsInput' or 'autoComplete'.\n     * @param {object} options Object containing which options should have interpolation turned on at all times.\n     *\n     * @returns {object} The service itself for chaining purposes.\n     */\n    this.setActiveInterpolation = function(directive, options) {\n        interpolationStatus[directive] = options;\n        return this;\n    };\n\n    /***\n     * @ngdoc method\n     * @name setTextAutosizeThreshold\n     * @description Sets the threshold used by the tagsInput directive to re-size the inner input field element based on its contents.\n     * @methodOf tagsInputConfig\n     *\n     * @param {number} threshold Threshold value, in pixels.\n     *\n     * @returns {object} The service itself for chaining purposes.\n     */\n    this.setTextAutosizeThreshold = function(threshold) {\n        autosizeThreshold = threshold;\n        return this;\n    };\n\n    this.$get = [\"$interpolate\", function($interpolate) {\n        var converters = {};\n        converters[String] = function(value) { return value; };\n        converters[Number] = function(value) { return parseInt(value, 10); };\n        converters[Boolean] = function(value) { return value.toLowerCase() === 'true'; };\n        converters[RegExp] = function(value) { return new RegExp(value); };\n\n        return {\n            load: function(directive, scope, attrs, options) {\n                var defaultValidator = function() { return true; };\n\n                scope.options = {};\n\n                angular.forEach(options, function(value, key) {\n                    var type, localDefault, validator, converter, getDefault, updateValue;\n\n                    type = value[0];\n                    localDefault = value[1];\n                    validator = value[2] || defaultValidator;\n                    converter = converters[type];\n\n                    getDefault = function() {\n                        var globalValue = globalDefaults[directive] && globalDefaults[directive][key];\n                        return angular.isDefined(globalValue) ? globalValue : localDefault;\n                    };\n\n                    updateValue = function(value) {\n                        scope.options[key] = value && validator(value) ? converter(value) : getDefault();\n                    };\n\n                    if (interpolationStatus[directive] && interpolationStatus[directive][key]) {\n                        attrs.$observe(key, function(value) {\n                            updateValue(value);\n                            scope.events.trigger('option-change', { name: key, newValue: value });\n                        });\n                    }\n                    else {\n                        updateValue(attrs[key] && $interpolate(attrs[key])(scope.$parent));\n                    }\n                });\n            },\n            getTextAutosizeThreshold: function() {\n                return autosizeThreshold;\n            }\n        };\n    }];\n});\n\n\n/***\n * @ngdoc factory\n * @name tiUtil\n * @module ngTagsInput\n *\n * @description\n * Helper methods used internally by the directive. Should not be called directly from user code.\n */\ntagsInput.factory('tiUtil', [\"$timeout\", function($timeout) {\n    var self = {};\n\n    self.debounce = function(fn, delay) {\n        var timeoutId;\n        return function() {\n            var args = arguments;\n            $timeout.cancel(timeoutId);\n            timeoutId = $timeout(function() { fn.apply(null, args); }, delay);\n        };\n    };\n\n    self.makeObjectArray = function(array, key) {\n        array = array || [];\n        if (array.length > 0 && !angular.isObject(array[0])) {\n            array.forEach(function(item, index) {\n                array[index] = {};\n                array[index][key] = item;\n            });\n        }\n        return array;\n    };\n\n    self.findInObjectArray = function(array, obj, key, comparer) {\n        var item = null;\n        comparer = comparer || self.defaultComparer;\n\n        array.some(function(element) {\n            if (comparer(element[key], obj[key])) {\n                item = element;\n                return true;\n            }\n        });\n\n        return item;\n    };\n\n    self.defaultComparer = function(a, b) {\n        // I'm aware of the internationalization issues regarding toLowerCase()\n        // but I couldn't come up with a better solution right now\n        return self.safeToString(a).toLowerCase() === self.safeToString(b).toLowerCase();\n    };\n\n    self.safeHighlight = function(str, value) {\n        if (!value) {\n            return str;\n        }\n\n        function escapeRegexChars(str) {\n            return str.replace(/([.?*+^$[\\]\\\\(){}|-])/g, '\\\\$1');\n        }\n\n        str = self.encodeHTML(str);\n        value = self.encodeHTML(value);\n\n        var expression = new RegExp('&[^;]+;|' + escapeRegexChars(value), 'gi');\n        return str.replace(expression, function(match) {\n            return match.toLowerCase() === value.toLowerCase() ? '<em>' + match + '</em>' : match;\n        });\n    };\n\n    self.safeToString = function(value) {\n        return angular.isUndefined(value) || value == null ? '' : value.toString().trim();\n    };\n\n    self.encodeHTML = function(value) {\n        return self.safeToString(value)\n            .replace(/&/g, '&amp;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;');\n    };\n\n    self.handleUndefinedResult = function(fn, valueIfUndefined) {\n        return function() {\n            var result = fn.apply(null, arguments);\n            return angular.isUndefined(result) ? valueIfUndefined : result;\n        };\n    };\n\n    self.replaceSpacesWithDashes = function(str) {\n        return self.safeToString(str).replace(/\\s/g, '-');\n    };\n\n    self.simplePubSub = function() {\n        var events = {};\n        return {\n            on: function(names, handler) {\n                names.split(' ').forEach(function(name) {\n                    if (!events[name]) {\n                        events[name] = [];\n                    }\n                    events[name].push(handler);\n                });\n                return this;\n            },\n            trigger: function(name, args) {\n                var handlers = events[name] || [];\n                handlers.every(function(handler) {\n                    return self.handleUndefinedResult(handler, true)(args);\n                });\n                return this;\n            }\n        };\n    };\n\n    return self;\n}]);\n\n/* HTML templates */\ntagsInput.run([\"$templateCache\", function($templateCache) {\n    $templateCache.put('ngTagsInput/tags-input.html',\n    \"<div class=\\\"host\\\" tabindex=\\\"-1\\\" ng-click=\\\"eventHandlers.host.click()\\\" ti-transclude-append=\\\"\\\"><div class=\\\"tags\\\" ng-class=\\\"{focused: hasFocus}\\\"><ul class=\\\"tag-list\\\"><li class=\\\"tag-item\\\" ng-repeat=\\\"tag in tagList.items track by track(tag)\\\" ng-class=\\\"{ selected: tag == tagList.selected }\\\"><ti-tag-item data=\\\"tag\\\"></ti-tag-item></li></ul><input class=\\\"input\\\" autocomplete=\\\"off\\\" ng-model=\\\"newTag.text\\\" ng-change=\\\"eventHandlers.input.change(newTag.text)\\\" ng-keydown=\\\"eventHandlers.input.keydown($event)\\\" ng-focus=\\\"eventHandlers.input.focus($event)\\\" ng-blur=\\\"eventHandlers.input.blur($event)\\\" ng-paste=\\\"eventHandlers.input.paste($event)\\\" ng-trim=\\\"false\\\" ng-class=\\\"{'invalid-tag': newTag.invalid}\\\" ng-disabled=\\\"disabled\\\" ti-bind-attrs=\\\"{type: options.type, placeholder: options.placeholder, tabindex: options.tabindex, spellcheck: options.spellcheck}\\\" ti-autosize=\\\"\\\"></div></div>\"\n  );\n\n  $templateCache.put('ngTagsInput/tag-item.html',\n    \"<span ng-bind=\\\"$getDisplayText()\\\"></span> <a class=\\\"remove-button\\\" ng-click=\\\"$removeTag()\\\" ng-bind=\\\"$$removeTagSymbol\\\"></a>\"\n  );\n\n  $templateCache.put('ngTagsInput/auto-complete.html',\n    \"<div class=\\\"autocomplete\\\" ng-if=\\\"suggestionList.visible\\\"><ul class=\\\"suggestion-list\\\"><li class=\\\"suggestion-item\\\" ng-repeat=\\\"item in suggestionList.items track by track(item)\\\" ng-class=\\\"{selected: item == suggestionList.selected}\\\" ng-click=\\\"addSuggestionByIndex($index)\\\" ng-mouseenter=\\\"suggestionList.select($index)\\\"><ti-autocomplete-match data=\\\"item\\\"></ti-autocomplete-match></li></ul></div>\"\n  );\n\n  $templateCache.put('ngTagsInput/auto-complete-match.html',\n    \"<span ng-bind-html=\\\"$highlight($getDisplayText())\\\"></span>\"\n  );\n}]);\n\n}());"],"sourceRoot":"/source/"}