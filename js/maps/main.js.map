{"version":3,"sources":["main.js","api/api-service.js","auth/auth-service.js","endpoint/endpoint-controller.js","endpoint/endpoint-service.js","entity/entity-controller.js","entity/entity-directive.js","entity/entity-filter.js","entity/entity-service.js","error/error-service.js","i18n/messages.en.js","i18n/messages.ja.js","i18n/translate.js","index/index-controller.js","login/login-controller.js","schema/schema-form.js","schema/schema-normalizer.js","schema/schema-validator.js","side/side-service.js","tag/tag-controller.js","top/top-controller.js","util/angular-base64-upload.js","util/date-picker.js","util/shared-scopes.js"],"names":["angular","module","config","$routeProvider","$mdThemingProvider","$sceDelegateProvider","console","info","theme","primaryPalette","accentPalette","when","controller","templateUrl","resourceUrlWhitelist","run","$rootScope","$endpointService","$apiService","$errorService","$location","$authService","ep","getSelected","token","search","saveToken","url","login","checkLogin","setup","then","err","showError","factory","$q","$http","getUrl","path","replace","resolution","resolve","result","data","rejection","reject","msg","message","statusText","Error","status","get","query","method","params","post","put","del","getConfig","log","$emit","stack","inc","dec","request","requestError","response","responseError","$cookies","tokens","localStorage","getItem","JSON","parse","_","find","name","headerName","headers","$httpProvider","interceptors","push","logout","filter","setItem","stringify","item","findWhere","indexOf","list","map","t","pick","$scope","$schemaForm","$filter","endpoints","getAll","remove","index","select","location","hash","add","endpoint","section","page","showForm","$event","showDialog","title","event","schema","type","properties","maxLength","minLength","format","style","required","submit","scope","deferred","defer","entity","promise","selected","this","save","splice","each","i","$routeParams","$entityService","$schemaNormalizer","$window","sharedScopes","isLoading","kind","limit","loadCount","isSearch","isFilter","filter_q","getFields","entityConfig","features","fields","keys","field","id","label","substr","getSearchSchema","getSearchForm","searchForm","getScope","scopeTagCtrl","searchSchema","v","rows","length","edit","row","editing","blur","setTimeout","resize","loadMore","offset","Promise","concat","toggleSearchform","toggled","body","document","getElementById","rect","getBoundingClientRect","th","Math","floor","innerHeight","top","height","$on","directive","restrict","link","addInitialize","initialize","e","opening","open","close","$document","key","getKey","removing","$broadcast","cancelRemoving","off","$mdDialog","element","saving","error","orig","input","value","saveField","$digest","focus","bind","evt","keyCode","preview","openOpt","show","template","targetEvent","elm","attr","raw","scrollTop","offsetHeight","scrollHeight","$apply","ngScroll","$compile","content","append","service","getEntityConfig","entities","normalizeFields","opts","undefined","spec","_this","k","onlyCreate","onlyUpdate","showSide","primaryKey","encodeURIComponent","join","import","file","files","reader","FileReader","readAsText","onload","target","export","r","filename","Date","window","requestFileSystem","webkitRequestFileSystem","TEMPORARY","fileSystem","root","getFile","create","exclusive","fileEntry","createWriter","fileWriter","blob","Blob","write","onwriteend","createElement","href","toURL","download","appendChild","click","removeChild","onerror","code","$mdToast","toString","closeToast","hide","hideDelay","position","$translateLoaderProvider","translations","Add","Cancel","Close","Create","Endpoints","Entities","Name","Update","Modify","Remove","Search","Settings","Submit","Top","Add the endpoint","Entity configuration not found for {{kind}}","provider","tables","mergeTables","table","lang","merge","$get","options","addTables","newTables","$translateProvider","useLoader","determinePreferredLanguage","$mdSidenav","$timeout","$interval","$translate","$translateLoader","toggleMenu","toggle","site","head","progress","mode","p","cancel","openRight","i18n","refresh","addEventListener","$sideContent","$schemaValidator","validator","errors","validate","forEach","hasError","submitter","interim","canceller","$new","$templateCache","linker","multiline","items","addClass","normalize","$$normalized","prop","keyOrder","formats","date-time","date","time","utc-millisec","isNaN","parseInt","regex","RegExp","color","uri","email","ipv4","ipv6","host-name","tv4","addFormat","test","val","validateMultiple","valid","keyPath","dataPath","split","shift","$rootElement","$mdTheming","$animate","lastScope","lastElement","$destroy","setScope","loadTags","$query","tagUri","res","text","toLowerCase","require","elem","attrs","ngModel","arrayBufferToBase64","buffer","binary","bytes","Uint8Array","len","byteLength","String","fromCharCode","btoa","fileObject","readerOnload","base64","$setViewValue","copy","on","filetype","filesize","size","readAsArrayBuffer","app","$datepicker","lineColor","textColor","mask","picker","$","css","call"],"mappings":"AAAA,YAEAA,SACAC,OAAA,aACA,UACA,YACA,SACA,aACA,yBACA,aACA,YACA,cACA,gBAEAC,QAAA,iBAAA,qBAAA,uBAAA,SAAAC,EAAAC,EAAAC,GAEAC,QAAAC,KAAA,qBACAH,EAAAI,MAAA,QACAC,eAAA,UACAC,cAAA,UAEAN,EAAAI,MAAA,YACAC,eAAA,UACAC,cAAA,UAEAN,EAAAI,MAAA,UACAC,eAAA,UACAC,cAAA,UAEAN,EAAAI,MAAA,SACAC,eAAA,UACAC,cAAA,UAEAN,EAAAI,MAAA,QACAC,eAAA,QACAC,cAAA,UAEAN,EAAAI,MAAA,UACAC,eAAA,UACAC,cAAA,UAEAN,EAAAI,MAAA,iBACAC,eAAA,QACAC,cAAA,UAGAJ,QAAAC,KAAA,wBAEAJ,EACAQ,KAAA,cACAC,WAAA,eACAC,YAAA,kBAEAF,KAAA,QACAC,WAAA,UACAC,YAAA,aAEAF,KAAA,iBACAC,WAAA,aACAC,YAAA,sBAEAF,KAAA,UACAC,WAAA,YACAC,YAAA,eAIAR,EAAAS,sBAEA,OAEA,UAKAC,KAAA,aAAA,mBAAA,cAAA,gBAAA,YAAA,eAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEAf,QAAAC,KAAA,6BAGA,IAAAe,GAAAL,EAAAM,aACA,IAAAD,EAGA,CACA,GAAAE,GAAAJ,EAAAK,SAAAD,KACAA,KACAH,EAAAK,UAAAF,EAAAF,GACAF,EAAAO,IAAA,SAGAX,EAAAY,MAAAP,EAAAQ,WAAAP,GAEAJ,EACAY,QACAC,KAAA,aAEA,SAAAC,GACAb,EAAAc,UAAAD,SAfAZ,GAAAO,IAAA,iBCnFA3B,QACAC,OAAA,aACAiC,QAAA,eAAA,KAAA,mBAAA,QAAA,aAAA,SAAAC,EAAAlB,EAAAmB,EAAApB,GAEA,GAAAd,GAAA,KAGAmC,EAAA,SAAAC,GACA,GAAAhB,GAAAL,EAAAM,cACAI,EAAAL,EAAAK,IAAAY,QAAA,WAAA,KAEA,OADAD,GAAAA,EAAAC,QAAA,YAAA,MACAZ,EAAA,IAAAW,GAGAE,EAAA,SAAAC,GACA,MAAA,UAAAC,GACA,MAAAD,GAAAC,EAAAC,QAIAC,EAAA,SAAAC,GACA,MAAA,UAAAH,GACA,GAAAI,GAAAJ,EAAAC,MAAAD,EAAAC,KAAAI,SAAAL,EAAAM,WACAhB,EAAA,GAAAiB,OAAAH,EACAd,GAAAkB,OAAAA,OACAL,EAAAb,KAKAmB,EAAA,SAAAb,EAAAc,GACA,MAAAjB,GAAA,SAAAM,EAAAI,GACAT,GACAT,IAAAU,EAAAC,GACAe,OAAA,MACAC,OAAAF,IAEArB,KAAAS,EAAAC,GAAAG,EAAAC,OAMAU,EAAA,SAAAjB,EAAAK,GACA,MAAAR,GAAA,SAAAM,EAAAI,GACAT,GACAT,IAAAU,EAAAC,GACAe,OAAA,OACAV,KAAAA,IAEAZ,KAAAS,EAAAC,GAAAG,EAAAC,OAMAW,EAAA,SAAAlB,EAAAK,GACA,MAAAR,GAAA,SAAAM,EAAAI,GACAT,GACAT,IAAAU,EAAAC,GACAe,OAAA,MACAV,KAAAA,IAEAZ,KAAAS,EAAAC,GAAAG,EAAAC,OAIAY,EAAA,SAAAnB,EAAAc,GACA,MAAAjB,GAAA,SAAAM,EAAAI,GACAT,GACAT,IAAAU,EAAAC,GACAe,OAAA,SACAC,OAAAF,IAEArB,KAAAS,EAAAC,GAAAG,EAAAC,OAIApB,EAAA,SAAAa,EAAAc,GACA,MAAAjB,GAAA,SAAAM,EAAAI,GACAT,GACAT,IAAAU,EAAAC,GACAe,OAAA,MACAC,OAAAF,IAEArB,KAAAS,EAAAC,GAAAG,EAAAC,OAIAa,EAAA,WACA,MAAAvB,GAAA,SAAAM,EAAAI,GACA,OAAA3C,EACAuC,EAAAvC,IAEAI,QAAAC,KAAA,kBACA4C,EAAA,WACApB,KACAU,EACAI,MAMA,QAEAf,MAAA,WAGA,MAFAxB,SAAAqD,IAAA,oBACAzD,EAAA,KACAwD,IAAA3B,KAAA,SAAAY,GAIA,MAHAzC,GAAAyC,EACArC,QAAAqD,IAAAzD,GACAc,EAAA4C,MAAA,SAAA1D,GACAA,GACA,SAAA8B,GACA,MAAAA,MAIA0B,UAAA,WACA,MAAAxD,IAGAiD,IAAAA,EAEAI,KAAAA,EAEAC,IAAAA,EAEAC,IAAAA,EAEAhC,OAAAA,MAIAS,QAAA,2BAAA,aAAA,KAAA,SAAAlB,EAAAmB,GACA,GAAA0B,GAAA,EACAC,EAAA,WACA,IAAAD,KACA7C,EAAA4C,MAAA,mBAGAG,EAAA,WACA,MAAAF,IACAA,EAAA,EACA7C,EAAA4C,MAAA,iBAIA,QACAI,QAAA,SAAA9D,GAEA,MADA4D,KACA5D,GAAAiC,EAAAxB,KAAAT,IAEA+D,aAAA,SAAArB,GAEA,MADAmB,KACA5B,EAAAU,OAAAD,IAEAsB,SAAA,SAAAA,GAEA,MADAH,KACAG,GAAA/B,EAAAxB,KAAAuD,IAEAC,cAAA,SAAAvB,GAEA,MADAmB,KACA5B,EAAAU,OAAAD,QAIAV,QAAA,uBAAA,KAAA,aAAA,YAAA,mBAAA,WAAA,SAAAC,EAAAnB,EAAAI,EAAAH,EAAAmD,GACA,OACAJ,QAAA,SAAA9D,GACA,GAAAoB,GAAAL,EAAAM,aAEA,KAAAD,EACA,MAAApB,IAAAiC,EAAAxB,KAAAT,EAGA,IAAAmE,MACA1B,EAAA2B,aAAAC,QAAA,SACA5B,KACA0B,EAAAG,KAAAC,MAAA9B,GAGA,IAAAnB,GAAAkD,EAAAC,KAAAN,GAAAO,KAAAtD,EAAAsD,OACAC,EAAA,cASA,OARArD,KACAtB,EAAA4E,QAAAD,GAAArD,EAAAA,OAGA4C,EAAA,qBACAA,GAAA,cAGAlE,GAAAiC,EAAAxB,KAAAT,IAEAiE,cAAA,SAAAvB,GACA,GAAAM,GAAAN,EAAAM,MAKA,OAJA5C,SAAAqD,IAAAT,GACA,MAAAA,GACA9B,EAAAkB,KAAA,UAEAH,EAAAU,OAAAD,QAIA1C,QAAA,gBAAA,SAAA6E,GACAA,EAAAC,aAAAC,KAAA,2BACAF,EAAAC,aAAAC,KAAA,0BC/MAjF,QACAC,OAAA,aACAiC,QAAA,gBAAA,KAAA,YAAA,aAAA,mBAAA,cAAA,SAAAC,EAAAf,EAAAJ,EAAAC,EAAAC,GAEA,GAAAmD,MACA1B,EAAA2B,aAAAC,QAAA,SACA5B,KACA0B,EAAAG,KAAAC,MAAA9B,GAGA,IAAAuC,GAAA,WAEA,GAAA5D,GAAAL,EAAAM,aAEAD,IAGAJ,EAAAiC,IAAA,WAAApB,KAAA,WACAsC,EAAAK,EAAAS,OAAAd,EAAA,SAAA7C,GACA,MAAAA,GAAAoD,OAAAtD,EAAAsD,OAEAN,aAAAc,QAAA,SAAAZ,KAAAa,UAAAhB,IACArD,EAAAY,MAAAC,EAAAP,MAMAI,EAAA,SAAAF,EAAAF,GAGA,GAAAgE,GAAAZ,EAAAa,UAAAlB,GAAAO,KAAAtD,EAAAsD,MACAU,GACAjB,EAAAA,EAAAmB,QAAAF,IAAA9D,MAAAA,EAEA6C,EAAAY,MACAL,KAAAtD,EAAAsD,KACApD,MAAAA,GAKA,IAAAiE,GAAAf,EAAAgB,IAAArB,EAAA,SAAAsB,GACA,MAAAjB,GAAAkB,KAAAD,EAAA,OAAA,UAEArB,cAAAc,QAAA,SAAAZ,KAAAa,UAAAI,KAIA5D,EAAA,SAAAP,GACA,GAAAmE,GAAAf,EAAAC,KAAAN,EAAA,SAAAsB,GACA,MAAAA,GAAAf,OAAAtD,EAAAsD,MAEA,OAAAa,GAGA,QAEAP,OAAAA,EAEAxD,UAAAA,EAEAG,WAAAA,MC/DA7B,QACAC,OAAA,aACAW,WAAA,gBAAA,KAAA,SAAA,aAAA,cAAA,mBAAA,cAAA,gBAAA,UAAA,SAAAuB,EAAA0D,EAAA7E,EAAA8E,EAAA7E,EAAAC,EAAAC,EAAA4E,GAEAF,EAAAG,UAAA/E,EAAAgF,SAEAJ,EAAAK,OAAA,SAAAC,GACAlF,EAAAiF,OAAAC,IAGAN,EAAAO,OAAA,SAAAD,GACAlF,EAAAmF,OAAAD,GACAjF,EACAY,QACAC,KAAA,WACAsE,SAAAC,KAAA,OACA,SAAAtE,GACAb,EAAAc,UAAAD,KAKA,IAAAuE,GAAA,SAAAC,GACAvF,EAAAsF,IAAAC,GAGAxF,GAAA4C,MAAA,iBACA6C,QAAA,WACAC,KAAA,cAIAb,EAAAc,SAAA,SAAAC,GAEAd,EAAAe,YACAC,MAAA,mBACAC,MAAAH,EACAI,QACAC,KAAA,SACAC,YACAtC,MAAAqC,KAAA,SAAAE,UAAA,IAAAC,UAAA,GACAzF,KAAAsF,KAAA,SAAAE,UAAA,IAAAC,UAAA,EAAAC,OAAA,MAAAC,MAAA,SAEAC,UAAA,OAAA,QAEAC,OAAA,SAAAC,GACA,GAAAC,GAAAvF,EAAAwF,QACAC,EAAAH,EAAAG,MAGA,OAFArB,GAAAqB,GACAF,EAAAjF,UACAiF,EAAAG,eCjDA7H,QACAC,OAAA,aACAiC,QAAA,mBAAA,WAEA,GAAA8D,MACArD,EAAA2B,aAAAC,QAAA,YAKA,OAJA5B,KACAqD,EAAAxB,KAAAC,MAAA9B,KAKAsD,OAAA,WACA,MAAAD,IAGAzE,YAAA,WACA,MAAAmD,GAAAC,KAAAqB,EAAA,SAAA1E,GACA,MAAAA,GAAAwG,YAAA,KAIA3E,IAAA,SAAAgD,GACA,MAAAH,GAAAG,IAGAI,IAAA,SAAAC,GACAR,EAAAf,KAAAuB,GACAuB,KAAAC,QAGA9B,OAAA,SAAAC,GACAH,EAAAiC,OAAA9B,EAAA,GACA4B,KAAAC,QAGA5B,OAAA,SAAAD,GACAzB,EAAAwD,KAAAlC,EAAA,SAAA1E,EAAA6G,GACAA,IAAAhC,EACA7E,EAAAwG,UAAA,QAEAxG,GAAAwG,WAGAC,KAAAC,QAGAA,KAAA,WACA,GAAAvC,GAAAf,EAAAgB,IAAAM,EAAA,SAAA1E,GACA,MAAAoD,GAAAkB,KAAAtE,EAAA,OAAA,MAAA,aAEAgD,cAAAc,QAAA,YAAAZ,KAAAa,UAAAI,QCnDAzF,QACAC,OAAA,aACAW,WAAA,cAAA,KAAA,SAAA,eAAA,aAAA,cAAA,iBAAA,gBAAA,oBAAA,UAAA,eAAA,SACAuB,EACA0D,EACAuC,EACApH,EACA8E,EACAuC,EACAlH,EACAmH,EACAC,EACAC,GAEA,GAGAC,GAGArF,EANAsF,EAAAN,EAAAM,KACAC,EAAA,GACAC,EAAA,EAEAC,GAAA,EACAC,GAAA,CAGAxI,SAAAC,KAAA,SAAAmI,GAEA1H,EAAA4C,MAAA,iBACA6C,QAAA,WACAC,KAAAgC,IAGA7C,EAAA6C,KAAAA,EACA7C,EAAAkD,WAEA,IAAAC,GAAA,SAAAC,GACA,GAAAC,GAAAD,EAAAC,SACAlC,EAAAiC,EAAAjC,OACAmC,EAAAD,EAAAzD,MAAAyD,EAAAzD,KAAA0D,QAAAzE,EAAA0E,KAAApC,EAAAE,WACA,OAAAiC,GAAAzD,IAAA,SAAA2D,GAUA,MATA,gBAAAA,KACAA,GAAAC,GAAAD,EAAAE,MAAAF,IAEAA,EAAAE,MAAAF,EAAAE,OAAAF,EAAAC,GACAD,EAAAE,MAAA/D,QAAA,MAAA,EACA6D,EAAAE,MAAAF,EAAAC,GAAAE,OAAAH,EAAAE,MAAA/D,QAAA,KAAA,GAEA6D,EAAAE,MAAAF,EAAAC,GAEAD,KAIAI,EAAA,SAAAR,GAEA,GAAAjC,GAAAiC,EAAAC,SAAAzH,QAAAwH,EAAAC,SAAAzH,OAAAuF,UACA,OAAAsB,GAAAtB,IAGA0C,EAAA,SAAAC,GAEA,GADAvG,EAAAuG,EACAnB,EAAAoB,SAAA,WAAA,CACA,GAAAC,GAAArB,EAAAoB,SAAA,WAAAhC,MACAlD,GAAAwD,KAAArC,EAAAiE,aAAA5C,WAAA,SAAAiB,EAAA4B,GACA,UAAA5B,EAAAlB,MAAA,QAAAkB,EAAAd,SACAjE,EAAA2G,GAAAF,EAAAE,MAIA,MAAA3G,GAIAyC,GAAAJ,KAAA,WAEAgD,GAAA,EAEAJ,EAAA5C,MACAiD,KAAAA,IACA3G,KAAA,SAAAY,GAGA,GAAAsG,GAAAZ,EAAA3E,UAAAgF,GACAS,EAAAH,EAAAC,GACAa,EAAAL,EAAAR,EAEApD,GAAAsD,OAAAA,EACAtD,EAAAmB,OAAAiC,EAAAjC,OACAnB,EAAAmE,KAAArH,EAAA8C,KACAI,EAAAiE,aAAAA,EAEAlB,EAAAjG,EAAA8C,KAAAwE,OAEApE,EAAAqE,KAAA,SAAAC,EAAAb,GACAa,EAAAC,QAAAd,GAGAzD,EAAAwE,KAAA,SAAAF,SACAA,GAAAC,SAIAE,WAAAC,EAAA,GAEA9B,GAAA,GAEA,SAAAzG,GACAb,EAAAc,UAAAD,MAIA6D,EAAA2E,SAAA,WACA,IAAA/B,IAAAK,EAAA,CAEA,GAAA2B,GAAA7B,CAEA6B,GAAA9B,GAAA,IAIAF,GAAA,EAEAiC,QAAAjI,UACAV,KAAA,WACA,MAAA8G,GACAR,EAAA5G,QACAiH,KAAAA,EACAtF,MAAAA,EACAuF,MAAAA,EACA8B,OAAAA,IAGApC,EAAA5C,MACAiD,KAAAA,EACAC,MAAAA,EACA8B,OAAAA,MAGA1I,KAAA,SAAAY,GACA,IAAAA,EAAA8C,KAAAwE,SACArB,GAAAjG,EAAA8C,KAAAwE,OACApE,EAAAmE,KAAAnE,EAAAmE,KAAAW,OAAAhI,EAAA8C,MACAgD,GAAA,IAEA,SAAAzG,GACAb,EAAAc,UAAAD,GACAyG,GAAA,OAIA5C,EAAAA,UAAA,WACA,GAAAzC,EACAyF,KACAzF,EAAAsG,EAAA7D,EAAA8D,aAEAtB,EAAAA,UAAAK,EAAA7C,EAAAmE,KAAA5G,IAGAyC,EAAAA,UAAA,WACAwC,EAAAA,UAAAK,IAGA7C,EAAApE,OAAA,WACA2B,EAAAsG,EAAA7D,EAAA8D,YACAtB,EAAA5G,QACAiH,KAAAA,EACAtF,MAAAA,EACAqH,OAAA,IACA1I,KAAA,SAAAY,GACAkD,EAAAmE,KAAArH,EAAA8C,KACAmD,EAAAjG,EAAA8C,KAAAwE,OACApB,GAAA,GACA,SAAA7G,GACAb,EAAAc,UAAAD,MAIA6D,EAAA+E,iBAAA,WAEA/E,EAAA8D,aACA9D,EAAA8D,eAGA9D,EAAAgF,QAGAhF,EAAAgF,SAAAhF,EAAAgF,QAFAhF,EAAAgF,SAAA,GAMAhF,EAAAV,OAAA,WACAkD,EAAAlD,QACAuD,KAAAA,EACAtF,MAAAyC,EAAAkD,WACAhH,KAAA,SAAAY,GACAkD,EAAAmE,KAAArH,EAAA8C,KACAqD,GAAA,GACA,SAAA9G,GACAb,EAAAc,UAAAD,KAIA,IAAAuI,GAAA,WACA,GAAAO,GAAAC,SAAAC,eAAA,qBACAC,EAAAH,EAAAI,wBAEAC,EAAAC,KAAAC,MAAA9C,EAAA+C,YAAAL,EAAAM,IACAT,GAAAxD,MAAAkE,OAAAL,EAAA,KAGAtF,GAAA4F,IAAA,gBAAAlB,GAEA1E,EAAAJ,UCjNAzF,QACAC,OAAA,aACAyL,UAAA,eAAA,iBAAA,gBAAA,SAAArD,EAAAlH,GAEA,OACAwK,SAAA,KACAC,KAAA,SAAAnE,GAEA,GAAAiB,GAAAjB,EAAAiB,IAEAjB,GAAAlB,IAAA,WACAmE,QAAAjI,UACAV,KAAA,WACA,MAAA0F,GAAAT,OAAA6E,cACAxD,EAAAlF,KACAuF,KAAAA,EACAoD,YAAA,IAHA,SAOA/J,KAAA,SAAAY,GACA0F,EAAA1B,UACA+B,KAAAA,EACAd,OAAAjF,KAEA,SAAAX,GACAb,EAAAc,UAAAD,MAIAyF,EAAAgE,IAAA,iBAAA,SAAAM,EAAApJ,GACA,GAAAqH,GAAAvC,EAAAuC,IACAA,GAAA/B,OAAA+B,EAAAxE,QAAA7C,EAAAwH,KAAA,MAIAtJ,YAAA,wBAIA6K,UAAA,WAAA,WAEA,OAEAC,SAAA,KACAlE,OAAA,EACAlF,SAAA,EACAqJ,KAAA,SAAAnE,GAEAA,EAAAuE,QAAA,GAEAvE,EAAAwE,KAAA,WACAxE,EAAAuE,QAAA,WAGAvE,EAAAyE,MAAA,WACAzE,EAAAuE,QAAA,IAGAvE,EAAA4C,KAAA,WACA5C,EAAAuE,QAAA,KAIAnL,YAAA,2BAKA6K,UAAA,aAAA,iBAAA,gBAAA,YAAA,aAAA,SAAArD,EAAAlH,EAAAgL,EAAAnL,GAEA,OAEA2K,SAAA,KACAlE,OACA0C,IAAA,IACAhB,OAAA,IACAT,KAAA,KAEAnG,SAAA,EACAqJ,KAAA,SAAAnE,GAEA,GAAAiB,GAAAjB,EAAAiB,KACAyB,EAAA1C,EAAA0C,GAEA1C,GAAA2E,IAAA/D,EAAAgE,QAAA3D,KAAAA,EAAAd,OAAAuC,IAGA1C,EAAAyC,KAAA,WAEA7B,EACAlF,KAAAuF,KAAAA,EAAA0D,IAAA3E,EAAA2E,MACArK,KAAA,SAAAY,GACA0F,EAAA1B,UACA+B,KAAAA,EACA0D,IAAA3E,EAAA2E,IACAxE,OAAAjF,IACAZ,KAAA,WACA0F,EAAA0C,IAAAxH,KAEA,SAAAX,GACAb,EAAAc,UAAAD,MAMAyF,EAAAvB,OAAA,WAEA,GAAAuB,EAAA6E,SAAA,CAEA,GAAAF,GAAA/D,EAAAgE,QAAA3D,KAAAA,EAAAd,OAAAuC,GAEA9B,GACAnC,QAAAwC,KAAAA,EAAA0D,IAAAA,IACArK,KAAA,WACAf,EAAAuL,WAAA,kBACA7D,KAAAA,EACA0D,IAAAA,EACAjC,IAAAA,KAEA,SAAAnI,GACAb,EAAAc,UAAAD,SAKAyF,GAAA6E,UAAA,GAMA7E,EAAA+E,eAAA,iBACA/E,GAAA6E,UAGA7E,EAAAgE,IAAA,WAAA,WACAU,EAAAM,IAAA,QAAAhF,EAAA+E,mBAIA3L,YAAA,sBAKA6K,UAAA,cAAA,iBAAA,YAAA,SAAArD,EAAAqE,GAEA,OAEAf,SAAA,KACAlE,OACA4B,MAAA,IACA+C,IAAA,IACAjC,IAAA,IACAzB,KAAA,KAEAnG,SAAA,EACAqJ,KAAA,SAAAnE,EAAAkF,GAEA,GAAAjE,GAAAjB,EAAAiB,KACAyB,EAAA1C,EAAA0C,IACAd,EAAA5B,EAAA4B,MACA+C,EAAA3E,EAAA2E,GAEA3E,GAAAyC,KAAA,WACAzC,EAAA2C,SAAA,EACAE,WAAA,WAEA,GAAAtC,GAAA,WAGA,GAFAP,EAAAmF,QAAA,EACAnF,EAAAoF,OAAA,EACA,gBAAAC,GACA3C,EAAAd,EAAAC,IAAAyD,EAAA,GAAAC,UAEA,KACA7C,EAAAd,EAAAC,IAAA9E,KAAAC,MAAAsI,EAAA,GAAAC,OACA,MAAAhL,GAIA,MAHA1B,SAAAqD,IAAA,4BACA8D,EAAAoF,MAAA7K,OACAyF,EAAAmF,QAAA,GAMAvE,EAAA4E,WACAvE,KAAAA,EACA0D,IAAAA,EACA/C,MAAAA,EAAAC,GACA0D,MAAA7C,EAAAd,EAAAC,MACAvH,KAAA,WACA0F,EAAAmF,QAAA,GACA,SAAA5K,GACAyF,EAAAmF,QAAA,EACAnF,EAAAoF,MAAA7K,IAEAyF,EAAAyF,WAGAH,EAAAJ,EAAAhI,KAAA,QACAoI,GAAAI,OACA,IAAAL,GAAA3C,EAAAd,EAAAC,GACAyD,GAAAK,KAAA,QAAA,SAAAC,GACA,OAAAA,EAAAC,SACA,IAAA,IACAnD,EAAAd,EAAAC,IAAAwD,EACArF,EAAAyF,UACAH,EAAA1C,MACA,MACA,KAAA,IACArC,IACA+E,EAAA1C,UAIA0C,EAAAK,KAAA,OAAA,WACAN,IAAA3C,EAAAd,EAAAC,OAKA,IAGAD,EAAAkE,UACA9F,EAAA+F,QAAA,WACAd,EAAAe,MACAC,SAAA,iGACAC,YAAA5G,MACAnG,YAAA,SAAA,SAAAiF,GACAA,EAAAwD,MAAAA,EACAxD,EAAAsE,IAAAA,EACAtE,EAAA6C,KAAAA,QAMAjB,EAAA4C,KAAA,WACA5C,EAAA2C,SAAA,IAIAvJ,YAAA,uBAKA6K,UAAA,WAAA,WAEA,MAAA,UAAAjE,EAAAmG,EAAAC,GACA,GAAAC,GAAAF,EAAA,EACAA,GAAAR,KAAA,SAAA,WACAU,EAAAC,UAAAD,EAAAE,cAAA,GAAAF,EAAAG,cACAxG,EAAAyG,OAAAL,EAAAM,eAKAzC,UAAA,gBAAA,WAEA,OAEAC,SAAA,KACA9K,YAAA,gCAKA6K,UAAA,eAAA,WAAA,SAAA0C,GAEA,OAEAzC,SAAA,KACAC,KAAA,SAAAnE,EAAAkF,GACA,GAAAtD,GAAA5B,EAAA4B,MACA1G,EAAA8E,EAAA0C,IAEAuD,EAAA,GACA/L,EAAA0H,EAAAkE,QAAA5L,IAAAY,QAAA,UAAAI,EAAA0G,EAAAC,IAEA,QAAAD,EAAAkE,QAAAtG,MACA,IAAA,QACAyG,EAAA,aAAA/L,EAAA,MACA,MACA,KAAA,QACA+L,EAAA,yCAAA/L,EAAA,aAGA,GAAA0M,GAAAD,EAAApO,QAAA2M,QAAAe,IAAAjG,EACAkF,GAAA2B,OAAAD,QCrSArO,QACAC,OAAA,aACAkF,OAAA,cAAA,UAAA,SAAAY,GACA,MAAA,UAAAgH,EAAA9F,EAAAI,GAMA,OAJA,gBAAA,KACA0F,EAAAvI,KAAAa,UAAA0H,IAGA9F,GACA,IAAA,OAEA,MADAI,GAAAA,GAAA,SACAtB,EAAA,QAAAgH,EAAA1F,EAKA,SACA,MAAA0F,QCjBA/M,QACAC,OAAA,aACAsO,QAAA,kBAAA,KAAA,cAAA,cAAA,UAAA,SAAApM,EAAAjB,EAAA4E,EAAAC,GAEA,GAAAyI,GAAA,SAAA9F,GACA,MAAAhE,GAAAC,KAAAzD,EAAAwC,YAAA+K,SAAA,SAAA7G,GACA,MAAAA,GAAA0B,KAAAZ,KAKAgG,EAAA,SAAA/L,GAEA,GAAAuG,GAAAvG,EAAAuG,aAEAC,EAAAD,EAAAzD,MAAAyD,EAAAzD,KAAA0D,QAAAzE,EAAA0E,KAAAzG,EAAAqE,OAAAE,WAEA,OAAAxC,GAAAgB,IAAAyD,EAAA,SAAAE,GACA,MAAA,gBAAAA,IACAC,GAAAD,GAEAA,IAMA,QAEA3F,UAAA8K,EAEA/I,KAAA,SAAAkJ,GAEAA,EAAAA,KAEA,IAAAjH,GAAAvF,EAAAwF,QAEAe,EAAAiG,EAAAjG,MAAA,GACAC,EAAAgG,EAAAhG,OAAA,GACA8B,EAAAkE,EAAAlE,QAAA,CAEA,OAAA,KAAA/B,GACAhB,EAAA7E,OAAA,GAAAI,OAAA,kBACAyE,EAAAG,UAGA3G,EACAiC,IAAA,WAAAuF,GACAC,MAAAA,EACA8B,OAAAA,IAEA1I,KAAA,SAAAY,GAEA,GAAAzC,GAAAsO,EAAA9F,EACAkG,UAAA1O,EACAwH,EAAA7E,QACAE,QAAA,8CACAO,QAAAoF,KAAAA,MAGA/F,EAAAwG,OAAAuF,EAAAxO,GACAwH,EAAAjF,QAAAE,KAGA,SAAAX,GACA0F,EAAA7E,OAAAb,KAIA0F,EAAAG,UAIA1E,IAAA,SAAAwL,GAIA,MAFAA,GAAAA,MAEAxM,EAAA,SAAAM,EAAAI,GAEA,GAAA6F,GAAAiG,EAAAjG,MAAA,EACA,IAAA,KAAAA,EACA,MAAA7F,GAAA,GAAAI,OAAA,iBAGA,IAAAmJ,GAAAuC,EAAAvC,GAKA,OAJAuC,GAAA7C,aACAM,EAAA,IAGAwC,SAAAxC,EACAvJ,EAAA,GAAAI,OAAA,oBAGA/B,GACAiC,IAAA,WAAAuF,EAAA,IAAA0D,GACArK,KAAA,SAAAY,GACA,GAAAzC,GAAAsO,EAAA9F,EACAkG,UAAA1O,EACA2C,GACAE,QAAA,8CACAO,QAAAoF,KAAAA,KAGAjG,EAAAE,IAEAE,MAIA8D,SAAA,SAAAgI,GACA,GAAAjG,GAAAiG,EAAAjG,KACA0D,EAAAuC,EAAAvC,IACAxE,EAAA+G,EAAA/G,WACAiH,EAAAL,EAAA9F,GACAoG,EAAA/G,IAEA,KAAA,GAAAgH,KAAAF,GAAA7H,OAAAE,YACA2H,EAAA7H,OAAAE,WAAA6H,GAAAC,YAAAH,EAAA7H,OAAAE,WAAA6H,GAAAE,cACAJ,EAAA7H,OAAAE,WAAA6H,GAAA,QAAA,SACA3C,GAAAyC,EAAA7H,OAAAE,WAAA6H,GAAAC,YAAA5C,GAAAyC,EAAA7H,OAAAE,WAAA6H,GAAAE,cACAJ,EAAA7H,OAAAE,WAAA6H,GAAA,QAAA,IAKA,IAAAvH,GAAA,WACA4E,IACAA,EAAA0C,EAAAzC,QACA3D,KAAAA,EACAd,OAAAA,IAGA,IAAAlF,GAAAxB,EAAAsC,IAAA,WAAAkF,EAAA,IAAA0D,EAAAxE,EAMA,OALAwE,IACA1J,EAAAX,KAAA,WACA+M,EAAArJ,KAAAkJ,KAGAjM,EAGA,OAAAoD,GAAAoJ,UACAlI,OAAA6H,EAAA7H,OACAY,OAAAA,EACAJ,OAAAA,KAIA6E,OAAA,SAAAsC,GACA,GAAAjG,GAAAiG,EAAAjG,KACAd,EAAA+G,EAAA/G,OACAiH,EAAAL,EAAA9F,GACAU,EAAAyF,EAAA7H,OAAAmI,WACA/C,EAAAhD,EAAA1D,IAAA,SAAA0G,GACA,MAAAgD,oBAAA,MAAAxH,EAAAwE,GAAA,GAAAxE,EAAAwE,MACAiD,KAAA,IACA,OAAAjD,IAGAa,UAAA,SAAA0B,GAEA,GAAAjG,GAAAiG,EAAAjG,KACA0D,EAAAuC,EAAAvC,IACA/C,EAAAsF,EAAAtF,MACA2D,EAAA2B,EAAA3B,KAEA,OAAA9L,GACAsC,IAAA,WAAAkF,EAAA,IAAA0D,EAAA,IAAA/C,GAAA2D,MAAAA,KAKA9G,OAAA,SAAAyI,GAEA,GAAAjG,GAAAiG,EAAAjG,KACA0D,EAAAuC,EAAAvC,GAEA,OAAAlL,GAAAuC,IAAA,WAAAiF,EAAA,IAAA0D,IAGA3K,OAAA,SAAAkN,GAEA,MAAAxM,GAAA,SAAAM,EAAAI,GAEA,GAAA6F,GAAAiG,EAAAjG,IACA,IAAA,KAAAA,EACA,MAAA7F,GAAA,GAAAI,OAAA,iBAGA,IAAAG,GAAAuL,EAAAvL,OAAA,EACA,IAAA,KAAAA,EACA,MAAAP,GAAA,GAAAI,OAAA,iBAGA,IAAAwH,GAAAkE,EAAAlE,QAAA,EACA9B,EAAAgG,EAAAhG,OAAA,EAEAzH,GACAiC,IAAA,kBAAAuF,GACAtF,MAAAA,EACAuF,MAAAA,EACA8B,OAAAA,IAEA1I,KAAA,SAAAY,GACA,GAAAzC,GAAAsO,EAAA9F,EACAkG,UAAA1O,EACA2C,GACAE,QAAA,8CACAO,QAAAoF,KAAAA,KAGAjG,EAAAE,IAEAE,MAKAsC,OAAA,SAAAwJ,GACA,MAAAxM,GAAA,SAAAM,EAAAI,GAEA,GAAA6F,GAAAiG,EAAAjG,IACA,IAAA,KAAAA,EACA,MAAA7F,GAAA,GAAAI,OAAA,iBAGA,IAAAG,GAAAuL,EAAAvL,OAAA,EACA,OAAA,KAAAA,EACAP,EAAA,GAAAI,OAAA,sBAGA/B,GACAiC,IAAA,kBAAAuF,GACAtF,MAAAA,EACAuF,MAAA,GACA8B,OAAA,IAEA1I,KAAA,SAAAY,GACA,GAAAzC,GAAAsO,EAAA9F,EACAkG,UAAA1O,EACA2C,GACAE,QAAA,8CACAO,QAAAoF,KAAAA,KAGAjG,EAAAE,IAEAE,MAIAyM,SAAA,SAAA5G,GACA,GAAAoG,GAAA/G,KACAwH,EAAAxE,SAAAC,eAAA,cAAAwE,MAAA,GACAC,EAAA,GAAAC,YACAjB,EAAA,IACAgB,GAAAE,WAAAJ,EAAA,SAEAE,EAAAG,OAAA,SAAA7D,GAEA,IACA0C,EAAAjK,KAAAC,MAAAsH,EAAA8D,OAAAnN,QACA,MAAAmK,GACAvM,QAAA0B,IAAA6K,GAKA,GAAA,OAAA4B,EACA,IAAA,GAAAtG,GAAA,EAAAA,EAAAsG,EAAAxE,OAAA9B,IAAA,CACA,GAAAiE,GAAA0C,EAAAzC,QACA3D,KAAAA,EACAd,OAAA6G,EAAAtG,IAEAjH,GAAAsC,IAAA,WAAAkF,EAAA,IAAA0D,EAAAqC,EAAAtG,OAQA2H,SAAA,SAAApH,EAAAqH,EAAA3M,GACA,GAAA0L,GAAA/G,IACA2C,SAAAjI,UACAV,KAAA,WACA,MAAAqB,GACA0L,EAAArN,QACAiH,KAAAA,EACAtF,MAAAA,EACAuF,MAAA,KAGAmG,EAAArJ,MACAiD,KAAAA,EACAC,MAAA,OAGA5G,KAAA,SAAAY,GACA,GAAAqH,GAAArH,EAAA8C,KACAuK,EAAAtH,EAAA,IAAA3C,EAAA,QAAA,GAAAkK,MAAA,gBAAA,QACA5B,EAAA7J,KAAAa,UAAA2E,EACAkG,QAAAC,kBAAAD,OAAAC,mBAAAD,OAAAE,wBACAF,OAAAC,kBAAAE,UAAA,QAAA,SAAAC,GAEAA,EAAAC,KAAAC,QAAAR,GAAAS,QAAA,EAAAC,WAAA,GAAA,SAAAC,GAEAA,EAAAC,aAAA,SAAAC,GACA,GAAAC,GAAA,GAAAC,OAAA1C,IAAApH,KAAA,cACA4J,GAAAG,MAAAF,GAEAD,EAAAI,WAAA,SAAAlF,GACAzL,QAAAC,KAAA,kBACA,IAAAqL,GAAAb,SAAAmG,cAAA,IACAtF,GAAAuF,KAAAR,EAAAS,QACAxF,EAAAyF,SAAArB,EACAjF,SAAAD,KAAAwG,YAAA1F,GACAA,EAAA2F,QACAxG,SAAAD,KAAA0G,YAAA5F,IAGAiF,EAAAY,QAAA,SAAA1F,GACAzL,QAAAqD,IAAA,sBAGA,SAAAkJ,GACAvM,QAAAqD,IAAA,WAAAkJ,EAAA6E,WAGA,SAAA1P,GACA1B,QAAAqD,IAAA,WAAA3B,UC3UAhC,QACAC,OAAA,aACAiC,QAAA,iBAAA,WAAA,SAAAyP,GAEA,GAAA1P,GAAA,SAAAD,GACA,GAAAc,GAAA,EAEAA,GADA,gBAAAd,GACAA,EACAA,EAAAe,QACAf,EAAAe,QACAf,EACAA,EAAA4P,WAEA,gBAGAD,EAAAlE,MACA7M,YAAA,SAAA,SAAAiF,GACAA,EAAA9C,QAAAD,EACA+C,EAAAvC,OAAAtB,EAAAsB,WACAuC,EAAAgM,WAAA,WACAF,EAAAG,UAGAjR,YAAA,oBACAkR,UAAA,IACAC,SAAA,cAIA,QAEA/P,UAAAA,MChCAjC,QACAC,OAAA,aACAC,QAAA,2BAAA,SAAA+R,GAEAA,EAAAC,aAAA,MACAtN,KAAA,OACAjD,IAAA,WCNA3B,QACAC,OAAA,aACAC,QAAA,2BAAA,SAAA+R,GAEAA,EAAAC,aAAA,MAEAC,IAAA,KACAC,OAAA,QACAC,MAAA,MACAC,OAAA,KACAC,UAAA,UACAC,SAAA,MACAC,KAAA,KACAC,OAAA,KACAC,OAAA,KACAC,OAAA,KACAC,OAAA,KACAC,SAAA,KACAC,OAAA,KACAC,IAAA,MAEApO,KAAA,KACAjD,IAAA,MAEAsR,mBAAA,YAEAC,8CAAA,8BC1BAlT,QACAC,OAAA,aACAkT,SAAA,mBAAA,WAEA,GAAAC,MAEAC,EAAA,SAAAC,EAAAC,GACA,GAAA7N,GAAA0N,EAAAG,EACA7N,KACAA,EAAA0N,EAAAG,OAEAH,EAAAG,GAAA7O,EAAA8O,MAAAF,EAAA5N,GAGAqC,MAAAmK,aAAA,SAAAqB,EAAAD,GACAD,EAAAC,EAAAC,IAGAxL,KAAA0L,MAAA,KAAA,SAAAtR,GAEA,GAAAoM,GAAA,SAAAmF,GACA,GAAAtH,GAAAsH,EAAAtH,IACA1E,EAAAvF,EAAAwF,OAEA,OADAD,GAAAjF,QAAA2Q,EAAAhH,QACA1E,EAAAG,QAOA,OAJA0G,GAAAoF,UAAA,SAAAC,GACAlP,EAAAwD,KAAA0L,EAAAP,IAGA9E,MAGArO,QAAA,qBAAA,SAAA2T,GACAA,EAAAC,UAAA,oBACAD,EAAAE,gCCnCA/T,QACAC,OAAA,aACAW,WAAA,aAAA,SAAA,aAAA,aAAA,WAAA,YAAA,YAAA,UAAA,aAAA,mBAAA,mBAAA,eAAA,SACAiF,EACA7E,EACAgT,EACAC,EACAC,EACA9S,EACAmH,EACA4L,EACAC,EACAnT,EACAI,GAEAwE,EAAAwO,WAAA,WACAJ,EAAA,WACAD,EAAA,aAAAM,YAIAzO,EAAA0O,MAAAzN,MAAA,cAEAjB,EAAA2O,MAAA1N,MAAA,IAEA9F,EAAAyK,IAAA,gBAAA,SAAA4B,EAAAvG,GACAjB,EAAA2O,KAAA1N,MAAAA,IAGA9F,EAAAyK,IAAA,yBAAA,WACA5F,EAAAS,KAAAD,SAAAC,KACA0N,EAAA,aAAA9H,UAGAlL,EAAAyK,IAAA,iBAAA,WACA5F,EAAA4O,UAAAC,KAAA,QAAA1H,MAAA,KAGAhM,EAAAyK,IAAA,eAAA,WACA,GAAAgJ,GAAA5O,EAAA4O,QACA,IAAA,UAAAA,EAAAC,KACAT,EAAA,WACApO,EAAA4O,UAAA,GACA,SACA,IAAA,gBAAAA,EAAAC,KACA,GAAAC,GAAAT,EAAA,WACAO,EAAAzH,OAAA,GACAyH,EAAAzH,OAAA,MACAkH,EAAAU,OAAAD,GACAV,EAAA,iBACApO,GAAA4O,UACA,OAEA,MAIA5O,EAAAgP,WAAA,EAEA7T,EAAAyK,IAAA,SAAA,SAAA4B,EAAAnN,GACAI,QAAAC,KAAA,uBAAAL,GACA2F,EAAA3F,OAAAA,EACA2F,EAAA0O,KAAArU,EAAAqU,KAEArU,EAAA4U,OACAV,EAAAT,UAAAzT,EAAA4U,MACAX,EAAAY,aAIAxM,EAAAyM,iBAAA,SAAA,WACAhU,EAAAuL,WAAA,mBAGA1G,EAAAX,OAAA,WAEA7D,EAAA6D,SACA9D,EAAAO,IAAA,cC9EA3B,QACAC,OAAA,aACAW,WAAA,aAAA,SAAA,aAAA,mBAAA,SAAAiF,EAAA7E,EAAAC,GAEAD,EAAA4C,MAAA,iBACA6C,QAAA,UAGAZ,EAAAxD,OAAA,SAAAC,GACA,GAAAhB,GAAAL,EAAAM,cACAI,EAAAL,EAAAK,IAAAY,QAAA,WAAA,KAEA,OADAD,GAAAA,EAAAC,QAAA,YAAA,MACAZ,EAAA,IAAAW,MCZAtC,QACAC,OAAA,aACAiC,QAAA,eAAA,gBAAA,YAAA,aAAA,eAAA,oBAAA,mBAAA,KAAA,SACAf,EACAuL,EACA1L,EACAiU,EACA3M,EACA4M,EACA/S,GAEA,GAAAgT,GAAA,SAAA1N,GACA,MAAA,UAAAnF,GACA,GAAA8S,GAAAF,EAAAG,SAAA5N,EAAAG,OAAAH,EAAAT,OACAoO,IACAA,EAAAE,QAAA,SAAAtT,GACAyF,EAAA2N,OAAApT,EAAAM,MAAAN,EAAAe,UAEA0E,EAAA8N,UAAA,IAEAjT,QACAmF,GAAA2N,OAAA9S,GAEAmF,EAAA2N,UAEA3N,EAAA8N,UAAA,KAKAC,EAAA,SAAA/N,EAAAgO,EAAAjO,EAAAE,GACA,MAAA,YACAD,EAAA4N,WACA5N,EAAA8N,WAGA/N,IACAiO,EAAA3D,OACApK,EAAA7E,UAEA2E,EAAAC,GAAA1F,KAAA,WACA0T,EAAA3D,OACApK,EAAAjF,QAAAgF,EAAAG,SACA,SAAA5F,GACA0F,EAAA7E,OAAAb,GACAb,EAAAc,UAAAD,QAKA0T,EAAA,SAAAjO,EAAAgO,EAAA/N,GACA,MAAA,YACA+N,EAAA3D,OACApK,EAAA7E,UAIA,QACAgE,WAAA,SAAA8H,GAEAA,EAAAA,KAEA,IAAA3H,GAAA2H,EAAA3H,OACAY,EAAA+G,EAAA/G,WACAb,EAAA4H,EAAA5H,MACAW,EAAAvF,EAAAwF,QACAH,EAAAmH,EAAAnH,OACAhH,EAAAmO,EAAAnO,OAAA,QAkBA,OAhBAwG,GAAAsB,EAAAtB,GAEA0F,EAAAe,MACAC,SAAA,wBAAAlN,EAAA,gCACAmN,YAAA5G,EACAnG,YAAA,SAAA,SAAAiF,GACAA,EAAAmB,OAAAA,EACAnB,EAAA+B,OAAAA,EACA/B,EAAAiB,MAAA6H,EAAA7H,OAAA,GACAjB,EAAAuP,UACAvP,EAAAwP,SAAAF,EAAAtP,GACAA,EAAA2B,OAAAgO,EAAA3P,EAAA6G,EAAAlF,EAAAE,GACA7B,EAAA+O,OAAAc,EAAA7P,EAAA6G,EAAAhF,OAIAA,EAAAG,SAGAqH,SAAA,SAAAP,GAEA,GAAA3H,GAAA2H,EAAA3H,OACAY,EAAA+G,EAAA/G,WACAF,EAAAvF,EAAAwF,QACAH,EAAAmH,EAAAnH,MAGAR,GAAAsB,EAAAtB,EAEA,IAAAS,GAAAzG,EAAA2U,MACAlO,GAAAT,OAAAA,EACAS,EAAAG,OAAAA,EACAH,EAAA2N,UACA3N,EAAA4N,SAAAF,EAAA1N,EAEA,IAAAgO,GAAAR,EAAAxN,EAOA,OALAA,GAAAD,OAAAgO,EAAA/N,EAAAgO,EAAAjO,EAAAE,GACAD,EAAAmN,OAAAc,EAAAjO,EAAAgO,EAAA/N,GAEA+N,EAAAhI,OAEA/F,EAAAG,aAMA6D,UAAA,aAAA,WAEA,OACAC,SAAA,KACA9K,YAAA,2BAIA6K,UAAA,cAAA,WAAA,iBAAA,SAAA0C,EAAAwH,GAEA,GAAAC,GAAA,SAAApO,EAAAkF,GAEA,GAAA3F,GAAAS,EAAAT,OACA0G,EAAA,EACA,QAAA1G,EAAAC,MACA,IAAA,SAEAyG,EADA1G,EAAAA,QACA4O,EAAAzS,IAAA,gCACA6D,EAAA8O,UACAF,EAAAzS,IAAA,mCACA,UAAA6D,EAAAK,OACAuO,EAAAzS,IAAA,2BAEAyS,EAAAzS,IAAA,yBAEA,MACA,KAAA,UACAuK,EAAAkI,EAAAzS,IAAA,iCACA,MACA,KAAA,SACAuK,EAAAkI,EAAAzS,IAAA,gCACA,MACA,KAAA,SACAsE,EAAAG,OAAAH,EAAAT,OAAA1E,MAAAmF,EAAAG,OAAAH,EAAAT,OAAA1E,UAEAoL,EADA,QAAA1G,EAAAK,OACAuO,EAAAzS,IAAA,+BAEAyS,EAAAzS,IAAA,gCAEA,MACA,KAAA,QACA6D,EAAA+O,OAAA/O,EAAA+O,MAAA/O,SACAS,EAAAG,SACAH,EAAAG,OAAAH,EAAAT,OAAA1E,MAAAmF,EAAAG,OAAAH,EAAAT,OAAA1E,WAEAoL,EAAAkI,EAAAzS,IAAA,sCACA,OAAA6D,EAAAK,QACAI,EAAAG,SACAH,EAAAG,OAAAH,EAAAT,OAAA1E,MAAAmF,EAAAG,OAAAH,EAAAT,OAAA1E,WAEAoL,EAAAkI,EAAAzS,IAAA,gCAEAsE,EAAAG,OAAAH,EAAAT,OAAA1E,MAAAmF,EAAAG,OAAAH,EAAAT,OAAA1E,UACAoL,EAAAkI,EAAAzS,IAAA,iCAKA,GAAAkL,GAAAD,EAAApO,QAAA2M,QAAAe,IAAAjG,EAEAT,GAAAM,OACA+G,EAAA2H,SAAAhP,EAAAM,OAGAqF,EAAA2B,OAAAD,GAGA,QACA5G,OACAT,OAAA,IACAY,OAAA,IACAwN,OAAA,KAEAzJ,SAAA,KACApJ,SAAA,EACAqJ,KAAAiK,MC/LA7V,QACAC,OAAA,aACAiC,QAAA,oBAAA,WAEA,GAAA+T,GAAA,SAAAjP,EAAA1E,EAAA8J,GAGA,MAAApF,GAAAkP,aACAlP,GAGA,gBAAAA,KACAA,GAAAC,KAAAD,IAGA1E,EACA0E,EAAA1E,KAAAA,EAAA,IAAA8J,EAEApF,EAAA1E,KAAA8J,EAGApF,EAAAoF,IAAAA,EAEA,WAAApF,EAAAC,OAEAvC,EAAAwD,KAAAlB,EAAAE,WAAA,SAAAiP,EAAA/J,GACApF,EAAAE,WAAAkF,GAAA6J,EAAAE,EAAA7T,EAAA8J,KAEApF,EAAAoP,SAAA1R,EAAA0E,KAAApC,EAAAE,aAGA,UAAAF,EAAAC,OAEAvC,EAAAwD,KAAAlB,EAAA+O,MAAA,SAAAI,EAAA/J,GACApF,EAAA+O,MAAA3J,GAAA6J,EAAAE,EAAA7T,EAAA8J,KAEApF,EAAAoP,SAAA1R,EAAA0E,KAAApC,EAAA+O,QAIA/O,EAAAkP,cAAA,EAEAlP,GAGA,OAAAiP,KC7CAjW,QACAC,OAAA,aACAiC,QAAA,mBAAA,WAKA,GAAAmU,IAOAC,YAAA,4EAOAC,KAAA,sBASAC,KAAA,oCAOAC,eAAA,SAAA1J,GAAA,OAAA2J,MAAAC,SAAA5J,EAAA,MAMA6J,MAAA,SAAA7J,GACA,IACA,GAAA8J,QAAA9J,GACA,MAAAhB,GACA,OAAA,EAEA,OAAA,GASA+K,MAAA,usDAMAxP,MAAA,sCAOAyP,IAAA,8ZAOAC,MAAA,8iCAKAC,KAAA,8FAOAC,KAAA,qKAKAC,YACA,sGAIAzS,GAAAwD,KAAAmO,EAAA,SAAAhP,EAAA+E,GAEA,kBAAA/E,GACA+P,IAAAC,UAAAjL,EAAA,SAAAzJ,GAEA,MAAA,QAAAA,GAAAiM,SAAAjM,GAAA,IAAAA,EAAAsH,OACA,KAEA5C,EAAA1E,GACA,KAEA,yBAAAyJ,IAIAgL,IAAAC,UAAAjL,EAAA,SAAAzJ,GAEA,MAAA,QAAAA,GAAAiM,SAAAjM,GAAA,IAAAA,EAAAsH,OACA,KAEA5C,EAAAiQ,KAAA3U,GACA,KAEA,iBAAAyJ,KAMA,IAAA6J,GAAA,SAAAtT,GAEA,gBAAAA,IAEA+B,EAAAwD,KAAAvF,EAAA,SAAA4U,EAAAnL,GACA,KAAAmL,GAAA3I,SAAA2I,GAAA,OAAAA,QACA5U,GAAAyJ,GACA,gBAAAmL,IACAtB,EAAAtT,EAAAyJ,MAMA,QAEAiJ,SAAA,SAAA1S,EAAAqE,EAAA1E,GAEA2T,EAAAtT,EAEA,IAAAD,GAAA0U,IAAAI,iBAAA7U,EAAAqE,EACA,IAAAtE,EAAA+U,MACA,MAAA,KAcA,IAZA/S,EAAAwD,KAAAxF,EAAA0S,OAAA,SAAApT,GACA,GAAA0V,GAAA,GACA1V,GAAA2V,WACAD,EAAA1V,EAAA2V,UAEA3V,EAAAsB,OAAA8I,MACAsL,EAAA1V,EAAA2V,SAAA,IAAA3V,EAAAsB,OAAA8I,KAEAsL,EAAAA,EAAAE,MAAA,KACAF,EAAAG,QACA7V,EAAAM,KAAAoV,EAAArI,KAAA,OAEA/M,EAAA,CACA,IAAA,GAAA6F,GAAA,EAAAA,EAAAzF,EAAA0S,OAAAnL,OAAA9B,IAAA,CACA,GAAAnG,GAAAU,EAAA0S,OAAAjN,EACA,IAAAnG,EAAAM,OAAAA,EACA,OAAAN,GAGA,MAAA,MAEA,MAAAU,GAAA0S,WC/KApV,QACAC,OAAA,aACAsO,QAAA,gBAAA,eAAA,aAAA,aAAA,WAAA,WAAA,UAAA,WAAA,SAAAuJ,EACA9D,EACA+D,EACAC,EACA/D,EACA1L,EACA6F,GAEA,GAAA6J,GAAA,KACAC,EAAA,IAEA,OAAA,UAAAzQ,GAEAwQ,IACAA,EAAAE,WACAD,EAAAhS,SACA+R,EAAA,KAGA,IAAAtL,GAAAyB,EAAA,sLAAA3G,GAEAgG,EAAA,WACAqK,EAAAnT,KAAA,QAAA2J,OAAA3B,GACAqH,EAAA,cAAAM,SACA2D,EAAAxQ,EACAyQ,EAAAvL,GAGAmF,EAAA,WACAkC,EAAA,cAAA9H,QAGA,QACAuB,KAAAA,EACAqE,KAAAA,OCpCA9R,QACAC,OAAA,aACAW,WAAA,WAAA,SAAA,QAAA,cAAA,eAAA,SAAAiF,EAAAzD,EAAAlB,EAAAsH,GACAA,EAAA4P,SAAA,UAAAvS,GACAA,EAAAwS,SAAA,SAAAC,GACA,MAAApX,GAAAiC,IAAA0C,EAAAmB,OAAAuR,QAAAnV,MAAAkV,IAAAvW,KAAA,SAAAyW,GACA,MAAAA,GAAArT,OAAA,SAAA6H,GACA,MAAA,IAAAA,EAAAyL,KAAAC,cAAAlT,QAAA8S,EAAAI,uBCPA1Y,QACAC,OAAA,aACAW,WAAA,WAAA,aAAA,SAAAI,GAEAA,EAAA4C,MAAA,iBACA6C,QAAA,WCFAzG,QAAAC,OAAA,kBACAyL,UAAA,sBAAA,UAAA,SAAAnD,GACA,OACAoD,SAAA,IACAgN,QAAA,UACA/M,KAAA,SAAAnE,EAAAmR,EAAAC,EAAAC,GAEA,GAAAC,GAAA,SAAAC,GAIA,IAAA,GAHAC,GAAA,GACAC,EAAA,GAAAC,YAAAH,GACAI,EAAAF,EAAAG,WACAlR,EAAA,EAAAiR,EAAAjR,EAAAA,IACA8Q,GAAAK,OAAAC,aAAAL,EAAA/Q,GAEA,OAAAI,GAAAiR,KAAAP,IAGAQ,IAEAhS,GAAAiS,aAAA,SAAA3N,GACA0N,EAAAE,OAAAZ,EAAAhN,EAAA8D,OAAAnN,QACA+E,EAAAyG,OAAA,WACA4K,EAAAc,cAAA5Z,QAAA6Z,KAAAJ,MAIA,IAAAhK,GAAA,GAAAC,WACAD,GAAAG,OAAAnI,EAAAiS,aAEAd,EAAAkB,GAAA,SAAA,WACA,GAAAvK,GAAAqJ,EAAA,GAAApJ,MAAA,EAEAD,IACAkK,EAAAM,SAAAxK,EAAAtI,KACAwS,EAAAzJ,SAAAT,EAAA3K,KACA6U,EAAAO,SAAAzK,EAAA0K,KACAxK,EAAAyK,kBAAA3K,KAEAkK,EAAAM,SAAA,GACAN,EAAAzJ,SAAA,GACAyJ,EAAAO,SAAA,GACAP,EAAAE,OAAA,GACAb,EAAAc,cAAA5Z,QAAA6Z,KAAAJ,YC7CA,WAGA,GAAAU,EAEAA,GAAAna,QAAAC,OAAA,cAAA,aAAA,aAEAka,EAAAzO,UAAA,gBACA,cAAA,SAAA0O,GACA,OACA1M,SAAA,oRACA/B,SAAA,IACAlE,OACA4S,UAAA,IACAC,UAAA,IACAC,KAAA,KAEA3O,KAAA,SAAAnE,EAAAkF,EAAAkM,GACA,GAAA2B,EACAA,GAAAC,EAAA,gBACAhT,EAAA6S,WACAE,EAAAE,IAAA,QAAAjT,EAAA6S,UAAA,aAEA7S,EAAA4S,WACAG,EAAAE,IAAA,eAAAjT,EAAA4S,UAAA,mBAOAM,KAAA5S,MC/BA/H,QACAC,OAAA,aACAiC,QAAA,gBAAA,aAAA,SAAAlB,GACA,GAAAwH,KACA,QACA4P,SAAA,SAAAhM,EAAAY,GACAxE,EAAA4D,GAAAY,GAEApD,SAAA,SAAAwC,GACA,MAAA5D,GAAA4D","file":"main.js","sourcesContent":["'use strict';\n\nangular\n.module('ngManager', [\n  'ngRoute',\n  'ngAnimate',\n  'ngAria',\n  'ngMaterial',\n  'pascalprecht.translate',\n  'datePicker',\n  'ngCookies',\n  'naif.base64',\n  'ngTagsInput',\n])\n.config(function($routeProvider, $mdThemingProvider, $sceDelegateProvider) {\n\n  console.info('Configuring theme');\n  $mdThemingProvider.theme('menu')\n  .primaryPalette('indigo')\n  .accentPalette('orange')\n  ;\n  $mdThemingProvider.theme('endpoint')\n  .primaryPalette('indigo')\n  .accentPalette('orange')\n  ;\n  $mdThemingProvider.theme('entity')\n  .primaryPalette('indigo')\n  .accentPalette('orange')\n  ;\n  $mdThemingProvider.theme('login')\n  .primaryPalette('indigo')\n  .accentPalette('orange')\n  ;\n  $mdThemingProvider.theme('side')\n  .primaryPalette('teal')\n  .accentPalette('orange')\n  ;\n  $mdThemingProvider.theme('dialog')\n  .primaryPalette('indigo')\n  .accentPalette('orange')\n  ;\n  $mdThemingProvider.theme('previewDialog')\n  .primaryPalette('teal')\n  .accentPalette('orange')\n  ;\n\n  console.info('Configuring routings');\n\n  $routeProvider\n  .when('/endpoints', {\n    controller: 'EndpointCtrl',\n    templateUrl: 'endpoint.html'\n  })\n  .when('/top', {\n    controller: 'TopCtrl',\n    templateUrl: 'top.html'\n  })\n  .when('/entity/:kind', {\n    controller: 'EntityCtrl',\n    templateUrl: 'entity/index.html'\n  })\n  .when('/login', {\n    controller: 'LoginCtrl',\n    templateUrl: 'login.html'\n  })\n  ;\n\n  $sceDelegateProvider.resourceUrlWhitelist([\n    // Allow same origin resource loads.\n    'self',\n    // Allow loading from our assets domain.  Notice the difference between * and **.\n    '**'\n  ]);\n\n\n})\n.run(function($rootScope, $endpointService, $apiService, $errorService, $location, $authService) {\n\n  console.info('Started running ng-manager');\n\n  // Check last endpoints\n  var ep = $endpointService.getSelected();\n  if (!ep) {\n    // Select endpoints\n    $location.url('/endpoints');\n  } else {\n    var token = $location.search().token;\n    if(token){\n      $authService.saveToken(token,ep);\n      $location.url('/top');\n    }\n\n    $rootScope.login = $authService.checkLogin(ep);\n\n    $apiService\n    .setup()\n    .then(function() {\n      //location.hash = 'top';\n    }, function(err) {\n      $errorService.showError(err);\n    });\n  }\n})\n;\n\n","/* global _ */\nangular\n.module('ngManager')\n.factory('$apiService', function($q, $endpointService, $http, $rootScope) {\n\n  var config = null;\n\n  // Resolves URL from path data\n  var getUrl = function(path) {\n    var ep = $endpointService.getSelected();\n    var url = ep.url.replace(/(.*)\\/+$/,'$1');\n    path = path.replace(/^\\/+(.*)$/, '$1');\n    return url + '/' + path;\n  };\n\n  var resolution = function(resolve) {\n    return function(result) {\n      return resolve(result.data);\n    };\n  };\n\n  var rejection = function(reject) {\n    return function(result) {\n      var msg = (result.data && result.data.message) || result.statusText;\n      var err = new Error(msg);\n      err.status = status;\n      reject(err);\n    };\n  };\n\n  // sends GET request\n  var get = function(path, query) {\n    return $q(function(resolve, reject) {\n      $http({\n        url: getUrl(path),\n        method: 'GET',\n        params: query\n      })\n      .then(resolution(resolve), rejection(reject));\n    });\n  };\n\n  // sends POST request\n  // data will be stringified as JSON object\n  var post = function(path, data) {\n    return $q(function(resolve, reject) {\n      $http({\n        url: getUrl(path),\n        method: 'POST',\n        data: data\n      })\n      .then(resolution(resolve), rejection(reject));\n    });\n  };\n\n  // sends PUT request\n  // data will be stringified as JSON object\n  var put = function(path, data) {\n    return $q(function(resolve, reject) {\n      $http({\n        url: getUrl(path),\n        method: 'PUT',\n        data: data\n      })\n      .then(resolution(resolve), rejection(reject));\n    });\n  };\n\n  var del = function(path, query) {\n    return $q(function(resolve, reject) {\n      $http({\n        url: getUrl(path),\n        method: 'DELETE',\n        params: query\n      })\n      .then(resolution(resolve), rejection(reject));\n    });\n  };\n\n  var search = function(path, query) {\n    return $q(function(resolve, reject) {\n      $http({\n        url: getUrl(path),\n        method: 'GET',\n        params: query\n      })\n      .then(resolution(resolve), rejection(reject));\n    });\n  };\n\n  var getConfig = function() {\n    return $q(function(resolve, reject) {\n      if (config !== null) {\n        resolve(config);\n      } else {\n        console.info('Getting config');\n        get('/config')\n        .then(\n          resolve,\n          reject\n        );\n      }\n    });\n  };\n\n  return {\n\n    setup: function() {\n      console.log('apiService.setup');\n      config = null;\n      return getConfig().then(function(data) {\n        config = data;\n        console.log(config);\n        $rootScope.$emit('config', config);\n        return config;\n      }, function(err) {\n        return err;\n      });\n    },\n\n    getConfig: function() {\n      return config;\n    },\n\n    get: get,\n\n    post: post,\n\n    put: put,\n\n    del: del,\n\n    search: search\n\n  };\n})\n.factory('progressHttpInterceptor', function($rootScope, $q) {\n  var stack = 0;\n  var inc = function() {\n    if (stack++ === 0) {\n      $rootScope.$emit('progress.start');\n    }\n  };\n  var dec = function() {\n    if (--stack === 0) {\n      stack = 0;\n      $rootScope.$emit('progress.end');\n    }\n  };\n\n  return {\n    request: function(config) {\n      inc();\n      return config || $q.when(config);\n    },\n    requestError: function(rejection) {\n      dec();\n      return $q.reject(rejection);\n    },\n    response: function(response) {\n      dec();\n      return response || $q.when(response);\n    },\n    responseError: function(rejection) {\n      dec();\n      return $q.reject(rejection);\n    }\n  };\n})\n.factory('authHttpInterceptor', function ($q, $rootScope, $location, $endpointService, $cookies) {\n  return {\n    'request': function(config) {\n      var ep = $endpointService.getSelected();\n\n      if (!ep) {\n        return config || $q.when(config);\n      }\n\n      var tokens = [];\n      var data = localStorage.getItem('tokens');\n      if(data){\n        tokens = JSON.parse(data);\n      }\n\n      var token = _.find(tokens, { 'name': ep.name });\n      var headerName = 'X-XSRF-TOKEN';\n      if (token) {\n        config.headers[headerName] = token.token;\n      }\n\n      if ($cookies['XSRF-TOKEN']) {\n        delete $cookies['XSRF-TOKEN'];\n      }\n\n      return config || $q.when(config);\n    },\n    'responseError': function(rejection) {\n      var status = rejection.status;\n      console.log(status);\n      if (status === 401) {\n        $location.path('/login');\n      }\n      return $q.reject(rejection);\n    }\n  };\n})\n.config(function ($httpProvider) {\n  $httpProvider.interceptors.push('progressHttpInterceptor');\n  $httpProvider.interceptors.push('authHttpInterceptor');\n})\n;\n","/* global _ */\nangular\n.module('ngManager')\n.factory('$authService', function($q, $location, $rootScope, $endpointService, $apiService) {\n\n  var tokens = [];\n  var data = localStorage.getItem('tokens');\n  if(data){\n    tokens = JSON.parse(data);\n  }\n\n  var logout = function(){\n\n    var ep = $endpointService.getSelected();\n\n    if(!ep){\n      return;\n    } else {\n      $apiService.get('/logout').then(function(){\n        tokens = _.filter(tokens, function(token){\n          return (token.name !== ep.name);\n        });\n        localStorage.setItem('tokens', JSON.stringify(tokens));\n        $rootScope.login = checkLogin(ep);\n      })\n      ;\n    }\n  };\n\n  var saveToken = function(token,ep){\n\n    // Update Token if exist\n    var item = _.findWhere(tokens, { 'name': ep.name });\n    if(item){\n      tokens[tokens.indexOf(item)].token = token;\n    } else {\n      tokens.push({\n        name: ep.name,\n        token: token\n      });\n    }\n\n    //save to local strage\n    var list = _.map(tokens, function(t) {\n      return _.pick(t, 'name', 'token');\n    });\n    localStorage.setItem('tokens', JSON.stringify(list));\n\n  };\n\n  var checkLogin = function(ep){\n    var list = _.find(tokens, function(t){\n      return t.name === ep.name;\n    });\n    return list;\n  };\n\n  return {\n\n    logout: logout,\n    \n    saveToken: saveToken,\n    \n    checkLogin: checkLogin\n\n  };\n\n})\n;\n\n","angular\n.module('ngManager')\n.controller('EndpointCtrl', function( $q, $scope, $rootScope, $schemaForm, $endpointService, $apiService, $errorService, $filter) {\n\n    $scope.endpoints = $endpointService.getAll();\n\n    $scope.remove = function(index) {\n      $endpointService.remove(index);\n    };\n\n    $scope.select = function(index) {\n      $endpointService.select(index);\n      $apiService\n      .setup()\n      .then(function() {\n        location.hash = 'top';\n      }, function(err) {\n        $errorService.showError(err);\n      })\n      ;\n    };\n\n    var add = function(endpoint) {\n      $endpointService.add(endpoint);\n    };\n\n    $rootScope.$emit('content.title', {\n      section: 'Settings',\n      page: 'Endpoints'\n    });\n\n    // Showing form for adding new schema\n    $scope.showForm = function($event) {\n\n      $schemaForm.showDialog({\n        title: 'Add the endpoint',\n        event: $event,\n        schema: {\n          type: 'object',\n          properties: {\n            name: { type: 'string', maxLength: 100, minLength: 1 },\n            url: { type: 'string', maxLength: 100, minLength: 1, format: 'uri', style: 'long' },\n          },\n          required: ['name','url']\n        },\n        submit: function(scope) {\n          var deferred = $q.defer();\n          var entity = scope.entity;\n          add(entity);\n          deferred.resolve();\n          return deferred.promise;\n        }\n      });\n\n    };\n\n  }\n);\n","/* global _ */\nangular\n.module('ngManager')\n.factory('$endpointService', function() {\n\n  var endpoints = [];\n  var data = localStorage.getItem(\"endpoints\");\n  if (data) {\n    endpoints = JSON.parse(data);\n  }\n\n  return {\n\n    getAll: function() {\n      return endpoints;\n    },\n\n    getSelected: function() {\n      return _.find(endpoints, function(ep) {\n        return ep.selected === true;\n      });\n    },\n\n    get: function(index) {\n      return endpoints[index];\n    },\n\n    add: function(endpoint) {\n      endpoints.push(endpoint);\n      this.save();\n    },\n\n    remove: function(index) {\n      endpoints.splice(index, 1);\n      this.save();\n    },\n\n    select: function(index) {\n      _.each(endpoints, function(ep, i) {\n        if (i === index) {\n          ep.selected = true;\n        } else {\n          delete ep.selected;\n        }\n      });\n      this.save();\n    },\n\n    save: function() {\n      var list = _.map(endpoints, function(ep) {\n        return _.pick(ep, 'name', 'url', 'selected');\n      });\n      localStorage.setItem('endpoints', JSON.stringify(list));\n    }\n  };\n\n});\n\n","/* global _ */\nangular\n.module('ngManager')\n.controller('EntityCtrl', function(\n  $q,\n  $scope,\n  $routeParams,\n  $rootScope,\n  $schemaForm,\n  $entityService,\n  $errorService,\n  $schemaNormalizer,\n  $window,\n  sharedScopes) {\n\n    var kind = $routeParams.kind;\n    var limit = 30;\n    var loadCount = 1;\n    var isLoading;\n    var isSearch = false;\n    var isFilter = false;\n    var query;\n\n    console.info('Entity', kind);\n\n    $rootScope.$emit('content.title', {\n      section: 'Entities',\n      page: kind\n    });\n\n    $scope.kind = kind;\n    $scope.filter_q = {};\n\n    var getFields = function(entityConfig) {\n      var features = entityConfig.features;\n      var schema = entityConfig.schema;\n      var fields = features.list && features.list.fields || _.keys(schema.properties);\n      return fields.map(function(field) {\n        if (typeof field === 'string') {\n          field = { id: field, label: field };\n        }\n        field.label = field.label || field.id;\n        if (field.label.indexOf('.') >= 0) {\n          field.label = field.id.substr(field.label.indexOf('.')+1);\n        } else {\n          field.label = field.id;\n        }\n        return field;\n      });\n    };\n\n    var getSearchSchema = function(entityConfig) {\n      // TODO : normalize\n      var schema = entityConfig.features.search && entityConfig.features.search.schema || {};\n      return $schemaNormalizer(schema);\n    };\n\n    var getSearchForm = function(searchForm) {\n      query = searchForm;\n      if (sharedScopes.getScope('TagCtrl')) {\n        var scopeTagCtrl = sharedScopes.getScope('TagCtrl').entity;\n        _.each($scope.searchSchema.properties, function(i,v){\n         if (i.type === 'array' && i.format === 'tag') {\n           query[v] = scopeTagCtrl[v];\n         }\n        });\n      }\n      return query;\n    };\n\n\n    $scope.list = function() {\n\n      isLoading = true;\n\n      $entityService.list({\n        kind: kind\n      }).then(function(data) {\n\n        // Get entity schema\n        var entityConfig = $entityService.getConfig(kind);\n        var fields = getFields(entityConfig);\n        var searchSchema = getSearchSchema(entityConfig);\n\n        $scope.fields = fields;\n        $scope.schema = entityConfig.schema;\n        $scope.rows = data.list;\n        $scope.searchSchema = searchSchema;\n\n        loadCount = data.list.length;\n\n        $scope.edit = function(row, id) {\n          row.editing = id;\n        };\n\n        $scope.blur = function(row) {\n          delete row.editing;\n        };\n\n        // update size after applying list\n        setTimeout(resize, 0);\n\n        isLoading = false;\n\n      }, function(err) {\n        $errorService.showError(err);\n      });\n    };\n\n    $scope.loadMore = function(){\n      if(isLoading || isFilter) return;\n\n      var offset = loadCount;\n\n      if (offset % limit != 0) {\n        return;\n      }\n\n      isLoading = true;\n\n      Promise.resolve()\n      .then(function(){\n        if (isSearch) {\n          return $entityService.search({\n            kind: kind,\n            query: query,\n            limit: limit,\n            offset: offset\n          })\n        }\n        return $entityService.list({\n          kind: kind,\n          limit: limit,\n          offset: offset\n        })\n      })\n      .then(function(data){\n        if ( data.list.length !== 0 ) {\n          loadCount += data.list.length;\n          $scope.rows = $scope.rows.concat(data.list);\n          isLoading = false;\n        }\n      }, function(err) {\n        $errorService.showError(err);\n        isLoading = false;\n      });\n    };\n\n    $scope.export = function(){\n      var query;\n      if (isSearch) {\n        query = getSearchForm($scope.searchForm);\n      }\n      $entityService.export(kind,$scope.rows, query);\n    };\n\n    $scope.import = function(){\n      $entityService.import(kind);\n    };\n\n    $scope.search = function(){\n      query = getSearchForm($scope.searchForm);\n      $entityService.search({\n        kind: kind,\n        query: query,\n        offset: 0\n      }).then(function(data) {\n        $scope.rows = data.list;\n        loadCount = data.list.length;\n        isSearch = true;\n      }, function(err) {\n        $errorService.showError(err);\n      });\n    };\n\n    $scope.toggleSearchform = function(){\n\n      if(!$scope.searchForm){\n        $scope.searchForm = {};\n      }\n\n      if(!$scope.toggled){\n        $scope.toggled = true;\n      } else {\n        $scope.toggled = !$scope.toggled;\n      }\n    };\n\n    $scope.filter = function(){\n      $entityService.filter({\n        kind: kind,\n        query: $scope.filter_q\n      }).then(function(data) {\n        $scope.rows = data.list;\n        isFilter = true;\n      }, function(err) {\n        $errorService.showError(err);\n      });\n    };\n\n    var resize = function() {\n      var body = document.getElementById('entity-table-body');\n      var rect = body.getBoundingClientRect();\n      // get body height\n      var th = Math.floor($window.innerHeight - rect.top);\n      body.style.height = th + 'px';\n    };\n\n    $scope.$on('window.resize', resize);\n\n    $scope.list();\n\n});\n","/* global _ */\nangular\n.module('ngManager')\n.directive('entityTable', function($entityService, $errorService) {\n\n  return {\n    restrict: 'AE',\n    link: function(scope) {\n\n      var kind = scope.kind;\n\n      scope.add = function() {\n        Promise.resolve()\n        .then(function(){\n          if (scope.schema.addInitialize) {\n            return $entityService.get({\n              kind: kind,\n              initialize: true\n            })\n          }\n        })\n        .then(function(data){\n          $entityService.showForm({\n            kind: kind,\n            entity: data\n          });\n        }, function(err) {\n          $errorService.showError(err);\n        });\n      };\n\n      scope.$on('entity.removed', function(e, data) {\n        var rows = scope.rows;\n        rows.splice(rows.indexOf(data.row), 1);\n      });\n\n    },\n    templateUrl: 'entity/table.html'\n  };\n\n})\n.directive('headCell', function() {\n\n  return {\n\n    restrict: 'AE',\n    scope: false,\n    replace: true,\n    link: function(scope) {\n\n      scope.opening = '';\n\n      scope.open = function(){\n        scope.opening = 'is_open';\n      };\n\n      scope.close = function(){\n        scope.opening = '';\n      };\n      \n      scope.blur = function(){\n        scope.opening = '';\n      };\n\n    },\n    templateUrl: 'entity/head-cell.html'\n\n  };\n\n})\n.directive('entityRow', function($entityService, $errorService, $document, $rootScope) {\n\n  return {\n\n    restrict: 'AE',\n    scope: {\n      row: '=',\n      fields: '=',\n      kind: '='\n    },\n    replace: true,\n    link: function(scope) {\n\n      var kind = scope.kind;\n      var row = scope.row;\n\n      scope.key = $entityService.getKey({ kind: kind, entity: row });\n\n      // show modification form\n      scope.edit = function() {\n\n        $entityService\n        .get({ kind: kind, key: scope.key })\n        .then(function(data) {\n          $entityService.showForm({\n            kind: kind,\n            key: scope.key,\n            entity: data\n          }).then(function() {\n            scope.row = data;\n          });\n        }, function(err) {\n          $errorService.showError(err);\n        });\n\n      };\n\n      // remove the entity of the row\n      scope.remove = function() {\n\n        if (scope.removing) {\n\n          var key = $entityService.getKey({ kind: kind, entity: row });\n\n          $entityService\n          .remove({ kind: kind, key: key })\n          .then(function() {\n            $rootScope.$broadcast('entity.removed', {\n              kind: kind,\n              key: key,\n              row: row\n            });\n          }, function(err) {\n            $errorService.showError(err);\n          });\n\n        } else {\n\n          scope.removing = true;\n\n        }\n\n      };\n\n      scope.cancelRemoving = function() {\n        delete scope.removing;\n      };\n\n      scope.$on('$destroy', function() {\n        $document.off('click', scope.cancelRemoving);\n      });\n\n    },\n    templateUrl: 'entity/row.html'\n\n  };\n\n})\n.directive('entityCell', function($entityService, $mdDialog) {\n\n  return {\n\n    restrict: 'AE',\n    scope: {\n      field: '=',\n      key: '=',\n      row: '=',\n      kind: '='\n    },\n    replace: true,\n    link: function(scope, element) {\n\n      var kind = scope.kind;\n      var row = scope.row;\n      var field = scope.field;\n      var key = scope.key;\n\n      scope.edit = function() {\n        scope.editing = true;\n        setTimeout(function() {\n\n          var save = function() {\n            scope.saving = true;\n            scope.error = false;\n            if (typeof orig === 'string') {\n              row[field.id] = input[0].value;\n            } else {  \n              try {\n                row[field.id] = JSON.parse(input[0].value);\n              } catch (err) {\n                console.log(\"ERROR. JSON.parse failed\");\n                scope.error = err;\n                scope.saving = false;\n                return;\n              }\n            }\n            // TODO : validation\n\n            $entityService.saveField({\n              kind: kind,\n              key: key,\n              field: field.id,\n              value: row[field.id]\n            }).then(function() {\n              scope.saving = false;\n            }, function(err) {\n              scope.saving = false;\n              scope.error = err;\n            });\n            scope.$digest();\n          };\n\n          var input = element.find('input');\n          input.focus();\n          var orig = row[field.id];\n          input.bind('keyup', function(evt) {\n            switch (evt.keyCode) {\n              case 27: // ESC\n                row[field.id] = orig;\n                scope.$digest();\n                input.blur();\n                break;\n              case 13: // ENTER\n                save();\n                input.blur();\n                break;\n            }\n          });\n          input.bind('blur', function() {\n            if (orig !== row[field.id]) {\n              // Saving new value?\n              // save();\n            }\n          });\n        }, 0);\n      };\n\n      if(field.preview){\n        scope.openOpt = function(){\n          $mdDialog.show({\n            template: '<md-dialog md-theme=\"previewDialog\" aria-label=\"Preview dialog\"><preview-dialog /></md-dialog>',\n            targetEvent: event,\n            controller: ['$scope', function($scope) {\n              $scope.field = field;\n              $scope.row = row;\n              $scope.kind = kind;\n            }]\n          });\n        };\n      }\n\n      scope.blur = function() {\n        scope.editing = false;\n      };\n\n    },\n    templateUrl: 'entity/cell.html'\n\n  };\n\n})\n.directive('ngScroll', function() {\n\n  return function(scope, elm, attr) {\n    var raw = elm[0];\n    elm.bind('scroll', function() {\n      if (raw.scrollTop + raw.offsetHeight >= raw.scrollHeight*0.8) {\n        scope.$apply(attr.ngScroll);\n      }\n    });\n  };\n})\n.directive('previewDialog', function() {\n\n  return {\n\n    restrict: 'AE',\n    templateUrl: 'entity/preview-dialog.html'\n\n  };\n\n})\n.directive('previewItem', function($compile) {\n\n  return {\n\n    restrict: 'AE',\n    link: function(scope, element) {\n      var field = scope.field;\n      var data = scope.row;\n\n      var template = '';\n      var url = field.preview.url.replace(/\\{.+?\\}/, data[field.id]);\n\n      switch (field.preview.type) {\n        case 'image':\n          template = '<img src=\"'+url+'\" />';\n          break;\n        case 'video':\n          template = '<video controls autoplay><source src=\"'+url+'\"></video>';\n          break;\n      }\n      var content = $compile(angular.element(template))(scope);\n      element.append(content);\n    }\n\n  };\n\n})\n;\n","angular\n.module('ngManager')\n.filter('viewfilter', function ($filter) {\n  return function (input, type, format) {\n\n    if(typeof(input) === 'object'){\n      input = JSON.stringify(input);\n    }\n\n    switch(type){\n      case 'date':\n        format = format || 'medium';\n        return $filter('date')(input,format);\n\n      // add custom type here\n      // case 'foo': return var\n\n      default:\n        return input;\n    }\n  };\n});","/* global _ */\nangular\n.module('ngManager')\n.service('$entityService', function($q, $apiService, $schemaForm, $filter) {\n\n  var getEntityConfig = function(kind) {\n    return _.find($apiService.getConfig().entities, function(entity) {\n      return entity.id === kind;\n    });\n  };\n\n  // normalize data fields\n  var normalizeFields = function(data) {\n\n    var features = data.features || {};\n\n    var fields = (features.list && features.list.fields) || _.keys(data.schema.properties);\n\n    return _.map(fields, function(field) {\n      if (typeof field === 'string') {\n        return { id: field };\n      } else {\n        return field;\n      }\n    });\n\n  };\n\n  return {\n\n    getConfig: getEntityConfig,\n\n    list: function(opts) {\n\n      opts = opts || {};\n\n      var deferred = $q.defer();\n\n      var kind = opts.kind || '';\n      var limit = opts.limit || 30;\n      var offset = opts.offset || 0;\n\n      if (kind === '') {\n        deferred.reject(new Error('Kind is empty'));\n        return deferred.promise;\n      }\n\n      $apiService\n      .get('/entity/'+kind, {\n        limit: limit,\n        offset: offset\n      })\n      .then(function(data) {\n\n        var config = getEntityConfig(kind);\n        if (config === undefined) {\n          deferred.reject({\n            message: 'Entity configuration not found for {{kind}}',\n            params: { kind: kind }\n          });\n        } else {\n          data.fields = normalizeFields(config);\n          deferred.resolve(data);\n        }\n\n      }, function(err) {\n        deferred.reject(err);\n      })\n      ;\n\n      return deferred.promise;\n\n    },\n\n    get: function(opts) {\n\n      opts = opts || {};\n\n      return $q(function(resolve, reject) {\n\n        var kind = opts.kind || '';\n        if (kind === '') {\n          return reject(new Error('kind is empty'));\n        }\n\n        var key = opts.key;\n        if (opts.initialize) {\n          key = \"\";\n        }\n\n        if (key === undefined) {\n          return reject(new Error('key is null'));\n        }\n\n        $apiService\n        .get('/entity/'+kind+'/'+key)\n        .then(function(data) {\n          var config = getEntityConfig(kind);\n          if (config === undefined) {\n            reject({\n              message: 'Entity configuration not found for {{kind}}',\n              params: { kind: kind }\n            });\n          } else {\n            resolve(data);\n          }\n        }, reject);\n      });\n    },\n\n    showForm: function(opts) {\n      var kind = opts.kind;\n      var key = opts.key;\n      var entity = opts.entity || {};\n      var spec = getEntityConfig(kind);\n      var _this = this;\n\n      for(var k in spec.schema.properties){\n        if (spec.schema.properties[k].onlyCreate || spec.schema.properties[k].onlyUpdate) {\n          spec.schema.properties[k][\"display\"] = \"none\";\n          if ( (!key && spec.schema.properties[k].onlyCreate) || (key && spec.schema.properties[k].onlyUpdate) ) {\n            spec.schema.properties[k][\"display\"] = \"\";\n          }\n        }\n      }\n\n      var submit = function() {\n        if(!key){\n          key = _this.getKey({\n            kind: kind,\n            entity: entity\n          });\n        }\n        var result = $apiService.put('/entity/'+kind+'/'+key, entity);\n        if(!key){\n          result.then(function() {\n            _this.list(opts);\n          });\n        }\n        return result;\n      };\n\n      return $schemaForm.showSide({\n        schema: spec.schema,\n        entity: entity,\n        submit: submit\n      });\n    },\n\n    getKey: function(opts) {\n      var kind = opts.kind;\n      var entity = opts.entity;\n      var spec = getEntityConfig(kind);\n      var keys = spec.schema.primaryKey;\n      var key = keys.map(function(key) {\n        return encodeURIComponent(entity[key] == null ? \"\" : entity[key]);\n      }).join(',');\n      return key;\n    },\n\n    saveField: function(opts) {\n\n      var kind = opts.kind;\n      var key = opts.key;\n      var field = opts.field;\n      var value = opts.value;\n\n      return $apiService\n      .put('/entity/'+kind+'/'+key+'/'+field, { value: value })\n      ;\n\n    },\n\n    remove: function(opts) {\n\n      var kind = opts.kind;\n      var key = opts.key;\n\n      return $apiService.del('/entity/'+kind+'/'+key);\n    },\n\n    search: function(opts) {\n\n      return $q(function(resolve, reject) {\n\n        var kind = opts.kind;\n        if (kind === '') {\n          return reject(new Error('kind is empty'));\n        }\n\n        var query = opts.query || '';\n        if (query === '') {\n          return reject(new Error('query is null'));\n        }\n\n        var offset = opts.offset || 0;\n        var limit = opts.limit || 30;\n\n        $apiService\n        .get('/search/entity/'+kind, {\n          query: query,\n          limit: limit,\n          offset: offset\n        })\n        .then(function(data) {\n          var config = getEntityConfig(kind);\n          if (config === undefined) {\n            reject({\n              message: 'Entity configuration not found for {{kind}}',\n              params: { kind: kind }\n            });\n          } else {\n            resolve(data);\n          }\n        }, reject);\n      });\n    },\n\n\n    filter: function(opts) {\n      return $q(function(resolve, reject) {\n\n        var kind = opts.kind;\n        if (kind === '') {\n          return reject(new Error('kind is empty'));\n        }\n\n        var query = opts.query || '';\n        if (query === '') {\n          return reject(new Error('query is null'));\n        }\n\n        $apiService\n        .get('/filter/entity/'+kind, {\n          query: query,\n          limit: -1,\n          offset: 0\n        })\n        .then(function(data) {\n          var config = getEntityConfig(kind);\n          if (config === undefined) {\n            reject({\n              message: 'Entity configuration not found for {{kind}}',\n              params: { kind: kind }\n            });\n          } else {\n            resolve(data);\n          }\n        }, reject);\n      });\n    },\n\n    import: function(kind){\n      var _this = this;\n      var file = document.getElementById(\"importfile\").files[0];\n      var reader = new FileReader();\n      var entities = null;\n      reader.readAsText(file, \"utf-8\");\n\n      reader.onload = function(e){\n\n        try{\n          entities = JSON.parse(e.target.result);\n        } catch(error) {\n          console.err(error);\n        }\n\n        // TODO: validation\n\n        if(entities !== null){\n          for(var i = 0; i < entities.length; i++){\n            var key = _this.getKey({\n              kind: kind,\n              entity: entities[i]\n            });\n            $apiService.put('/entity/'+kind+'/'+key, entities[i]);\n          }\n        }\n\n      };\n\n    },\n\n    export: function(kind, r, query){\n      var _this = this;\n      Promise.resolve()\n      .then(function(){\n        if (query) {\n          return _this.search({\n            kind: kind,\n            query: query,\n            limit: -1\n          })\n        }\n        return _this.list({\n          kind: kind,\n          limit: -1\n        })\n      })\n      .then(function(data){\n        var rows = data.list;\n        var filename = kind+ \"_\" + $filter('date')(new Date(), 'yyyyMMddHHmm') + \".json\";\n        var content = JSON.stringify(rows);\n        window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;\n        window.requestFileSystem(TEMPORARY, 1024*1024, function(fileSystem){\n          // create\n          fileSystem.root.getFile(filename, {create: true, exclusive: false}, function(fileEntry){\n            // write\n            fileEntry.createWriter(function(fileWriter){\n              var blob = new Blob([ content ], { \"type\" : \"text/plain\" });\n              fileWriter.write(blob);\n              // success\n              fileWriter.onwriteend = function(e){\n                console.info(\"writing success\");\n                var link = document.createElement('a');\n                link.href = fileEntry.toURL();\n                link.download = filename;\n                document.body.appendChild(link); // for Firefox\n                link.click();\n                document.body.removeChild(link); // for Firefox\n              };\n              // failed\n              fileWriter.onerror = function(e){\n                console.log(\"writing failed\");\n              };\n            });\n          }, function(error){\n              console.log(\"error : \" + error.code);\n          });\n        });\n      }, function(err) {\n        console.log(\"error : \" + err);\n      });\n    }\n  };\n\n})\n;\n\n","angular\n.module('ngManager')\n.factory('$errorService', function($mdToast) {\n\n  var showError = function(err) {\n    var msg = '';\n    if (typeof err === 'string') {\n      msg = err;\n    } else if (err.message) {\n      msg = err.message;\n    } else if (err) {\n      msg = err.toString();\n    } else {\n      msg = 'Unknown Error';\n    }\n\n    $mdToast.show({\n      controller: ['$scope', function($scope) {\n        $scope.message = msg;\n        $scope.params = err.params || {};\n        $scope.closeToast = function() {\n          $mdToast.hide();\n        };\n      }],\n      templateUrl: 'toasts/error.html',\n      hideDelay: 30000,\n      position: 'top right'\n    });\n  };\n\n  return {\n\n    showError: showError,\n\n  };\n\n})\n;\n","angular\n.module('ngManager')\n.config(function($translateLoaderProvider) {\n\n  $translateLoaderProvider.translations('en', {\n    name: 'Name',\n    url: 'URL'\n  });\n\n})\n;\n","angular\n.module('ngManager')\n.config(function($translateLoaderProvider) {\n\n  $translateLoaderProvider.translations('ja', {\n    // Words\n    Add: '追加',\n    Cancel: 'キャンセル',\n    Close: '閉じる',\n    Create: '作成',\n    Endpoints: 'エンドポイント',\n    Entities: 'データ',\n    Name: '名前',\n    Update: '更新',\n    Modify: '編集',\n    Remove: '削除',\n    Search: '検索',\n    Settings: '設定',\n    Submit: '送信',\n    Top: 'トップ',\n    // Labels\n    name: '名前',\n    url: 'URL',\n    // Sentences\n    'Add the endpoint': 'エンドポイント追加',\n\n    'Entity configuration not found for {{kind}}': '{{kind}}のデータ設定が見つかりません'\n  });\n\n})\n;\n\n","angular\n.module('ngManager')\n.provider('$translateLoader', function() {\n\n  var tables = {};\n\n  var mergeTables = function(table, lang) {\n    var map = tables[lang];\n    if (!map) {\n      map = tables[lang] = {};\n    }\n    tables[lang] = _.merge(table, map);\n  };\n\n  this.translations = function(lang, table) {\n    mergeTables(table, lang);\n  };\n\n  this.$get = function($q) {\n\n    var service = function(options) {\n      var key = options.key;\n      var deferred = $q.defer();\n      deferred.resolve(tables[key] || {});\n      return deferred.promise;\n    };\n\n    service.addTables = function(newTables) {\n      _.each(newTables, mergeTables);\n    };\n\n    return service;\n  };\n})\n.config(function($translateProvider) {\n  $translateProvider.useLoader('$translateLoader');\n  $translateProvider.determinePreferredLanguage();\n});\n\n\n","\nangular\n.module('ngManager')\n.controller('IndexCtrl', function(\n  $scope,\n  $rootScope,\n  $mdSidenav,\n  $timeout,\n  $interval,\n  $location,\n  $window,\n  $translate,\n  $translateLoader,\n  $endpointService,\n  $authService) {\n\n    $scope.toggleMenu = function() {\n      $timeout(function() {\n        $mdSidenav('left-menu').toggle();\n      });\n    };\n\n    $scope.site = { title: 'NG-Manager' };\n\n    $scope.head = { title: '' };\n\n    $rootScope.$on('content.title', function(evt, title) {\n      $scope.head.title = title;\n    });\n\n    $rootScope.$on('$locationChangeSuccess', function() {\n      $scope.hash = location.hash;\n      $mdSidenav('left-menu').close();\n    });\n\n    $rootScope.$on('progress.start', function() {\n      $scope.progress = { mode: 'query', value: 0 };\n    });\n\n    $rootScope.$on('progress.end', function() {\n      var progress = $scope.progress;\n      if (progress.mode === 'query') {\n        $timeout(function() {\n          $scope.progress = false;\n        }, 500);\n      } else if (progress.mode === 'determinate') {\n        var p = $interval(function() {\n          progress.value += 20;\n          if (progress.value >= 100) {\n            $interval.cancel(p);\n            $timeout(function() {\n              delete $scope.progress;\n            }, 400);\n          }\n        }, 50);\n      }\n    });\n\n    $scope.openRight = true;\n\n    $rootScope.$on('config', function(evt, config) {\n      console.info('Loaded configuration', config);\n      $scope.config = config;\n      $scope.site = config.site;\n\n      if (config.i18n) {\n        $translateLoader.addTables(config.i18n);\n        $translate.refresh();\n      }\n    });\n\n    $window.addEventListener('resize', function() {\n      $rootScope.$broadcast('window.resize');\n    });\n\n    $scope.logout = function(){\n\n      $authService.logout();\n      $location.url('/login');\n\n    };\n});\n","angular\n.module('ngManager')\n.controller('LoginCtrl', function($scope, $rootScope, $endpointService) {\n\n  $rootScope.$emit('content.title', {\n    section: 'Login'\n  });\n\n  $scope.getUrl = function(path) {\n    var ep = $endpointService.getSelected();\n    var url = ep.url.replace(/(.*)\\/+$/,'$1');\n    path = path.replace(/^\\/+(.*)$/, '$1');\n    return url + '/' + path;\n  };\n\n})\n;\n","angular\n.module('ngManager')\n.factory('$schemaForm', function(\n  $errorService,\n  $mdDialog,\n  $rootScope,\n  $sideContent,\n  $schemaNormalizer,\n  $schemaValidator,\n  $q) {\n\n  var validator = function(scope) {\n    return function(path) {\n      var errors = $schemaValidator.validate(scope.entity, scope.schema);\n      if (errors) {\n        errors.forEach(function(err) {\n          scope.errors[err.path] = err.message;\n        });\n        scope.hasError = true;\n      } else {\n        if (path) {\n          delete scope.errors[path];\n        } else {\n          scope.errors = {};\n        }\n        scope.hasError = false;\n      }\n    };\n  };\n\n  var submitter = function(scope, interim, submit, deferred) {\n    return function() {\n      scope.validate();\n      if (scope.hasError) {\n        return;\n      }\n      if (!submit) {\n        interim.hide();\n        deferred.reject();\n      }\n      submit(scope).then(function() {\n        interim.hide();\n        deferred.resolve(scope.entity);\n      }, function(err) {\n        deferred.reject(err);\n        $errorService.showError(err);\n      });\n    };\n  };\n\n  var canceller = function(scope, interim, deferred) {\n    return function() {\n      interim.hide();\n      deferred.reject();\n    };\n  };\n\n  return {\n    showDialog: function(opts) {\n\n      opts = opts || {};\n\n      var schema = opts.schema;\n      var entity = opts.entity || {};\n      var event = opts.event;\n      var deferred = $q.defer();\n      var submit = opts.submit;\n      var theme = opts.theme || 'dialog';\n      // normalize schea\n      schema = $schemaNormalizer(schema);\n\n      $mdDialog.show({\n        template: '<md-dialog md-theme=\"'+theme+'\"><schema-form /></md-dialog>',\n        targetEvent: event,\n        controller: ['$scope', function($scope) {\n          $scope.schema = schema;\n          $scope.entity = entity;\n          $scope.title = opts.title || '';\n          $scope.errors = {};\n          $scope.validate = validator($scope);\n          $scope.submit = submitter($scope, $mdDialog, submit, deferred);\n          $scope.cancel = canceller($scope, $mdDialog, deferred);\n        }]\n      });\n\n      return deferred.promise;\n    },\n\n    showSide: function(opts) {\n\n      var schema = opts.schema;\n      var entity = opts.entity || {};\n      var deferred = $q.defer();\n      var submit = opts.submit;\n\n      // normalize schea\n      schema = $schemaNormalizer(schema);\n\n      var scope = $rootScope.$new();\n      scope.schema = schema;\n      scope.entity = entity;\n      scope.errors = {};\n      scope.validate = validator(scope);\n\n      var interim = $sideContent(scope);\n\n      scope.submit = submitter(scope, interim, submit, deferred);\n      scope.cancel = canceller(scope, interim, deferred);\n\n      interim.show();\n\n      return deferred.promise;\n    }\n\n  };\n\n})\n.directive('schemaForm', function() {\n\n  return {\n    restrict: 'AE',\n    templateUrl: 'schema-form/form.html'\n  };\n\n})\n.directive('schemaItem', function($compile, $templateCache) {\n\n  var linker = function(scope, element) {\n\n    var schema = scope.schema;\n    var template = \"\";\n    switch(schema.type) {\n      case 'string':\n        if (schema.enum) {\n          template = $templateCache.get('schema-form/input_radio.html');\n        } else if (schema.multiline) {\n          template = $templateCache.get('schema-form/input_textarea.html');\n        } else if (schema.format == 'anchor') {\n          template = $templateCache.get('schema-form/anchor.html');\n        } else {\n          template = $templateCache.get('schema-form/input.html');\n        }\n        break;\n      case 'boolean':\n        template = $templateCache.get('schema-form/input_boolean.html');\n        break;\n      case 'number':\n        template = $templateCache.get('schema-form/input_number.html');\n        break;\n      case 'object':\n        scope.entity[scope.schema.path] = scope.entity[scope.schema.path] || {};\n        if (schema.format == 'file') {\n          template = $templateCache.get('schema-form/input_file.html');\n        } else {\n          template = $templateCache.get('schema-form/input_object.html');\n        }\n        break;\n      case 'array':\n        if (schema.items && schema.items.enum) {\n          if (scope.entity) {\n            scope.entity[scope.schema.path] = scope.entity[scope.schema.path] || [];\n          }\n          template = $templateCache.get('schema-form/input_checkboxes.html');\n        } else if (schema.format == 'tag') {\n          if (scope.entity) {\n            scope.entity[scope.schema.path] = scope.entity[scope.schema.path] || [];\n          }\n          template = $templateCache.get('schema-form/input_tag.html');\n        } else {\n          scope.entity[scope.schema.path] = scope.entity[scope.schema.path] || [];\n          template = $templateCache.get('schema-form/input_array.html');\n        }\n        break;\n    }\n    \n    var content = $compile(angular.element(template))(scope);\n    \n    if (schema.style) {\n      content.addClass(schema.style);\n    }\n\n    element.append(content);\n  };\n\n  return {\n    scope: {\n      schema: '=',\n      entity: '=',\n      errors: '='\n    },\n    restrict: 'AE',\n    replace: true,\n    link: linker\n  };\n\n})\n;\n","/* global _ */\nangular\n.module('ngManager')\n.factory('$schemaNormalizer', function() {\n\n  var normalize = function(schema, path, key) {\n\n    // prevent normalizing twice\n    if (schema.$$normalized) {\n      return schema;\n    }\n\n    if (typeof schema === 'string') {\n      schema = { type: schema };\n    }\n\n    if (path) {\n      schema.path = path + '.' + key;\n    } else {\n      schema.path = key;\n    }\n\n    schema.key = key;\n\n    if (schema.type === 'object') {\n      // Normalize children\n      _.each(schema.properties, function(prop, key) {\n        schema.properties[key] = normalize(prop, path, key);\n      });\n      schema.keyOrder = _.keys(schema.properties);\n    }\n\n    if (schema.type === 'array') {\n      // Normalize children\n      _.each(schema.items, function(prop, key) {\n        schema.items[key] = normalize(prop, path, key);\n      });\n      schema.keyOrder = _.keys(schema.items);\n    }\n\n    // Mark as normalized\n    schema.$$normalized = true;\n\n    return schema;\n  };\n\n  return normalize;\n\n});\n","/* global tv4,_ */\nangular\n.module('ngManager')\n.factory('$schemaValidator', function() {\n      \n  /**\n  * formats\n  */\n  var formats = {\n    /**\n     * This SHOULD be a date in ISO 8601 format of YYYY-MM-DDThh:mm:ssZ in UTC time.\n     * This is the recommended form of date/timestamp.\n     *\n     * Also supports YYYY-MM-DDThh:mm:ss.SSSTZD (e.g. 2012-12-10T19:20:30.456+09:00)\n     */\n    'date-time': /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d{1,3})?(?:Z|[+\\-]\\d{2}:\\d{2})$/,\n\n    /**\n     * This SHOULD be a date in the format of YYYY-MM-DD.\n     * It is recommended that you use the \"date-time\" format\n     * instead of \"date\" unless you need to transfer only the date part.\n     */\n    'date': /^\\d{4}-\\d{2}-\\d{2}$/,\n\n    /**\n     * This SHOULD be a time in the format of hh:mm:ss.\n     * It is recommended that you use the \"date-time\" format\n     * instead of \"time\" unless you need to transfer only the time part.\n     *\n     * Also supports hh:mm:ss.SSS (e.g. 19:20:30.456)\n     */\n    'time': /^\\d{2}:\\d{2}:\\d{2}(?:\\.\\d{1,3})?$/,\n\n    /**\n     * This SHOULD be the difference, measured in milliseconds,\n     * between the specified time and midnight, 00:00 of January 1, 1970 UTC.\n     * The value SHOULD be a number (integer or float).\n     */\n    'utc-millisec': function(input) { return !isNaN(parseInt(input,10));},\n\n    /**\n     * A regular expression, following the regular expression specification\n     * from ECMA 262/Perl 5.\n     */\n    'regex': function(input) {\n      try {\n        new RegExp(input);\n      } catch(e) {\n        return false;\n      }\n      return true;\n    },\n\n    /**\n     * This is a CSS color (like \"#FF0000\" or \"red\"),\n     * based on CSS 2.1 [W3C.CR-CSS21-20070719].\n     * rgb() format is also allowed.\n     * Not only 17 'basic color names specified in CSS 2.1, 143 'X11 color names' are also allowed.\n     */\n    'color': /^(?:(?:#?[0-9a-fA-F]{3,6})|(?:rgb\\(\\s*\\b(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*\\))|(?:rgb\\(\\s*(?:\\d?\\d%|100%)\\s*,\\s*(?:\\d?\\d%|100%)\\s*,\\s*(?:\\d?\\d%|100%)\\s*\\))|(?:maroon|red|orange|yellow|olive|green|purple|fuchsia|lime|teal|aqua|blue|navy|black|gray|silver|white|indianred|lightcoral|salmon|darksalmon|lightsalmon|crimson|firebrick|darkred|pink|lightpink|hotpink|deeppink|mediumvioletred|palevioletred|lightsalmon|coral|tomato|orangered|darkorange|gold|lightyellow|lemonchiffon|lightgoldenrodyellow|papayawhip|moccasin|peachpuff|palegoldenrod|khaki|darkkhaki|lavender|thistle|plum|violet|orchid|magenta|mediumorchid|mediumpurple|amethyst|blueviolet|darkviolet|darkorchid|darkmagenta|indigo|slateblue|darkslateblue|mediumslateblue|greenyellow|chartreuse|lawngreen|limegreen|palegreen|lightgreen|mediumspringgreen|springgreen|mediumseagreen|seagreen|forestgreen|darkgreen|yellowgreen|olivedrab|darkolivegreen|mediumaquamarine|darkseagreen|lightseagreen|darkcyan|cyan|lightcyan|paleturquoise|aquamarine|turquoise|mediumturquoise|darkturquoise|cadetblue|steelblue|lightsteelblue|powderblue|lightblue|skyblue|lightskyblue|deepskyblue|dodgerblue|cornflowerblue|mediumslateblue|royalblue|mediumblue|darkblue|midnightblue|cornsilk|blanchedalmond|bisque|navajowhite|wheat|burlywood|tan|rosybrown|sandybrown|goldenrod|darkgoldenrod|peru|chocolate|saddlebrown|sienna|brown|snow|honeydew|mintcream|azure|aliceblue|ghostwhite|whitesmoke|seashell|beige|oldlace|floralwhite|ivory|antiquewhite|linen|lavenderblush|mistyrose|gainsboro|lightgrey|darkgray|dimgray|lightslategray|slategray|darkslategray))$/i,\n\n    /**\n     * This is a CSS style definition (like \"color: red; background-color:#FFF\"),\n     * based on CSS 2.1 [W3C.CR-CSS21-20070719].\n     */\n    'style': /^\\s*[^:]+\\s*:\\s*[^:;]+\\s*;{0,1}\\s*$/,\n\n    /**\n     * This value SHOULD be a URI.\n     *\n     * http://snipplr.com/view/6889/regular-expressions-for-uri-validationparsing/\n     */\n    'uri': /^(?:(?:[a-z0-9+.\\-]+:\\/\\/)(?:(?:(?:[a-z0-9-._~!$&'()*+,;=:]|%[0-9A-F]{2})*)@)?(?:(?:[a-z0-9-._~!$&'()*+,;=]|%[0-9A-F]{2})*)(?::(?:\\d*))?(?:\\/(?:[a-z0-9-._~!$&'()*+,;=:@\\/]|%[0-9A-F]{2})*)?|(?:[a-z0-9+.\\-]+:)(?:\\/?(?:[a-z0-9-._~!$&'()*+,;=:@]|%[0-9A-F]{2})+(?:[a-z0-9-._~!$&'()*+,;=:@\\/]|%[0-9A-F]{2})*)?)(?:\\?(?:[a-z0-9-._~!$&'()*+,;=:\\/?@]|%[0-9A-F]{2})*)?(?:#(?:[a-z0-9-._~!$&'()*+,;=:\\/?@]|%[0-9A-F]{2})*)?$/i,\n\n    /*\n     * This SHOULD be an email address.\n     *\n     * http://fightingforalostcause.net/misc/2006/compare-email-regex.php\n     */\n    'email': /^(?!(?:(?:\\x22?\\x5C[\\x00-\\x7E]\\x22?)|(?:\\x22?[^\\x5C\\x22]\\x22?)){255,})(?!(?:(?:\\x22?\\x5C[\\x00-\\x7E]\\x22?)|(?:\\x22?[^\\x5C\\x22]\\x22?)){65,}@)(?:(?:[\\x21\\x23-\\x27\\x2A\\x2B\\x2D\\x2F-\\x39\\x3D\\x3F\\x5E-\\x7E]+)|(?:\\x22(?:[\\x01-\\x08\\x0B\\x0C\\x0E-\\x1F\\x21\\x23-\\x5B\\x5D-\\x7F]|(?:\\x5C[\\x00-\\x7F]))*\\x22))(?:\\.(?:(?:[\\x21\\x23-\\x27\\x2A\\x2B\\x2D\\x2F-\\x39\\x3D\\x3F\\x5E-\\x7E]+)|(?:\\x22(?:[\\x01-\\x08\\x0B\\x0C\\x0E-\\x1F\\x21\\x23-\\x5B\\x5D-\\x7F]|(?:\\x5C[\\x00-\\x7F]))*\\x22)))*@(?:(?:(?!.*[^.]{64,})(?:(?:(?:xn--)?[a-z0-9]+(?:-[a-z0-9]+)*\\.){1,126}){1,}(?:(?:[a-z][a-z0-9]*)|(?:(?:xn--)[a-z0-9]+))(?:-[a-z0-9]+)*)|(?:\\[(?:(?:IPv6:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){7})|(?:(?!(?:.*[a-f0-9][:\\]]){7,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?)))|(?:(?:IPv6:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){5}:)|(?:(?!(?:.*[a-f0-9]:){5,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3}:)?)))?(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))(?:\\.(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))){3}))\\]))$/i,\n\n    /**\n     * This SHOULD be an ip version 4 address.\n     */\n    'ipv4': /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,\n\n    /**\n     * This SHOULD be an ip version 6 address.\n     *\n     * http://home.deds.nl/~aeron/regex/\n     */\n    'ipv6': /^((?=.*::)(?!.*::.+::)(::)?([\\dA-F]{1,4}:(:|\\b)|){5}|([\\dA-F]{1,4}:){6})((([\\dA-F]{1,4}((?!\\3)::|:\\b|$))|(?!\\2\\3)){2}|(((2[0-4]|1\\d|[1-9])?\\d|25[0-5])\\.?\\b){4})$/i,\n\n    /**\n     * This SHOULD be a host-name.\n     */\n    'host-name'\n      : /^(?:(?:[a-zA-Z]|[a-zA-Z][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\\-]*[A-Za-z0-9])$/\n  };\n \n\n  _.each(formats, function(format, key) {\n\n    if (typeof format === 'function') {\n      tv4.addFormat(key, function(data) {\n        // do not check empty value\n        if (data === null || data === undefined || data.length === 0) {\n          return null;\n        }\n        if (format(data)) {\n          return null;\n        } else {\n          return 'must be valid format: ' + key;\n        }\n      });\n    } else {\n      tv4.addFormat(key, function(data) {\n        // do not check empty value\n        if (data === null || data === undefined || data.length === 0) {\n          return null;\n        }\n        if (format.test(data)) {\n          return null;\n        } else {\n          return 'must be valid ' + key;\n        }\n      });\n    }\n  });\n\n  var normalize = function(data) {\n\n    if (typeof data === 'object') {\n      // remove empty data\n      _.each(data, function(val, key) {\n        if (val === '' || val === undefined || val === null) {\n          delete data[key];\n        } else if (typeof val === 'object') {\n          normalize(data[key]);\n        }\n      });\n    }\n  };\n\n  return {\n\n    validate: function(data, schema, path) {\n\n      normalize(data);\n\n      var result = tv4.validateMultiple(data, schema);\n      if (result.valid) {\n        return null;\n      } else {\n        _.each(result.errors, function(err) {\n          var keyPath = '/';\n          if (err.dataPath) {\n            keyPath = err.dataPath;\n          }\n          if (err.params.key) {\n            keyPath = err.dataPath + '/' + err.params.key;\n          }\n          keyPath = keyPath.split('/');\n          keyPath.shift();\n          err.path = keyPath.join('.');\n        });\n        if (path) {\n          for (var i = 0; i < result.errors.length; i++) {\n            var err = result.errors[i];\n            if (err.path === path) {\n              return [err];\n            }\n          }\n          return null;\n        } else {\n          return result.errors;\n        }\n      }\n    }\n\n  };\n\n});\n\n","angular\n.module('ngManager')\n.service('$sideContent', function($rootElement,\n                                  $mdSidenav,\n                                  $mdTheming,\n                                  $animate,\n                                  $timeout,\n                                  $window,\n                                  $compile) {\n\n  var lastScope = null;\n  var lastElement = null;\n\n  return function(scope) {\n\n    if (lastScope) {\n      lastScope.$destroy();\n      lastElement.remove();\n      lastScope = null;\n    }\n\n    var element = $compile('<md-sidenav class=\"md-sidenav-right md-whiteframe-z2 side-form\" md-theme=\"side\" md-component-id=\"right-form\"><md-content layout=\"column\"><schema-form /></md-content></md-sidenav>')(scope);\n\n    var show = function() {\n      $rootElement.find('body').append(element);\n      $mdSidenav('right-form').toggle();\n      lastScope = scope;\n      lastElement = element;\n    };\n\n    var hide = function() {\n      $mdSidenav('right-form').close();\n    };\n\n    return {\n      show: show,\n      hide: hide\n    };\n  };\n});\n","angular\n.module('ngManager')\n.controller('TagCtrl', function($scope, $http, $apiService, sharedScopes) {\n  sharedScopes.setScope('TagCtrl', $scope);\n  $scope.loadTags = function($query) {\n    return $apiService.get($scope.schema.tagUri, {query: $query}).then(function(res) {\n      return res.filter(function(value) {\n        return value.text.toLowerCase().indexOf($query.toLowerCase()) != -1;\n      });\n    });\n  };\n})\n;\n\n","angular\n.module('ngManager')\n.controller('TopCtrl', function($rootScope) {\n\n  $rootScope.$emit('content.title', {\n    section: 'Top'\n  });\n\n})\n;\n","/*! angular-base64-upload - v0.0.5 - 2015-03-08\n* https://github.com/adonespitogo/angular-base64-upload\n* Copyright (c) Adones Pitogo <pitogo.adones@gmail.com> 2015; Licensed  */\nangular.module('naif.base64', [])\n.directive('baseSixtyFourInput', ['$window', function ($window) {\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    link: function (scope, elem, attrs, ngModel) {\n\n      var arrayBufferToBase64 = function(buffer) {\n        var binary = '';\n        var bytes = new Uint8Array( buffer );\n        var len = bytes.byteLength;\n        for (var i = 0; i < len; i++) {\n            binary += String.fromCharCode( bytes[ i ] );\n        }\n        return $window.btoa( binary );\n      };\n\n      var fileObject = {};\n\n      scope.readerOnload = function(e){\n        fileObject.base64 = arrayBufferToBase64(e.target.result);\n        scope.$apply(function(){\n          ngModel.$setViewValue(angular.copy(fileObject));\n        });\n      };\n\n      var reader = new FileReader();\n      reader.onload = scope.readerOnload;\n\n      elem.on('change', function() {\n        var file = elem[0].files[0];\n\n        if (file) {\n          fileObject.filetype = file.type;\n          fileObject.filename = file.name;\n          fileObject.filesize = file.size;\n          reader.readAsArrayBuffer(file);\n        } else {\n          fileObject.filetype = \"\";\n          fileObject.filename = \"\";\n          fileObject.filesize = \"\";\n          fileObject.base64 = \"\";\n          ngModel.$setViewValue(angular.copy(fileObject));\n        }\n      });\n\n    }\n  };\n}]);\n","(function() {\n  'use strict';\n\n  var app;\n\n  app = angular.module('datePicker', ['ngMaterial', 'ui.utils']);\n\n  app.directive('mdDatePicker', [    \n    '$datepicker', function($datepicker) {      \n      return {\n        template: '<div class=\"md-toolbar-tools dark\">' + ' <md-input-container ng-disabled=\"isDisabled\">' + '     <label>{{label}}</label>' + '    <input data-date-format=\"yyyy-MM-dd\" id=\"date-picker\" model-view-value=\"true\"' + '             ng-model=\"value\" bs-datepicker></md-input>' + '</md-input-container>' + '</div>',\n        restrict: 'E',\n        scope: {\n          lineColor: \"@\",\n          textColor: \"@\",\n          mask: \"@\"\n        },\n        link: function(scope, element, attrs) {\n          var picker;\n          picker = $(\"#date-picker\");\n          if (scope.textColor) {\n            picker.css(\"color\", scope.textColor, \"important\");\n          }\n          if (scope.lineColor) {\n            picker.css(\"border-color\", scope.lineColor, \"important\");\n          }\n        }\n      };\n    }\n  ]);\n\n}).call(this);\n","angular\n.module('ngManager')\n.factory('sharedScopes', function ($rootScope) {\n    var sharedScopes = {};\n    return {\n        setScope: function (key, value) {\n            sharedScopes[key] = value;\n        },\n        getScope: function (key) {\n            return sharedScopes[key];\n        }\n    };\n});\n"],"sourceRoot":"/source/"}